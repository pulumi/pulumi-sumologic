{
    "name": "sumologic",
    "description": "A Pulumi package for creating and managing sumologic cloud resources.",
    "keywords": [
        "pulumi",
        "sumologic"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sumologic` Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic).",
    "repository": "https://github.com/pulumi/pulumi-sumologic",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "sumologic": "SumoLogic"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing sumologic cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sumologic` repo](https://github.com/pulumi/pulumi-sumologic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sumologic` repo](https://github.com/SumoLogic/terraform-provider-sumologic/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SumoLogic/terraform-provider-sumologic)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sumologic` repo](https://github.com/pulumi/pulumi-sumologic/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sumologic` repo](https://github.com/SumoLogic/terraform-provider-sumologic/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "accessId": {
                "type": "string"
            },
            "accessKey": {
                "type": "string"
            },
            "adminMode": {
                "type": "boolean"
            },
            "baseUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_BASE_URL"
                    ]
                }
            },
            "environment": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_ENVIRONMENT"
                    ]
                }
            }
        },
        "defaults": [
            "accessId",
            "accessKey"
        ]
    },
    "types": {
        "sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN. More details [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Grant-Access-to-an-AWS-Product#iam-role).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePathCustomService:AwsInventorySourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces. By default all namespaces are selected. You can also choose a subset from\n+ AWS/EC2\n+ AWS/AutoScaling\n+ AWS/EBS\n+ AWS/ELB\n+ AWS/ApplicationELB\n+ AWS/NetworkELB\n+ AWS/Lambda\n+ AWS/RDS\n+ AWS/Dynamodb\n+ AWS/ECS\n+ AWS/Elasticache\n+ AWS/Redshift\n+ AWS/Kinesis\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Amazon regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePathSnsTopicOrSubscriptionArn:AwsInventorySourcePathSnsTopicOrSubscriptionArn"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePathTagFilter:AwsInventorySourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/AwsInventorySourcePathCustomService:AwsInventorySourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/AwsInventorySourcePathSnsTopicOrSubscriptionArn:AwsInventorySourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/AwsInventorySourcePathTagFilter:AwsInventorySourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsXRayPath` for AWS XRay source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/AwsXraySourcePath:AwsXraySourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePathCustomService:AwsXraySourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Amazon regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePathSnsTopicOrSubscriptionArn:AwsXraySourcePathSnsTopicOrSubscriptionArn"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePathTagFilter:AwsXraySourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsXRayPath` for AWS XRay source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/AwsXraySourcePathCustomService:AwsXraySourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/AwsXraySourcePathSnsTopicOrSubscriptionArn:AwsXraySourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/AwsXraySourcePathTagFilter:AwsXraySourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `AwsXRayPath` for AWS XRay source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket. This is needed if using type `S3BucketPathExpression`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePathCustomService:CloudfrontSourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data. This is needed if using type `S3BucketPathExpression`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePathSnsTopicOrSubscriptionArn:CloudfrontSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "description": "This is a computed field for SNS topic/subscription ARN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePathTagFilter:CloudfrontSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/CloudfrontSourcePathCustomService:CloudfrontSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudfrontSourcePathSnsTopicOrSubscriptionArn:CloudfrontSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/CloudfrontSourcePathTagFilter:CloudfrontSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePathCustomService:CloudtrailSourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePathSnsTopicOrSubscriptionArn:CloudtrailSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "description": "This is a computed field for SNS topic/subscription ARN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePathTagFilter:CloudtrailSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/CloudtrailSourcePathCustomService:CloudtrailSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudtrailSourcePathSnsTopicOrSubscriptionArn:CloudtrailSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/CloudtrailSourcePathTagFilter:CloudtrailSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePathCustomService:CloudwatchSourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Amazon regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePathSnsTopicOrSubscriptionArn:CloudwatchSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePathTagFilter:CloudwatchSourcePathTagFilter"
                    },
                    "description": "Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/CloudwatchSourcePathCustomService:CloudwatchSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/CloudwatchSourcePathSnsTopicOrSubscriptionArn:CloudwatchSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/CloudwatchSourcePathTagFilter:CloudwatchSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/ContentPermissionPermission:ContentPermissionPermission": {
            "properties": {
                "permissionName": {
                    "type": "string",
                    "description": "Content permission name. Valid values are `View`, `GrantView`,\n`Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels\n[here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceId": {
                    "type": "string",
                    "description": "An identifier that belongs to the source type chosen above. For example,\nif the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share\ncontent with (same goes for role and org source type).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceType": {
                    "type": "string",
                    "description": "Type of source for the permission. Valid values are `user`, `role`,\nand `org`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permissionName",
                "sourceId",
                "sourceType"
            ]
        },
        "sumologic:index/CseAggregationRuleAggregationFunction:CseAggregationRuleAggregationFunction": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more expressions to pass as arguments to the function\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "function": {
                    "type": "string",
                    "description": "The function to aggregate with\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "arguments",
                "function",
                "name"
            ]
        },
        "sumologic:index/CseAggregationRuleEntitySelector:CseAggregationRuleEntitySelector": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "The expression or field name to generate the Signal on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType",
                "expression"
            ]
        },
        "sumologic:index/CseAggregationRuleSeverityMapping:CseAggregationRuleSeverityMapping": {
            "properties": {
                "default": {
                    "type": "integer",
                    "description": "The severity to use in the \"constant\" case or to fall back to if the field used by \"fieldValue\"/\"fieldValueMapping\" is not populated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "field": {
                    "type": "string",
                    "description": "The field to use in the \"fieldValue\"/\"fieldValueMapping\" cases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleSeverityMappingMapping:CseAggregationRuleSeverityMappingMapping"
                    },
                    "description": "The map of record values to severities to use in the \"fieldValueMapping\" case\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be set to \"eq\" currently\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CseAggregationRuleSeverityMappingMapping:CseAggregationRuleSeverityMappingMapping": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The record value to map from\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "integer",
                    "description": "The severity value to map to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be set to \"eq\" currently\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from",
                "to",
                "type"
            ]
        },
        "sumologic:index/CseChainRuleEntitySelector:CseChainRuleEntitySelector": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType",
                "expression"
            ]
        },
        "sumologic:index/CseChainRuleExpressionsAndLimit:CseChainRuleExpressionsAndLimit": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limit": {
                    "type": "integer",
                    "description": "How many times this expression must match for the Signal to fire\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "expression",
                "limit"
            ]
        },
        "sumologic:index/CseLogMappingField:CseLogMappingField": {
            "properties": {
                "alternateValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of alternate values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caseInsensitive": {
                    "type": "boolean",
                    "description": "Case insensitive flag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultValue": {
                    "type": "string",
                    "description": "Default value of the field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldJoins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of field join values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "format": {
                    "type": "string",
                    "description": "Format of the field. (JSON, Windows, Syslog, CEF, LEEF )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "formatParameters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of format parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinDelimiter": {
                    "type": "string",
                    "description": "Join delimiter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lookups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseLogMappingFieldLookup:CseLogMappingFieldLookup"
                    },
                    "description": "List of lookup key value pair for field. See lookup_schema for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skippedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of skipped values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "splitDelimiter": {
                    "type": "string",
                    "description": "Split delimiter to be used. (some example: \",\", \"-\", \"|\")\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "splitIndex": {
                    "type": "integer",
                    "description": "The index value to select (starting at zero)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Lookup value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueType": {
                    "type": "string",
                    "description": "The value type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "sumologic:index/CseLogMappingFieldLookup:CseLogMappingFieldLookup": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Lookup key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Lookup value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/CseLogMappingStructuredInput:CseLogMappingStructuredInput": {
            "properties": {
                "eventIdPattern": {
                    "type": "string",
                    "description": "Event id pattern.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFormat": {
                    "type": "string",
                    "description": "Log format. (JSON, Windows, Syslog, CEF, LEEF )\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "product": {
                    "type": "string",
                    "description": "Product name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vendor": {
                    "type": "string",
                    "description": "Vendor name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eventIdPattern",
                "logFormat",
                "product",
                "vendor"
            ]
        },
        "sumologic:index/CseLogMappingUnstructuredFields:CseLogMappingUnstructuredFields": {
            "properties": {
                "patternNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of grok pattern names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "patternNames"
            ]
        },
        "sumologic:index/CseMatchListItem:CseMatchListItem": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Match list item description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiration": {
                    "type": "string",
                    "description": "Match list item expiration. (Format: YYYY-MM-DDTHH:mm:ss)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The internal ID of the match list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Match list item value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "id",
                        "value"
                    ]
                }
            }
        },
        "sumologic:index/CseMatchRuleEntitySelector:CseMatchRuleEntitySelector": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType",
                "expression"
            ]
        },
        "sumologic:index/CseMatchRuleSeverityMapping:CseMatchRuleSeverityMapping": {
            "properties": {
                "default": {
                    "type": "integer",
                    "description": "The severity to use in the \"constant\" case or to fall back to if the field used by \"fieldValue\"/\"fieldValueMapping\" is not populated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "field": {
                    "type": "string",
                    "description": "The field to use in the \"fieldValue\"/\"fieldValueMapping\" cases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseMatchRuleSeverityMappingMapping:CseMatchRuleSeverityMappingMapping"
                    },
                    "description": "The map of record values to severities to use in the \"fieldValueMapping\" case\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be set to \"eq\" currently\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/CseMatchRuleSeverityMappingMapping:CseMatchRuleSeverityMappingMapping": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "The record value to map from\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "type": "integer",
                    "description": "The severity value to map to\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be set to \"eq\" currently\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from",
                "to",
                "type"
            ]
        },
        "sumologic:index/CseThresholdRuleEntitySelector:CseThresholdRuleEntitySelector": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType",
                "expression"
            ]
        },
        "sumologic:index/DashboardColoringRule:DashboardColoringRule": {
            "properties": {
                "colorThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRuleColorThreshold:DashboardColoringRuleColorThreshold"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multipleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "multipleSeriesAggregateFunction",
                "scope",
                "singleSeriesAggregateFunction"
            ]
        },
        "sumologic:index/DashboardColoringRuleColorThreshold:DashboardColoringRuleColorThreshold": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "sumologic:index/DashboardLayout:DashboardLayout": {
            "properties": {
                "grid": {
                    "$ref": "#/types/sumologic:index/DashboardLayoutGrid:DashboardLayoutGrid",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardLayoutGrid:DashboardLayoutGrid": {
            "properties": {
                "layoutStructures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardLayoutGridLayoutStructure:DashboardLayoutGridLayoutStructure"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "layoutStructures"
            ]
        },
        "sumologic:index/DashboardLayoutGridLayoutStructure:DashboardLayoutGridLayoutStructure": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "structure": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "structure"
            ]
        },
        "sumologic:index/DashboardPanel:DashboardPanel": {
            "properties": {
                "sumoSearchPanel": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanel:DashboardPanelSumoSearchPanel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textPanel": {
                    "$ref": "#/types/sumologic:index/DashboardPanelTextPanel:DashboardPanelTextPanel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanel:DashboardPanelSumoSearchPanel": {
            "properties": {
                "coloringRule": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelColoringRule:DashboardPanelSumoSearchPanelColoringRule",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepVisualSettingsConsistentWithParent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linkedDashboard": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelLinkedDashboard:DashboardPanelSumoSearchPanelLinkedDashboard",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQuery:DashboardPanelSumoSearchPanelQuery"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRange:DashboardPanelSumoSearchPanelTimeRange",
                    "description": "Time range of the dashboard. See time range schema\nfor details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "Title of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key"
                    ]
                }
            }
        },
        "sumologic:index/DashboardPanelSumoSearchPanelColoringRule:DashboardPanelSumoSearchPanelColoringRule": {
            "properties": {
                "colorThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelColoringRuleColorThreshold:DashboardPanelSumoSearchPanelColoringRuleColorThreshold"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "multipleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scope": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "singleSeriesAggregateFunction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "multipleSeriesAggregateFunction",
                "scope",
                "singleSeriesAggregateFunction"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelColoringRuleColorThreshold:DashboardPanelSumoSearchPanelColoringRuleColorThreshold": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelLinkedDashboard:DashboardPanelSumoSearchPanelLinkedDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeTimeRange": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeVariables": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativePath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQuery:DashboardPanelSumoSearchPanelQuery": {
            "properties": {
                "metricsQueryData": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryData:DashboardPanelSumoSearchPanelQueryMetricsQueryData",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsQueryMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryString": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queryKey",
                "queryString",
                "queryType"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryData:DashboardPanelSumoSearchPanelQueryMetricsQueryData": {
            "properties": {
                "aggregationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metric": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filters",
                "metric"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "negation": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator": {
            "properties": {
                "operatorName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operatorName",
                "parameters"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter:DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRange:DashboardPanelSumoSearchPanelTimeRange": {
            "properties": {
                "beginBoundedTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completeLiteralTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange": {
            "properties": {
                "from": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange:DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardPanelTextPanel:DashboardPanelTextPanel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepVisualSettingsConsistentWithParent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "text": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "description": "Title of the dashboard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visualSettings": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key"
                    ]
                }
            }
        },
        "sumologic:index/DashboardTimeRange:DashboardTimeRange": {
            "properties": {
                "beginBoundedTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRange:DashboardTimeRangeBeginBoundedTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completeLiteralTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeCompleteLiteralTimeRange:DashboardTimeRangeCompleteLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRange:DashboardTimeRangeBeginBoundedTimeRange": {
            "properties": {
                "from": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFrom:DashboardTimeRangeBeginBoundedTimeRangeFrom",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "to": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeTo:DashboardTimeRangeBeginBoundedTimeRangeTo",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "from"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFrom:DashboardTimeRangeBeginBoundedTimeRangeFrom": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeTo:DashboardTimeRangeBeginBoundedTimeRangeTo": {
            "properties": {
                "epochTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso8601TimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "literalTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "relativeTimeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange": {
            "properties": {
                "epochMillis": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "epochMillis"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange:DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange": {
            "properties": {
                "iso8601Time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iso8601Time"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange:DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange": {
            "properties": {
                "relativeTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "relativeTime"
            ]
        },
        "sumologic:index/DashboardTimeRangeCompleteLiteralTimeRange:DashboardTimeRangeCompleteLiteralTimeRange": {
            "properties": {
                "rangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeName"
            ]
        },
        "sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap": {
            "properties": {
                "datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardTopologyLabelMapData:DashboardTopologyLabelMapData"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datas"
            ]
        },
        "sumologic:index/DashboardTopologyLabelMapData:DashboardTopologyLabelMapData": {
            "properties": {
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "label",
                "values"
            ]
        },
        "sumologic:index/DashboardVariable:DashboardVariable": {
            "properties": {
                "allowMultiSelect": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultValue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "displayName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hideFromUi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeAllOption": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinition:DashboardVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "sourceDefinition"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "sourceDefinition"
                    ]
                }
            }
        },
        "sumologic:index/DashboardVariableSourceDefinition:DashboardVariableSourceDefinition": {
            "properties": {
                "csvVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionCsvVariableSourceDefinition:DashboardVariableSourceDefinitionCsvVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logQueryVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition:DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadataVariableSourceDefinition": {
                    "$ref": "#/types/sumologic:index/DashboardVariableSourceDefinitionMetadataVariableSourceDefinition:DashboardVariableSourceDefinitionMetadataVariableSourceDefinition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/DashboardVariableSourceDefinitionCsvVariableSourceDefinition:DashboardVariableSourceDefinitionCsvVariableSourceDefinition": {
            "properties": {
                "values": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "sumologic:index/DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition:DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition": {
            "properties": {
                "field": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "field",
                "query"
            ]
        },
        "sumologic:index/DashboardVariableSourceDefinitionMetadataVariableSourceDefinition:DashboardVariableSourceDefinitionMetadataVariableSourceDefinition": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filter",
                "key"
            ]
        },
        "sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/ElbSourceFilter:ElbSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/ElbSourcePath:ElbSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourcePathCustomService:ElbSourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourcePathSnsTopicOrSubscriptionArn:ElbSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "description": "This is a computed field for SNS topic/subscription ARN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourcePathTagFilter:ElbSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/ElbSourcePathCustomService:ElbSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/ElbSourcePathSnsTopicOrSubscriptionArn:ElbSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/ElbSourcePathTagFilter:ElbSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpMetricsSourceAuthentication:GcpMetricsSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "description": "As per the service_account.json downloaded from GCP\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of polling source. This has to be `GcpMetricsPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/GcpMetricsSourceDefaultDateFormat:GcpMetricsSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/GcpMetricsSourceFilter:GcpMetricsSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/GcpMetricsSourcePath:GcpMetricsSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourcePathCustomService:GcpMetricsSourcePathCustomService"
                    },
                    "description": "Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regions for which metrics would be collected (Empty to collect from all regions)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services from which metrics would be collected\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourcePathSnsTopicOrSubscriptionArn:GcpMetricsSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourcePathTagFilter:GcpMetricsSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of polling source. This has to be `GcpMetricsPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/GcpMetricsSourcePathCustomService:GcpMetricsSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of metric type prefixes. Eg: `[\"compute.googleapis.com/instance/\",\"compute.googleapis.com/guest/\"]`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "description": "Name of the custom service you want to define.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpMetricsSourcePathSnsTopicOrSubscriptionArn:GcpMetricsSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/GcpMetricsSourcePathTagFilter:GcpMetricsSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of polling source. This has to be `GcpMetricsPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/GcpSourceFilter:GcpSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/GcpSourcePath:GcpSourcePath": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/HierarchyFilter:HierarchyFilter": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Filtering key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value required for the filtering key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "sumologic:index/HierarchyLevel:HierarchyLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevel:HierarchyLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevel:HierarchyLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevel": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel",
                    "description": "Next level without a condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be checked against for level.entityType value, for now full string match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "level": {
                    "$ref": "#/types/sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "level"
            ]
        },
        "sumologic:index/HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel:HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel": {
            "properties": {
                "entityType": {
                    "type": "string",
                    "description": "Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextLevelsWithConditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Zero or more next levels with conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/HttpSourceFilter:HttpSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/KineisLogSourceAuthentication:KineisLogSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be either `KinesisLogPath` or `NoPathExpression`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KineisLogSourceDefaultDateFormat:KineisLogSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/KineisLogSourceFilter:KineisLogSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/KineisLogSourcePath:KineisLogSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket. This is needed if using type `KinesisLogPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be either `KinesisLogPath` or `NoPathExpression`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath": {
            "properties": {
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourcePathTagFilter:KinesisMetricsSourcePathTagFilter"
                    },
                    "description": "Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/KinesisMetricsSourcePathTagFilter:KinesisMetricsSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/LookupTableField:LookupTableField": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fieldType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "fieldType"
            ]
        },
        "sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. Only allowed value is `AwsMetadataPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/MetadataSourceFilter:MetadataSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/MetadataSourcePath:MetadataSourcePath": {
            "properties": {
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Amazon regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. Only allowed value is `AwsMetadataPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/MonitorFolderObjPermission:MonitorFolderObjPermission": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Set of Permissions. Valid Permission Values: \n- `Create`\n- `Read`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectId": {
                    "type": "string",
                    "description": "A Role ID or the Org ID of the account\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectType": {
                    "type": "string",
                    "description": "Valid values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permissions",
                "subjectId",
                "subjectType"
            ]
        },
        "sumologic:index/MonitorNotification:MonitorNotification": {
            "properties": {
                "notification": {
                    "$ref": "#/types/sumologic:index/MonitorNotificationNotification:MonitorNotificationNotification",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runForTriggerTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notification",
                "runForTriggerTypes"
            ]
        },
        "sumologic:index/MonitorNotificationNotification:MonitorNotificationNotification": {
            "properties": {
                "actionType": {
                    "type": "string",
                    "deprecationMessage": "The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageBody": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "actionType",
                        "connectionType"
                    ]
                }
            }
        },
        "sumologic:index/MonitorObjPermission:MonitorObjPermission": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Set of Permissions. Valid Permission Values:\n- `Read`\n- `Update`\n- `Delete`\n- `Manage`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectId": {
                    "type": "string",
                    "description": "A Role ID or the Org ID of the account\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectType": {
                    "type": "string",
                    "description": "Valid values:\n- `role`\n- `org`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permissions",
                "subjectId",
                "subjectType"
            ]
        },
        "sumologic:index/MonitorQuery:MonitorQuery": {
            "properties": {
                "query": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rowId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query",
                "rowId"
            ]
        },
        "sumologic:index/MonitorTrigger:MonitorTrigger": {
            "properties": {
                "detectionMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditions:MonitorTriggerConditions": {
            "properties": {
                "logsMissingDataCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsMissingDataCondition:MonitorTriggerConditionsLogsMissingDataCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logsOutlierCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsOutlierCondition:MonitorTriggerConditionsLogsOutlierCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logsStaticCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticCondition:MonitorTriggerConditionsLogsStaticCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsMissingDataCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsMissingDataCondition:MonitorTriggerConditionsMetricsMissingDataCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsOutlierCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsOutlierCondition:MonitorTriggerConditionsMetricsOutlierCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricsStaticCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticCondition:MonitorTriggerConditionsMetricsStaticCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sloBurnRateCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloBurnRateCondition:MonitorTriggerConditionsSloBurnRateCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sloSliCondition": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloSliCondition:MonitorTriggerConditionsSloSliCondition",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsMissingDataCondition:MonitorTriggerConditionsLogsMissingDataCondition": {
            "properties": {
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsLogsOutlierCondition:MonitorTriggerConditionsLogsOutlierCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsOutlierConditionCritical:MonitorTriggerConditionsLogsOutlierConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "field": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsOutlierConditionWarning:MonitorTriggerConditionsLogsOutlierConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsOutlierConditionCritical:MonitorTriggerConditionsLogsOutlierConditionCritical": {
            "properties": {
                "consecutive": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "window": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsOutlierConditionWarning:MonitorTriggerConditionsLogsOutlierConditionWarning": {
            "properties": {
                "consecutive": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "window": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticCondition:MonitorTriggerConditionsLogsStaticCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionCritical:MonitorTriggerConditionsLogsStaticConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "field": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarning:MonitorTriggerConditionsLogsStaticConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionCritical:MonitorTriggerConditionsLogsStaticConditionCritical": {
            "properties": {
                "alert": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionCriticalAlert:MonitorTriggerConditionsLogsStaticConditionCriticalAlert",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolution": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionCriticalResolution:MonitorTriggerConditionsLogsStaticConditionCriticalResolution",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alert",
                "resolution",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionCriticalAlert:MonitorTriggerConditionsLogsStaticConditionCriticalAlert": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionCriticalResolution:MonitorTriggerConditionsLogsStaticConditionCriticalResolution": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarning:MonitorTriggerConditionsLogsStaticConditionWarning": {
            "properties": {
                "alert": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarningAlert:MonitorTriggerConditionsLogsStaticConditionWarningAlert",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolution": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarningResolution:MonitorTriggerConditionsLogsStaticConditionWarningResolution",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alert",
                "resolution",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarningAlert:MonitorTriggerConditionsLogsStaticConditionWarningAlert": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsLogsStaticConditionWarningResolution:MonitorTriggerConditionsLogsStaticConditionWarningResolution": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsMissingDataCondition:MonitorTriggerConditionsMetricsMissingDataCondition": {
            "properties": {
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "timeRange",
                "triggerSource"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsMetricsOutlierCondition:MonitorTriggerConditionsMetricsOutlierCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsOutlierConditionCritical:MonitorTriggerConditionsMetricsOutlierConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsOutlierConditionWarning:MonitorTriggerConditionsMetricsOutlierConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsOutlierConditionCritical:MonitorTriggerConditionsMetricsOutlierConditionCritical": {
            "properties": {
                "baselineWindow": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsOutlierConditionWarning:MonitorTriggerConditionsMetricsOutlierConditionWarning": {
            "properties": {
                "baselineWindow": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticCondition:MonitorTriggerConditionsMetricsStaticCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCritical:MonitorTriggerConditionsMetricsStaticConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarning:MonitorTriggerConditionsMetricsStaticConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCritical:MonitorTriggerConditionsMetricsStaticConditionCritical": {
            "properties": {
                "alert": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCriticalAlert:MonitorTriggerConditionsMetricsStaticConditionCriticalAlert",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolution": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCriticalResolution:MonitorTriggerConditionsMetricsStaticConditionCriticalResolution",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alert",
                "occurrenceType",
                "resolution",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCriticalAlert:MonitorTriggerConditionsMetricsStaticConditionCriticalAlert": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionCriticalResolution:MonitorTriggerConditionsMetricsStaticConditionCriticalResolution": {
            "properties": {
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarning:MonitorTriggerConditionsMetricsStaticConditionWarning": {
            "properties": {
                "alert": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarningAlert:MonitorTriggerConditionsMetricsStaticConditionWarningAlert",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolution": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarningResolution:MonitorTriggerConditionsMetricsStaticConditionWarningResolution",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alert",
                "occurrenceType",
                "resolution",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarningAlert:MonitorTriggerConditionsMetricsStaticConditionWarningAlert": {
            "properties": {
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsMetricsStaticConditionWarningResolution:MonitorTriggerConditionsMetricsStaticConditionWarningResolution": {
            "properties": {
                "occurrenceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsSloBurnRateCondition:MonitorTriggerConditionsSloBurnRateCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloBurnRateConditionCritical:MonitorTriggerConditionsSloBurnRateConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloBurnRateConditionWarning:MonitorTriggerConditionsSloBurnRateConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsSloBurnRateConditionCritical:MonitorTriggerConditionsSloBurnRateConditionCritical": {
            "properties": {
                "burnRateThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "burnRateThreshold",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsSloBurnRateConditionWarning:MonitorTriggerConditionsSloBurnRateConditionWarning": {
            "properties": {
                "burnRateThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "burnRateThreshold",
                "timeRange"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsSloSliCondition:MonitorTriggerConditionsSloSliCondition": {
            "properties": {
                "critical": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloSliConditionCritical:MonitorTriggerConditionsSloSliConditionCritical",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warning": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditionsSloSliConditionWarning:MonitorTriggerConditionsSloSliConditionWarning",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/MonitorTriggerConditionsSloSliConditionCritical:MonitorTriggerConditionsSloSliConditionCritical": {
            "properties": {
                "sliThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sliThreshold"
            ]
        },
        "sumologic:index/MonitorTriggerConditionsSloSliConditionWarning:MonitorTriggerConditionsSloSliConditionWarning": {
            "properties": {
                "sliThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sliThreshold"
            ]
        },
        "sumologic:index/PoliciesUserConcurrentSessionsLimit:PoliciesUserConcurrentSessionsLimit": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentSessions": {
                    "type": "integer",
                    "description": "Maximum number of concurrent sessions a user may have. Defaults to `100`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/PollingSourceFilter:PollingSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/PollingSourcePath:PollingSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket. This is needed if using type `S3BucketPathExpression`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data. This is needed if using type `S3BucketPathExpression`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourcePathTagFilter:PollingSourcePathTagFilter"
                    },
                    "description": "Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/PollingSourcePathTagFilter:PollingSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "description": "Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key-value pairs of tag filters. Eg: `[\"k3=v3\"]`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "This value has to be set to `TagFilters`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/S3AuditSourcePath:S3AuditSourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePathCustomService:S3AuditSourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePathSnsTopicOrSubscriptionArn:S3AuditSourcePathSnsTopicOrSubscriptionArn"
                    },
                    "description": "This is a computed field for SNS topic/subscription ARN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePathTagFilter:S3AuditSourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/S3AuditSourcePathCustomService:S3AuditSourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3AuditSourcePathSnsTopicOrSubscriptionArn:S3AuditSourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/S3AuditSourcePathTagFilter:S3AuditSourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3SourceAuthentication:S3SourceAuthentication": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your AWS access key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authProviderX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientX509CertUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Your AWS Bucket region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your AWS secret key if using type `S3BucketAuthentication`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locator": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "format"
            ]
        },
        "sumologic:index/S3SourceFilter:S3SourceFilter": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mask": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "name",
                "regexp"
            ]
        },
        "sumologic:index/S3SourcePath:S3SourcePath": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourcePathCustomService:S3SourcePathCustomService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitToServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pathExpression": {
                    "type": "string",
                    "description": "The path to the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snsTopicOrSubscriptionArns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourcePathSnsTopicOrSubscriptionArn:S3SourcePathSnsTopicOrSubscriptionArn"
                    },
                    "description": "This is a computed field for SNS topic/subscription ARN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourcePathTagFilter:S3SourcePathTagFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useVersionedApi": {
                    "type": "boolean",
                    "description": "Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "snsTopicOrSubscriptionArns",
                        "type"
                    ]
                }
            }
        },
        "sumologic:index/S3SourcePathCustomService:S3SourcePathCustomService": {
            "properties": {
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/S3SourcePathSnsTopicOrSubscriptionArn:S3SourcePathSnsTopicOrSubscriptionArn": {
            "properties": {
                "arn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSuccess": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arn",
                        "isSuccess"
                    ]
                }
            }
        },
        "sumologic:index/S3SourcePathTagFilter:S3SourcePathTagFilter": {
            "properties": {
                "namespace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled": {
            "properties": {
                "firstNameAttribute": {
                    "type": "string",
                    "description": "First name attribute of the new user account. Defaults to \"\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lastNameAttribute": {
                    "type": "string",
                    "description": "Last name attribute of the new user account. Defaults to \"\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onDemandProvisioningRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "onDemandProvisioningRoles"
            ]
        },
        "sumologic:index/SloCompliance:SloCompliance": {
            "properties": {
                "complianceType": {
                    "type": "string",
                    "description": "The type of compliance to use. Valid values are `Rolling` or `Calendar`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window\nbased evaluation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startFrom": {
                    "type": "string",
                    "description": "Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,\nMonday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).\nFor `Month` it's not required and is set to first day of the month.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "The target value to use, must be a number between 0 and 100.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "complianceType",
                "size",
                "target",
                "timezone"
            ]
        },
        "sumologic:index/SloIndicator:SloIndicator": {
            "properties": {
                "requestBasedEvaluation": {
                    "$ref": "#/types/sumologic:index/SloIndicatorRequestBasedEvaluation:SloIndicatorRequestBasedEvaluation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowBasedEvaluation": {
                    "$ref": "#/types/sumologic:index/SloIndicatorWindowBasedEvaluation:SloIndicatorWindowBasedEvaluation",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sumologic:index/SloIndicatorRequestBasedEvaluation:SloIndicatorRequestBasedEvaluation": {
            "properties": {
                "op": {
                    "type": "string",
                    "description": "Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`\n, `GreaterThanOrEqual`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloIndicatorRequestBasedEvaluationQuery:SloIndicatorRequestBasedEvaluationQuery"
                    },
                    "description": "The queries to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryType": {
                    "type": "string",
                    "description": "The type of query to use. Valid values are `Metrics` or `Logs`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "description": "Compared against threshold query's raw data points to determine success criteria.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queries",
                "queryType"
            ]
        },
        "sumologic:index/SloIndicatorRequestBasedEvaluationQuery:SloIndicatorRequestBasedEvaluationQuery": {
            "properties": {
                "queryGroupType": {
                    "type": "string",
                    "description": "The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`\n, `Threshold`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloIndicatorRequestBasedEvaluationQueryQueryGroup:SloIndicatorRequestBasedEvaluationQueryQueryGroup"
                    },
                    "description": "List of queries to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queryGroups",
                "queryGroupType"
            ]
        },
        "sumologic:index/SloIndicatorRequestBasedEvaluationQueryQueryGroup:SloIndicatorRequestBasedEvaluationQueryQueryGroup": {
            "properties": {
                "field": {
                    "type": "string",
                    "description": "Field of log query output to compare against. To be used only for logs based data\ntype when `use_row_count` is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "The query string to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rowId": {
                    "type": "string",
                    "description": "The row ID to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useRowCount": {
                    "type": "boolean",
                    "description": "Whether to use the row count. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query",
                "rowId",
                "useRowCount"
            ]
        },
        "sumologic:index/SloIndicatorWindowBasedEvaluation:SloIndicatorWindowBasedEvaluation": {
            "properties": {
                "aggregation": {
                    "type": "string",
                    "description": "Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`\n, `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "description": "Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`\n, `GreaterThanOrEqual`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloIndicatorWindowBasedEvaluationQuery:SloIndicatorWindowBasedEvaluationQuery"
                    },
                    "description": "The queries to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryType": {
                    "type": "string",
                    "description": "The type of query to use. Valid values are `Metrics` or `Logs`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window\nbased evaluation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "threshold": {
                    "type": "number",
                    "description": "Compared against threshold query's raw data points to determine success criteria.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "op",
                "queries",
                "queryType",
                "size",
                "threshold"
            ]
        },
        "sumologic:index/SloIndicatorWindowBasedEvaluationQuery:SloIndicatorWindowBasedEvaluationQuery": {
            "properties": {
                "queryGroupType": {
                    "type": "string",
                    "description": "The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`\n, `Threshold`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloIndicatorWindowBasedEvaluationQueryQueryGroup:SloIndicatorWindowBasedEvaluationQueryQueryGroup"
                    },
                    "description": "List of queries to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queryGroups",
                "queryGroupType"
            ]
        },
        "sumologic:index/SloIndicatorWindowBasedEvaluationQueryQueryGroup:SloIndicatorWindowBasedEvaluationQueryQueryGroup": {
            "properties": {
                "field": {
                    "type": "string",
                    "description": "Field of log query output to compare against. To be used only for logs based data\ntype when `use_row_count` is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "The query string to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rowId": {
                    "type": "string",
                    "description": "The row ID to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useRowCount": {
                    "type": "boolean",
                    "description": "Whether to use the row count. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "query",
                "rowId",
                "useRowCount"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the sumologic package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessId": {
                "type": "string"
            },
            "accessKey": {
                "type": "string"
            },
            "adminMode": {
                "type": "boolean"
            },
            "baseUrl": {
                "type": "string"
            },
            "environment": {
                "type": "string"
            }
        },
        "required": [
            "accessId",
            "accessKey"
        ],
        "inputProperties": {
            "accessId": {
                "type": "string"
            },
            "accessKey": {
                "type": "string"
            },
            "adminMode": {
                "type": "boolean"
            },
            "baseUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_BASE_URL"
                    ]
                }
            },
            "environment": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "SUMOLOGIC_ENVIRONMENT"
                    ]
                }
            }
        },
        "requiredInputs": [
            "accessId",
            "accessKey"
        ]
    },
    "resources": {
        "sumologic:index/awsInventorySource:AwsInventorySource": {
            "description": "Provides a Sumologic AWS Inventory source to collect AWS resource inventory data.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst awsInventorySource = new sumologic.AwsInventorySource(\"aws_inventory_source\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::01234567890:role/sumo-role\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"aws/aws_inventory\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsInventory\",\n    description: \"My description\",\n    path: {\n        limitToNamespaces: [\n            \"AWS/RDS\",\n            \"AWS/EC2\",\n        ],\n        limitToRegions: [\"us-west-2\"],\n        type: \"AwsInventoryPath\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\naws_inventory_source = sumologic.AwsInventorySource(\"awsInventorySource\",\n    authentication=sumologic.AwsInventorySourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::01234567890:role/sumo-role\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"aws/aws_inventory\",\n    collector_id=collector.id,\n    content_type=\"AwsInventory\",\n    description=\"My description\",\n    path=sumologic.AwsInventorySourcePathArgs(\n        limit_to_namespaces=[\n            \"AWS/RDS\",\n            \"AWS/EC2\",\n        ],\n        limit_to_regions=[\"us-west-2\"],\n        type=\"AwsInventoryPath\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var awsInventorySource = new SumoLogic.AwsInventorySource(\"awsInventorySource\", new()\n    {\n        Authentication = new SumoLogic.Inputs.AwsInventorySourceAuthenticationArgs\n        {\n            RoleArn = \"arn:aws:iam::01234567890:role/sumo-role\",\n            Type = \"AWSRoleBasedAuthentication\",\n        },\n        Category = \"aws/aws_inventory\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsInventory\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.AwsInventorySourcePathArgs\n        {\n            LimitToNamespaces = new[]\n            {\n                \"AWS/RDS\",\n                \"AWS/EC2\",\n            },\n            LimitToRegions = new[]\n            {\n                \"us-west-2\",\n            },\n            Type = \"AwsInventoryPath\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewAwsInventorySource(ctx, \"awsInventorySource\", \u0026sumologic.AwsInventorySourceArgs{\n\t\t\tAuthentication: \u0026AwsInventorySourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::01234567890:role/sumo-role\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/aws_inventory\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsInventory\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026AwsInventorySourcePathArgs{\n\t\t\t\tLimitToNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"AWS/RDS\"),\n\t\t\t\t\tpulumi.String(\"AWS/EC2\"),\n\t\t\t\t},\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"AwsInventoryPath\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.AwsInventorySource;\nimport com.pulumi.sumologic.AwsInventorySourceArgs;\nimport com.pulumi.sumologic.inputs.AwsInventorySourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.AwsInventorySourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var awsInventorySource = new AwsInventorySource(\"awsInventorySource\", AwsInventorySourceArgs.builder()        \n            .authentication(AwsInventorySourceAuthenticationArgs.builder()\n                .roleArn(\"arn:aws:iam::01234567890:role/sumo-role\")\n                .type(\"AWSRoleBasedAuthentication\")\n                .build())\n            .category(\"aws/aws_inventory\")\n            .collectorId(collector.id())\n            .contentType(\"AwsInventory\")\n            .description(\"My description\")\n            .path(AwsInventorySourcePathArgs.builder()\n                .limitToNamespaces(                \n                    \"AWS/RDS\",\n                    \"AWS/EC2\")\n                .limitToRegions(\"us-west-2\")\n                .type(\"AwsInventoryPath\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsInventorySource:\n    type: sumologic:AwsInventorySource\n    properties:\n      authentication:\n        roleArn: arn:aws:iam::01234567890:role/sumo-role\n        type: AWSRoleBasedAuthentication\n      category: aws/aws_inventory\n      collectorId: ${collector.id}\n      contentType: AwsInventory\n      description: My description\n      path:\n        limitToNamespaces:\n          - AWS/RDS\n          - AWS/EC2\n        limitToRegions:\n          - us-west-2\n        type: AwsInventoryPath\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAWS Inventory sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsInventorySource:AwsInventorySource test 123/456\n```\n\n AWS Inventory sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsInventorySource:AwsInventorySource test my-test-collector/my-test-source\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication",
                    "description": "Authentication details to access AWS `Describe*` APIs.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. This has to be `AwsInventoryPath` for AWS Inventory source.\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication",
                    "description": "Authentication details to access AWS `Describe*` APIs.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. This has to be `AwsInventoryPath` for AWS Inventory source.\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsInventorySource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourceAuthentication:AwsInventorySourceAuthentication",
                        "description": "Authentication details to access AWS `Describe*` APIs.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. This has to be `AwsInventoryPath` for AWS Inventory source.\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsInventorySourceDefaultDateFormat:AwsInventorySourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsInventorySourceFilter:AwsInventorySourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/AwsInventorySourcePath:AwsInventorySourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/awsXraySource:AwsXraySource": {
            "description": "Provides a Sumologic AWS XRay source to collect metrics derived from XRay traces.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst awsXraySource = new sumologic.AwsXraySource(\"aws_xray_source\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::01234567890:role/sumo-role\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"aws/xray\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsXRay\",\n    description: \"My description\",\n    path: {\n        limitToRegions: [\"us-west-2\"],\n        type: \"AwsXRayPath\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\naws_xray_source = sumologic.AwsXraySource(\"awsXraySource\",\n    authentication=sumologic.AwsXraySourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::01234567890:role/sumo-role\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"aws/xray\",\n    collector_id=collector.id,\n    content_type=\"AwsXRay\",\n    description=\"My description\",\n    path=sumologic.AwsXraySourcePathArgs(\n        limit_to_regions=[\"us-west-2\"],\n        type=\"AwsXRayPath\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var awsXraySource = new SumoLogic.AwsXraySource(\"awsXraySource\", new()\n    {\n        Authentication = new SumoLogic.Inputs.AwsXraySourceAuthenticationArgs\n        {\n            RoleArn = \"arn:aws:iam::01234567890:role/sumo-role\",\n            Type = \"AWSRoleBasedAuthentication\",\n        },\n        Category = \"aws/xray\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsXRay\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.AwsXraySourcePathArgs\n        {\n            LimitToRegions = new[]\n            {\n                \"us-west-2\",\n            },\n            Type = \"AwsXRayPath\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewAwsXraySource(ctx, \"awsXraySource\", \u0026sumologic.AwsXraySourceArgs{\n\t\t\tAuthentication: \u0026AwsXraySourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::01234567890:role/sumo-role\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/xray\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsXRay\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026AwsXraySourcePathArgs{\n\t\t\t\tLimitToRegions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"us-west-2\"),\n\t\t\t\t},\n\t\t\t\tType: pulumi.String(\"AwsXRayPath\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.AwsXraySource;\nimport com.pulumi.sumologic.AwsXraySourceArgs;\nimport com.pulumi.sumologic.inputs.AwsXraySourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.AwsXraySourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var awsXraySource = new AwsXraySource(\"awsXraySource\", AwsXraySourceArgs.builder()        \n            .authentication(AwsXraySourceAuthenticationArgs.builder()\n                .roleArn(\"arn:aws:iam::01234567890:role/sumo-role\")\n                .type(\"AWSRoleBasedAuthentication\")\n                .build())\n            .category(\"aws/xray\")\n            .collectorId(collector.id())\n            .contentType(\"AwsXRay\")\n            .description(\"My description\")\n            .path(AwsXraySourcePathArgs.builder()\n                .limitToRegions(\"us-west-2\")\n                .type(\"AwsXRayPath\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsXraySource:\n    type: sumologic:AwsXraySource\n    properties:\n      authentication:\n        roleArn: arn:aws:iam::01234567890:role/sumo-role\n        type: AWSRoleBasedAuthentication\n      category: aws/xray\n      collectorId: ${collector.id}\n      contentType: AwsXRay\n      description: My description\n      path:\n        limitToRegions:\n          - us-west-2\n        type: AwsXRayPath\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAWS XRay sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsXraySource:AwsXraySource test 123/456\n```\n\n AWS XRay sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/awsXraySource:AwsXraySource test my-test-collector/my-test-source\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication",
                    "description": "Authentication details for making `xray:Get*` calls.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication",
                    "description": "Authentication details for making `xray:Get*` calls.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsXraySource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/AwsXraySourceAuthentication:AwsXraySourceAuthentication",
                        "description": "Authentication details for making `xray:Get*` calls.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsXraySourceDefaultDateFormat:AwsXraySourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/AwsXraySourceFilter:AwsXraySourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/AwsXraySourcePath:AwsXraySourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudSyslogSource:CloudSyslogSource": {
            "description": "Provides a [Sumo Logic Cloud Syslog source](https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/Cloud_Syslog_Source).\n\n__IMPORTANT:__ The token is stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudsyslogSource = new sumologic.CloudSyslogSource(\"cloudsyslog_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudsyslog_source = sumologic.CloudSyslogSource(\"cloudsyslogSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    description=\"My description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var cloudsyslogSource = new SumoLogic.CloudSyslogSource(\"cloudsyslogSource\", new()\n    {\n        Category = \"my/source/category\",\n        CollectorId = collector.Id,\n        Description = \"My description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudSyslogSource(ctx, \"cloudsyslogSource\", \u0026sumologic.CloudSyslogSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.CloudSyslogSource;\nimport com.pulumi.sumologic.CloudSyslogSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var cloudsyslogSource = new CloudSyslogSource(\"cloudsyslogSource\", CloudSyslogSourceArgs.builder()        \n            .category(\"my/source/category\")\n            .collectorId(collector.id())\n            .description(\"My description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cloudsyslogSource:\n    type: sumologic:CloudSyslogSource\n    properties:\n      category: my/source/category\n      collectorId: ${collector.id}\n      description: My description\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the source.\n- `token` - The token to use for sending data to this source.\n\n\n## Import\n\nCloud Syslog sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudSyslogSource:CloudSyslogSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudSyslogSource:CloudSyslogSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/Cloud_Syslog_Source ",
            "properties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "token"
            ],
            "inputProperties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudSyslogSource resources.\n",
                "properties": {
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudSyslogSourceDefaultDateFormat:CloudSyslogSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudSyslogSourceFilter:CloudSyslogSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudToCloudSource:CloudToCloudSource": {
            "description": "Provides a [Sumologic Cloud-to-Cloud source][1].\n\n## Supported Integrations\n\nList of available integrations along with their corresponding `JSON` templates is present [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations) \n\n__IMPORTANT:__ The API credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {description: \"Just testing this\"});\nconst oktaSource = new sumologic.CloudToCloudSource(\"oktaSource\", {\n    collectorId: collector.id,\n    schemaRef: {\n        type: \"Okta\",\n    },\n    config: JSON.stringify({\n        name: \"okta source\",\n        domain: \"dev-xxx-admin.okta.com\",\n        collectAll: true,\n        apiKey: \"xxx\",\n        fields: {\n            _siemForward: false,\n        },\n        pollingInterval: 30,\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nokta_source = sumologic.CloudToCloudSource(\"oktaSource\",\n    collector_id=collector.id,\n    schema_ref={\n        \"type\": \"Okta\",\n    },\n    config=json.dumps({\n        \"name\": \"okta source\",\n        \"domain\": \"dev-xxx-admin.okta.com\",\n        \"collectAll\": True,\n        \"apiKey\": \"xxx\",\n        \"fields\": {\n            \"_siemForward\": False,\n        },\n        \"pollingInterval\": 30,\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var oktaSource = new SumoLogic.CloudToCloudSource(\"oktaSource\", new()\n    {\n        CollectorId = collector.Id,\n        SchemaRef = \n        {\n            { \"type\", \"Okta\" },\n        },\n        Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"name\"] = \"okta source\",\n            [\"domain\"] = \"dev-xxx-admin.okta.com\",\n            [\"collectAll\"] = true,\n            [\"apiKey\"] = \"xxx\",\n            [\"fields\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"_siemForward\"] = false,\n            },\n            [\"pollingInterval\"] = 30,\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"name\":       \"okta source\",\n\t\t\t\"domain\":     \"dev-xxx-admin.okta.com\",\n\t\t\t\"collectAll\": true,\n\t\t\t\"apiKey\":     \"xxx\",\n\t\t\t\"fields\": map[string]interface{}{\n\t\t\t\t\"_siemForward\": false,\n\t\t\t},\n\t\t\t\"pollingInterval\": 30,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = sumologic.NewCloudToCloudSource(ctx, \"oktaSource\", \u0026sumologic.CloudToCloudSourceArgs{\n\t\t\tCollectorId: collector.ID(),\n\t\t\tSchemaRef: pulumi.StringMap{\n\t\t\t\t\"type\": pulumi.String(\"Okta\"),\n\t\t\t},\n\t\t\tConfig: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.CloudToCloudSource;\nimport com.pulumi.sumologic.CloudToCloudSourceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var oktaSource = new CloudToCloudSource(\"oktaSource\", CloudToCloudSourceArgs.builder()        \n            .collectorId(collector.id())\n            .schemaRef(Map.of(\"type\", \"Okta\"))\n            .config(serializeJson(\n                jsonObject(\n                    jsonProperty(\"name\", \"okta source\"),\n                    jsonProperty(\"domain\", \"dev-xxx-admin.okta.com\"),\n                    jsonProperty(\"collectAll\", true),\n                    jsonProperty(\"apiKey\", \"xxx\"),\n                    jsonProperty(\"fields\", jsonObject(\n                        jsonProperty(\"_siemForward\", false)\n                    )),\n                    jsonProperty(\"pollingInterval\", 30)\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  oktaSource:\n    type: sumologic:CloudToCloudSource\n    properties:\n      collectorId: ${collector.id}\n      schemaRef:\n        type: Okta\n      config:\n        Fn::ToJSON:\n          name: okta source\n          domain: dev-xxx-admin.okta.com\n          collectAll: true\n          apiKey: xxx\n          fields:\n            _siemForward: false\n          pollingInterval: 30\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloud-to-Cloud sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test 100000001/100000001\n```\n\n Cloud-to-Cloud sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations ",
            "properties": {
                "collectorId": {
                    "type": "integer"
                },
                "config": {
                    "type": "string",
                    "description": "This is a JSON object which contains the configuration parameters for the Source.\n"
                },
                "schemaRef": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Source schema details.\n"
                }
            },
            "required": [
                "collectorId",
                "config",
                "schemaRef"
            ],
            "inputProperties": {
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "config": {
                    "type": "string",
                    "description": "This is a JSON object which contains the configuration parameters for the Source.\n"
                },
                "schemaRef": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Source schema details.\n"
                }
            },
            "requiredInputs": [
                "collectorId",
                "config",
                "schemaRef"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudToCloudSource resources.\n",
                "properties": {
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "config": {
                        "type": "string",
                        "description": "This is a JSON object which contains the configuration parameters for the Source.\n"
                    },
                    "schemaRef": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Source schema details.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudfrontSource:CloudfrontSource": {
            "description": "Provides a [Sumologic CloudFront source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudfrontSource = new sumologic.CloudfrontSource(\"cloudfront_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/cloudfront\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsCloudFrontBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudfront_source = sumologic.CloudfrontSource(\"cloudfrontSource\",\n    authentication=sumologic.CloudfrontSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/cloudfront\",\n    collector_id=collector.id,\n    content_type=\"AwsCloudFrontBucket\",\n    description=\"My description\",\n    path=sumologic.CloudfrontSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var cloudfrontSource = new SumoLogic.CloudfrontSource(\"cloudfrontSource\", new()\n    {\n        Authentication = new SumoLogic.Inputs.CloudfrontSourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"aws/cloudfront\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsCloudFrontBucket\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.CloudfrontSourcePathArgs\n        {\n            BucketName = \"Bucket1\",\n            PathExpression = \"*\",\n            Type = \"S3BucketPathExpression\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudfrontSource(ctx, \"cloudfrontSource\", \u0026sumologic.CloudfrontSourceArgs{\n\t\t\tAuthentication: \u0026CloudfrontSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/cloudfront\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsCloudFrontBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026CloudfrontSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.CloudfrontSource;\nimport com.pulumi.sumologic.CloudfrontSourceArgs;\nimport com.pulumi.sumologic.inputs.CloudfrontSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.CloudfrontSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var cloudfrontSource = new CloudfrontSource(\"cloudfrontSource\", CloudfrontSourceArgs.builder()        \n            .authentication(CloudfrontSourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"aws/cloudfront\")\n            .collectorId(collector.id())\n            .contentType(\"AwsCloudFrontBucket\")\n            .description(\"My description\")\n            .path(CloudfrontSourcePathArgs.builder()\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .type(\"S3BucketPathExpression\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cloudfrontSource:\n    type: sumologic:CloudfrontSource\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: aws/cloudfront\n      collectorId: ${collector.id}\n      contentType: AwsCloudFrontBucket\n      description: My description\n      path:\n        bucketName: Bucket1\n        pathExpression: '*'\n        type: S3BucketPathExpression\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudFront sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test 123/456\n```\n\n CloudFront sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudfrontSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourceAuthentication:CloudfrontSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudfrontSourceDefaultDateFormat:CloudfrontSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudfrontSourceFilter:CloudfrontSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudfrontSourcePath:CloudfrontSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudtrailSource:CloudtrailSource": {
            "description": "Provides a [Sumologic CloudTrail source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-CloudTrail-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst cloudtrailSource = new sumologic.CloudtrailSource(\"cloudtrail_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/cloudtrail\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsCloudTrailBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ncloudtrail_source = sumologic.CloudtrailSource(\"cloudtrailSource\",\n    authentication=sumologic.CloudtrailSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/cloudtrail\",\n    collector_id=collector.id,\n    content_type=\"AwsCloudTrailBucket\",\n    description=\"My description\",\n    path=sumologic.CloudtrailSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var cloudtrailSource = new SumoLogic.CloudtrailSource(\"cloudtrailSource\", new()\n    {\n        Authentication = new SumoLogic.Inputs.CloudtrailSourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"aws/cloudtrail\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsCloudTrailBucket\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.CloudtrailSourcePathArgs\n        {\n            BucketName = \"Bucket1\",\n            PathExpression = \"*\",\n            Type = \"S3BucketPathExpression\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCloudtrailSource(ctx, \"cloudtrailSource\", \u0026sumologic.CloudtrailSourceArgs{\n\t\t\tAuthentication: \u0026CloudtrailSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/cloudtrail\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsCloudTrailBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026CloudtrailSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.CloudtrailSource;\nimport com.pulumi.sumologic.CloudtrailSourceArgs;\nimport com.pulumi.sumologic.inputs.CloudtrailSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.CloudtrailSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var cloudtrailSource = new CloudtrailSource(\"cloudtrailSource\", CloudtrailSourceArgs.builder()        \n            .authentication(CloudtrailSourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"aws/cloudtrail\")\n            .collectorId(collector.id())\n            .contentType(\"AwsCloudTrailBucket\")\n            .description(\"My description\")\n            .path(CloudtrailSourcePathArgs.builder()\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .type(\"S3BucketPathExpression\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cloudtrailSource:\n    type: sumologic:CloudtrailSource\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: aws/cloudtrail\n      collectorId: ${collector.id}\n      contentType: AwsCloudTrailBucket\n      description: My description\n      path:\n        bucketName: Bucket1\n        pathExpression: '*'\n        type: S3BucketPathExpression\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudTrail sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudtrailSource:CloudtrailSource test 123/456\n```\n\n CloudTrail sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudtrailSource:CloudtrailSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-CloudTrail-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudtrailSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourceAuthentication:CloudtrailSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudtrailSourceDefaultDateFormat:CloudtrailSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudtrailSourceFilter:CloudtrailSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudtrailSourcePath:CloudtrailSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cloudwatchSource:CloudwatchSource": {
            "description": "Provides a [Sumologic CloudWatch source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.CloudwatchSource;\nimport com.pulumi.sumologic.CloudwatchSourceArgs;\nimport com.pulumi.sumologic.inputs.CloudwatchSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.CloudwatchSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filters = %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n        final var tagfilters =         \n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var cloudwatchSource = new CloudwatchSource(\"cloudwatchSource\", CloudwatchSourceArgs.builder()        \n            .description(\"My description\")\n            .category(\"aws/cw\")\n            .contentType(\"AwsCloudWatch\")\n            .scanInterval(300000)\n            .paused(false)\n            .collectorId(collector.id())\n            .authentication(CloudwatchSourceAuthenticationArgs.builder()\n                .type(\"AWSRoleBasedAuthentication\")\n                .roleArn(\"arn:aws:iam::01234567890:role/sumo-role\")\n                .build())\n            .path(CloudwatchSourcePathArgs.builder()\n                .type(\"CloudWatchPath\")\n                .limitToRegions(\"us-west-2\")\n                .limitToNamespaces(                \n                    \"AWS/Route53\",\n                    \"AWS/S3\",\n                    \"customNamespace\")\n                .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cloudwatchSource:\n    type: sumologic:CloudwatchSource\n    properties:\n      description: My description\n      category: aws/cw\n      contentType: AwsCloudWatch\n      scanInterval: 300000\n      paused: false\n      collectorId: ${collector.id}\n      authentication:\n        type: AWSRoleBasedAuthentication\n        roleArn: arn:aws:iam::01234567890:role/sumo-role\n      path:\n        type: CloudWatchPath\n        limitToRegions:\n          - us-west-2\n        limitToNamespaces:\n          - AWS/Route53\n          - AWS/S3\n          - customNamespace\n        dynamic:\n          - forEach: ${tagfilters}\n            content:\n              - type: ${tag_filters.value.type}\n                namespace: ${tag_filters.value.namespace}\n                tags: ${tag_filters.value.tags}\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\nvariables:\n  filters:\n    - name: Exclude Comments\n      filter_type: Exclude\n      regexp: '#.*'\n  tagfilters:\n    - type: TagFilters\n      namespace: All\n      tags:\n        - k3=v3\n    - type: TagFilters\n      namespace: AWS/Route53\n      tags:\n        - k1=v1\n    - type: TagFilters\n      namespace: AWS/S3\n      tags:\n        - k2=v2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCloudWatch sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test 123/456\n```\n\n CloudWatch sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cloudwatchSource:CloudwatchSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudwatchSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourceAuthentication:CloudwatchSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudwatchSourceDefaultDateFormat:CloudwatchSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CloudwatchSourceFilter:CloudwatchSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/CloudwatchSourcePath:CloudwatchSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/collector:Collector": {
            "description": "Provides a [Sumologic (Hosted) Collector][1].\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n    fields: {\n        environment: \"production\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\",\n    description=\"Just testing this\",\n    fields={\n        \"environment\": \"production\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n        Fields = \n        {\n            { \"environment\", \"production\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t\tFields: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .fields(Map.of(\"environment\", \"production\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n      fields:\n        environment: production\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCollectors can be imported using the collector id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/collector:Collector test 1234567890\n```\n\n Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/collector:Collector test my_test_collector\n```\n\n [1]https://help.sumologic.com/Send_Data/Hosted_Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Collector resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the collector.\n"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map containing [key/value pairs][3].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment": {
            "properties": {
                "collectorId": {
                    "type": "string"
                },
                "ingestBudgetId": {
                    "type": "string"
                }
            },
            "required": [
                "collectorId",
                "ingestBudgetId"
            ],
            "inputProperties": {
                "collectorId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "ingestBudgetId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "collectorId",
                "ingestBudgetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CollectorIngestBudgetAssignment resources.\n",
                "properties": {
                    "collectorId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ingestBudgetId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "Use Collector.fields instead to assign an ingest bucket."
        },
        "sumologic:index/connection:Connection": {
            "description": "Provides the ability to create, read, delete, update connections.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst connection = new sumologic.Connection(\"connection\", {\n    type: \"WebhookConnection\",\n    description: \"My description\",\n    url: \"https://connection-endpoint.com\",\n    headers: {\n        \"X-Header\": \"my-header\",\n    },\n    customHeaders: {\n        \"X-custom\": \"my-custom-header\",\n    },\n    defaultPayload: `{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n`,\n    webhookType: \"Webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nconnection = sumologic.Connection(\"connection\",\n    type=\"WebhookConnection\",\n    description=\"My description\",\n    url=\"https://connection-endpoint.com\",\n    headers={\n        \"X-Header\": \"my-header\",\n    },\n    custom_headers={\n        \"X-custom\": \"my-custom-header\",\n    },\n    default_payload=\"\"\"{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n\"\"\",\n    webhook_type=\"Webhook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var connection = new SumoLogic.Connection(\"connection\", new()\n    {\n        Type = \"WebhookConnection\",\n        Description = \"My description\",\n        Url = \"https://connection-endpoint.com\",\n        Headers = \n        {\n            { \"X-Header\", \"my-header\" },\n        },\n        CustomHeaders = \n        {\n            { \"X-custom\", \"my-custom-header\" },\n        },\n        DefaultPayload = @\"{\n  \"\"client\"\" : \"\"Sumo Logic\"\",\n  \"\"eventType\"\" : \"\"{{Name}}\"\",\n  \"\"description\"\" : \"\"{{Description}}\"\",\n  \"\"search_url\"\" : \"\"{{QueryUrl}}\"\",\n  \"\"num_records\"\" : \"\"{{NumRawResults}}\"\",\n  \"\"search_results\"\" : \"\"{{AggregateResultsJson}}\"\"\n}\n\",\n        WebhookType = \"Webhook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewConnection(ctx, \"connection\", \u0026sumologic.ConnectionArgs{\n\t\t\tType:        pulumi.String(\"WebhookConnection\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tUrl:         pulumi.String(\"https://connection-endpoint.com\"),\n\t\t\tHeaders: pulumi.StringMap{\n\t\t\t\t\"X-Header\": pulumi.String(\"my-header\"),\n\t\t\t},\n\t\t\tCustomHeaders: pulumi.StringMap{\n\t\t\t\t\"X-custom\": pulumi.String(\"my-custom-header\"),\n\t\t\t},\n\t\t\tDefaultPayload: pulumi.String(fmt.Sprintf(`{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n`)),\n\t\t\tWebhookType: pulumi.String(\"Webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Connection;\nimport com.pulumi.sumologic.ConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var connection = new Connection(\"connection\", ConnectionArgs.builder()        \n            .type(\"WebhookConnection\")\n            .description(\"My description\")\n            .url(\"https://connection-endpoint.com\")\n            .headers(Map.of(\"X-Header\", \"my-header\"))\n            .customHeaders(Map.of(\"X-custom\", \"my-custom-header\"))\n            .defaultPayload(\"\"\"\n{\n  \"client\" : \"Sumo Logic\",\n  \"eventType\" : \"{{Name}}\",\n  \"description\" : \"{{Description}}\",\n  \"search_url\" : \"{{QueryUrl}}\",\n  \"num_records\" : \"{{NumRawResults}}\",\n  \"search_results\" : \"{{AggregateResultsJson}}\"\n}\n            \"\"\")\n            .webhookType(\"Webhook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  connection:\n    type: sumologic:Connection\n    properties:\n      type: WebhookConnection\n      description: My description\n      url: https://connection-endpoint.com\n      headers:\n        X-Header: my-header\n      customHeaders:\n        X-custom: my-custom-header\n      defaultPayload: |\n        {\n          \"client\" : \"Sumo Logic\",\n          \"eventType\" : \"{{Name}}\",\n          \"description\" : \"{{Description}}\",\n          \"search_url\" : \"{{QueryUrl}}\",\n          \"num_records\" : \"{{NumRawResults}}\",\n          \"search_results\" : \"{{AggregateResultsJson}}\"\n        }\n      webhookType: Webhook\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nConnections can be imported using the connection id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/connection:Connection test 1234567890\n```\n\n ",
            "properties": {
                "connectionSubtype": {
                    "type": "string",
                    "description": "The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.\n"
                },
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of custom webhook headers\n"
                },
                "defaultPayload": {
                    "type": "string",
                    "description": "Default payload of the webhook.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the connection.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of access authorization headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of connection. Name should be a valid alphanumeric value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. Only `WebhookConnection` is implemented right now.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL for the webhook connection.\n"
                },
                "webhookType": {
                    "type": "string",
                    "description": "Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`\n"
                }
            },
            "required": [
                "defaultPayload",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "connectionSubtype": {
                    "type": "string",
                    "description": "The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.\n"
                },
                "customHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of custom webhook headers\n"
                },
                "defaultPayload": {
                    "type": "string",
                    "description": "Default payload of the webhook.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the connection.\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of access authorization headers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of connection. Name should be a valid alphanumeric value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of connection. Only `WebhookConnection` is implemented right now.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "URL for the webhook connection.\n"
                },
                "webhookType": {
                    "type": "string",
                    "description": "Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`\n"
                }
            },
            "requiredInputs": [
                "defaultPayload",
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Connection resources.\n",
                "properties": {
                    "connectionSubtype": {
                        "type": "string",
                        "description": "The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.\n"
                    },
                    "customHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of custom webhook headers\n"
                    },
                    "defaultPayload": {
                        "type": "string",
                        "description": "Default payload of the webhook.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the connection.\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of access authorization headers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of connection. Name should be a valid alphanumeric value.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of connection. Only `WebhookConnection` is implemented right now.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for the webhook connection.\n"
                    },
                    "webhookType": {
                        "type": "string",
                        "description": "Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/content:Content": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = sumologic.getPersonalFolder({});\nconst test = new sumologic.Content(\"test\", {\n    parentId: personalFolder.then(personalFolder =\u003e personalFolder.id),\n    config: JSON.stringify({\n        type: \"SavedSearchWithScheduleSyncDefinition\",\n        name: \"test-333\",\n        search: {\n            queryText: \"\\\"warn\\\"\",\n            defaultTimeRange: \"-15m\",\n            byReceiptTime: false,\n            viewName: \"\",\n            viewStartTime: \"1970-01-01T00:00:00Z\",\n            queryParameters: [],\n            parsingMode: \"Manual\",\n        },\n        searchSchedule: {\n            cronExpression: \"0 0 * * * ? *\",\n            displayableTimeRange: \"-10m\",\n            parseableTimeRange: {\n                type: \"BeginBoundedTimeRange\",\n                from: {\n                    type: \"RelativeTimeRangeBoundary\",\n                    relativeTime: \"-50m\",\n                },\n                to: undefined,\n            },\n            timeZone: \"America/Los_Angeles\",\n            threshold: {\n                thresholdType: \"message\",\n                operator: \"gt\",\n                count: 0,\n            },\n            notification: {\n                taskType: \"EmailSearchNotificationSyncDefinition\",\n                toList: [\"ops@acme.org\"],\n                subjectTemplate: \"Search Results: {{Name}}\",\n                includeQuery: true,\n                includeResultSet: true,\n                includeHistogram: false,\n                includeCsvAttachment: false,\n            },\n            scheduleType: \"1Hour\",\n            muteErrorEmails: false,\n            parameters: [],\n        },\n        description: \"Runs every hour with timerange of 15m and sends email notifications\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\ntest = sumologic.Content(\"test\",\n    parent_id=personal_folder.id,\n    config=json.dumps({\n        \"type\": \"SavedSearchWithScheduleSyncDefinition\",\n        \"name\": \"test-333\",\n        \"search\": {\n            \"queryText\": \"\\\"warn\\\"\",\n            \"defaultTimeRange\": \"-15m\",\n            \"byReceiptTime\": False,\n            \"viewName\": \"\",\n            \"viewStartTime\": \"1970-01-01T00:00:00Z\",\n            \"queryParameters\": [],\n            \"parsingMode\": \"Manual\",\n        },\n        \"searchSchedule\": {\n            \"cronExpression\": \"0 0 * * * ? *\",\n            \"displayableTimeRange\": \"-10m\",\n            \"parseableTimeRange\": {\n                \"type\": \"BeginBoundedTimeRange\",\n                \"from\": {\n                    \"type\": \"RelativeTimeRangeBoundary\",\n                    \"relativeTime\": \"-50m\",\n                },\n                \"to\": None,\n            },\n            \"timeZone\": \"America/Los_Angeles\",\n            \"threshold\": {\n                \"thresholdType\": \"message\",\n                \"operator\": \"gt\",\n                \"count\": 0,\n            },\n            \"notification\": {\n                \"taskType\": \"EmailSearchNotificationSyncDefinition\",\n                \"toList\": [\"ops@acme.org\"],\n                \"subjectTemplate\": \"Search Results: {{Name}}\",\n                \"includeQuery\": True,\n                \"includeResultSet\": True,\n                \"includeHistogram\": False,\n                \"includeCsvAttachment\": False,\n            },\n            \"scheduleType\": \"1Hour\",\n            \"muteErrorEmails\": False,\n            \"parameters\": [],\n        },\n        \"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var personalFolder = SumoLogic.GetPersonalFolder.Invoke();\n\n    var test = new SumoLogic.Content(\"test\", new()\n    {\n        ParentId = personalFolder.Apply(getPersonalFolderResult =\u003e getPersonalFolderResult.Id),\n        Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"SavedSearchWithScheduleSyncDefinition\",\n            [\"name\"] = \"test-333\",\n            [\"search\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"queryText\"] = \"\\\"warn\\\"\",\n                [\"defaultTimeRange\"] = \"-15m\",\n                [\"byReceiptTime\"] = false,\n                [\"viewName\"] = \"\",\n                [\"viewStartTime\"] = \"1970-01-01T00:00:00Z\",\n                [\"queryParameters\"] = new[]\n                {\n                },\n                [\"parsingMode\"] = \"Manual\",\n            },\n            [\"searchSchedule\"] = new Dictionary\u003cstring, object?\u003e\n            {\n                [\"cronExpression\"] = \"0 0 * * * ? *\",\n                [\"displayableTimeRange\"] = \"-10m\",\n                [\"parseableTimeRange\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"type\"] = \"BeginBoundedTimeRange\",\n                    [\"from\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"type\"] = \"RelativeTimeRangeBoundary\",\n                        [\"relativeTime\"] = \"-50m\",\n                    },\n                    [\"to\"] = null,\n                },\n                [\"timeZone\"] = \"America/Los_Angeles\",\n                [\"threshold\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"thresholdType\"] = \"message\",\n                    [\"operator\"] = \"gt\",\n                    [\"count\"] = 0,\n                },\n                [\"notification\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"taskType\"] = \"EmailSearchNotificationSyncDefinition\",\n                    [\"toList\"] = new[]\n                    {\n                        \"ops@acme.org\",\n                    },\n                    [\"subjectTemplate\"] = \"Search Results: {{Name}}\",\n                    [\"includeQuery\"] = true,\n                    [\"includeResultSet\"] = true,\n                    [\"includeHistogram\"] = false,\n                    [\"includeCsvAttachment\"] = false,\n                },\n                [\"scheduleType\"] = \"1Hour\",\n                [\"muteErrorEmails\"] = false,\n                [\"parameters\"] = new[]\n                {\n                },\n            },\n            [\"description\"] = \"Runs every hour with timerange of 15m and sends email notifications\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpersonalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\": \"SavedSearchWithScheduleSyncDefinition\",\n\t\t\t\"name\": \"test-333\",\n\t\t\t\"search\": map[string]interface{}{\n\t\t\t\t\"queryText\":        \"\\\"warn\\\"\",\n\t\t\t\t\"defaultTimeRange\": \"-15m\",\n\t\t\t\t\"byReceiptTime\":    false,\n\t\t\t\t\"viewName\":         \"\",\n\t\t\t\t\"viewStartTime\":    \"1970-01-01T00:00:00Z\",\n\t\t\t\t\"queryParameters\":  []interface{}{},\n\t\t\t\t\"parsingMode\":      \"Manual\",\n\t\t\t},\n\t\t\t\"searchSchedule\": map[string]interface{}{\n\t\t\t\t\"cronExpression\":       \"0 0 * * * ? *\",\n\t\t\t\t\"displayableTimeRange\": \"-10m\",\n\t\t\t\t\"parseableTimeRange\": map[string]interface{}{\n\t\t\t\t\t\"type\": \"BeginBoundedTimeRange\",\n\t\t\t\t\t\"from\": map[string]interface{}{\n\t\t\t\t\t\t\"type\":         \"RelativeTimeRangeBoundary\",\n\t\t\t\t\t\t\"relativeTime\": \"-50m\",\n\t\t\t\t\t},\n\t\t\t\t\t\"to\": nil,\n\t\t\t\t},\n\t\t\t\t\"timeZone\": \"America/Los_Angeles\",\n\t\t\t\t\"threshold\": map[string]interface{}{\n\t\t\t\t\t\"thresholdType\": \"message\",\n\t\t\t\t\t\"operator\":      \"gt\",\n\t\t\t\t\t\"count\":         0,\n\t\t\t\t},\n\t\t\t\t\"notification\": map[string]interface{}{\n\t\t\t\t\t\"taskType\": \"EmailSearchNotificationSyncDefinition\",\n\t\t\t\t\t\"toList\": []string{\n\t\t\t\t\t\t\"ops@acme.org\",\n\t\t\t\t\t},\n\t\t\t\t\t\"subjectTemplate\":      \"Search Results: {{Name}}\",\n\t\t\t\t\t\"includeQuery\":         true,\n\t\t\t\t\t\"includeResultSet\":     true,\n\t\t\t\t\t\"includeHistogram\":     false,\n\t\t\t\t\t\"includeCsvAttachment\": false,\n\t\t\t\t},\n\t\t\t\t\"scheduleType\":    \"1Hour\",\n\t\t\t\t\"muteErrorEmails\": false,\n\t\t\t\t\"parameters\":      []interface{}{},\n\t\t\t},\n\t\t\t\"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = sumologic.NewContent(ctx, \"test\", \u0026sumologic.ContentArgs{\n\t\t\tParentId: pulumi.String(personalFolder.Id),\n\t\t\tConfig:   pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetPersonalFolderArgs;\nimport com.pulumi.sumologic.Content;\nimport com.pulumi.sumologic.ContentArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var personalFolder = SumologicFunctions.getPersonalFolder();\n\n        var test = new Content(\"test\", ContentArgs.builder()        \n            .parentId(personalFolder.applyValue(getPersonalFolderResult -\u003e getPersonalFolderResult.id()))\n            .config(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"SavedSearchWithScheduleSyncDefinition\"),\n                    jsonProperty(\"name\", \"test-333\"),\n                    jsonProperty(\"search\", jsonObject(\n                        jsonProperty(\"queryText\", \"\\\"warn\\\"\"),\n                        jsonProperty(\"defaultTimeRange\", \"-15m\"),\n                        jsonProperty(\"byReceiptTime\", false),\n                        jsonProperty(\"viewName\", \"\"),\n                        jsonProperty(\"viewStartTime\", \"1970-01-01T00:00:00Z\"),\n                        jsonProperty(\"queryParameters\", jsonArray(\n                        )),\n                        jsonProperty(\"parsingMode\", \"Manual\")\n                    )),\n                    jsonProperty(\"searchSchedule\", jsonObject(\n                        jsonProperty(\"cronExpression\", \"0 0 * * * ? *\"),\n                        jsonProperty(\"displayableTimeRange\", \"-10m\"),\n                        jsonProperty(\"parseableTimeRange\", jsonObject(\n                            jsonProperty(\"type\", \"BeginBoundedTimeRange\"),\n                            jsonProperty(\"from\", jsonObject(\n                                jsonProperty(\"type\", \"RelativeTimeRangeBoundary\"),\n                                jsonProperty(\"relativeTime\", \"-50m\")\n                            )),\n                            jsonProperty(\"to\", null)\n                        )),\n                        jsonProperty(\"timeZone\", \"America/Los_Angeles\"),\n                        jsonProperty(\"threshold\", jsonObject(\n                            jsonProperty(\"thresholdType\", \"message\"),\n                            jsonProperty(\"operator\", \"gt\"),\n                            jsonProperty(\"count\", 0)\n                        )),\n                        jsonProperty(\"notification\", jsonObject(\n                            jsonProperty(\"taskType\", \"EmailSearchNotificationSyncDefinition\"),\n                            jsonProperty(\"toList\", jsonArray(\"ops@acme.org\")),\n                            jsonProperty(\"subjectTemplate\", \"Search Results: {{Name}}\"),\n                            jsonProperty(\"includeQuery\", true),\n                            jsonProperty(\"includeResultSet\", true),\n                            jsonProperty(\"includeHistogram\", false),\n                            jsonProperty(\"includeCsvAttachment\", false)\n                        )),\n                        jsonProperty(\"scheduleType\", \"1Hour\"),\n                        jsonProperty(\"muteErrorEmails\", false),\n                        jsonProperty(\"parameters\", jsonArray(\n                        ))\n                    )),\n                    jsonProperty(\"description\", \"Runs every hour with timerange of 15m and sends email notifications\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: sumologic:Content\n    properties:\n      parentId: ${personalFolder.id}\n      config:\n        Fn::ToJSON:\n          type: SavedSearchWithScheduleSyncDefinition\n          name: test-333\n          search:\n            queryText: '\"warn\"'\n            defaultTimeRange: -15m\n            byReceiptTime: false\n            viewName:\n            viewStartTime: 1970-01-01T00:00:00Z\n            queryParameters: []\n            parsingMode: Manual\n          searchSchedule:\n            cronExpression: 0 0 * * * ? *\n            displayableTimeRange: -10m\n            parseableTimeRange:\n              type: BeginBoundedTimeRange\n              from:\n                type: RelativeTimeRangeBoundary\n                relativeTime: -50m\n              to: null\n            timeZone: America/Los_Angeles\n            threshold:\n              thresholdType: message\n              operator: gt\n              count: 0\n            notification:\n              taskType: EmailSearchNotificationSyncDefinition\n              toList:\n                - ops@acme.org\n              subjectTemplate: 'Search Results: {{Name}}'\n              includeQuery: true\n              includeResultSet: true\n              includeHistogram: false\n              includeCsvAttachment: false\n            scheduleType: 1Hour\n            muteErrorEmails: false\n            parameters: []\n          description: Runs every hour with timerange of 15m and sends email notifications\nvariables:\n  personalFolder:\n    Fn::Invoke:\n      Function: sumologic:getPersonalFolder\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the content item.\n\n[1]: https://help.sumologic.com/APIs/Content-Management-API\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "JSON block for the content to import. NOTE: Updating the name will create a new object and leave a untracked content item (delete the existing content item and create a new content item if you want to update the name).\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this provider. The identifier needs to be in hexadecimal format.\n"
                }
            },
            "required": [
                "config",
                "parentId"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "JSON block for the content to import. NOTE: Updating the name will create a new object and leave a untracked content item (delete the existing content item and create a new content item if you want to update the name).\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this provider. The identifier needs to be in hexadecimal format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "config",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Content resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "JSON block for the content to import. NOTE: Updating the name will create a new object and leave a untracked content item (delete the existing content item and create a new content item if you want to update the name).\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The identifier of the folder to import into. Identifiers from the Library in the Sumo user interface are provided in decimal format which is incompatible with this provider. The identifier needs to be in hexadecimal format.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/contentPermission:ContentPermission": {
            "description": "Provides a way to configure permissions on a content to share it with a user, a role, or the entire\norg. You can read more [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content).\n\nThere are three permission levels `View`, `Edit` and `Manage`. You can read more about different\nlevels [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).\n\n\u003e When you add a new permission to a content, all the lower level permissions are added by default.\nFor example, giving a user \"Manage\" permission on a content, implicitly gives them \"Edit\" and \"View\"\npermissions on the content. Due to this behavior, when you add a higher level permission, you must\nalso add all the lower level permissions. For example, when you give a user \"Edit\" permission via\nthe resource, you must give them \"View\" permission otherwise state and configuration will be out\nof sync.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = sumologic.getPersonalFolder({});\nconst permissionTestContent = new sumologic.Content(\"permissionTestContent\", {\n    parentId: personalFolder.then(personalFolder =\u003e personalFolder.id),\n    config: JSON.stringify({\n        type: \"FolderSyncDefinition\",\n        name: \"test_permission_resource_folder\",\n        description: \"\",\n        children: [],\n    }),\n});\nconst role = sumologic.getRole({\n    name: \"test_role\",\n});\nconst user = sumologic.getUser({\n    email: \"user@example.com\",\n});\n// Grant user `user@example.com` \"Manage\" permission and role `test_role`\n// \"View\" permission on the folder `test_permission_resource_folder`.\nconst contentPermissionTest = new sumologic.ContentPermission(\"contentPermissionTest\", {\n    contentId: permissionTestContent.id,\n    notifyRecipient: true,\n    notificationMessage: \"You now have the permission to access this content\",\n    permissions: [\n        {\n            permissionName: \"View\",\n            sourceType: \"role\",\n            sourceId: role.then(role =\u003e role.id),\n        },\n        {\n            permissionName: \"View\",\n            sourceType: \"user\",\n            sourceId: user.then(user =\u003e user.id),\n        },\n        {\n            permissionName: \"Edit\",\n            sourceType: \"user\",\n            sourceId: user.then(user =\u003e user.id),\n        },\n        {\n            permissionName: \"Manage\",\n            sourceType: \"user\",\n            sourceId: user.then(user =\u003e user.id),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\npermission_test_content = sumologic.Content(\"permissionTestContent\",\n    parent_id=personal_folder.id,\n    config=json.dumps({\n        \"type\": \"FolderSyncDefinition\",\n        \"name\": \"test_permission_resource_folder\",\n        \"description\": \"\",\n        \"children\": [],\n    }))\nrole = sumologic.get_role(name=\"test_role\")\nuser = sumologic.get_user(email=\"user@example.com\")\n# Grant user `user@example.com` \"Manage\" permission and role `test_role`\n# \"View\" permission on the folder `test_permission_resource_folder`.\ncontent_permission_test = sumologic.ContentPermission(\"contentPermissionTest\",\n    content_id=permission_test_content.id,\n    notify_recipient=True,\n    notification_message=\"You now have the permission to access this content\",\n    permissions=[\n        sumologic.ContentPermissionPermissionArgs(\n            permission_name=\"View\",\n            source_type=\"role\",\n            source_id=role.id,\n        ),\n        sumologic.ContentPermissionPermissionArgs(\n            permission_name=\"View\",\n            source_type=\"user\",\n            source_id=user.id,\n        ),\n        sumologic.ContentPermissionPermissionArgs(\n            permission_name=\"Edit\",\n            source_type=\"user\",\n            source_id=user.id,\n        ),\n        sumologic.ContentPermissionPermissionArgs(\n            permission_name=\"Manage\",\n            source_type=\"user\",\n            source_id=user.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var personalFolder = SumoLogic.GetPersonalFolder.Invoke();\n\n    var permissionTestContent = new SumoLogic.Content(\"permissionTestContent\", new()\n    {\n        ParentId = personalFolder.Apply(getPersonalFolderResult =\u003e getPersonalFolderResult.Id),\n        Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"type\"] = \"FolderSyncDefinition\",\n            [\"name\"] = \"test_permission_resource_folder\",\n            [\"description\"] = \"\",\n            [\"children\"] = new[]\n            {\n            },\n        }),\n    });\n\n    var role = SumoLogic.GetRole.Invoke(new()\n    {\n        Name = \"test_role\",\n    });\n\n    var user = SumoLogic.GetUser.Invoke(new()\n    {\n        Email = \"user@example.com\",\n    });\n\n    // Grant user `user@example.com` \"Manage\" permission and role `test_role`\n    // \"View\" permission on the folder `test_permission_resource_folder`.\n    var contentPermissionTest = new SumoLogic.ContentPermission(\"contentPermissionTest\", new()\n    {\n        ContentId = permissionTestContent.Id,\n        NotifyRecipient = true,\n        NotificationMessage = \"You now have the permission to access this content\",\n        Permissions = new[]\n        {\n            new SumoLogic.Inputs.ContentPermissionPermissionArgs\n            {\n                PermissionName = \"View\",\n                SourceType = \"role\",\n                SourceId = role.Apply(getRoleResult =\u003e getRoleResult.Id),\n            },\n            new SumoLogic.Inputs.ContentPermissionPermissionArgs\n            {\n                PermissionName = \"View\",\n                SourceType = \"user\",\n                SourceId = user.Apply(getUserResult =\u003e getUserResult.Id),\n            },\n            new SumoLogic.Inputs.ContentPermissionPermissionArgs\n            {\n                PermissionName = \"Edit\",\n                SourceType = \"user\",\n                SourceId = user.Apply(getUserResult =\u003e getUserResult.Id),\n            },\n            new SumoLogic.Inputs.ContentPermissionPermissionArgs\n            {\n                PermissionName = \"Manage\",\n                SourceType = \"user\",\n                SourceId = user.Apply(getUserResult =\u003e getUserResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpersonalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"type\":        \"FolderSyncDefinition\",\n\t\t\t\"name\":        \"test_permission_resource_folder\",\n\t\t\t\"description\": \"\",\n\t\t\t\"children\":    []interface{}{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tpermissionTestContent, err := sumologic.NewContent(ctx, \"permissionTestContent\", \u0026sumologic.ContentArgs{\n\t\t\tParentId: pulumi.String(personalFolder.Id),\n\t\t\tConfig:   pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trole, err := sumologic.LookupRole(ctx, \u0026GetRoleArgs{\n\t\t\tName: pulumi.StringRef(\"test_role\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := sumologic.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"user@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewContentPermission(ctx, \"contentPermissionTest\", \u0026sumologic.ContentPermissionArgs{\n\t\t\tContentId:           permissionTestContent.ID(),\n\t\t\tNotifyRecipient:     pulumi.Bool(true),\n\t\t\tNotificationMessage: pulumi.String(\"You now have the permission to access this content\"),\n\t\t\tPermissions: ContentPermissionPermissionArray{\n\t\t\t\t\u0026ContentPermissionPermissionArgs{\n\t\t\t\t\tPermissionName: pulumi.String(\"View\"),\n\t\t\t\t\tSourceType:     pulumi.String(\"role\"),\n\t\t\t\t\tSourceId:       pulumi.String(role.Id),\n\t\t\t\t},\n\t\t\t\t\u0026ContentPermissionPermissionArgs{\n\t\t\t\t\tPermissionName: pulumi.String(\"View\"),\n\t\t\t\t\tSourceType:     pulumi.String(\"user\"),\n\t\t\t\t\tSourceId:       pulumi.String(user.Id),\n\t\t\t\t},\n\t\t\t\t\u0026ContentPermissionPermissionArgs{\n\t\t\t\t\tPermissionName: pulumi.String(\"Edit\"),\n\t\t\t\t\tSourceType:     pulumi.String(\"user\"),\n\t\t\t\t\tSourceId:       pulumi.String(user.Id),\n\t\t\t\t},\n\t\t\t\t\u0026ContentPermissionPermissionArgs{\n\t\t\t\t\tPermissionName: pulumi.String(\"Manage\"),\n\t\t\t\t\tSourceType:     pulumi.String(\"user\"),\n\t\t\t\t\tSourceId:       pulumi.String(user.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetPersonalFolderArgs;\nimport com.pulumi.sumologic.Content;\nimport com.pulumi.sumologic.ContentArgs;\nimport com.pulumi.sumologic.inputs.GetRoleArgs;\nimport com.pulumi.sumologic.inputs.GetUserArgs;\nimport com.pulumi.sumologic.ContentPermission;\nimport com.pulumi.sumologic.ContentPermissionArgs;\nimport com.pulumi.sumologic.inputs.ContentPermissionPermissionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var personalFolder = SumologicFunctions.getPersonalFolder();\n\n        var permissionTestContent = new Content(\"permissionTestContent\", ContentArgs.builder()        \n            .parentId(personalFolder.applyValue(getPersonalFolderResult -\u003e getPersonalFolderResult.id()))\n            .config(serializeJson(\n                jsonObject(\n                    jsonProperty(\"type\", \"FolderSyncDefinition\"),\n                    jsonProperty(\"name\", \"test_permission_resource_folder\"),\n                    jsonProperty(\"description\", \"\"),\n                    jsonProperty(\"children\", jsonArray(\n                    ))\n                )))\n            .build());\n\n        final var role = SumologicFunctions.getRole(GetRoleArgs.builder()\n            .name(\"test_role\")\n            .build());\n\n        final var user = SumologicFunctions.getUser(GetUserArgs.builder()\n            .email(\"user@example.com\")\n            .build());\n\n        var contentPermissionTest = new ContentPermission(\"contentPermissionTest\", ContentPermissionArgs.builder()        \n            .contentId(permissionTestContent.id())\n            .notifyRecipient(true)\n            .notificationMessage(\"You now have the permission to access this content\")\n            .permissions(            \n                ContentPermissionPermissionArgs.builder()\n                    .permissionName(\"View\")\n                    .sourceType(\"role\")\n                    .sourceId(role.applyValue(getRoleResult -\u003e getRoleResult.id()))\n                    .build(),\n                ContentPermissionPermissionArgs.builder()\n                    .permissionName(\"View\")\n                    .sourceType(\"user\")\n                    .sourceId(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .build(),\n                ContentPermissionPermissionArgs.builder()\n                    .permissionName(\"Edit\")\n                    .sourceType(\"user\")\n                    .sourceId(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .build(),\n                ContentPermissionPermissionArgs.builder()\n                    .permissionName(\"Manage\")\n                    .sourceType(\"user\")\n                    .sourceId(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  permissionTestContent:\n    type: sumologic:Content\n    properties:\n      parentId: ${personalFolder.id}\n      config:\n        Fn::ToJSON:\n          type: FolderSyncDefinition\n          name: test_permission_resource_folder\n          description:\n          children: []\n  # Grant user `user@example.com` \"Manage\" permission and role `test_role`\n  # // \"View\" permission on the folder `test_permission_resource_folder`.\n  contentPermissionTest:\n    type: sumologic:ContentPermission\n    properties:\n      contentId: ${permissionTestContent.id}\n      notifyRecipient: true\n      notificationMessage: You now have the permission to access this content\n      permissions:\n        - permissionName: View\n          sourceType: role\n          sourceId: ${role.id}\n        - permissionName: View\n          sourceType: user\n          sourceId: ${user.id}\n        - permissionName: Edit\n          sourceType: user\n          sourceId: ${user.id}\n        - permissionName: Manage\n          sourceType: user\n          sourceId: ${user.id}\nvariables:\n  personalFolder:\n    Fn::Invoke:\n      Function: sumologic:getPersonalFolder\n      Arguments: {}\n  role:\n    Fn::Invoke:\n      Function: sumologic:getRole\n      Arguments:\n        name: test_role\n  user:\n    Fn::Invoke:\n      Function: sumologic:getUser\n      Arguments:\n        email: user@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPermisions on a content item can be imported using the content identifier, e.g.hcl // import permissions for content item with identifier = 0000000008E0183E\n\n```sh\n $ pulumi import sumologic:index/contentPermission:ContentPermission dashboard_permission_import 0000000008E0183E\n```\n\n ",
            "properties": {
                "contentId": {
                    "type": "string",
                    "description": "The identifier of the content item for which you want to update\npermissions.\n"
                },
                "notificationMessage": {
                    "type": "string",
                    "description": "The notification message to send to the users.\n"
                },
                "notifyRecipient": {
                    "type": "boolean",
                    "description": "Boolean value. Set it to \"true\" to notify the recipients by email.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ContentPermissionPermission:ContentPermissionPermission"
                    },
                    "description": "Permission block defining permission on the content. See\npermission schema for details.\n"
                }
            },
            "required": [
                "contentId",
                "notifyRecipient",
                "permissions"
            ],
            "inputProperties": {
                "contentId": {
                    "type": "string",
                    "description": "The identifier of the content item for which you want to update\npermissions.\n"
                },
                "notificationMessage": {
                    "type": "string",
                    "description": "The notification message to send to the users.\n"
                },
                "notifyRecipient": {
                    "type": "boolean",
                    "description": "Boolean value. Set it to \"true\" to notify the recipients by email.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ContentPermissionPermission:ContentPermissionPermission"
                    },
                    "description": "Permission block defining permission on the content. See\npermission schema for details.\n"
                }
            },
            "requiredInputs": [
                "contentId",
                "notifyRecipient",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContentPermission resources.\n",
                "properties": {
                    "contentId": {
                        "type": "string",
                        "description": "The identifier of the content item for which you want to update\npermissions.\n"
                    },
                    "notificationMessage": {
                        "type": "string",
                        "description": "The notification message to send to the users.\n"
                    },
                    "notifyRecipient": {
                        "type": "boolean",
                        "description": "Boolean value. Set it to \"true\" to notify the recipients by email.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/ContentPermissionPermission:ContentPermissionPermission"
                        },
                        "description": "Permission block defining permission on the content. See\npermission schema for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseAggregationRule:CseAggregationRule": {
            "description": "Provides a Sumo Logic CSE [Aggregation Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/09_Write_an_Aggregation_Rule).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst aggregationRule = new sumologic.CseAggregationRule(\"aggregation_rule\", {\n    aggregationFunctions: [{\n        arguments: [\"metadata_deviceEventId\"],\n        function: \"count_distinct\",\n        name: \"distinct_eventid_count\",\n    }],\n    descriptionExpression: \"Signal description\",\n    enabled: true,\n    entitySelectors: [{\n        entityType: \"_ip\",\n        expression: \"srcDevice_ip\",\n    }],\n    groupByEntity: true,\n    groupByFields: [\"dstDevice_hostname\"],\n    isPrototype: false,\n    matchExpression: \"objectType = \\\"Network\\\"\",\n    nameExpression: \"Signal name\",\n    severityMapping: {\n        default: 5,\n        type: \"constant\",\n    },\n    summaryExpression: \"Signal summary\",\n    tags: [\"_mitreAttackTactic:TA0009\"],\n    triggerExpression: \"distinct_eventid_count \u003e 5\",\n    windowSize: \"T30M\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\naggregation_rule = sumologic.CseAggregationRule(\"aggregationRule\",\n    aggregation_functions=[sumologic.CseAggregationRuleAggregationFunctionArgs(\n        arguments=[\"metadata_deviceEventId\"],\n        function=\"count_distinct\",\n        name=\"distinct_eventid_count\",\n    )],\n    description_expression=\"Signal description\",\n    enabled=True,\n    entity_selectors=[sumologic.CseAggregationRuleEntitySelectorArgs(\n        entity_type=\"_ip\",\n        expression=\"srcDevice_ip\",\n    )],\n    group_by_entity=True,\n    group_by_fields=[\"dstDevice_hostname\"],\n    is_prototype=False,\n    match_expression=\"objectType = \\\"Network\\\"\",\n    name_expression=\"Signal name\",\n    severity_mapping=sumologic.CseAggregationRuleSeverityMappingArgs(\n        default=5,\n        type=\"constant\",\n    ),\n    summary_expression=\"Signal summary\",\n    tags=[\"_mitreAttackTactic:TA0009\"],\n    trigger_expression=\"distinct_eventid_count \u003e 5\",\n    window_size=\"T30M\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var aggregationRule = new SumoLogic.CseAggregationRule(\"aggregationRule\", new()\n    {\n        AggregationFunctions = new[]\n        {\n            new SumoLogic.Inputs.CseAggregationRuleAggregationFunctionArgs\n            {\n                Arguments = new[]\n                {\n                    \"metadata_deviceEventId\",\n                },\n                Function = \"count_distinct\",\n                Name = \"distinct_eventid_count\",\n            },\n        },\n        DescriptionExpression = \"Signal description\",\n        Enabled = true,\n        EntitySelectors = new[]\n        {\n            new SumoLogic.Inputs.CseAggregationRuleEntitySelectorArgs\n            {\n                EntityType = \"_ip\",\n                Expression = \"srcDevice_ip\",\n            },\n        },\n        GroupByEntity = true,\n        GroupByFields = new[]\n        {\n            \"dstDevice_hostname\",\n        },\n        IsPrototype = false,\n        MatchExpression = \"objectType = \\\"Network\\\"\",\n        NameExpression = \"Signal name\",\n        SeverityMapping = new SumoLogic.Inputs.CseAggregationRuleSeverityMappingArgs\n        {\n            Default = 5,\n            Type = \"constant\",\n        },\n        SummaryExpression = \"Signal summary\",\n        Tags = new[]\n        {\n            \"_mitreAttackTactic:TA0009\",\n        },\n        TriggerExpression = \"distinct_eventid_count \u003e 5\",\n        WindowSize = \"T30M\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseAggregationRule(ctx, \"aggregationRule\", \u0026sumologic.CseAggregationRuleArgs{\n\t\t\tAggregationFunctions: CseAggregationRuleAggregationFunctionArray{\n\t\t\t\t\u0026CseAggregationRuleAggregationFunctionArgs{\n\t\t\t\t\tArguments: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"metadata_deviceEventId\"),\n\t\t\t\t\t},\n\t\t\t\t\tFunction: pulumi.String(\"count_distinct\"),\n\t\t\t\t\tName:     pulumi.String(\"distinct_eventid_count\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescriptionExpression: pulumi.String(\"Signal description\"),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tEntitySelectors: CseAggregationRuleEntitySelectorArray{\n\t\t\t\t\u0026CseAggregationRuleEntitySelectorArgs{\n\t\t\t\t\tEntityType: pulumi.String(\"_ip\"),\n\t\t\t\t\tExpression: pulumi.String(\"srcDevice_ip\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGroupByEntity: pulumi.Bool(true),\n\t\t\tGroupByFields: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dstDevice_hostname\"),\n\t\t\t},\n\t\t\tIsPrototype:     pulumi.Bool(false),\n\t\t\tMatchExpression: pulumi.String(\"objectType = \\\"Network\\\"\"),\n\t\t\tNameExpression:  pulumi.String(\"Signal name\"),\n\t\t\tSeverityMapping: \u0026CseAggregationRuleSeverityMappingArgs{\n\t\t\t\tDefault: pulumi.Int(5),\n\t\t\t\tType:    pulumi.String(\"constant\"),\n\t\t\t},\n\t\t\tSummaryExpression: pulumi.String(\"Signal summary\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_mitreAttackTactic:TA0009\"),\n\t\t\t},\n\t\t\tTriggerExpression: pulumi.String(\"distinct_eventid_count \u003e 5\"),\n\t\t\tWindowSize:        pulumi.String(\"T30M\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseAggregationRule;\nimport com.pulumi.sumologic.CseAggregationRuleArgs;\nimport com.pulumi.sumologic.inputs.CseAggregationRuleAggregationFunctionArgs;\nimport com.pulumi.sumologic.inputs.CseAggregationRuleEntitySelectorArgs;\nimport com.pulumi.sumologic.inputs.CseAggregationRuleSeverityMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var aggregationRule = new CseAggregationRule(\"aggregationRule\", CseAggregationRuleArgs.builder()        \n            .aggregationFunctions(CseAggregationRuleAggregationFunctionArgs.builder()\n                .arguments(\"metadata_deviceEventId\")\n                .function(\"count_distinct\")\n                .name(\"distinct_eventid_count\")\n                .build())\n            .descriptionExpression(\"Signal description\")\n            .enabled(true)\n            .entitySelectors(CseAggregationRuleEntitySelectorArgs.builder()\n                .entityType(\"_ip\")\n                .expression(\"srcDevice_ip\")\n                .build())\n            .groupByEntity(true)\n            .groupByFields(\"dstDevice_hostname\")\n            .isPrototype(false)\n            .matchExpression(\"objectType = \\\"Network\\\"\")\n            .nameExpression(\"Signal name\")\n            .severityMapping(CseAggregationRuleSeverityMappingArgs.builder()\n                .default_(5)\n                .type(\"constant\")\n                .build())\n            .summaryExpression(\"Signal summary\")\n            .tags(\"_mitreAttackTactic:TA0009\")\n            .triggerExpression(\"distinct_eventid_count \u003e 5\")\n            .windowSize(\"T30M\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aggregationRule:\n    type: sumologic:CseAggregationRule\n    properties:\n      aggregationFunctions:\n        - arguments:\n            - metadata_deviceEventId\n          function: count_distinct\n          name: distinct_eventid_count\n      descriptionExpression: Signal description\n      enabled: true\n      entitySelectors:\n        - entityType: _ip\n          expression: srcDevice_ip\n      groupByEntity: true\n      groupByFields:\n        - dstDevice_hostname\n      isPrototype: false\n      matchExpression: objectType = \"Network\"\n      nameExpression: Signal name\n      severityMapping:\n        default: 5\n        type: constant\n      summaryExpression: Signal summary\n      tags:\n        - _mitreAttackTactic:TA0009\n      triggerExpression: distinct_eventid_count \u003e 5\n      windowSize: T30M\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAggregation Rules can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseAggregationRule:CseAggregationRule aggregation_rule id\n```\n\n ",
            "properties": {
                "aggregationFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleAggregationFunction:CseAggregationRuleAggregationFunction"
                    },
                    "description": "One or more named aggregation functions\n"
                },
                "descriptionExpression": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleEntitySelector:CseAggregationRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "groupByEntity": {
                    "type": "boolean",
                    "description": "Whether to group records by the specified entity fields\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "matchExpression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule\n"
                },
                "nameExpression": {
                    "type": "string",
                    "description": "The name of the generated Signals\n"
                },
                "severityMapping": {
                    "$ref": "#/types/sumologic:index/CseAggregationRuleSeverityMapping:CseAggregationRuleSeverityMapping",
                    "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "triggerExpression": {
                    "type": "string",
                    "description": "The expression to determine whether a Signal should be created based on the aggregation results\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "required": [
                "aggregationFunctions",
                "descriptionExpression",
                "enabled",
                "entitySelectors",
                "matchExpression",
                "name",
                "nameExpression",
                "severityMapping",
                "triggerExpression",
                "windowSize"
            ],
            "inputProperties": {
                "aggregationFunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleAggregationFunction:CseAggregationRuleAggregationFunction"
                    },
                    "description": "One or more named aggregation functions\n"
                },
                "descriptionExpression": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleEntitySelector:CseAggregationRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "groupByEntity": {
                    "type": "boolean",
                    "description": "Whether to group records by the specified entity fields\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "matchExpression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule\n"
                },
                "nameExpression": {
                    "type": "string",
                    "description": "The name of the generated Signals\n"
                },
                "severityMapping": {
                    "$ref": "#/types/sumologic:index/CseAggregationRuleSeverityMapping:CseAggregationRuleSeverityMapping",
                    "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "triggerExpression": {
                    "type": "string",
                    "description": "The expression to determine whether a Signal should be created based on the aggregation results\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "requiredInputs": [
                "aggregationFunctions",
                "descriptionExpression",
                "enabled",
                "entitySelectors",
                "matchExpression",
                "nameExpression",
                "severityMapping",
                "triggerExpression",
                "windowSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseAggregationRule resources.\n",
                "properties": {
                    "aggregationFunctions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseAggregationRuleAggregationFunction:CseAggregationRuleAggregationFunction"
                        },
                        "description": "One or more named aggregation functions\n"
                    },
                    "descriptionExpression": {
                        "type": "string",
                        "description": "The description of the generated Signals\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should generate Signals\n"
                    },
                    "entitySelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseAggregationRuleEntitySelector:CseAggregationRuleEntitySelector"
                        },
                        "description": "The entities to generate Signals on\n"
                    },
                    "groupByEntity": {
                        "type": "boolean",
                        "description": "Whether to group records by the specified entity fields\n"
                    },
                    "groupByFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fields to group records by\n"
                    },
                    "isPrototype": {
                        "type": "boolean",
                        "description": "Whether the generated Signals should be prototype Signals\n"
                    },
                    "matchExpression": {
                        "type": "string",
                        "description": "The expression for which records to match on\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rule\n"
                    },
                    "nameExpression": {
                        "type": "string",
                        "description": "The name of the generated Signals\n"
                    },
                    "severityMapping": {
                        "$ref": "#/types/sumologic:index/CseAggregationRuleSeverityMapping:CseAggregationRuleSeverityMapping",
                        "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                    },
                    "summaryExpression": {
                        "type": "string",
                        "description": "The summary of the generated Signals\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the generated Signals\n"
                    },
                    "triggerExpression": {
                        "type": "string",
                        "description": "The expression to determine whether a Signal should be created based on the aggregation results\n"
                    },
                    "windowSize": {
                        "type": "string",
                        "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseChainRule:CseChainRule": {
            "description": "Provides a Sumo Logic CSE [Chain Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/07_Write_a_Chain_Rule).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst chainRule = new sumologic.CseChainRule(\"chain_rule\", {\n    description: \"Signal description\",\n    enabled: true,\n    entitySelectors: [{\n        entityType: \"_username\",\n        expression: \"user_username\",\n    }],\n    expressionsAndLimits: [\n        {\n            expression: \"success = false\",\n            limit: 5,\n        },\n        {\n            expression: \"success = true\",\n            limit: 1,\n        },\n    ],\n    groupByFields: [],\n    isPrototype: false,\n    ordered: true,\n    severity: 5,\n    summaryExpression: \"Signal summary\",\n    tags: [\"_mitreAttackTactic:TA0009\"],\n    windowSize: \"T30M\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nchain_rule = sumologic.CseChainRule(\"chainRule\",\n    description=\"Signal description\",\n    enabled=True,\n    entity_selectors=[sumologic.CseChainRuleEntitySelectorArgs(\n        entity_type=\"_username\",\n        expression=\"user_username\",\n    )],\n    expressions_and_limits=[\n        sumologic.CseChainRuleExpressionsAndLimitArgs(\n            expression=\"success = false\",\n            limit=5,\n        ),\n        sumologic.CseChainRuleExpressionsAndLimitArgs(\n            expression=\"success = true\",\n            limit=1,\n        ),\n    ],\n    group_by_fields=[],\n    is_prototype=False,\n    ordered=True,\n    severity=5,\n    summary_expression=\"Signal summary\",\n    tags=[\"_mitreAttackTactic:TA0009\"],\n    window_size=\"T30M\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var chainRule = new SumoLogic.CseChainRule(\"chainRule\", new()\n    {\n        Description = \"Signal description\",\n        Enabled = true,\n        EntitySelectors = new[]\n        {\n            new SumoLogic.Inputs.CseChainRuleEntitySelectorArgs\n            {\n                EntityType = \"_username\",\n                Expression = \"user_username\",\n            },\n        },\n        ExpressionsAndLimits = new[]\n        {\n            new SumoLogic.Inputs.CseChainRuleExpressionsAndLimitArgs\n            {\n                Expression = \"success = false\",\n                Limit = 5,\n            },\n            new SumoLogic.Inputs.CseChainRuleExpressionsAndLimitArgs\n            {\n                Expression = \"success = true\",\n                Limit = 1,\n            },\n        },\n        GroupByFields = new[] {},\n        IsPrototype = false,\n        Ordered = true,\n        Severity = 5,\n        SummaryExpression = \"Signal summary\",\n        Tags = new[]\n        {\n            \"_mitreAttackTactic:TA0009\",\n        },\n        WindowSize = \"T30M\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseChainRule(ctx, \"chainRule\", \u0026sumologic.CseChainRuleArgs{\n\t\t\tDescription: pulumi.String(\"Signal description\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tEntitySelectors: CseChainRuleEntitySelectorArray{\n\t\t\t\t\u0026CseChainRuleEntitySelectorArgs{\n\t\t\t\t\tEntityType: pulumi.String(\"_username\"),\n\t\t\t\t\tExpression: pulumi.String(\"user_username\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExpressionsAndLimits: CseChainRuleExpressionsAndLimitArray{\n\t\t\t\t\u0026CseChainRuleExpressionsAndLimitArgs{\n\t\t\t\t\tExpression: pulumi.String(\"success = false\"),\n\t\t\t\t\tLimit:      pulumi.Int(5),\n\t\t\t\t},\n\t\t\t\t\u0026CseChainRuleExpressionsAndLimitArgs{\n\t\t\t\t\tExpression: pulumi.String(\"success = true\"),\n\t\t\t\t\tLimit:      pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGroupByFields:     pulumi.StringArray{},\n\t\t\tIsPrototype:       pulumi.Bool(false),\n\t\t\tOrdered:           pulumi.Bool(true),\n\t\t\tSeverity:          pulumi.Int(5),\n\t\t\tSummaryExpression: pulumi.String(\"Signal summary\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_mitreAttackTactic:TA0009\"),\n\t\t\t},\n\t\t\tWindowSize: pulumi.String(\"T30M\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseChainRule;\nimport com.pulumi.sumologic.CseChainRuleArgs;\nimport com.pulumi.sumologic.inputs.CseChainRuleEntitySelectorArgs;\nimport com.pulumi.sumologic.inputs.CseChainRuleExpressionsAndLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var chainRule = new CseChainRule(\"chainRule\", CseChainRuleArgs.builder()        \n            .description(\"Signal description\")\n            .enabled(true)\n            .entitySelectors(CseChainRuleEntitySelectorArgs.builder()\n                .entityType(\"_username\")\n                .expression(\"user_username\")\n                .build())\n            .expressionsAndLimits(            \n                CseChainRuleExpressionsAndLimitArgs.builder()\n                    .expression(\"success = false\")\n                    .limit(5)\n                    .build(),\n                CseChainRuleExpressionsAndLimitArgs.builder()\n                    .expression(\"success = true\")\n                    .limit(1)\n                    .build())\n            .groupByFields()\n            .isPrototype(false)\n            .ordered(true)\n            .severity(5)\n            .summaryExpression(\"Signal summary\")\n            .tags(\"_mitreAttackTactic:TA0009\")\n            .windowSize(\"T30M\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  chainRule:\n    type: sumologic:CseChainRule\n    properties:\n      description: Signal description\n      enabled: true\n      entitySelectors:\n        - entityType: _username\n          expression: user_username\n      expressionsAndLimits:\n        - expression: success = false\n          limit: 5\n        - expression: success = true\n          limit: 1\n      groupByFields: []\n      isPrototype: false\n      ordered: true\n      severity: 5\n      summaryExpression: Signal summary\n      tags:\n        - _mitreAttackTactic:TA0009\n      windowSize: T30M\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nChain Rules can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseChainRule:CseChainRule chain_rule id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseChainRuleEntitySelector:CseChainRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expressionsAndLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseChainRuleExpressionsAndLimit:CseChainRuleExpressionsAndLimit"
                    },
                    "description": "The list of expressions and associated limits to make up the conditions of the chain rule\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule and the generated SignalS\n"
                },
                "ordered": {
                    "type": "boolean",
                    "description": "Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule\n"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the generated Signals\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "required": [
                "description",
                "enabled",
                "entitySelectors",
                "expressionsAndLimits",
                "name",
                "severity",
                "windowSize"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseChainRuleEntitySelector:CseChainRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expressionsAndLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseChainRuleExpressionsAndLimit:CseChainRuleExpressionsAndLimit"
                    },
                    "description": "The list of expressions and associated limits to make up the conditions of the chain rule\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule and the generated SignalS\n"
                },
                "ordered": {
                    "type": "boolean",
                    "description": "Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule\n"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the generated Signals\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "requiredInputs": [
                "description",
                "enabled",
                "entitySelectors",
                "expressionsAndLimits",
                "severity",
                "windowSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseChainRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the generated Signals\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should generate Signals\n"
                    },
                    "entitySelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseChainRuleEntitySelector:CseChainRuleEntitySelector"
                        },
                        "description": "The entities to generate Signals on\n"
                    },
                    "expressionsAndLimits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseChainRuleExpressionsAndLimit:CseChainRuleExpressionsAndLimit"
                        },
                        "description": "The list of expressions and associated limits to make up the conditions of the chain rule\n"
                    },
                    "groupByFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fields to group records by\n"
                    },
                    "isPrototype": {
                        "type": "boolean",
                        "description": "Whether the generated Signals should be prototype Signals\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rule and the generated SignalS\n"
                    },
                    "ordered": {
                        "type": "boolean",
                        "description": "Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule\n"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "The severity of the generated Signals\n"
                    },
                    "summaryExpression": {
                        "type": "string",
                        "description": "The summary of the generated Signals\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the generated Signals\n"
                    },
                    "windowSize": {
                        "type": "string",
                        "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseCustomEntityType:CseCustomEntityType": {
            "description": "Provides a Sumologic CSE Custom Entity Type.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst customEntityType = new sumologic.CseCustomEntityType(\"custom_entity_type\", {\n    fields: [\n        \"file_hash_md5\",\n        \"file_hash_sha1\",\n    ],\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncustom_entity_type = sumologic.CseCustomEntityType(\"customEntityType\",\n    fields=[\n        \"file_hash_md5\",\n        \"file_hash_sha1\",\n    ],\n    identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customEntityType = new SumoLogic.CseCustomEntityType(\"customEntityType\", new()\n    {\n        Fields = new[]\n        {\n            \"file_hash_md5\",\n            \"file_hash_sha1\",\n        },\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseCustomEntityType(ctx, \"customEntityType\", \u0026sumologic.CseCustomEntityTypeArgs{\n\t\t\tFields: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"file_hash_md5\"),\n\t\t\t\tpulumi.String(\"file_hash_sha1\"),\n\t\t\t},\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseCustomEntityType;\nimport com.pulumi.sumologic.CseCustomEntityTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customEntityType = new CseCustomEntityType(\"customEntityType\", CseCustomEntityTypeArgs.builder()        \n            .fields(            \n                \"file_hash_md5\",\n                \"file_hash_sha1\")\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  customEntityType:\n    type: sumologic:CseCustomEntityType\n    properties:\n      fields:\n        - file_hash_md5\n        - file_hash_sha1\n      identifier: identifier\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustom entity type can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseCustomEntityType:CseCustomEntityType custom_entity_type id\n```\n\n ",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Record schema fields. Examples: \"file_hash_md5\", \"file_hash_sha1\".\".\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Machine friendly and unique identifier. Example: \"filehash\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human friend and unique name. Example: \"File Hash\".\n"
                }
            },
            "required": [
                "fields",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Record schema fields. Examples: \"file_hash_md5\", \"file_hash_sha1\".\".\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Machine friendly and unique identifier. Example: \"filehash\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human friend and unique name. Example: \"File Hash\".\n"
                }
            },
            "requiredInputs": [
                "fields",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseCustomEntityType resources.\n",
                "properties": {
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Record schema fields. Examples: \"file_hash_md5\", \"file_hash_sha1\".\".\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Machine friendly and unique identifier. Example: \"filehash\".\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human friend and unique name. Example: \"File Hash\".\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseCustomInsight:CseCustomInsight": {
            "description": "Provides a Sumo Logic CSE Custom Insight.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst customInsight = new sumologic.CseCustomInsight(\"custom_insight\", {\n    description: \"Insight description\",\n    enabled: true,\n    ordered: true,\n    ruleIds: [\n        \"MATCH-S00001\",\n        \"THRESHOLD-U00005\",\n    ],\n    severity: \"HIGH\",\n    signalNames: [\n        \"Some Signal Name\",\n        \"Wildcard Signal Name *\",\n    ],\n    tags: [\"_mitreAttackTactic:TA0009\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncustom_insight = sumologic.CseCustomInsight(\"customInsight\",\n    description=\"Insight description\",\n    enabled=True,\n    ordered=True,\n    rule_ids=[\n        \"MATCH-S00001\",\n        \"THRESHOLD-U00005\",\n    ],\n    severity=\"HIGH\",\n    signal_names=[\n        \"Some Signal Name\",\n        \"Wildcard Signal Name *\",\n    ],\n    tags=[\"_mitreAttackTactic:TA0009\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customInsight = new SumoLogic.CseCustomInsight(\"customInsight\", new()\n    {\n        Description = \"Insight description\",\n        Enabled = true,\n        Ordered = true,\n        RuleIds = new[]\n        {\n            \"MATCH-S00001\",\n            \"THRESHOLD-U00005\",\n        },\n        Severity = \"HIGH\",\n        SignalNames = new[]\n        {\n            \"Some Signal Name\",\n            \"Wildcard Signal Name *\",\n        },\n        Tags = new[]\n        {\n            \"_mitreAttackTactic:TA0009\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseCustomInsight(ctx, \"customInsight\", \u0026sumologic.CseCustomInsightArgs{\n\t\t\tDescription: pulumi.String(\"Insight description\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tOrdered:     pulumi.Bool(true),\n\t\t\tRuleIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MATCH-S00001\"),\n\t\t\t\tpulumi.String(\"THRESHOLD-U00005\"),\n\t\t\t},\n\t\t\tSeverity: pulumi.String(\"HIGH\"),\n\t\t\tSignalNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Some Signal Name\"),\n\t\t\t\tpulumi.String(\"Wildcard Signal Name *\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_mitreAttackTactic:TA0009\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseCustomInsight;\nimport com.pulumi.sumologic.CseCustomInsightArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customInsight = new CseCustomInsight(\"customInsight\", CseCustomInsightArgs.builder()        \n            .description(\"Insight description\")\n            .enabled(true)\n            .ordered(true)\n            .ruleIds(            \n                \"MATCH-S00001\",\n                \"THRESHOLD-U00005\")\n            .severity(\"HIGH\")\n            .signalNames(            \n                \"Some Signal Name\",\n                \"Wildcard Signal Name *\")\n            .tags(\"_mitreAttackTactic:TA0009\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  customInsight:\n    type: sumologic:CseCustomInsight\n    properties:\n      description: Insight description\n      enabled: true\n      ordered: true\n      ruleIds:\n        - MATCH-S00001\n        - THRESHOLD-U00005\n      severity: HIGH\n      signalNames:\n        - Some Signal Name\n        - Wildcard Signal Name *\n      tags:\n        - _mitreAttackTactic:TA0009\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCustom Insights can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseCustomInsight:CseCustomInsight custom_insight id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the generated Insights\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the Custom Insight should generate Insights\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Insight and the generated Insights\n"
                },
                "ordered": {
                    "type": "boolean",
                    "description": "Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the generated Insights (HIGH, MEDIUM, or LOW)\n"
                },
                "signalNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Insights\n"
                }
            },
            "required": [
                "description",
                "enabled",
                "name",
                "ordered",
                "severity",
                "tags"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the generated Insights\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the Custom Insight should generate Insights\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Custom Insight and the generated Insights\n"
                },
                "ordered": {
                    "type": "boolean",
                    "description": "Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the generated Insights (HIGH, MEDIUM, or LOW)\n"
                },
                "signalNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Insights\n"
                }
            },
            "requiredInputs": [
                "description",
                "enabled",
                "ordered",
                "severity",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseCustomInsight resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the generated Insights\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the Custom Insight should generate Insights\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Custom Insight and the generated Insights\n"
                    },
                    "ordered": {
                        "type": "boolean",
                        "description": "Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight\n"
                    },
                    "ruleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The severity of the generated Insights (HIGH, MEDIUM, or LOW)\n"
                    },
                    "signalNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the generated Insights\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig": {
            "description": "Provides a Sumologic CSE Entity Criticality Configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst entityCriticalityConfig = new sumologic.CseEntityCriticalityConfig(\"entity_criticality_config\", {\n    severityExpression: \"severity + 2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nentity_criticality_config = sumologic.CseEntityCriticalityConfig(\"entityCriticalityConfig\", severity_expression=\"severity + 2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var entityCriticalityConfig = new SumoLogic.CseEntityCriticalityConfig(\"entityCriticalityConfig\", new()\n    {\n        SeverityExpression = \"severity + 2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseEntityCriticalityConfig(ctx, \"entityCriticalityConfig\", \u0026sumologic.CseEntityCriticalityConfigArgs{\n\t\t\tSeverityExpression: pulumi.String(\"severity + 2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseEntityCriticalityConfig;\nimport com.pulumi.sumologic.CseEntityCriticalityConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var entityCriticalityConfig = new CseEntityCriticalityConfig(\"entityCriticalityConfig\", CseEntityCriticalityConfigArgs.builder()        \n            .severityExpression(\"severity + 2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  entityCriticalityConfig:\n    type: sumologic:CseEntityCriticalityConfig\n    properties:\n      severityExpression: severity + 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEntity criticality configuration can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig entity_criticality_config id\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Human friendly and unique name. Examples: \"Executive Laptop\", \"Bastion Host\".\n"
                },
                "severityExpression": {
                    "type": "string",
                    "description": "Algebraic expression representing this entity\\'s criticality. Examples: \"severity * 2\", \"severity - 5\", \"severity / 3\".\n"
                }
            },
            "required": [
                "name",
                "severityExpression"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Human friendly and unique name. Examples: \"Executive Laptop\", \"Bastion Host\".\n"
                },
                "severityExpression": {
                    "type": "string",
                    "description": "Algebraic expression representing this entity\\'s criticality. Examples: \"severity * 2\", \"severity - 5\", \"severity / 3\".\n"
                }
            },
            "requiredInputs": [
                "severityExpression"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseEntityCriticalityConfig resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Human friendly and unique name. Examples: \"Executive Laptop\", \"Bastion Host\".\n"
                    },
                    "severityExpression": {
                        "type": "string",
                        "description": "Algebraic expression representing this entity\\'s criticality. Examples: \"severity * 2\", \"severity - 5\", \"severity / 3\".\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst entityEntityGroupConfiguration = new sumologic.CseEntityEntityGroupConfiguration(\"entity_entity_group_configuration\", {\n    criticality: \"HIGH\",\n    description: \"Entity Group description\",\n    entityNamespace: \"namespace\",\n    entityType: \"_hostname\",\n    suffix: \"red.co\",\n    suppressed: true,\n    tags: [\"tag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nentity_entity_group_configuration = sumologic.CseEntityEntityGroupConfiguration(\"entityEntityGroupConfiguration\",\n    criticality=\"HIGH\",\n    description=\"Entity Group description\",\n    entity_namespace=\"namespace\",\n    entity_type=\"_hostname\",\n    suffix=\"red.co\",\n    suppressed=True,\n    tags=[\"tag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var entityEntityGroupConfiguration = new SumoLogic.CseEntityEntityGroupConfiguration(\"entityEntityGroupConfiguration\", new()\n    {\n        Criticality = \"HIGH\",\n        Description = \"Entity Group description\",\n        EntityNamespace = \"namespace\",\n        EntityType = \"_hostname\",\n        Suffix = \"red.co\",\n        Suppressed = true,\n        Tags = new[]\n        {\n            \"tag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseEntityEntityGroupConfiguration(ctx, \"entityEntityGroupConfiguration\", \u0026sumologic.CseEntityEntityGroupConfigurationArgs{\n\t\t\tCriticality:     pulumi.String(\"HIGH\"),\n\t\t\tDescription:     pulumi.String(\"Entity Group description\"),\n\t\t\tEntityNamespace: pulumi.String(\"namespace\"),\n\t\t\tEntityType:      pulumi.String(\"_hostname\"),\n\t\t\tSuffix:          pulumi.String(\"red.co\"),\n\t\t\tSuppressed:      pulumi.Bool(true),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseEntityEntityGroupConfiguration;\nimport com.pulumi.sumologic.CseEntityEntityGroupConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var entityEntityGroupConfiguration = new CseEntityEntityGroupConfiguration(\"entityEntityGroupConfiguration\", CseEntityEntityGroupConfigurationArgs.builder()        \n            .criticality(\"HIGH\")\n            .description(\"Entity Group description\")\n            .entityNamespace(\"namespace\")\n            .entityType(\"_hostname\")\n            .suffix(\"red.co\")\n            .suppressed(true)\n            .tags(\"tag\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  entityEntityGroupConfiguration:\n    type: sumologic:CseEntityEntityGroupConfiguration\n    properties:\n      criticality: HIGH\n      description: Entity Group description\n      entityNamespace: namespace\n      entityType: _hostname\n      suffix: red.co\n      suppressed: true\n      tags:\n        - tag\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEntity Entity Group Configuration can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration entity_entity_group_configuration id\n```\n\n ",
            "properties": {
                "criticality": {
                    "type": "string",
                    "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                },
                "description": {
                    "type": "string",
                    "description": "The entity group configuration description.\n"
                },
                "entityNamespace": {
                    "type": "string",
                    "description": "The entity namespace.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type Examples: \"_ip\", \"_mac\", \"_username\", \"_hostname\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity group configuration name.\n"
                },
                "networkBlock": {
                    "type": "string",
                    "description": "The entity group configuration network block value Example: \"192.168.0.0/16\".\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The entity group configuration prefix value.\n"
                },
                "suffix": {
                    "type": "string",
                    "description": "The entity group configuration suffix value.\n"
                },
                "suppressed": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The entity group configuration tags list.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "criticality": {
                    "type": "string",
                    "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                },
                "description": {
                    "type": "string",
                    "description": "The entity group configuration description.\n"
                },
                "entityNamespace": {
                    "type": "string",
                    "description": "The entity namespace.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The entity type Examples: \"_ip\", \"_mac\", \"_username\", \"_hostname\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity group configuration name.\n"
                },
                "networkBlock": {
                    "type": "string",
                    "description": "The entity group configuration network block value Example: \"192.168.0.0/16\".\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The entity group configuration prefix value.\n"
                },
                "suffix": {
                    "type": "string",
                    "description": "The entity group configuration suffix value.\n"
                },
                "suppressed": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The entity group configuration tags list.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseEntityEntityGroupConfiguration resources.\n",
                "properties": {
                    "criticality": {
                        "type": "string",
                        "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The entity group configuration description.\n"
                    },
                    "entityNamespace": {
                        "type": "string",
                        "description": "The entity namespace.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type Examples: \"_ip\", \"_mac\", \"_username\", \"_hostname\".\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The entity group configuration name.\n"
                    },
                    "networkBlock": {
                        "type": "string",
                        "description": "The entity group configuration network block value Example: \"192.168.0.0/16\".\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The entity group configuration prefix value.\n"
                    },
                    "suffix": {
                        "type": "string",
                        "description": "The entity group configuration suffix value.\n"
                    },
                    "suppressed": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The entity group configuration tags list.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration": {
            "description": "Provides the Sumologic CSE Insights Configuration for the whole organization. There can be only one configuration per organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst insightsConfiguration = new sumologic.CseInsightsConfiguration(\"insights_configuration\", {\n    lookbackDays: 13,\n    threshold: 12,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ninsights_configuration = sumologic.CseInsightsConfiguration(\"insightsConfiguration\",\n    lookback_days=13,\n    threshold=12)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var insightsConfiguration = new SumoLogic.CseInsightsConfiguration(\"insightsConfiguration\", new()\n    {\n        LookbackDays = 13,\n        Threshold = 12,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseInsightsConfiguration(ctx, \"insightsConfiguration\", \u0026sumologic.CseInsightsConfigurationArgs{\n\t\t\tLookbackDays: pulumi.Float64(13),\n\t\t\tThreshold:    pulumi.Float64(12),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseInsightsConfiguration;\nimport com.pulumi.sumologic.CseInsightsConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var insightsConfiguration = new CseInsightsConfiguration(\"insightsConfiguration\", CseInsightsConfigurationArgs.builder()        \n            .lookbackDays(13)\n            .threshold(12)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  insightsConfiguration:\n    type: sumologic:CseInsightsConfiguration\n    properties:\n      lookbackDays: 13\n      threshold: 12\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInsights Configuration can be imported using the id `cse-insights-configuration`hcl\n\n```sh\n $ pulumi import sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration insights_configuration cse-insights-configuration\n```\n\n ",
            "properties": {
                "lookbackDays": {
                    "type": "number",
                    "description": "Detection window expressed in days.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Detection threshold activity score.\n"
                }
            },
            "inputProperties": {
                "lookbackDays": {
                    "type": "number",
                    "description": "Detection window expressed in days.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Detection threshold activity score.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseInsightsConfiguration resources.\n",
                "properties": {
                    "lookbackDays": {
                        "type": "number",
                        "description": "Detection window expressed in days.\n"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "Detection threshold activity score.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseInsightsResolution:CseInsightsResolution": {
            "description": "Provides a Sumologic CSE Insights Resolution. When an insight gets closed, a resolution indicates why it got closed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst insightsResolution = new sumologic.CseInsightsResolution(\"insights_resolution\", {\n    description: \"New description\",\n    parent: \"No Action\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ninsights_resolution = sumologic.CseInsightsResolution(\"insightsResolution\",\n    description=\"New description\",\n    parent=\"No Action\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var insightsResolution = new SumoLogic.CseInsightsResolution(\"insightsResolution\", new()\n    {\n        Description = \"New description\",\n        Parent = \"No Action\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseInsightsResolution(ctx, \"insightsResolution\", \u0026sumologic.CseInsightsResolutionArgs{\n\t\t\tDescription: pulumi.String(\"New description\"),\n\t\t\tParent:      pulumi.String(\"No Action\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseInsightsResolution;\nimport com.pulumi.sumologic.CseInsightsResolutionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var insightsResolution = new CseInsightsResolution(\"insightsResolution\", CseInsightsResolutionArgs.builder()        \n            .description(\"New description\")\n            .parent(\"No Action\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  insightsResolution:\n    type: sumologic:CseInsightsResolution\n    properties:\n      description: New description\n      parent: No Action\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInsights Resolution can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseInsightsResolution:CseInsightsResolution insights_resolution id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the insights resolution.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the insights resolution.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The name of the built-in parent insights resolution. Supported values: \"Resolved\", \"False Positive\", \"No Action\", \"Duplicate\"\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the insights resolution.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the insights resolution.\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The name of the built-in parent insights resolution. Supported values: \"Resolved\", \"False Positive\", \"No Action\", \"Duplicate\"\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseInsightsResolution resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the insights resolution.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the insights resolution.\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The name of the built-in parent insights resolution. Supported values: \"Resolved\", \"False Positive\", \"No Action\", \"Duplicate\"\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseInsightsStatus:CseInsightsStatus": {
            "description": "Provides a Sumologic CSE Insights Status. Preconfigured Insight statuses cannot be edited or deleted; you can however create custom statuses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst insightsStatus = new sumologic.CseInsightsStatus(\"insights_status\", {\n    description: \"New description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ninsights_status = sumologic.CseInsightsStatus(\"insightsStatus\", description=\"New description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var insightsStatus = new SumoLogic.CseInsightsStatus(\"insightsStatus\", new()\n    {\n        Description = \"New description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseInsightsStatus(ctx, \"insightsStatus\", \u0026sumologic.CseInsightsStatusArgs{\n\t\t\tDescription: pulumi.String(\"New description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseInsightsStatus;\nimport com.pulumi.sumologic.CseInsightsStatusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var insightsStatus = new CseInsightsStatus(\"insightsStatus\", CseInsightsStatusArgs.builder()        \n            .description(\"New description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  insightsStatus:\n    type: sumologic:CseInsightsStatus\n    properties:\n      description: New description\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInsights Status can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseInsightsStatus:CseInsightsStatus insights_status id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the insights status.\n"
                },
                "displayName": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the insights status.\n"
                }
            },
            "required": [
                "displayName",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the insights status.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the insights status.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseInsightsStatus resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the insights status.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the insights status.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseInventoryEntityGroupConfiguration:CseInventoryEntityGroupConfiguration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst inventoryEntityGroupConfiguration = new sumologic.CseInventoryEntityGroupConfiguration(\"inventory_entity_group_configuration\", {\n    criticality: \"HIGH\",\n    description: \"Inventory entity group description\",\n    group: \"admin\",\n    inventorySource: \"Active Directory\",\n    inventoryType: \"username\",\n    suppressed: false,\n    tags: [\"tag\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ninventory_entity_group_configuration = sumologic.CseInventoryEntityGroupConfiguration(\"inventoryEntityGroupConfiguration\",\n    criticality=\"HIGH\",\n    description=\"Inventory entity group description\",\n    group=\"admin\",\n    inventory_source=\"Active Directory\",\n    inventory_type=\"username\",\n    suppressed=False,\n    tags=[\"tag\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inventoryEntityGroupConfiguration = new SumoLogic.CseInventoryEntityGroupConfiguration(\"inventoryEntityGroupConfiguration\", new()\n    {\n        Criticality = \"HIGH\",\n        Description = \"Inventory entity group description\",\n        Group = \"admin\",\n        InventorySource = \"Active Directory\",\n        InventoryType = \"username\",\n        Suppressed = false,\n        Tags = new[]\n        {\n            \"tag\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseInventoryEntityGroupConfiguration(ctx, \"inventoryEntityGroupConfiguration\", \u0026sumologic.CseInventoryEntityGroupConfigurationArgs{\n\t\t\tCriticality:     pulumi.String(\"HIGH\"),\n\t\t\tDescription:     pulumi.String(\"Inventory entity group description\"),\n\t\t\tGroup:           pulumi.String(\"admin\"),\n\t\t\tInventorySource: pulumi.String(\"Active Directory\"),\n\t\t\tInventoryType:   pulumi.String(\"username\"),\n\t\t\tSuppressed:      pulumi.Bool(false),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseInventoryEntityGroupConfiguration;\nimport com.pulumi.sumologic.CseInventoryEntityGroupConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var inventoryEntityGroupConfiguration = new CseInventoryEntityGroupConfiguration(\"inventoryEntityGroupConfiguration\", CseInventoryEntityGroupConfigurationArgs.builder()        \n            .criticality(\"HIGH\")\n            .description(\"Inventory entity group description\")\n            .group(\"admin\")\n            .inventorySource(\"Active Directory\")\n            .inventoryType(\"username\")\n            .suppressed(false)\n            .tags(\"tag\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  inventoryEntityGroupConfiguration:\n    type: sumologic:CseInventoryEntityGroupConfiguration\n    properties:\n      criticality: HIGH\n      description: Inventory entity group description\n      group: admin\n      inventorySource: Active Directory\n      inventoryType: username\n      suppressed: false\n      tags:\n        - tag\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInventory Entity Group Configuration can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseInventoryEntityGroupConfiguration:CseInventoryEntityGroupConfiguration inventory_entity_group_configuration id\n```\n\n ",
            "properties": {
                "criticality": {
                    "type": "string",
                    "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                },
                "description": {
                    "type": "string",
                    "description": "The entity group configuration description.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The entity group configuration inventory group.\n"
                },
                "inventorySource": {
                    "type": "string",
                    "description": "The inventory source Examples: \"Active Directory\", \"Okta\".\n"
                },
                "inventoryType": {
                    "type": "string",
                    "description": "The inventory type Examples: \"computer\", \"username\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity group configuration name.\n"
                },
                "suppressed": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The entity group configuration tags list.\n"
                }
            },
            "required": [
                "inventorySource",
                "inventoryType",
                "name"
            ],
            "inputProperties": {
                "criticality": {
                    "type": "string",
                    "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                },
                "description": {
                    "type": "string",
                    "description": "The entity group configuration description.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The entity group configuration inventory group.\n"
                },
                "inventorySource": {
                    "type": "string",
                    "description": "The inventory source Examples: \"Active Directory\", \"Okta\".\n"
                },
                "inventoryType": {
                    "type": "string",
                    "description": "The inventory type Examples: \"computer\", \"username\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity group configuration name.\n"
                },
                "suppressed": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The entity group configuration tags list.\n"
                }
            },
            "requiredInputs": [
                "inventorySource",
                "inventoryType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseInventoryEntityGroupConfiguration resources.\n",
                "properties": {
                    "criticality": {
                        "type": "string",
                        "description": "The entity group configuration criticality Examples: \"HIGH\", \"CRITICALITY\".\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The entity group configuration description.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The entity group configuration inventory group.\n"
                    },
                    "inventorySource": {
                        "type": "string",
                        "description": "The inventory source Examples: \"Active Directory\", \"Okta\".\n"
                    },
                    "inventoryType": {
                        "type": "string",
                        "description": "The inventory type Examples: \"computer\", \"username\".\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The entity group configuration name.\n"
                    },
                    "suppressed": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The entity group configuration tags list.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseLogMapping:CseLogMapping": {
            "description": "Provides a Sumologic CSE Log Mapping.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst logMapping = new sumologic.CseLogMapping(\"log_mapping\", {\n    enabled: true,\n    fields: [{\n        alternateValues: [\"altValue\"],\n        caseInsensitive: false,\n        defaultValue: \"\",\n        fieldJoins: [\"and\"],\n        format: \"JSON\",\n        formatParameters: [\"param\"],\n        joinDelimiter: \"\",\n        lookups: [{\n            key: \"tunnel-up\",\n            value: \"true\",\n        }],\n        name: \"action\",\n        skippedValues: [\"-\"],\n        splitDelimiter: \",\",\n        splitIndex: 0,\n        timeZone: \"UTC\",\n        value: \"action\",\n        valueType: \"constant\",\n    }],\n    productGuid: \"003d35b3-3ba8-4e93-8776-e5810b4e243e\",\n    recordType: \"Audit\",\n    relatesEntities: true,\n    skippedValues: [\"skipped\"],\n    structuredInputs: [{\n        eventIdPattern: \"vpn\",\n        logFormat: \"JSON\",\n        product: \"fortinate\",\n        vendor: \"fortinate\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nlog_mapping = sumologic.CseLogMapping(\"logMapping\",\n    enabled=True,\n    fields=[sumologic.CseLogMappingFieldArgs(\n        alternate_values=[\"altValue\"],\n        case_insensitive=False,\n        default_value=\"\",\n        field_joins=[\"and\"],\n        format=\"JSON\",\n        format_parameters=[\"param\"],\n        join_delimiter=\"\",\n        lookups=[sumologic.CseLogMappingFieldLookupArgs(\n            key=\"tunnel-up\",\n            value=\"true\",\n        )],\n        name=\"action\",\n        skipped_values=[\"-\"],\n        split_delimiter=\",\",\n        split_index=0,\n        time_zone=\"UTC\",\n        value=\"action\",\n        value_type=\"constant\",\n    )],\n    product_guid=\"003d35b3-3ba8-4e93-8776-e5810b4e243e\",\n    record_type=\"Audit\",\n    relates_entities=True,\n    skipped_values=[\"skipped\"],\n    structured_inputs=[sumologic.CseLogMappingStructuredInputArgs(\n        event_id_pattern=\"vpn\",\n        log_format=\"JSON\",\n        product=\"fortinate\",\n        vendor=\"fortinate\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logMapping = new SumoLogic.CseLogMapping(\"logMapping\", new()\n    {\n        Enabled = true,\n        Fields = new[]\n        {\n            new SumoLogic.Inputs.CseLogMappingFieldArgs\n            {\n                AlternateValues = new[]\n                {\n                    \"altValue\",\n                },\n                CaseInsensitive = false,\n                DefaultValue = \"\",\n                FieldJoins = new[]\n                {\n                    \"and\",\n                },\n                Format = \"JSON\",\n                FormatParameters = new[]\n                {\n                    \"param\",\n                },\n                JoinDelimiter = \"\",\n                Lookups = new[]\n                {\n                    new SumoLogic.Inputs.CseLogMappingFieldLookupArgs\n                    {\n                        Key = \"tunnel-up\",\n                        Value = \"true\",\n                    },\n                },\n                Name = \"action\",\n                SkippedValues = new[]\n                {\n                    \"-\",\n                },\n                SplitDelimiter = \",\",\n                SplitIndex = 0,\n                TimeZone = \"UTC\",\n                Value = \"action\",\n                ValueType = \"constant\",\n            },\n        },\n        ProductGuid = \"003d35b3-3ba8-4e93-8776-e5810b4e243e\",\n        RecordType = \"Audit\",\n        RelatesEntities = true,\n        SkippedValues = new[]\n        {\n            \"skipped\",\n        },\n        StructuredInputs = new[]\n        {\n            new SumoLogic.Inputs.CseLogMappingStructuredInputArgs\n            {\n                EventIdPattern = \"vpn\",\n                LogFormat = \"JSON\",\n                Product = \"fortinate\",\n                Vendor = \"fortinate\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseLogMapping(ctx, \"logMapping\", \u0026sumologic.CseLogMappingArgs{\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tFields: CseLogMappingFieldArray{\n\t\t\t\t\u0026CseLogMappingFieldArgs{\n\t\t\t\t\tAlternateValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"altValue\"),\n\t\t\t\t\t},\n\t\t\t\t\tCaseInsensitive: pulumi.Bool(false),\n\t\t\t\t\tDefaultValue:    pulumi.String(\"\"),\n\t\t\t\t\tFieldJoins: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"and\"),\n\t\t\t\t\t},\n\t\t\t\t\tFormat: pulumi.String(\"JSON\"),\n\t\t\t\t\tFormatParameters: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"param\"),\n\t\t\t\t\t},\n\t\t\t\t\tJoinDelimiter: pulumi.String(\"\"),\n\t\t\t\t\tLookups: CseLogMappingFieldLookupArray{\n\t\t\t\t\t\t\u0026CseLogMappingFieldLookupArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"tunnel-up\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tName: pulumi.String(\"action\"),\n\t\t\t\t\tSkippedValues: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"-\"),\n\t\t\t\t\t},\n\t\t\t\t\tSplitDelimiter: pulumi.String(\",\"),\n\t\t\t\t\tSplitIndex:     pulumi.Int(0),\n\t\t\t\t\tTimeZone:       pulumi.String(\"UTC\"),\n\t\t\t\t\tValue:          pulumi.String(\"action\"),\n\t\t\t\t\tValueType:      pulumi.String(\"constant\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tProductGuid:     pulumi.String(\"003d35b3-3ba8-4e93-8776-e5810b4e243e\"),\n\t\t\tRecordType:      pulumi.String(\"Audit\"),\n\t\t\tRelatesEntities: pulumi.Bool(true),\n\t\t\tSkippedValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"skipped\"),\n\t\t\t},\n\t\t\tStructuredInputs: CseLogMappingStructuredInputArray{\n\t\t\t\t\u0026CseLogMappingStructuredInputArgs{\n\t\t\t\t\tEventIdPattern: pulumi.String(\"vpn\"),\n\t\t\t\t\tLogFormat:      pulumi.String(\"JSON\"),\n\t\t\t\t\tProduct:        pulumi.String(\"fortinate\"),\n\t\t\t\t\tVendor:         pulumi.String(\"fortinate\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseLogMapping;\nimport com.pulumi.sumologic.CseLogMappingArgs;\nimport com.pulumi.sumologic.inputs.CseLogMappingFieldArgs;\nimport com.pulumi.sumologic.inputs.CseLogMappingStructuredInputArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logMapping = new CseLogMapping(\"logMapping\", CseLogMappingArgs.builder()        \n            .enabled(true)\n            .fields(CseLogMappingFieldArgs.builder()\n                .alternateValues(\"altValue\")\n                .caseInsensitive(false)\n                .defaultValue(\"\")\n                .fieldJoins(\"and\")\n                .format(\"JSON\")\n                .formatParameters(\"param\")\n                .joinDelimiter(\"\")\n                .lookups(CseLogMappingFieldLookupArgs.builder()\n                    .key(\"tunnel-up\")\n                    .value(\"true\")\n                    .build())\n                .name(\"action\")\n                .skippedValues(\"-\")\n                .splitDelimiter(\",\")\n                .splitIndex(0)\n                .timeZone(\"UTC\")\n                .value(\"action\")\n                .valueType(\"constant\")\n                .build())\n            .productGuid(\"003d35b3-3ba8-4e93-8776-e5810b4e243e\")\n            .recordType(\"Audit\")\n            .relatesEntities(true)\n            .skippedValues(\"skipped\")\n            .structuredInputs(CseLogMappingStructuredInputArgs.builder()\n                .eventIdPattern(\"vpn\")\n                .logFormat(\"JSON\")\n                .product(\"fortinate\")\n                .vendor(\"fortinate\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logMapping:\n    type: sumologic:CseLogMapping\n    properties:\n      enabled: true\n      fields:\n        - alternateValues:\n            - altValue\n          caseInsensitive: false\n          defaultValue:\n          fieldJoins:\n            - and\n          format: JSON\n          formatParameters:\n            - param\n          joinDelimiter:\n          lookups:\n            - key: tunnel-up\n              value: true\n          name: action\n          skippedValues:\n            - '-'\n          splitDelimiter: ','\n          splitIndex: 0\n          timeZone: UTC\n          value: action\n          valueType: constant\n      productGuid: 003d35b3-3ba8-4e93-8776-e5810b4e243e\n      recordType: Audit\n      relatesEntities: true\n      skippedValues:\n        - skipped\n      structuredInputs:\n        - eventIdPattern: vpn\n          logFormat: JSON\n          product: fortinate\n          vendor: fortinate\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLog Mapping can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseLogMapping:CseLogMapping log_mapping id\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseLogMappingField:CseLogMappingField"
                    },
                    "description": "List of fields for the new log mapping. See field_schema for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The id of the parent log mapping.\n"
                },
                "productGuid": {
                    "type": "string",
                    "description": "Product GUID.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)\n"
                },
                "relatesEntities": {
                    "type": "boolean",
                    "description": "Set to true to relate entities.\n"
                },
                "skippedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of skipped values.\n"
                },
                "structuredInputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseLogMappingStructuredInput:CseLogMappingStructuredInput"
                    },
                    "description": "List of structured inputs for the new log mapping. See structured_input_schema for details.\n"
                },
                "unstructuredFields": {
                    "$ref": "#/types/sumologic:index/CseLogMappingUnstructuredFields:CseLogMappingUnstructuredFields",
                    "description": "Unstructured fields for the new log mapping. See unstructured_field_schema for details.\n"
                }
            },
            "required": [
                "enabled",
                "fields",
                "name",
                "productGuid",
                "recordType"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseLogMappingField:CseLogMappingField"
                    },
                    "description": "List of fields for the new log mapping. See field_schema for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The id of the parent log mapping.\n"
                },
                "productGuid": {
                    "type": "string",
                    "description": "Product GUID.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)\n"
                },
                "relatesEntities": {
                    "type": "boolean",
                    "description": "Set to true to relate entities.\n"
                },
                "skippedValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of skipped values.\n"
                },
                "structuredInputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseLogMappingStructuredInput:CseLogMappingStructuredInput"
                    },
                    "description": "List of structured inputs for the new log mapping. See structured_input_schema for details.\n"
                },
                "unstructuredFields": {
                    "$ref": "#/types/sumologic:index/CseLogMappingUnstructuredFields:CseLogMappingUnstructuredFields",
                    "description": "Unstructured fields for the new log mapping. See unstructured_field_schema for details.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "fields",
                "productGuid",
                "recordType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseLogMapping resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseLogMappingField:CseLogMappingField"
                        },
                        "description": "List of fields for the new log mapping. See field_schema for details.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the field.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The id of the parent log mapping.\n"
                    },
                    "productGuid": {
                        "type": "string",
                        "description": "Product GUID.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)\n"
                    },
                    "relatesEntities": {
                        "type": "boolean",
                        "description": "Set to true to relate entities.\n"
                    },
                    "skippedValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of skipped values.\n"
                    },
                    "structuredInputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseLogMappingStructuredInput:CseLogMappingStructuredInput"
                        },
                        "description": "List of structured inputs for the new log mapping. See structured_input_schema for details.\n"
                    },
                    "unstructuredFields": {
                        "$ref": "#/types/sumologic:index/CseLogMappingUnstructuredFields:CseLogMappingUnstructuredFields",
                        "description": "Unstructured fields for the new log mapping. See unstructured_field_schema for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseMatchList:CseMatchList": {
            "description": "Provides a Sumologic CSE Match List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst matchList = new sumologic.CseMatchList(\"match_list\", {\n    defaultTtl: 10800,\n    description: \"Match list description\",\n    items: [{\n        description: \"IP address\",\n        expiration: \"2022-02-27T04:00:00\",\n        value: \"192.168.0.1\",\n    }],\n    targetColumn: \"SrcIp\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nmatch_list = sumologic.CseMatchList(\"matchList\",\n    default_ttl=10800,\n    description=\"Match list description\",\n    items=[sumologic.CseMatchListItemArgs(\n        description=\"IP address\",\n        expiration=\"2022-02-27T04:00:00\",\n        value=\"192.168.0.1\",\n    )],\n    target_column=\"SrcIp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var matchList = new SumoLogic.CseMatchList(\"matchList\", new()\n    {\n        DefaultTtl = 10800,\n        Description = \"Match list description\",\n        Items = new[]\n        {\n            new SumoLogic.Inputs.CseMatchListItemArgs\n            {\n                Description = \"IP address\",\n                Expiration = \"2022-02-27T04:00:00\",\n                Value = \"192.168.0.1\",\n            },\n        },\n        TargetColumn = \"SrcIp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseMatchList(ctx, \"matchList\", \u0026sumologic.CseMatchListArgs{\n\t\t\tDefaultTtl:  pulumi.Int(10800),\n\t\t\tDescription: pulumi.String(\"Match list description\"),\n\t\t\tItems: CseMatchListItemArray{\n\t\t\t\t\u0026CseMatchListItemArgs{\n\t\t\t\t\tDescription: pulumi.String(\"IP address\"),\n\t\t\t\t\tExpiration:  pulumi.String(\"2022-02-27T04:00:00\"),\n\t\t\t\t\tValue:       pulumi.String(\"192.168.0.1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTargetColumn: pulumi.String(\"SrcIp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseMatchList;\nimport com.pulumi.sumologic.CseMatchListArgs;\nimport com.pulumi.sumologic.inputs.CseMatchListItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var matchList = new CseMatchList(\"matchList\", CseMatchListArgs.builder()        \n            .defaultTtl(10800)\n            .description(\"Match list description\")\n            .items(CseMatchListItemArgs.builder()\n                .description(\"IP address\")\n                .expiration(\"2022-02-27T04:00:00\")\n                .value(\"192.168.0.1\")\n                .build())\n            .targetColumn(\"SrcIp\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  matchList:\n    type: sumologic:CseMatchList\n    properties:\n      defaultTtl: 10800\n      description: Match list description\n      items:\n        - description: IP address\n          expiration: 2022-02-27T04:00:00\n          value: 192.168.0.1\n      targetColumn: SrcIp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMatch List can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseMatchList:CseMatchList match_list id\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "The default time to live for match list items added through the UI. Specified in seconds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Match list item description.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseMatchListItem:CseMatchListItem"
                    },
                    "description": "List of match list items. See match_list_item schema for details.\n"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Match list name.\n"
                },
                "targetColumn": {
                    "type": "string",
                    "description": "Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)\n"
                }
            },
            "required": [
                "created",
                "createdBy",
                "description",
                "lastUpdated",
                "lastUpdatedBy",
                "name",
                "targetColumn"
            ],
            "inputProperties": {
                "defaultTtl": {
                    "type": "integer",
                    "description": "The default time to live for match list items added through the UI. Specified in seconds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Match list item description.\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseMatchListItem:CseMatchListItem"
                    },
                    "description": "List of match list items. See match_list_item schema for details.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Match list name.\n"
                },
                "targetColumn": {
                    "type": "string",
                    "description": "Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)\n"
                }
            },
            "requiredInputs": [
                "description",
                "targetColumn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseMatchList resources.\n",
                "properties": {
                    "created": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "defaultTtl": {
                        "type": "integer",
                        "description": "The default time to live for match list items added through the UI. Specified in seconds.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Match list item description.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseMatchListItem:CseMatchListItem"
                        },
                        "description": "List of match list items. See match_list_item schema for details.\n"
                    },
                    "lastUpdated": {
                        "type": "string"
                    },
                    "lastUpdatedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Match list name.\n"
                    },
                    "targetColumn": {
                        "type": "string",
                        "description": "Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseMatchRule:CseMatchRule": {
            "description": "Provides a Sumo Logic CSE [Match Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/03_Write_a_Match_Rule).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst matchRule = new sumologic.CseMatchRule(\"match_rule\", {\n    descriptionExpression: \"Signal description\",\n    enabled: true,\n    entitySelectors: [{\n        entityType: \"_ip\",\n        expression: \"srcDevice_ip\",\n    }],\n    expression: \"objectType = \\\"Network\\\"\",\n    isPrototype: false,\n    nameExpression: \"Signal name\",\n    severityMapping: {\n        default: 5,\n        type: \"constant\",\n    },\n    summaryExpression: \"Signal summary\",\n    tags: [\"_mitreAttackTactic:TA0009\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nmatch_rule = sumologic.CseMatchRule(\"matchRule\",\n    description_expression=\"Signal description\",\n    enabled=True,\n    entity_selectors=[sumologic.CseMatchRuleEntitySelectorArgs(\n        entity_type=\"_ip\",\n        expression=\"srcDevice_ip\",\n    )],\n    expression=\"objectType = \\\"Network\\\"\",\n    is_prototype=False,\n    name_expression=\"Signal name\",\n    severity_mapping=sumologic.CseMatchRuleSeverityMappingArgs(\n        default=5,\n        type=\"constant\",\n    ),\n    summary_expression=\"Signal summary\",\n    tags=[\"_mitreAttackTactic:TA0009\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var matchRule = new SumoLogic.CseMatchRule(\"matchRule\", new()\n    {\n        DescriptionExpression = \"Signal description\",\n        Enabled = true,\n        EntitySelectors = new[]\n        {\n            new SumoLogic.Inputs.CseMatchRuleEntitySelectorArgs\n            {\n                EntityType = \"_ip\",\n                Expression = \"srcDevice_ip\",\n            },\n        },\n        Expression = \"objectType = \\\"Network\\\"\",\n        IsPrototype = false,\n        NameExpression = \"Signal name\",\n        SeverityMapping = new SumoLogic.Inputs.CseMatchRuleSeverityMappingArgs\n        {\n            Default = 5,\n            Type = \"constant\",\n        },\n        SummaryExpression = \"Signal summary\",\n        Tags = new[]\n        {\n            \"_mitreAttackTactic:TA0009\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseMatchRule(ctx, \"matchRule\", \u0026sumologic.CseMatchRuleArgs{\n\t\t\tDescriptionExpression: pulumi.String(\"Signal description\"),\n\t\t\tEnabled:               pulumi.Bool(true),\n\t\t\tEntitySelectors: CseMatchRuleEntitySelectorArray{\n\t\t\t\t\u0026CseMatchRuleEntitySelectorArgs{\n\t\t\t\t\tEntityType: pulumi.String(\"_ip\"),\n\t\t\t\t\tExpression: pulumi.String(\"srcDevice_ip\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExpression:     pulumi.String(\"objectType = \\\"Network\\\"\"),\n\t\t\tIsPrototype:    pulumi.Bool(false),\n\t\t\tNameExpression: pulumi.String(\"Signal name\"),\n\t\t\tSeverityMapping: \u0026CseMatchRuleSeverityMappingArgs{\n\t\t\t\tDefault: pulumi.Int(5),\n\t\t\t\tType:    pulumi.String(\"constant\"),\n\t\t\t},\n\t\t\tSummaryExpression: pulumi.String(\"Signal summary\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_mitreAttackTactic:TA0009\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseMatchRule;\nimport com.pulumi.sumologic.CseMatchRuleArgs;\nimport com.pulumi.sumologic.inputs.CseMatchRuleEntitySelectorArgs;\nimport com.pulumi.sumologic.inputs.CseMatchRuleSeverityMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var matchRule = new CseMatchRule(\"matchRule\", CseMatchRuleArgs.builder()        \n            .descriptionExpression(\"Signal description\")\n            .enabled(true)\n            .entitySelectors(CseMatchRuleEntitySelectorArgs.builder()\n                .entityType(\"_ip\")\n                .expression(\"srcDevice_ip\")\n                .build())\n            .expression(\"objectType = \\\"Network\\\"\")\n            .isPrototype(false)\n            .nameExpression(\"Signal name\")\n            .severityMapping(CseMatchRuleSeverityMappingArgs.builder()\n                .default_(5)\n                .type(\"constant\")\n                .build())\n            .summaryExpression(\"Signal summary\")\n            .tags(\"_mitreAttackTactic:TA0009\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  matchRule:\n    type: sumologic:CseMatchRule\n    properties:\n      descriptionExpression: Signal description\n      enabled: true\n      entitySelectors:\n        - entityType: _ip\n          expression: srcDevice_ip\n      expression: objectType = \"Network\"\n      isPrototype: false\n      nameExpression: Signal name\n      severityMapping:\n        default: 5\n        type: constant\n      summaryExpression: Signal summary\n      tags:\n        - _mitreAttackTactic:TA0009\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nMatch Rules can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseMatchRule:CseMatchRule match_rule id\n```\n\n ",
            "properties": {
                "descriptionExpression": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseMatchRuleEntitySelector:CseMatchRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule\n"
                },
                "nameExpression": {
                    "type": "string",
                    "description": "The name of the generated Signals\n"
                },
                "severityMapping": {
                    "$ref": "#/types/sumologic:index/CseMatchRuleSeverityMapping:CseMatchRuleSeverityMapping",
                    "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                }
            },
            "required": [
                "descriptionExpression",
                "enabled",
                "entitySelectors",
                "expression",
                "name",
                "nameExpression",
                "severityMapping"
            ],
            "inputProperties": {
                "descriptionExpression": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseMatchRuleEntitySelector:CseMatchRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule\n"
                },
                "nameExpression": {
                    "type": "string",
                    "description": "The name of the generated Signals\n"
                },
                "severityMapping": {
                    "$ref": "#/types/sumologic:index/CseMatchRuleSeverityMapping:CseMatchRuleSeverityMapping",
                    "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                }
            },
            "requiredInputs": [
                "descriptionExpression",
                "enabled",
                "entitySelectors",
                "expression",
                "nameExpression",
                "severityMapping"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseMatchRule resources.\n",
                "properties": {
                    "descriptionExpression": {
                        "type": "string",
                        "description": "The description of the generated Signals\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should generate Signals\n"
                    },
                    "entitySelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseMatchRuleEntitySelector:CseMatchRuleEntitySelector"
                        },
                        "description": "The entities to generate Signals on\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression for which records to match on\n"
                    },
                    "isPrototype": {
                        "type": "boolean",
                        "description": "Whether the generated Signals should be prototype Signals\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rule\n"
                    },
                    "nameExpression": {
                        "type": "string",
                        "description": "The name of the generated Signals\n"
                    },
                    "severityMapping": {
                        "$ref": "#/types/sumologic:index/CseMatchRuleSeverityMapping:CseMatchRuleSeverityMapping",
                        "description": "The configuration of how the severity of the Signals should be mapped from the Records\n"
                    },
                    "summaryExpression": {
                        "type": "string",
                        "description": "The summary of the generated Signals\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the generated Signals\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseNetworkBlock:CseNetworkBlock": {
            "description": "Provides a Sumo Logic CSE Network Block.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst networkBlock = new sumologic.CseNetworkBlock(\"network_block\", {\n    addressBlock: \"10.0.1.0/26\",\n    internal: true,\n    label: \"network block from terraform\",\n    suppressesSignals: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nnetwork_block = sumologic.CseNetworkBlock(\"networkBlock\",\n    address_block=\"10.0.1.0/26\",\n    internal=True,\n    label=\"network block from terraform\",\n    suppresses_signals=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networkBlock = new SumoLogic.CseNetworkBlock(\"networkBlock\", new()\n    {\n        AddressBlock = \"10.0.1.0/26\",\n        Internal = true,\n        Label = \"network block from terraform\",\n        SuppressesSignals = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseNetworkBlock(ctx, \"networkBlock\", \u0026sumologic.CseNetworkBlockArgs{\n\t\t\tAddressBlock:      pulumi.String(\"10.0.1.0/26\"),\n\t\t\tInternal:          pulumi.Bool(true),\n\t\t\tLabel:             pulumi.String(\"network block from terraform\"),\n\t\t\tSuppressesSignals: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseNetworkBlock;\nimport com.pulumi.sumologic.CseNetworkBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var networkBlock = new CseNetworkBlock(\"networkBlock\", CseNetworkBlockArgs.builder()        \n            .addressBlock(\"10.0.1.0/26\")\n            .internal(\"true\")\n            .label(\"network block from terraform\")\n            .suppressesSignals(\"false\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  networkBlock:\n    type: sumologic:CseNetworkBlock\n    properties:\n      addressBlock: 10.0.1.0/26\n      internal: true\n      label: network block from terraform\n      suppressesSignals: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork Block can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseNetworkBlock:CseNetworkBlock network_block id\n```\n\n ",
            "properties": {
                "addressBlock": {
                    "type": "string",
                    "description": "The address block.\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Internal flag.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The displayable label of the address block.\n"
                },
                "suppressesSignals": {
                    "type": "boolean",
                    "description": "Suppresses signal flag.\n"
                }
            },
            "required": [
                "addressBlock"
            ],
            "inputProperties": {
                "addressBlock": {
                    "type": "string",
                    "description": "The address block.\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "Internal flag.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The displayable label of the address block.\n"
                },
                "suppressesSignals": {
                    "type": "boolean",
                    "description": "Suppresses signal flag.\n"
                }
            },
            "requiredInputs": [
                "addressBlock"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseNetworkBlock resources.\n",
                "properties": {
                    "addressBlock": {
                        "type": "string",
                        "description": "The address block.\n"
                    },
                    "internal": {
                        "type": "boolean",
                        "description": "Internal flag.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The displayable label of the address block.\n"
                    },
                    "suppressesSignals": {
                        "type": "boolean",
                        "description": "Suppresses signal flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression": {
            "description": "Provides a CSE Rule Tuning Expression.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst ruleTuningExpression = new sumologic.CseRuleTuningExpression(\"rule_tuning_expression\", {\n    description: \"New Rule Tuning Description\",\n    enabled: true,\n    exclude: true,\n    expression: \"accountId = 1234\",\n    isGlobal: false,\n    ruleIds: [\"LEGACY-S00084\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nrule_tuning_expression = sumologic.CseRuleTuningExpression(\"ruleTuningExpression\",\n    description=\"New Rule Tuning Description\",\n    enabled=True,\n    exclude=True,\n    expression=\"accountId = 1234\",\n    is_global=False,\n    rule_ids=[\"LEGACY-S00084\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ruleTuningExpression = new SumoLogic.CseRuleTuningExpression(\"ruleTuningExpression\", new()\n    {\n        Description = \"New Rule Tuning Description\",\n        Enabled = true,\n        Exclude = true,\n        Expression = \"accountId = 1234\",\n        IsGlobal = false,\n        RuleIds = new[]\n        {\n            \"LEGACY-S00084\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseRuleTuningExpression(ctx, \"ruleTuningExpression\", \u0026sumologic.CseRuleTuningExpressionArgs{\n\t\t\tDescription: pulumi.String(\"New Rule Tuning Description\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tExclude:     pulumi.Bool(true),\n\t\t\tExpression:  pulumi.String(\"accountId = 1234\"),\n\t\t\tIsGlobal:    pulumi.Bool(false),\n\t\t\tRuleIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"LEGACY-S00084\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseRuleTuningExpression;\nimport com.pulumi.sumologic.CseRuleTuningExpressionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ruleTuningExpression = new CseRuleTuningExpression(\"ruleTuningExpression\", CseRuleTuningExpressionArgs.builder()        \n            .description(\"New Rule Tuning Description\")\n            .enabled(\"true\")\n            .exclude(\"true\")\n            .expression(\"accountId = 1234\")\n            .isGlobal(\"false\")\n            .ruleIds(\"LEGACY-S00084\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ruleTuningExpression:\n    type: sumologic:CseRuleTuningExpression\n    properties:\n      description: New Rule Tuning Description\n      enabled: true\n      exclude: true\n      expression: accountId = 1234\n      isGlobal: false\n      ruleIds:\n        - LEGACY-S00084\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRule tuning expression can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression rule_tuning_expression id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the rule tuning expression.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "exclude": {
                    "type": "boolean",
                    "description": "Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "Expression to match.\n"
                },
                "isGlobal": {
                    "type": "boolean",
                    "description": "Set to true if this tuning expression should be applied to all rules.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule tuning expression.\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)\n"
                }
            },
            "required": [
                "description",
                "enabled",
                "exclude",
                "expression",
                "isGlobal",
                "name",
                "ruleIds"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the rule tuning expression.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "exclude": {
                    "type": "boolean",
                    "description": "Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "Expression to match.\n"
                },
                "isGlobal": {
                    "type": "boolean",
                    "description": "Set to true if this tuning expression should be applied to all rules.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule tuning expression.\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)\n"
                }
            },
            "requiredInputs": [
                "description",
                "enabled",
                "exclude",
                "expression",
                "isGlobal",
                "ruleIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseRuleTuningExpression resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the rule tuning expression.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "exclude": {
                        "type": "boolean",
                        "description": "Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "Expression to match.\n"
                    },
                    "isGlobal": {
                        "type": "boolean",
                        "description": "Set to true if this tuning expression should be applied to all rules.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule tuning expression.\n"
                    },
                    "ruleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/cseThresholdRule:CseThresholdRule": {
            "description": "Provides a Sumo Logic CSE [Threshold Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/05_Write_a_Threshold_Rule).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thresholdRule = new sumologic.CseThresholdRule(\"threshold_rule\", {\n    countDistinct: true,\n    countField: \"dstDevice_hostname\",\n    description: \"Signal description\",\n    enabled: true,\n    entitySelectors: [{\n        entityType: \"_ip\",\n        expression: \"srcDevice_ip\",\n    }],\n    expression: \"objectType = \\\"Network\\\"\",\n    groupByFields: [\"dstDevice_hostname\"],\n    isPrototype: false,\n    limit: 1000,\n    severity: 5,\n    summaryExpression: \"Signal summary\",\n    tags: [\"_mitreAttackTactic:TA0009\"],\n    windowSize: \"T30M\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthreshold_rule = sumologic.CseThresholdRule(\"thresholdRule\",\n    count_distinct=True,\n    count_field=\"dstDevice_hostname\",\n    description=\"Signal description\",\n    enabled=True,\n    entity_selectors=[sumologic.CseThresholdRuleEntitySelectorArgs(\n        entity_type=\"_ip\",\n        expression=\"srcDevice_ip\",\n    )],\n    expression=\"objectType = \\\"Network\\\"\",\n    group_by_fields=[\"dstDevice_hostname\"],\n    is_prototype=False,\n    limit=1000,\n    severity=5,\n    summary_expression=\"Signal summary\",\n    tags=[\"_mitreAttackTactic:TA0009\"],\n    window_size=\"T30M\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thresholdRule = new SumoLogic.CseThresholdRule(\"thresholdRule\", new()\n    {\n        CountDistinct = true,\n        CountField = \"dstDevice_hostname\",\n        Description = \"Signal description\",\n        Enabled = true,\n        EntitySelectors = new[]\n        {\n            new SumoLogic.Inputs.CseThresholdRuleEntitySelectorArgs\n            {\n                EntityType = \"_ip\",\n                Expression = \"srcDevice_ip\",\n            },\n        },\n        Expression = \"objectType = \\\"Network\\\"\",\n        GroupByFields = new[]\n        {\n            \"dstDevice_hostname\",\n        },\n        IsPrototype = false,\n        Limit = 1000,\n        Severity = 5,\n        SummaryExpression = \"Signal summary\",\n        Tags = new[]\n        {\n            \"_mitreAttackTactic:TA0009\",\n        },\n        WindowSize = \"T30M\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewCseThresholdRule(ctx, \"thresholdRule\", \u0026sumologic.CseThresholdRuleArgs{\n\t\t\tCountDistinct: pulumi.Bool(true),\n\t\t\tCountField:    pulumi.String(\"dstDevice_hostname\"),\n\t\t\tDescription:   pulumi.String(\"Signal description\"),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tEntitySelectors: CseThresholdRuleEntitySelectorArray{\n\t\t\t\t\u0026CseThresholdRuleEntitySelectorArgs{\n\t\t\t\t\tEntityType: pulumi.String(\"_ip\"),\n\t\t\t\t\tExpression: pulumi.String(\"srcDevice_ip\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tExpression: pulumi.String(\"objectType = \\\"Network\\\"\"),\n\t\t\tGroupByFields: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dstDevice_hostname\"),\n\t\t\t},\n\t\t\tIsPrototype:       pulumi.Bool(false),\n\t\t\tLimit:             pulumi.Int(1000),\n\t\t\tSeverity:          pulumi.Int(5),\n\t\t\tSummaryExpression: pulumi.String(\"Signal summary\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"_mitreAttackTactic:TA0009\"),\n\t\t\t},\n\t\t\tWindowSize: pulumi.String(\"T30M\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.CseThresholdRule;\nimport com.pulumi.sumologic.CseThresholdRuleArgs;\nimport com.pulumi.sumologic.inputs.CseThresholdRuleEntitySelectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var thresholdRule = new CseThresholdRule(\"thresholdRule\", CseThresholdRuleArgs.builder()        \n            .countDistinct(true)\n            .countField(\"dstDevice_hostname\")\n            .description(\"Signal description\")\n            .enabled(true)\n            .entitySelectors(CseThresholdRuleEntitySelectorArgs.builder()\n                .entityType(\"_ip\")\n                .expression(\"srcDevice_ip\")\n                .build())\n            .expression(\"objectType = \\\"Network\\\"\")\n            .groupByFields(\"dstDevice_hostname\")\n            .isPrototype(false)\n            .limit(1000)\n            .severity(5)\n            .summaryExpression(\"Signal summary\")\n            .tags(\"_mitreAttackTactic:TA0009\")\n            .windowSize(\"T30M\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thresholdRule:\n    type: sumologic:CseThresholdRule\n    properties:\n      countDistinct: true\n      countField: dstDevice_hostname\n      description: Signal description\n      enabled: true\n      entitySelectors:\n        - entityType: _ip\n          expression: srcDevice_ip\n      expression: objectType = \"Network\"\n      groupByFields:\n        - dstDevice_hostname\n      isPrototype: false\n      limit: 1000\n      severity: 5\n      summaryExpression: Signal summary\n      tags:\n        - _mitreAttackTactic:TA0009\n      windowSize: T30M\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThreshold Rules can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/cseThresholdRule:CseThresholdRule threshold_rule id\n```\n\n ",
            "properties": {
                "countDistinct": {
                    "type": "boolean",
                    "description": "Whether to count distinct values of a field, as opposed to just counting the number of records\n"
                },
                "countField": {
                    "type": "string",
                    "description": "The field to count if `count_distinct` is set to true\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseThresholdRuleEntitySelector:CseThresholdRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "A Signal will be fired when this many records/distinct field values are matched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule and the generated Signals\n"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the generated Signals\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "required": [
                "description",
                "enabled",
                "entitySelectors",
                "expression",
                "limit",
                "name",
                "severity",
                "windowSize"
            ],
            "inputProperties": {
                "countDistinct": {
                    "type": "boolean",
                    "description": "Whether to count distinct values of a field, as opposed to just counting the number of records\n"
                },
                "countField": {
                    "type": "string",
                    "description": "The field to count if `count_distinct` is set to true\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the generated Signals\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the rule should generate Signals\n"
                },
                "entitySelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/CseThresholdRuleEntitySelector:CseThresholdRuleEntitySelector"
                    },
                    "description": "The entities to generate Signals on\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression for which records to match on\n"
                },
                "groupByFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of fields to group records by\n"
                },
                "isPrototype": {
                    "type": "boolean",
                    "description": "Whether the generated Signals should be prototype Signals\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "A Signal will be fired when this many records/distinct field values are matched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Rule and the generated Signals\n"
                },
                "severity": {
                    "type": "integer",
                    "description": "The severity of the generated Signals\n"
                },
                "summaryExpression": {
                    "type": "string",
                    "description": "The summary of the generated Signals\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags of the generated Signals\n"
                },
                "windowSize": {
                    "type": "string",
                    "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                }
            },
            "requiredInputs": [
                "description",
                "enabled",
                "entitySelectors",
                "expression",
                "limit",
                "severity",
                "windowSize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CseThresholdRule resources.\n",
                "properties": {
                    "countDistinct": {
                        "type": "boolean",
                        "description": "Whether to count distinct values of a field, as opposed to just counting the number of records\n"
                    },
                    "countField": {
                        "type": "string",
                        "description": "The field to count if `count_distinct` is set to true\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the generated Signals\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the rule should generate Signals\n"
                    },
                    "entitySelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/CseThresholdRuleEntitySelector:CseThresholdRuleEntitySelector"
                        },
                        "description": "The entities to generate Signals on\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression for which records to match on\n"
                    },
                    "groupByFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fields to group records by\n"
                    },
                    "isPrototype": {
                        "type": "boolean",
                        "description": "Whether the generated Signals should be prototype Signals\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "A Signal will be fired when this many records/distinct field values are matched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Rule and the generated Signals\n"
                    },
                    "severity": {
                        "type": "integer",
                        "description": "The severity of the generated Signals\n"
                    },
                    "summaryExpression": {
                        "type": "string",
                        "description": "The summary of the generated Signals\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags of the generated Signals\n"
                    },
                    "windowSize": {
                        "type": "string",
                        "description": "How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/dashboard:Dashboard": {
            "description": "Provides a [Sumologic Dashboard (New)][1].\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = sumologic.getPersonalFolder({});\nconst api_dashboard = new sumologic.Dashboard(\"api-dashboard\", {\n    title: \"Api Health Dashboard\",\n    description: \"Demo dashboard description\",\n    folderId: personalFolder.then(personalFolder =\u003e personalFolder.id),\n    refreshInterval: 120,\n    theme: \"Dark\",\n    timeRange: {\n        beginBoundedTimeRange: {\n            from: {\n                literalTimeRange: {\n                    rangeName: \"today\",\n                },\n            },\n        },\n    },\n    topologyLabelMap: {\n        datas: [\n            {\n                label: \"cluster\",\n                values: [\"api-prod\"],\n            },\n            {\n                label: \"namespace\",\n                values: [\"default\"],\n            },\n        ],\n    },\n    domain: \"app\",\n    panels: [\n        {\n            textPanel: {\n                key: \"text-panel-01\",\n                title: \"Api Health\",\n                visualSettings: JSON.stringify({\n                    text: {\n                        verticalAlignment: \"top\",\n                        horizontalAlignment: \"left\",\n                        fontSize: 12,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                text: `## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n`,\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"search-panel-01\",\n                title: \"Api Errors by Host\",\n                description: \"Errors in api service since last 12 hours\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"timeSeries\",\n                        type: \"area\",\n                        displayType: \"stacked\",\n                        markerSize: 5,\n                        lineDashType: \"solid\",\n                        markerType: \"square\",\n                        lineThickness: 1,\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                    legend: {\n                        enabled: true,\n                        verticalAlign: \"bottom\",\n                        fontSize: 12,\n                        maxHeight: 50,\n                        showAsTable: false,\n                        wrap: true,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [{\n                    queryString: \"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                    queryType: \"Logs\",\n                    queryKey: \"A\",\n                }],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            relativeTimeRange: {\n                                relativeTime: \"-12h\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"metrics-panel-01\",\n                title: \"Api 5xx Response Count\",\n                description: \"Count of 5xx response from api service\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"distribution\",\n                        type: \"pie\",\n                        displayType: \"default\",\n                        fillOpacity: 1,\n                        startAngle: 270,\n                        innerRadius: `40%`,\n                        maxNumOfSlices: 10,\n                        aggregationType: \"sum\",\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [{\n                    queryString: \"_sourceCategory=api metric=Api-5xx\",\n                    queryType: \"Metrics\",\n                    queryKey: \"A\",\n                    metricsQueryMode: \"Advanced\",\n                }],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            literalTimeRange: {\n                                rangeName: \"today\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        {\n            sumoSearchPanel: {\n                key: \"metrics-panel-02\",\n                title: \"CPU Utilization\",\n                description: \"CPU utilization in api service\",\n                visualSettings: JSON.stringify({\n                    general: {\n                        mode: \"timeSeries\",\n                        type: \"line\",\n                        displayType: \"smooth\",\n                        markerSize: 5,\n                        lineDashType: \"dashDot\",\n                        markerType: \"none\",\n                        lineThickness: 1,\n                    },\n                    title: {\n                        fontSize: 14,\n                    },\n                }),\n                keepVisualSettingsConsistentWithParent: true,\n                queries: [\n                    {\n                        queryString: \"metric=Proc_CPU nite-api-1\",\n                        queryType: \"Metrics\",\n                        queryKey: \"A\",\n                        metricsQueryMode: \"Basic\",\n                        metricsQueryData: {\n                            metric: \"Proc_CPU\",\n                            filters: [{\n                                key: \"_sourcehost\",\n                                negation: false,\n                                value: \"nite-api-1\",\n                            }],\n                            aggregationType: \"None\",\n                        },\n                    },\n                    {\n                        queryString: \"metric=Proc_CPU nite-api-2\",\n                        queryType: \"Metrics\",\n                        queryKey: \"B\",\n                        metricsQueryMode: \"Basic\",\n                        metricsQueryData: {\n                            metric: \"Proc_CPU\",\n                            filters: [{\n                                key: \"_sourcehost\",\n                                negation: false,\n                                value: \"nite-api-2\",\n                            }],\n                            aggregationType: \"None\",\n                        },\n                    },\n                ],\n                timeRange: {\n                    beginBoundedTimeRange: {\n                        from: {\n                            relativeTimeRange: {\n                                relativeTime: \"-1h\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    ],\n    layout: {\n        grid: {\n            layoutStructures: [\n                {\n                    key: \"text-panel-01\",\n                    structure: \"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                },\n                {\n                    key: \"search-panel-01\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                },\n                {\n                    key: \"metrics-panel-01\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                },\n                {\n                    key: \"metrics-panel-02\",\n                    structure: \"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                },\n            ],\n        },\n    },\n    variables: [{\n        name: \"_sourceHost\",\n        displayName: \"Source Host\",\n        defaultValue: \"nite-api-1\",\n        sourceDefinition: {\n            csvVariableSourceDefinition: {\n                values: \"nite-api-1,nite-api-2\",\n            },\n        },\n        allowMultiSelect: true,\n        includeAllOption: true,\n        hideFromUi: false,\n    }],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\napi_dashboard = sumologic.Dashboard(\"api-dashboard\",\n    title=\"Api Health Dashboard\",\n    description=\"Demo dashboard description\",\n    folder_id=personal_folder.id,\n    refresh_interval=120,\n    theme=\"Dark\",\n    time_range=sumologic.DashboardTimeRangeArgs(\n        begin_bounded_time_range=sumologic.DashboardTimeRangeBeginBoundedTimeRangeArgs(\n            from_=sumologic.DashboardTimeRangeBeginBoundedTimeRangeFromArgs(\n                literal_time_range=sumologic.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs(\n                    range_name=\"today\",\n                ),\n            ),\n        ),\n    ),\n    topology_label_map=sumologic.DashboardTopologyLabelMapArgs(\n        datas=[\n            sumologic.DashboardTopologyLabelMapDataArgs(\n                label=\"cluster\",\n                values=[\"api-prod\"],\n            ),\n            sumologic.DashboardTopologyLabelMapDataArgs(\n                label=\"namespace\",\n                values=[\"default\"],\n            ),\n        ],\n    ),\n    domain=\"app\",\n    panels=[\n        sumologic.DashboardPanelArgs(\n            text_panel=sumologic.DashboardPanelTextPanelArgs(\n                key=\"text-panel-01\",\n                title=\"Api Health\",\n                visual_settings=json.dumps({\n                    \"text\": {\n                        \"verticalAlignment\": \"top\",\n                        \"horizontalAlignment\": \"left\",\n                        \"fontSize\": 12,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                text=\"\"\"## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n\"\"\",\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"search-panel-01\",\n                title=\"Api Errors by Host\",\n                description=\"Errors in api service since last 12 hours\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"timeSeries\",\n                        \"type\": \"area\",\n                        \"displayType\": \"stacked\",\n                        \"markerSize\": 5,\n                        \"lineDashType\": \"solid\",\n                        \"markerType\": \"square\",\n                        \"lineThickness\": 1,\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                    \"legend\": {\n                        \"enabled\": True,\n                        \"verticalAlign\": \"bottom\",\n                        \"fontSize\": 12,\n                        \"maxHeight\": 50,\n                        \"showAsTable\": False,\n                        \"wrap\": True,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                    query_string=\"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                    query_type=\"Logs\",\n                    query_key=\"A\",\n                )],\n                time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeArgs(\n                    begin_bounded_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs(\n                        from_=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs(\n                            relative_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs(\n                                relative_time=\"-12h\",\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"metrics-panel-01\",\n                title=\"Api 5xx Response Count\",\n                description=\"Count of 5xx response from api service\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"distribution\",\n                        \"type\": \"pie\",\n                        \"displayType\": \"default\",\n                        \"fillOpacity\": 1,\n                        \"startAngle\": 270,\n                        \"innerRadius\": \"40%\",\n                        \"maxNumOfSlices\": 10,\n                        \"aggregationType\": \"sum\",\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                    query_string=\"_sourceCategory=api metric=Api-5xx\",\n                    query_type=\"Metrics\",\n                    query_key=\"A\",\n                    metrics_query_mode=\"Advanced\",\n                )],\n                time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeArgs(\n                    begin_bounded_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs(\n                        from_=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs(\n                            literal_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs(\n                                range_name=\"today\",\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n        sumologic.DashboardPanelArgs(\n            sumo_search_panel=sumologic.DashboardPanelSumoSearchPanelArgs(\n                key=\"metrics-panel-02\",\n                title=\"CPU Utilization\",\n                description=\"CPU utilization in api service\",\n                visual_settings=json.dumps({\n                    \"general\": {\n                        \"mode\": \"timeSeries\",\n                        \"type\": \"line\",\n                        \"displayType\": \"smooth\",\n                        \"markerSize\": 5,\n                        \"lineDashType\": \"dashDot\",\n                        \"markerType\": \"none\",\n                        \"lineThickness\": 1,\n                    },\n                    \"title\": {\n                        \"fontSize\": 14,\n                    },\n                }),\n                keep_visual_settings_consistent_with_parent=True,\n                queries=[\n                    sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                        query_string=\"metric=Proc_CPU nite-api-1\",\n                        query_type=\"Metrics\",\n                        query_key=\"A\",\n                        metrics_query_mode=\"Basic\",\n                        metrics_query_data=sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs(\n                            metric=\"Proc_CPU\",\n                            filters=[sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs(\n                                key=\"_sourcehost\",\n                                negation=False,\n                                value=\"nite-api-1\",\n                            )],\n                            aggregation_type=\"None\",\n                        ),\n                    ),\n                    sumologic.DashboardPanelSumoSearchPanelQueryArgs(\n                        query_string=\"metric=Proc_CPU nite-api-2\",\n                        query_type=\"Metrics\",\n                        query_key=\"B\",\n                        metrics_query_mode=\"Basic\",\n                        metrics_query_data=sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs(\n                            metric=\"Proc_CPU\",\n                            filters=[sumologic.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs(\n                                key=\"_sourcehost\",\n                                negation=False,\n                                value=\"nite-api-2\",\n                            )],\n                            aggregation_type=\"None\",\n                        ),\n                    ),\n                ],\n                time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeArgs(\n                    begin_bounded_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs(\n                        from_=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs(\n                            relative_time_range=sumologic.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs(\n                                relative_time=\"-1h\",\n                            ),\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    ],\n    layout=sumologic.DashboardLayoutArgs(\n        grid=sumologic.DashboardLayoutGridArgs(\n            layout_structures=[\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"text-panel-01\",\n                    structure=\"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"search-panel-01\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"metrics-panel-01\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                ),\n                sumologic.DashboardLayoutGridLayoutStructureArgs(\n                    key=\"metrics-panel-02\",\n                    structure=\"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                ),\n            ],\n        ),\n    ),\n    variables=[sumologic.DashboardVariableArgs(\n        name=\"_sourceHost\",\n        display_name=\"Source Host\",\n        default_value=\"nite-api-1\",\n        source_definition=sumologic.DashboardVariableSourceDefinitionArgs(\n            csv_variable_source_definition=sumologic.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs(\n                values=\"nite-api-1,nite-api-2\",\n            ),\n        ),\n        allow_multi_select=True,\n        include_all_option=True,\n        hide_from_ui=False,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var personalFolder = SumoLogic.GetPersonalFolder.Invoke();\n\n    var api_dashboard = new SumoLogic.Dashboard(\"api-dashboard\", new()\n    {\n        Title = \"Api Health Dashboard\",\n        Description = \"Demo dashboard description\",\n        FolderId = personalFolder.Apply(getPersonalFolderResult =\u003e getPersonalFolderResult.Id),\n        RefreshInterval = 120,\n        Theme = \"Dark\",\n        TimeRange = new SumoLogic.Inputs.DashboardTimeRangeArgs\n        {\n            BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeArgs\n            {\n                From = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromArgs\n                {\n                    LiteralTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs\n                    {\n                        RangeName = \"today\",\n                    },\n                },\n            },\n        },\n        TopologyLabelMap = new SumoLogic.Inputs.DashboardTopologyLabelMapArgs\n        {\n            Datas = new[]\n            {\n                new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs\n                {\n                    Label = \"cluster\",\n                    Values = new[]\n                    {\n                        \"api-prod\",\n                    },\n                },\n                new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs\n                {\n                    Label = \"namespace\",\n                    Values = new[]\n                    {\n                        \"default\",\n                    },\n                },\n            },\n        },\n        Domain = \"app\",\n        Panels = new[]\n        {\n            new SumoLogic.Inputs.DashboardPanelArgs\n            {\n                TextPanel = new SumoLogic.Inputs.DashboardPanelTextPanelArgs\n                {\n                    Key = \"text-panel-01\",\n                    Title = \"Api Health\",\n                    VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"text\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"verticalAlignment\"] = \"top\",\n                            [\"horizontalAlignment\"] = \"left\",\n                            [\"fontSize\"] = 12,\n                        },\n                    }),\n                    KeepVisualSettingsConsistentWithParent = true,\n                    Text = @\"## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n\",\n                },\n            },\n            new SumoLogic.Inputs.DashboardPanelArgs\n            {\n                SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                {\n                    Key = \"search-panel-01\",\n                    Title = \"Api Errors by Host\",\n                    Description = \"Errors in api service since last 12 hours\",\n                    VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"general\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"mode\"] = \"timeSeries\",\n                            [\"type\"] = \"area\",\n                            [\"displayType\"] = \"stacked\",\n                            [\"markerSize\"] = 5,\n                            [\"lineDashType\"] = \"solid\",\n                            [\"markerType\"] = \"square\",\n                            [\"lineThickness\"] = 1,\n                        },\n                        [\"title\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"fontSize\"] = 14,\n                        },\n                        [\"legend\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"enabled\"] = true,\n                            [\"verticalAlign\"] = \"bottom\",\n                            [\"fontSize\"] = 12,\n                            [\"maxHeight\"] = 50,\n                            [\"showAsTable\"] = false,\n                            [\"wrap\"] = true,\n                        },\n                    }),\n                    KeepVisualSettingsConsistentWithParent = true,\n                    Queries = new[]\n                    {\n                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                        {\n                            QueryString = \"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\",\n                            QueryType = \"Logs\",\n                            QueryKey = \"A\",\n                        },\n                    },\n                    TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                    {\n                        BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                        {\n                            From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                            {\n                                RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs\n                                {\n                                    RelativeTime = \"-12h\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            new SumoLogic.Inputs.DashboardPanelArgs\n            {\n                SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                {\n                    Key = \"metrics-panel-01\",\n                    Title = \"Api 5xx Response Count\",\n                    Description = \"Count of 5xx response from api service\",\n                    VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"general\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"mode\"] = \"distribution\",\n                            [\"type\"] = \"pie\",\n                            [\"displayType\"] = \"default\",\n                            [\"fillOpacity\"] = 1,\n                            [\"startAngle\"] = 270,\n                            [\"innerRadius\"] = \"40%\",\n                            [\"maxNumOfSlices\"] = 10,\n                            [\"aggregationType\"] = \"sum\",\n                        },\n                        [\"title\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"fontSize\"] = 14,\n                        },\n                    }),\n                    KeepVisualSettingsConsistentWithParent = true,\n                    Queries = new[]\n                    {\n                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                        {\n                            QueryString = \"_sourceCategory=api metric=Api-5xx\",\n                            QueryType = \"Metrics\",\n                            QueryKey = \"A\",\n                            MetricsQueryMode = \"Advanced\",\n                        },\n                    },\n                    TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                    {\n                        BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                        {\n                            From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                            {\n                                LiteralTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs\n                                {\n                                    RangeName = \"today\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            new SumoLogic.Inputs.DashboardPanelArgs\n            {\n                SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs\n                {\n                    Key = \"metrics-panel-02\",\n                    Title = \"CPU Utilization\",\n                    Description = \"CPU utilization in api service\",\n                    VisualSettings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"general\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"mode\"] = \"timeSeries\",\n                            [\"type\"] = \"line\",\n                            [\"displayType\"] = \"smooth\",\n                            [\"markerSize\"] = 5,\n                            [\"lineDashType\"] = \"dashDot\",\n                            [\"markerType\"] = \"none\",\n                            [\"lineThickness\"] = 1,\n                        },\n                        [\"title\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"fontSize\"] = 14,\n                        },\n                    }),\n                    KeepVisualSettingsConsistentWithParent = true,\n                    Queries = new[]\n                    {\n                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                        {\n                            QueryString = \"metric=Proc_CPU nite-api-1\",\n                            QueryType = \"Metrics\",\n                            QueryKey = \"A\",\n                            MetricsQueryMode = \"Basic\",\n                            MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs\n                            {\n                                Metric = \"Proc_CPU\",\n                                Filters = new[]\n                                {\n                                    new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs\n                                    {\n                                        Key = \"_sourcehost\",\n                                        Negation = false,\n                                        Value = \"nite-api-1\",\n                                    },\n                                },\n                                AggregationType = \"None\",\n                            },\n                        },\n                        new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs\n                        {\n                            QueryString = \"metric=Proc_CPU nite-api-2\",\n                            QueryType = \"Metrics\",\n                            QueryKey = \"B\",\n                            MetricsQueryMode = \"Basic\",\n                            MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs\n                            {\n                                Metric = \"Proc_CPU\",\n                                Filters = new[]\n                                {\n                                    new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs\n                                    {\n                                        Key = \"_sourcehost\",\n                                        Negation = false,\n                                        Value = \"nite-api-2\",\n                                    },\n                                },\n                                AggregationType = \"None\",\n                            },\n                        },\n                    },\n                    TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs\n                    {\n                        BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs\n                        {\n                            From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs\n                            {\n                                RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs\n                                {\n                                    RelativeTime = \"-1h\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        Layout = new SumoLogic.Inputs.DashboardLayoutArgs\n        {\n            Grid = new SumoLogic.Inputs.DashboardLayoutGridArgs\n            {\n                LayoutStructures = new[]\n                {\n                    new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                    {\n                        Key = \"text-panel-01\",\n                        Structure = \"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\",\n                    },\n                    new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                    {\n                        Key = \"search-panel-01\",\n                        Structure = \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\",\n                    },\n                    new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                    {\n                        Key = \"metrics-panel-01\",\n                        Structure = \"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\",\n                    },\n                    new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs\n                    {\n                        Key = \"metrics-panel-02\",\n                        Structure = \"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\",\n                    },\n                },\n            },\n        },\n        Variables = new[]\n        {\n            new SumoLogic.Inputs.DashboardVariableArgs\n            {\n                Name = \"_sourceHost\",\n                DisplayName = \"Source Host\",\n                DefaultValue = \"nite-api-1\",\n                SourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionArgs\n                {\n                    CsvVariableSourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs\n                    {\n                        Values = \"nite-api-1,nite-api-2\",\n                    },\n                },\n                AllowMultiSelect = true,\n                IncludeAllOption = true,\n                HideFromUi = false,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpersonalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"text\": map[string]interface{}{\n\t\t\t\t\"verticalAlignment\":   \"top\",\n\t\t\t\t\"horizontalAlignment\": \"left\",\n\t\t\t\t\"fontSize\":            12,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"general\": map[string]interface{}{\n\t\t\t\t\"mode\":          \"timeSeries\",\n\t\t\t\t\"type\":          \"area\",\n\t\t\t\t\"displayType\":   \"stacked\",\n\t\t\t\t\"markerSize\":    5,\n\t\t\t\t\"lineDashType\":  \"solid\",\n\t\t\t\t\"markerType\":    \"square\",\n\t\t\t\t\"lineThickness\": 1,\n\t\t\t},\n\t\t\t\"title\": map[string]interface{}{\n\t\t\t\t\"fontSize\": 14,\n\t\t\t},\n\t\t\t\"legend\": map[string]interface{}{\n\t\t\t\t\"enabled\":       true,\n\t\t\t\t\"verticalAlign\": \"bottom\",\n\t\t\t\t\"fontSize\":      12,\n\t\t\t\t\"maxHeight\":     50,\n\t\t\t\t\"showAsTable\":   false,\n\t\t\t\t\"wrap\":          true,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\ttmpJSON2, err := json.Marshal(map[string]interface{}{\n\t\t\t\"general\": map[string]interface{}{\n\t\t\t\t\"mode\":            \"distribution\",\n\t\t\t\t\"type\":            \"pie\",\n\t\t\t\t\"displayType\":     \"default\",\n\t\t\t\t\"fillOpacity\":     1,\n\t\t\t\t\"startAngle\":      270,\n\t\t\t\t\"innerRadius\":     fmt.Sprintf(\"40%v\", \"%\"),\n\t\t\t\t\"maxNumOfSlices\":  10,\n\t\t\t\t\"aggregationType\": \"sum\",\n\t\t\t},\n\t\t\t\"title\": map[string]interface{}{\n\t\t\t\t\"fontSize\": 14,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson2 := string(tmpJSON2)\n\t\ttmpJSON3, err := json.Marshal(map[string]interface{}{\n\t\t\t\"general\": map[string]interface{}{\n\t\t\t\t\"mode\":          \"timeSeries\",\n\t\t\t\t\"type\":          \"line\",\n\t\t\t\t\"displayType\":   \"smooth\",\n\t\t\t\t\"markerSize\":    5,\n\t\t\t\t\"lineDashType\":  \"dashDot\",\n\t\t\t\t\"markerType\":    \"none\",\n\t\t\t\t\"lineThickness\": 1,\n\t\t\t},\n\t\t\t\"title\": map[string]interface{}{\n\t\t\t\t\"fontSize\": 14,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson3 := string(tmpJSON3)\n\t\t_, err = sumologic.NewDashboard(ctx, \"api-dashboard\", \u0026sumologic.DashboardArgs{\n\t\t\tTitle:           pulumi.String(\"Api Health Dashboard\"),\n\t\t\tDescription:     pulumi.String(\"Demo dashboard description\"),\n\t\t\tFolderId:        pulumi.String(personalFolder.Id),\n\t\t\tRefreshInterval: pulumi.Int(120),\n\t\t\tTheme:           pulumi.String(\"Dark\"),\n\t\t\tTimeRange: \u0026DashboardTimeRangeArgs{\n\t\t\t\tBeginBoundedTimeRange: \u0026DashboardTimeRangeBeginBoundedTimeRangeArgs{\n\t\t\t\t\tFrom: \u0026DashboardTimeRangeBeginBoundedTimeRangeFromArgs{\n\t\t\t\t\t\tLiteralTimeRange: \u0026DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs{\n\t\t\t\t\t\t\tRangeName: pulumi.String(\"today\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTopologyLabelMap: \u0026DashboardTopologyLabelMapArgs{\n\t\t\t\tDatas: DashboardTopologyLabelMapDataArray{\n\t\t\t\t\t\u0026DashboardTopologyLabelMapDataArgs{\n\t\t\t\t\t\tLabel: pulumi.String(\"cluster\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"api-prod\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DashboardTopologyLabelMapDataArgs{\n\t\t\t\t\t\tLabel: pulumi.String(\"namespace\"),\n\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDomain: pulumi.String(\"app\"),\n\t\t\tPanels: DashboardPanelArray{\n\t\t\t\t\u0026DashboardPanelArgs{\n\t\t\t\t\tTextPanel: \u0026DashboardPanelTextPanelArgs{\n\t\t\t\t\t\tKey:                                    pulumi.String(\"text-panel-01\"),\n\t\t\t\t\t\tTitle:                                  pulumi.String(\"Api Health\"),\n\t\t\t\t\t\tVisualSettings:                         pulumi.String(json0),\n\t\t\t\t\t\tKeepVisualSettingsConsistentWithParent: pulumi.Bool(true),\n\t\t\t\t\t\tText: pulumi.String(fmt.Sprintf(`## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n`)),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026DashboardPanelArgs{\n\t\t\t\t\tSumoSearchPanel: \u0026DashboardPanelSumoSearchPanelArgs{\n\t\t\t\t\t\tKey:                                    pulumi.String(\"search-panel-01\"),\n\t\t\t\t\t\tTitle:                                  pulumi.String(\"Api Errors by Host\"),\n\t\t\t\t\t\tDescription:                            pulumi.String(\"Errors in api service since last 12 hours\"),\n\t\t\t\t\t\tVisualSettings:                         pulumi.String(json1),\n\t\t\t\t\t\tKeepVisualSettingsConsistentWithParent: pulumi.Bool(true),\n\t\t\t\t\t\tQueries: DashboardPanelSumoSearchPanelQueryArray{\n\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryArgs{\n\t\t\t\t\t\t\t\tQueryString: pulumi.String(\"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\"),\n\t\t\t\t\t\t\t\tQueryType:   pulumi.String(\"Logs\"),\n\t\t\t\t\t\t\t\tQueryKey:    pulumi.String(\"A\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeArgs{\n\t\t\t\t\t\t\tBeginBoundedTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{\n\t\t\t\t\t\t\t\tFrom: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{\n\t\t\t\t\t\t\t\t\tRelativeTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs{\n\t\t\t\t\t\t\t\t\t\tRelativeTime: pulumi.String(\"-12h\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026DashboardPanelArgs{\n\t\t\t\t\tSumoSearchPanel: \u0026DashboardPanelSumoSearchPanelArgs{\n\t\t\t\t\t\tKey:                                    pulumi.String(\"metrics-panel-01\"),\n\t\t\t\t\t\tTitle:                                  pulumi.String(\"Api 5xx Response Count\"),\n\t\t\t\t\t\tDescription:                            pulumi.String(\"Count of 5xx response from api service\"),\n\t\t\t\t\t\tVisualSettings:                         pulumi.String(json2),\n\t\t\t\t\t\tKeepVisualSettingsConsistentWithParent: pulumi.Bool(true),\n\t\t\t\t\t\tQueries: DashboardPanelSumoSearchPanelQueryArray{\n\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryArgs{\n\t\t\t\t\t\t\t\tQueryString:      pulumi.String(\"_sourceCategory=api metric=Api-5xx\"),\n\t\t\t\t\t\t\t\tQueryType:        pulumi.String(\"Metrics\"),\n\t\t\t\t\t\t\t\tQueryKey:         pulumi.String(\"A\"),\n\t\t\t\t\t\t\t\tMetricsQueryMode: pulumi.String(\"Advanced\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeArgs{\n\t\t\t\t\t\t\tBeginBoundedTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{\n\t\t\t\t\t\t\t\tFrom: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{\n\t\t\t\t\t\t\t\t\tLiteralTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs{\n\t\t\t\t\t\t\t\t\t\tRangeName: pulumi.String(\"today\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026DashboardPanelArgs{\n\t\t\t\t\tSumoSearchPanel: \u0026DashboardPanelSumoSearchPanelArgs{\n\t\t\t\t\t\tKey:                                    pulumi.String(\"metrics-panel-02\"),\n\t\t\t\t\t\tTitle:                                  pulumi.String(\"CPU Utilization\"),\n\t\t\t\t\t\tDescription:                            pulumi.String(\"CPU utilization in api service\"),\n\t\t\t\t\t\tVisualSettings:                         pulumi.String(json3),\n\t\t\t\t\t\tKeepVisualSettingsConsistentWithParent: pulumi.Bool(true),\n\t\t\t\t\t\tQueries: DashboardPanelSumoSearchPanelQueryArray{\n\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryArgs{\n\t\t\t\t\t\t\t\tQueryString:      pulumi.String(\"metric=Proc_CPU nite-api-1\"),\n\t\t\t\t\t\t\t\tQueryType:        pulumi.String(\"Metrics\"),\n\t\t\t\t\t\t\t\tQueryKey:         pulumi.String(\"A\"),\n\t\t\t\t\t\t\t\tMetricsQueryMode: pulumi.String(\"Basic\"),\n\t\t\t\t\t\t\t\tMetricsQueryData: \u0026DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs{\n\t\t\t\t\t\t\t\t\tMetric: pulumi.String(\"Proc_CPU\"),\n\t\t\t\t\t\t\t\t\tFilters: DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArray{\n\t\t\t\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:      pulumi.String(\"_sourcehost\"),\n\t\t\t\t\t\t\t\t\t\t\tNegation: pulumi.Bool(false),\n\t\t\t\t\t\t\t\t\t\t\tValue:    pulumi.String(\"nite-api-1\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tAggregationType: pulumi.String(\"None\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryArgs{\n\t\t\t\t\t\t\t\tQueryString:      pulumi.String(\"metric=Proc_CPU nite-api-2\"),\n\t\t\t\t\t\t\t\tQueryType:        pulumi.String(\"Metrics\"),\n\t\t\t\t\t\t\t\tQueryKey:         pulumi.String(\"B\"),\n\t\t\t\t\t\t\t\tMetricsQueryMode: pulumi.String(\"Basic\"),\n\t\t\t\t\t\t\t\tMetricsQueryData: \u0026DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs{\n\t\t\t\t\t\t\t\t\tMetric: pulumi.String(\"Proc_CPU\"),\n\t\t\t\t\t\t\t\t\tFilters: DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArray{\n\t\t\t\t\t\t\t\t\t\t\u0026DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:      pulumi.String(\"_sourcehost\"),\n\t\t\t\t\t\t\t\t\t\t\tNegation: pulumi.Bool(false),\n\t\t\t\t\t\t\t\t\t\t\tValue:    pulumi.String(\"nite-api-2\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tAggregationType: pulumi.String(\"None\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeArgs{\n\t\t\t\t\t\t\tBeginBoundedTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{\n\t\t\t\t\t\t\t\tFrom: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{\n\t\t\t\t\t\t\t\t\tRelativeTimeRange: \u0026DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs{\n\t\t\t\t\t\t\t\t\t\tRelativeTime: pulumi.String(\"-1h\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLayout: \u0026DashboardLayoutArgs{\n\t\t\t\tGrid: \u0026DashboardLayoutGridArgs{\n\t\t\t\t\tLayoutStructures: DashboardLayoutGridLayoutStructureArray{\n\t\t\t\t\t\t\u0026DashboardLayoutGridLayoutStructureArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"text-panel-01\"),\n\t\t\t\t\t\t\tStructure: pulumi.String(\"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026DashboardLayoutGridLayoutStructureArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"search-panel-01\"),\n\t\t\t\t\t\t\tStructure: pulumi.String(\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026DashboardLayoutGridLayoutStructureArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"metrics-panel-01\"),\n\t\t\t\t\t\t\tStructure: pulumi.String(\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026DashboardLayoutGridLayoutStructureArgs{\n\t\t\t\t\t\t\tKey:       pulumi.String(\"metrics-panel-02\"),\n\t\t\t\t\t\t\tStructure: pulumi.String(\"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tVariables: DashboardVariableArray{\n\t\t\t\t\u0026DashboardVariableArgs{\n\t\t\t\t\tName:         pulumi.String(\"_sourceHost\"),\n\t\t\t\t\tDisplayName:  pulumi.String(\"Source Host\"),\n\t\t\t\t\tDefaultValue: pulumi.String(\"nite-api-1\"),\n\t\t\t\t\tSourceDefinition: \u0026DashboardVariableSourceDefinitionArgs{\n\t\t\t\t\t\tCsvVariableSourceDefinition: \u0026DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs{\n\t\t\t\t\t\t\tValues: pulumi.String(\"nite-api-1,nite-api-2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAllowMultiSelect: pulumi.Bool(true),\n\t\t\t\t\tIncludeAllOption: pulumi.Bool(true),\n\t\t\t\t\tHideFromUi:       pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetPersonalFolderArgs;\nimport com.pulumi.sumologic.Dashboard;\nimport com.pulumi.sumologic.DashboardArgs;\nimport com.pulumi.sumologic.inputs.DashboardTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeFromArgs;\nimport com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardTopologyLabelMapArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelTextPanelArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs;\nimport com.pulumi.sumologic.inputs.DashboardLayoutArgs;\nimport com.pulumi.sumologic.inputs.DashboardLayoutGridArgs;\nimport com.pulumi.sumologic.inputs.DashboardVariableArgs;\nimport com.pulumi.sumologic.inputs.DashboardVariableSourceDefinitionArgs;\nimport com.pulumi.sumologic.inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var personalFolder = SumologicFunctions.getPersonalFolder();\n\n        var api_dashboard = new Dashboard(\"api-dashboard\", DashboardArgs.builder()        \n            .title(\"Api Health Dashboard\")\n            .description(\"Demo dashboard description\")\n            .folderId(personalFolder.applyValue(getPersonalFolderResult -\u003e getPersonalFolderResult.id()))\n            .refreshInterval(120)\n            .theme(\"Dark\")\n            .timeRange(DashboardTimeRangeArgs.builder()\n                .beginBoundedTimeRange(DashboardTimeRangeBeginBoundedTimeRangeArgs.builder()\n                    .from(DashboardTimeRangeBeginBoundedTimeRangeFromArgs.builder()\n                        .literalTimeRange(DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs.builder()\n                            .rangeName(\"today\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .topologyLabelMap(DashboardTopologyLabelMapArgs.builder()\n                .datas(                \n                    DashboardTopologyLabelMapDataArgs.builder()\n                        .label(\"cluster\")\n                        .values(\"api-prod\")\n                        .build(),\n                    DashboardTopologyLabelMapDataArgs.builder()\n                        .label(\"namespace\")\n                        .values(\"default\")\n                        .build())\n                .build())\n            .domain(\"app\")\n            .panels(            \n                DashboardPanelArgs.builder()\n                    .textPanel(DashboardPanelTextPanelArgs.builder()\n                        .key(\"text-panel-01\")\n                        .title(\"Api Health\")\n                        .visualSettings(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"text\", jsonObject(\n                                    jsonProperty(\"verticalAlignment\", \"top\"),\n                                    jsonProperty(\"horizontalAlignment\", \"left\"),\n                                    jsonProperty(\"fontSize\", 12)\n                                ))\n                            )))\n                        .keepVisualSettingsConsistentWithParent(true)\n                        .text(\"\"\"\n## Api Health Monitoring\n\nUse this dashboard to monitor API service health. It contains following panels:\n\n1. API errors: Errors in last 12 hours\n3. API 5xx: Count of 5xx response\n3. CPU utilization: CPU utilization in last 60 mins\n                        \"\"\")\n                        .build())\n                    .build(),\n                DashboardPanelArgs.builder()\n                    .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()\n                        .key(\"search-panel-01\")\n                        .title(\"Api Errors by Host\")\n                        .description(\"Errors in api service since last 12 hours\")\n                        .visualSettings(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"general\", jsonObject(\n                                    jsonProperty(\"mode\", \"timeSeries\"),\n                                    jsonProperty(\"type\", \"area\"),\n                                    jsonProperty(\"displayType\", \"stacked\"),\n                                    jsonProperty(\"markerSize\", 5),\n                                    jsonProperty(\"lineDashType\", \"solid\"),\n                                    jsonProperty(\"markerType\", \"square\"),\n                                    jsonProperty(\"lineThickness\", 1)\n                                )),\n                                jsonProperty(\"title\", jsonObject(\n                                    jsonProperty(\"fontSize\", 14)\n                                )),\n                                jsonProperty(\"legend\", jsonObject(\n                                    jsonProperty(\"enabled\", true),\n                                    jsonProperty(\"verticalAlign\", \"bottom\"),\n                                    jsonProperty(\"fontSize\", 12),\n                                    jsonProperty(\"maxHeight\", 50),\n                                    jsonProperty(\"showAsTable\", false),\n                                    jsonProperty(\"wrap\", true)\n                                ))\n                            )))\n                        .keepVisualSettingsConsistentWithParent(true)\n                        .queries(DashboardPanelSumoSearchPanelQueryArgs.builder()\n                            .queryString(\"_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\")\n                            .queryType(\"Logs\")\n                            .queryKey(\"A\")\n                            .build())\n                        .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()\n                            .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()\n                                .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()\n                                    .relativeTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()\n                                        .relativeTime(\"-12h\")\n                                        .build())\n                                    .build())\n                                .build())\n                            .build())\n                        .build())\n                    .build(),\n                DashboardPanelArgs.builder()\n                    .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()\n                        .key(\"metrics-panel-01\")\n                        .title(\"Api 5xx Response Count\")\n                        .description(\"Count of 5xx response from api service\")\n                        .visualSettings(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"general\", jsonObject(\n                                    jsonProperty(\"mode\", \"distribution\"),\n                                    jsonProperty(\"type\", \"pie\"),\n                                    jsonProperty(\"displayType\", \"default\"),\n                                    jsonProperty(\"fillOpacity\", 1),\n                                    jsonProperty(\"startAngle\", 270),\n                                    jsonProperty(\"innerRadius\", \"40%\"),\n                                    jsonProperty(\"maxNumOfSlices\", 10),\n                                    jsonProperty(\"aggregationType\", \"sum\")\n                                )),\n                                jsonProperty(\"title\", jsonObject(\n                                    jsonProperty(\"fontSize\", 14)\n                                ))\n                            )))\n                        .keepVisualSettingsConsistentWithParent(true)\n                        .queries(DashboardPanelSumoSearchPanelQueryArgs.builder()\n                            .queryString(\"_sourceCategory=api metric=Api-5xx\")\n                            .queryType(\"Metrics\")\n                            .queryKey(\"A\")\n                            .metricsQueryMode(\"Advanced\")\n                            .build())\n                        .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()\n                            .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()\n                                .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()\n                                    .literalTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs.builder()\n                                        .rangeName(\"today\")\n                                        .build())\n                                    .build())\n                                .build())\n                            .build())\n                        .build())\n                    .build(),\n                DashboardPanelArgs.builder()\n                    .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()\n                        .key(\"metrics-panel-02\")\n                        .title(\"CPU Utilization\")\n                        .description(\"CPU utilization in api service\")\n                        .visualSettings(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"general\", jsonObject(\n                                    jsonProperty(\"mode\", \"timeSeries\"),\n                                    jsonProperty(\"type\", \"line\"),\n                                    jsonProperty(\"displayType\", \"smooth\"),\n                                    jsonProperty(\"markerSize\", 5),\n                                    jsonProperty(\"lineDashType\", \"dashDot\"),\n                                    jsonProperty(\"markerType\", \"none\"),\n                                    jsonProperty(\"lineThickness\", 1)\n                                )),\n                                jsonProperty(\"title\", jsonObject(\n                                    jsonProperty(\"fontSize\", 14)\n                                ))\n                            )))\n                        .keepVisualSettingsConsistentWithParent(true)\n                        .queries(                        \n                            DashboardPanelSumoSearchPanelQueryArgs.builder()\n                                .queryString(\"metric=Proc_CPU nite-api-1\")\n                                .queryType(\"Metrics\")\n                                .queryKey(\"A\")\n                                .metricsQueryMode(\"Basic\")\n                                .metricsQueryData(DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs.builder()\n                                    .metric(\"Proc_CPU\")\n                                    .filters(DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs.builder()\n                                        .key(\"_sourcehost\")\n                                        .negation(false)\n                                        .value(\"nite-api-1\")\n                                        .build())\n                                    .aggregationType(\"None\")\n                                    .build())\n                                .build(),\n                            DashboardPanelSumoSearchPanelQueryArgs.builder()\n                                .queryString(\"metric=Proc_CPU nite-api-2\")\n                                .queryType(\"Metrics\")\n                                .queryKey(\"B\")\n                                .metricsQueryMode(\"Basic\")\n                                .metricsQueryData(DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs.builder()\n                                    .metric(\"Proc_CPU\")\n                                    .filters(DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs.builder()\n                                        .key(\"_sourcehost\")\n                                        .negation(false)\n                                        .value(\"nite-api-2\")\n                                        .build())\n                                    .aggregationType(\"None\")\n                                    .build())\n                                .build())\n                        .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()\n                            .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()\n                                .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()\n                                    .relativeTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()\n                                        .relativeTime(\"-1h\")\n                                        .build())\n                                    .build())\n                                .build())\n                            .build())\n                        .build())\n                    .build())\n            .layout(DashboardLayoutArgs.builder()\n                .grid(DashboardLayoutGridArgs.builder()\n                    .layoutStructures(                    \n                        DashboardLayoutGridLayoutStructureArgs.builder()\n                            .key(\"text-panel-01\")\n                            .structure(\"{\\\"height\\\":5,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":0}\")\n                            .build(),\n                        DashboardLayoutGridLayoutStructureArgs.builder()\n                            .key(\"search-panel-01\")\n                            .structure(\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":0,\\\"y\\\":5}\")\n                            .build(),\n                        DashboardLayoutGridLayoutStructureArgs.builder()\n                            .key(\"metrics-panel-01\")\n                            .structure(\"{\\\"height\\\":10,\\\"width\\\":12,\\\"x\\\":12,\\\"y\\\":5}\")\n                            .build(),\n                        DashboardLayoutGridLayoutStructureArgs.builder()\n                            .key(\"metrics-panel-02\")\n                            .structure(\"{\\\"height\\\":10,\\\"width\\\":24,\\\"x\\\":0,\\\"y\\\":25}\")\n                            .build())\n                    .build())\n                .build())\n            .variables(DashboardVariableArgs.builder()\n                .name(\"_sourceHost\")\n                .displayName(\"Source Host\")\n                .defaultValue(\"nite-api-1\")\n                .sourceDefinition(DashboardVariableSourceDefinitionArgs.builder()\n                    .csvVariableSourceDefinition(DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs.builder()\n                        .values(\"nite-api-1,nite-api-2\")\n                        .build())\n                    .build())\n                .allowMultiSelect(true)\n                .includeAllOption(true)\n                .hideFromUi(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  api-dashboard:\n    type: sumologic:Dashboard\n    properties:\n      title: Api Health Dashboard\n      description: Demo dashboard description\n      folderId: ${personalFolder.id}\n      refreshInterval: 120\n      theme: Dark\n      timeRange:\n        beginBoundedTimeRange:\n          from:\n            literalTimeRange:\n              rangeName: today\n      topologyLabelMap:\n        datas:\n          - label: cluster\n            values:\n              - api-prod\n          - label: namespace\n            values:\n              - default\n      domain: app\n      ## text panel\n      panels:\n        - textPanel:\n            key: text-panel-01\n            title: Api Health\n            visualSettings:\n              Fn::ToJSON:\n                text:\n                  verticalAlignment: top\n                  horizontalAlignment: left\n                  fontSize: 12\n            keepVisualSettingsConsistentWithParent: true\n            text: |\n              ## Api Health Monitoring\n\n              Use this dashboard to monitor API service health. It contains following panels:\n\n              1. API errors: Errors in last 12 hours\n              3. API 5xx: Count of 5xx response\n              3. CPU utilization: CPU utilization in last 60 mins\n        - sumoSearchPanel:\n            key: search-panel-01\n            title: Api Errors by Host\n            description: Errors in api service since last 12 hours\n            visualSettings:\n              Fn::ToJSON:\n                general:\n                  mode: timeSeries\n                  type: area\n                  displayType: stacked\n                  markerSize: 5\n                  lineDashType: solid\n                  markerType: square\n                  lineThickness: 1\n                title:\n                  fontSize: 14\n                legend:\n                  enabled: true\n                  verticalAlign: bottom\n                  fontSize: 12\n                  maxHeight: 50\n                  showAsTable: false\n                  wrap: true\n            keepVisualSettingsConsistentWithParent: true\n            queries:\n              - queryString: _sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost\n                queryType: Logs\n                queryKey: A\n            timeRange:\n              beginBoundedTimeRange:\n                from:\n                  relativeTimeRange:\n                    relativeTime: -12h\n        - sumoSearchPanel:\n            key: metrics-panel-01\n            title: Api 5xx Response Count\n            description: Count of 5xx response from api service\n            visualSettings:\n              Fn::ToJSON:\n                general:\n                  mode: distribution\n                  type: pie\n                  displayType: default\n                  fillOpacity: 1\n                  startAngle: 270\n                  innerRadius: 40%\n                  maxNumOfSlices: 10\n                  aggregationType: sum\n                title:\n                  fontSize: 14\n            keepVisualSettingsConsistentWithParent: true\n            queries:\n              - queryString: _sourceCategory=api metric=Api-5xx\n                queryType: Metrics\n                queryKey: A\n                metricsQueryMode: Advanced\n            timeRange:\n              beginBoundedTimeRange:\n                from:\n                  literalTimeRange:\n                    rangeName: today\n        - sumoSearchPanel:\n            key: metrics-panel-02\n            title: CPU Utilization\n            description: CPU utilization in api service\n            visualSettings:\n              Fn::ToJSON:\n                general:\n                  mode: timeSeries\n                  type: line\n                  displayType: smooth\n                  markerSize: 5\n                  lineDashType: dashDot\n                  markerType: none\n                  lineThickness: 1\n                title:\n                  fontSize: 14\n            keepVisualSettingsConsistentWithParent: true\n            queries:\n              - queryString: metric=Proc_CPU nite-api-1\n                queryType: Metrics\n                queryKey: A\n                metricsQueryMode: Basic\n                metricsQueryData:\n                  metric: Proc_CPU\n                  filters:\n                    - key: _sourcehost\n                      negation: false\n                      value: nite-api-1\n                  aggregationType: None\n              - queryString: metric=Proc_CPU nite-api-2\n                queryType: Metrics\n                queryKey: B\n                metricsQueryMode: Basic\n                metricsQueryData:\n                  metric: Proc_CPU\n                  filters:\n                    - key: _sourcehost\n                      negation: false\n                      value: nite-api-2\n                  aggregationType: None\n            timeRange:\n              beginBoundedTimeRange:\n                from:\n                  relativeTimeRange:\n                    relativeTime: -1h\n      layout:\n        grid:\n          layoutStructures:\n            - key: text-panel-01\n              structure: '{\"height\":5,\"width\":24,\"x\":0,\"y\":0}'\n            - key: search-panel-01\n              structure: '{\"height\":10,\"width\":12,\"x\":0,\"y\":5}'\n            - key: metrics-panel-01\n              structure: '{\"height\":10,\"width\":12,\"x\":12,\"y\":5}'\n            - key: metrics-panel-02\n              structure: '{\"height\":10,\"width\":24,\"x\":0,\"y\":25}'\n      ## variables\n      variables:\n        - name: _sourceHost\n          displayName: Source Host\n          defaultValue: nite-api-1\n          sourceDefinition:\n            csvVariableSourceDefinition:\n              values: nite-api-1,nite-api-2\n          allowMultiSelect: true\n          includeAllOption: true\n          hideFromUi: false\nvariables:\n  personalFolder:\n    Fn::Invoke:\n      Function: sumologic:getPersonalFolder\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nIn addition to all arguments above, the following attributes are exported:\n\n- `id` - The ID of the dashboard.\n\n### Schema for `topology_label_map`\n- `data` - (Block List, Required) A list of blocks containing label and it's values.\n\t- `label` - (Required) The name of the topology label.\n\t- `values` - (Required) The values for the topology label.\n\n\n### Schema for `time_range`\n- `complete_literal_time_range` - (Block List, Max: 1, Optional) Literal time range. See\ncomplete_literal_time_range schema for details.\n- `begin_bounded_time_range` - (Block List, Max: 1, Optional) Bounded time range. See\nbegin_bounded_time_range schema schema for details.\nschema for details.\n\n### Schema for `complete_literal_time_range`\n- `range_name` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previous_week`, `previous_month`.\n\n### Schema for `begin_bounded_time_range`\n- `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See\ntime_range_boundary schema for details.\n- `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See\ntime_range_boundary schema for details.\n\n### Schema for `time_range_boundary`\n- `epoch_time_range` - (Block List, Optional) Time since the epoch.\n    - `epoch_millis` - (Required) Time as a number of milliseconds since the epoch.\n\n- `iso8601_time_range` - (Block List, Optional) Time in ISO 8601 format.\n    - `iso8601_time` - (Required) Time as a string in ISO 8601 format.\n\n- `relative_time_range` - (Block List, Optional) Time in relative format.\n    - `relative_time` - (Required) Relative time as a string consisting of following elements:\n      1. `-` (optional): minus sign indicates time in the past,\n      2. `\u003cnumber\u003e`: number of time units,\n      3. `\u003ctime_unit\u003e`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).\n\n      Multiple pairs of `\u003cnumber\u003e\u003ctime_unit\u003e` may be provided, and they may be in any order. For example,\n      `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.\n\n- `literal_time_range` - (Block List, Optional) Time in literal format.\n    - `range_name` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.\n\n### Schema for `panel`\n- `text_panel` - (Block List, Max: 1, Optional) A text panel. See text_panel schema for details.\n- `sumo_search_panel` - (Block List, Max: 1, Optional) A search panel. See sumo_search_panel schema\nfor details.\n\n### Schema for `text_panel`\n- `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout\nof the panel in the dashboard.\n- `title` - (Optional) Title of the panel.\n- `visual_settings` - (Optional) Visual settings of the panel.\n- `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent\nwith the settings of the parent panel.\n- `text` - (Required) Text to display in the panel.\n\n### Schema for `sumo_search_panel`\n- `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout\nof the panel in the dashboard.\n- `title` - (Optional) Title of the panel.\n- `visual_settings` - (Optional) Visual settings of the panel.\n- `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent\nwith the settings of the parent panel.\n- `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See\nquery schema for details.\n- `description` - (Optional) Description of the panel.\n- `time_range` - (Block List, Max: 1, Optional) Time range of the panel. See time_range schema\nfor details.\n- `linked_dashboard` - (Block List, Optional) A list of linked dashboards. See\nlinked_dashboard schema for details.\n\n### Schema for `query`\n- `query_string` - (Required) The metrics or logs query.\n- `query_type` - (Required) The type of the query. One of `Metrics` or `Logs`.\n- `query_key` - (Required) The key for metric or log query. Used as an identifier for queries.\n- `metric_query_mode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.\nOne of `Basic` or `Advanced`.\n- `metric_query_data` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See\nmetric_query_data schema for details.\n\n### Schema for `metric_query_data`\n- `metric` - (Required) The metric of the query.\n- `aggregation_type` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.\n- `group_by` - The field to group the results by.\n- `filter` - (Block List, Required) A list of filters for the metrics query.\n    - `key` - (Required) The key of the metrics filter.\n    - `value` - (Required) The value of the metrics filter.\n    - `negation` - (Optional) Whether or not the metrics filter is negated.\n- `operator` - (Block List, Optional) A list of operator data for the metrics query.\n\n### Schema for `operator`\n- `operator_name` - (Required) The name of the metrics operator.\n- `parameter` - (Block List, Required) A list of operator parameters for the operator data.\n    - `key` - (Required) The key of the operator parameter.\n    - `value` - (Required) The value of the operator parameter.\n\n### Schema for `linked_dashboard`\n- `id` - (Required) Identifier of the linked dashboard.\n- `relative_path` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.\n- `include_time_range` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.\n- `include_variables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.\n\n### Schema for `layout`\n- `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.\n\n### Schema for `grid`\n- `layout_structure` - (Block List, Required) Layout structure for the panels in the dashboard.\n    - `key` - (Required) The identifier of the panel that this structure applies to. It's same as `panel.key`.\n    - `structure` - (Required) The structure of the panel.\n\n### Schema for `variable`\n- `name` - (Required) Name of the variable. The variable name is case-insensitive.\n- `display_name` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.\n- `default_value` - (Optional) Default value of the variable.\n- `source_definition` - (Required) Source definition for variable values. See\nsource_definition schema for details.\n- `allow_multi_select` - (Optional) Allow multiple selections in the values dropdown.\n- `include_all_option` - (Optional) Include an \"All\" option at the top of the variable's values dropdown. _Defaults to true._\n- `hide_from_ui` - (Optional) Hide the variable in the dashboard UI.\n\n### Schema for `source_definition`\n- `log_query_variable_source_definition` - (Optional) Variable values from a log query.\n    - `query` - (Required) A log query.\n    - `field` - (Required) A field in log query to populate the variable values\n- `metadata_variable_source_definition` - (Optional) Variable values from a metric query.\n    - `filter` - (Required) Filter to search the catalog.\n    - `key` - (Required) Return the values for this given key.\n- `csv_variable_source_definition` - (Optional) Variable values in csv format.\n    - `values` - (Required) A comma separated values for the variable.\n\n\n## Import\n\nDashboard can be imported using the dashboard id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc\n```\n\n [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New) ",
            "properties": {
                "coloringRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain of the dashboard. If set denotes that the dashboard concerns a given domain.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The identifier of the folder to save the dashboard in. By default it is saved in your\npersonal folder.\n"
                },
                "layout": {
                    "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout",
                    "description": "Layout of the dashboard. See layout schema for details.\n"
                },
                "panels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                    },
                    "description": "A list of panels in the dashboard. See panel schema for details.\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "Theme of the dashboard.\n"
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange",
                    "description": "Time range of the dashboard. See time range schema\nfor details.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the dashboard.\n"
                },
                "topologyLabelMap": {
                    "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap",
                    "description": "Topology labels for the dashboard. See\ntopology label map schema\nfor details.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "A list of variables for the dashboard. See variable schema\nfor details.\n"
                }
            },
            "required": [
                "timeRange",
                "title"
            ],
            "inputProperties": {
                "coloringRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the dashboard.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain of the dashboard. If set denotes that the dashboard concerns a given domain.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The identifier of the folder to save the dashboard in. By default it is saved in your\npersonal folder.\n"
                },
                "layout": {
                    "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout",
                    "description": "Layout of the dashboard. See layout schema for details.\n"
                },
                "panels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                    },
                    "description": "A list of panels in the dashboard. See panel schema for details.\n"
                },
                "refreshInterval": {
                    "type": "integer",
                    "description": "Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "Theme of the dashboard.\n"
                },
                "timeRange": {
                    "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange",
                    "description": "Time range of the dashboard. See time range schema\nfor details.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the dashboard.\n",
                    "willReplaceOnChanges": true
                },
                "topologyLabelMap": {
                    "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap",
                    "description": "Topology labels for the dashboard. See\ntopology label map schema\nfor details.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                    },
                    "description": "A list of variables for the dashboard. See variable schema\nfor details.\n"
                }
            },
            "requiredInputs": [
                "timeRange",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "coloringRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardColoringRule:DashboardColoringRule"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the dashboard.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain of the dashboard. If set denotes that the dashboard concerns a given domain.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The identifier of the folder to save the dashboard in. By default it is saved in your\npersonal folder.\n"
                    },
                    "layout": {
                        "$ref": "#/types/sumologic:index/DashboardLayout:DashboardLayout",
                        "description": "Layout of the dashboard. See layout schema for details.\n"
                    },
                    "panels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardPanel:DashboardPanel"
                        },
                        "description": "A list of panels in the dashboard. See panel schema for details.\n"
                    },
                    "refreshInterval": {
                        "type": "integer",
                        "description": "Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.\n"
                    },
                    "theme": {
                        "type": "string",
                        "description": "Theme of the dashboard.\n"
                    },
                    "timeRange": {
                        "$ref": "#/types/sumologic:index/DashboardTimeRange:DashboardTimeRange",
                        "description": "Time range of the dashboard. See time range schema\nfor details.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the dashboard.\n",
                        "willReplaceOnChanges": true
                    },
                    "topologyLabelMap": {
                        "$ref": "#/types/sumologic:index/DashboardTopologyLabelMap:DashboardTopologyLabelMap",
                        "description": "Topology labels for the dashboard. See\ntopology label map schema\nfor details.\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/DashboardVariable:DashboardVariable"
                        },
                        "description": "A list of variables for the dashboard. See variable schema\nfor details.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/elbSource:ElbSource": {
            "description": "Provides a [Sumologic ELB source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source).\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst elbSource = new sumologic.ElbSource(\"elb_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/elb\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsElbBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nelb_source = sumologic.ElbSource(\"elbSource\",\n    authentication=sumologic.ElbSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/elb\",\n    collector_id=collector.id,\n    content_type=\"AwsElbBucket\",\n    description=\"My description\",\n    path=sumologic.ElbSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var elbSource = new SumoLogic.ElbSource(\"elbSource\", new()\n    {\n        Authentication = new SumoLogic.Inputs.ElbSourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"aws/elb\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsElbBucket\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.ElbSourcePathArgs\n        {\n            BucketName = \"Bucket1\",\n            PathExpression = \"*\",\n            Type = \"S3BucketPathExpression\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewElbSource(ctx, \"elbSource\", \u0026sumologic.ElbSourceArgs{\n\t\t\tAuthentication: \u0026ElbSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/elb\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsElbBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026ElbSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.ElbSource;\nimport com.pulumi.sumologic.ElbSourceArgs;\nimport com.pulumi.sumologic.inputs.ElbSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.ElbSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var elbSource = new ElbSource(\"elbSource\", ElbSourceArgs.builder()        \n            .authentication(ElbSourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"aws/elb\")\n            .collectorId(collector.id())\n            .contentType(\"AwsElbBucket\")\n            .description(\"My description\")\n            .path(ElbSourcePathArgs.builder()\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .type(\"S3BucketPathExpression\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  elbSource:\n    type: sumologic:ElbSource\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: aws/elb\n      collectorId: ${collector.id}\n      contentType: AwsElbBucket\n      description: My description\n      path:\n        bucketName: Bucket1\n        pathExpression: '*'\n        type: S3BucketPathExpression\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nELB sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/elbSource:ElbSource test 123/456\n```\n\n ELB sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/elbSource:ElbSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElbSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/ElbSourceAuthentication:ElbSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/ElbSourceDefaultDateFormat:ElbSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/ElbSourceFilter:ElbSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/ElbSourcePath:ElbSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/field:Field": {
            "description": "Provides a [Sumologic Field](https://help.sumologic.com/Manage/Fields).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst field = new sumologic.Field(\"field\", {\n    dataType: \"Int\",\n    fieldName: \"int_field_1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfield = sumologic.Field(\"field\",\n    data_type=\"Int\",\n    field_name=\"int_field_1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var field = new SumoLogic.Field(\"field\", new()\n    {\n        DataType = \"Int\",\n        FieldName = \"int_field_1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewField(ctx, \"field\", \u0026sumologic.FieldArgs{\n\t\t\tDataType:  pulumi.String(\"Int\"),\n\t\t\tFieldName: pulumi.String(\"int_field_1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Field;\nimport com.pulumi.sumologic.FieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var field = new Field(\"field\", FieldArgs.builder()        \n            .dataType(\"Int\")\n            .fieldName(\"int_field_1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  field:\n    type: sumologic:Field\n    properties:\n      dataType: Int\n      fieldName: int_field_1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFields can be imported using the field id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/field:Field field 000000000ABC1234\n```\n\n [1]https://help.sumologic.com/Manage/Fields ",
            "properties": {
                "dataType": {
                    "type": "string",
                    "description": "Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.\n"
                },
                "fieldId": {
                    "type": "string",
                    "description": "Field identifier.\n"
                },
                "fieldName": {
                    "type": "string",
                    "description": "Name of the field.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the field (either `Enabled` or `Disabled`).\n"
                }
            },
            "required": [
                "fieldId",
                "fieldName"
            ],
            "inputProperties": {
                "dataType": {
                    "type": "string",
                    "description": "Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.\n",
                    "willReplaceOnChanges": true
                },
                "fieldName": {
                    "type": "string",
                    "description": "Name of the field.\n",
                    "willReplaceOnChanges": true
                },
                "state": {
                    "type": "string",
                    "description": "State of the field (either `Enabled` or `Disabled`).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fieldName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Field resources.\n",
                "properties": {
                    "dataType": {
                        "type": "string",
                        "description": "Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldId": {
                        "type": "string",
                        "description": "Field identifier.\n"
                    },
                    "fieldName": {
                        "type": "string",
                        "description": "Name of the field.\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the field (either `Enabled` or `Disabled`).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/fieldExtractionRule:FieldExtractionRule": {
            "description": "Provides a [Sumologic Field Extraction Rule](https://help.sumologic.com/Manage/Field-Extractions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst fieldExtractionRule = new sumologic.FieldExtractionRule(\"fieldExtractionRule\", {\n    enabled: true,\n    parseExpression: \"csv _raw extract 1 as f1\",\n    scope: \"_sourceHost=127.0.0.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfield_extraction_rule = sumologic.FieldExtractionRule(\"fieldExtractionRule\",\n    enabled=True,\n    parse_expression=\"csv _raw extract 1 as f1\",\n    scope=\"_sourceHost=127.0.0.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fieldExtractionRule = new SumoLogic.FieldExtractionRule(\"fieldExtractionRule\", new()\n    {\n        Enabled = true,\n        ParseExpression = \"csv _raw extract 1 as f1\",\n        Scope = \"_sourceHost=127.0.0.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewFieldExtractionRule(ctx, \"fieldExtractionRule\", \u0026sumologic.FieldExtractionRuleArgs{\n\t\t\tEnabled:         pulumi.Bool(true),\n\t\t\tParseExpression: pulumi.String(\"csv _raw extract 1 as f1\"),\n\t\t\tScope:           pulumi.String(\"_sourceHost=127.0.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.FieldExtractionRule;\nimport com.pulumi.sumologic.FieldExtractionRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fieldExtractionRule = new FieldExtractionRule(\"fieldExtractionRule\", FieldExtractionRuleArgs.builder()        \n            .enabled(true)\n            .parseExpression(\"csv _raw extract 1 as f1\")\n            .scope(\"_sourceHost=127.0.0.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fieldExtractionRule:\n    type: sumologic:FieldExtractionRule\n    properties:\n      enabled: true\n      parseExpression: csv _raw extract 1 as f1\n      scope: _sourceHost=127.0.0.1\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the field extraction rule.\n\n\n## Import\n\nExtraction Rules can be imported using the extraction rule id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/fieldExtractionRule:FieldExtractionRule fieldExtractionRule id\n```\n\n [1]https://help.sumologic.com/Manage/Field-Extractions ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is the field extraction rule enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field extraction rule. Use a name that makes it easy to identify the rule.\n"
                },
                "parseExpression": {
                    "type": "string",
                    "description": "Describes the fields to be parsed.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "parseExpression",
                "scope"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Is the field extraction rule enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the field extraction rule. Use a name that makes it easy to identify the rule.\n"
                },
                "parseExpression": {
                    "type": "string",
                    "description": "Describes the fields to be parsed.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "parseExpression",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FieldExtractionRule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Is the field extraction rule enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the field extraction rule. Use a name that makes it easy to identify the rule.\n"
                    },
                    "parseExpression": {
                        "type": "string",
                        "description": "Describes the fields to be parsed.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/folder:Folder": {
            "description": "Provides the ability to create, read, delete, update, and manage of folders.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst folder = new sumologic.Folder(\"folder\", {\n    description: \"A test folder\",\n    parentId: \"\u003cpersonal folder id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nfolder = sumologic.Folder(\"folder\",\n    description=\"A test folder\",\n    parent_id=\"\u003cpersonal folder id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var folder = new SumoLogic.Folder(\"folder\", new()\n    {\n        Description = \"A test folder\",\n        ParentId = \"\u003cpersonal folder id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewFolder(ctx, \"folder\", \u0026sumologic.FolderArgs{\n\t\t\tDescription: pulumi.String(\"A test folder\"),\n\t\t\tParentId:    pulumi.String(\"\u003cpersonal folder id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Folder;\nimport com.pulumi.sumologic.FolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var folder = new Folder(\"folder\", FolderArgs.builder()        \n            .description(\"A test folder\")\n            .parentId(\"\u003cpersonal folder id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  folder:\n    type: sumologic:Folder\n    properties:\n      description: A test folder\n      parentId: \u003cpersonal folder id\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n### Timeouts `sumologic_folder` provides the following [Timeouts](/docs/configuration/resources.html#timeouts) configuration options- `delete` - (Default `1 minute`) Used for waiting for the deletion job to be successful Additional data provided in state - `created_at` - (Computed) When the folder was created. - `created_by` - (Computed) Who created the folder. - `modified_at` - (Computed) When was the folder last modified. - `modified_by` - (Computed) The ID of the user who modified the folder last. - `item_type` - (Computed) What the type of the content item is (will obviously be \"Folder\"). - `permissions` - (Computed) List of permissions the user has on the content item. - `children` - (Computed) A list of all the content items in the created folder (can be folders or other content items). ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the folder.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the folder. This is required, and has to be unique.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the folder in which you want to create the new folder.\n"
                }
            },
            "required": [
                "description",
                "name",
                "parentId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the folder.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the folder. This is required, and has to be unique.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the folder in which you want to create the new folder.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Folder resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the folder.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the folder. This is required, and has to be unique.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The ID of the folder in which you want to create the new folder.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/gcpMetricsSource:GcpMetricsSource": {
            "description": "Provides a `Sumologic GCP Metrics Source`\n\n__IMPORTANT:__ The Service Account parameters (including private key) are stored in plain-text in the state. This is a potential security issue.\n\n\n## Import\n\nGCP Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpMetricsSource:GcpMetricsSource test 123/456\n```\n\n GCP Metrics sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpMetricsSource:GcpMetricsSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpMetricsSourceAuthentication:GcpMetricsSourceAuthentication",
                    "description": "Authentication details for connecting to the  GCP Monitoring using service_account credentials.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourceDefaultDateFormat:GcpMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourceFilter:GcpMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpMetricsSourcePath:GcpMetricsSourcePath",
                    "description": "Details about what data to ingest\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpMetricsSourceAuthentication:GcpMetricsSourceAuthentication",
                    "description": "Authentication details for connecting to the  GCP Monitoring using service_account credentials.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourceDefaultDateFormat:GcpMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourceFilter:GcpMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpMetricsSourcePath:GcpMetricsSourcePath",
                    "description": "Details about what data to ingest\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpMetricsSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourceAuthentication:GcpMetricsSourceAuthentication",
                        "description": "Authentication details for connecting to the  GCP Monitoring using service_account credentials.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpMetricsSourceDefaultDateFormat:GcpMetricsSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpMetricsSourceFilter:GcpMetricsSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/GcpMetricsSourcePath:GcpMetricsSourcePath",
                        "description": "Details about what data to ingest\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/gcpSource:GcpSource": {
            "description": "Provides a [Sumo Logic Google Cloud Platform Source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source).\n\n***Note:*** Google no longer requires a pub/sub domain to be [verified](https://cloud.google.com/pubsub/docs/push). You no longer have to set up domain verification with your GCP Source endpoint.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst gcpSource = new sumologic.GcpSource(\"gcp_source\", {\n    category: \"gcp\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ngcp_source = sumologic.GcpSource(\"gcpSource\",\n    category=\"gcp\",\n    collector_id=collector.id,\n    description=\"My description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var gcpSource = new SumoLogic.GcpSource(\"gcpSource\", new()\n    {\n        Category = \"gcp\",\n        CollectorId = collector.Id,\n        Description = \"My description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewGcpSource(ctx, \"gcpSource\", \u0026sumologic.GcpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"gcp\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.GcpSource;\nimport com.pulumi.sumologic.GcpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var gcpSource = new GcpSource(\"gcpSource\", GcpSourceArgs.builder()        \n            .category(\"gcp\")\n            .collectorId(collector.id())\n            .description(\"My description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gcpSource:\n    type: sumologic:GcpSource\n    properties:\n      category: gcp\n      collectorId: ${collector.id}\n      description: My description\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSumo Logic Google Cloud Platform sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpSource:GcpSource test 100000001/100000001\n```\n\n Sumo Logic Google Cloud Platform sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/gcpSource:GcpSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source [3]https://cloud.google.com/pubsub/docs/push ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use for sending data to this source.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/GcpSourceAuthentication:GcpSourceAuthentication",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpSourceDefaultDateFormat:GcpSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/GcpSourceFilter:GcpSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/GcpSourcePath:GcpSourcePath",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use for sending data to this source.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/hierarchy:Hierarchy": {
            "description": "Provides a [Sumologic Hierarchy](https://help.sumologic.com/Visualizations-and-Alerts/Explore).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleHierarchy = new sumologic.Hierarchy(\"example_hierarchy\", {\n    filter: {\n        key: \"_origin\",\n        value: \"kubernetes\",\n    },\n    levels: [{\n        entityType: \"cluster\",\n        nextLevel: {\n            entityType: \"node\",\n        },\n        nextLevelsWithConditions: [{\n            condition: \"testCondition\",\n            level: {\n                entityType: \"namespace\",\n            },\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_hierarchy = sumologic.Hierarchy(\"exampleHierarchy\",\n    filter=sumologic.HierarchyFilterArgs(\n        key=\"_origin\",\n        value=\"kubernetes\",\n    ),\n    levels=[sumologic.HierarchyLevelArgs(\n        entity_type=\"cluster\",\n        next_level=sumologic.HierarchyLevelNextLevelArgs(\n            entity_type=\"node\",\n        ),\n        next_levels_with_conditions=[sumologic.HierarchyLevelNextLevelsWithConditionArgs(\n            condition=\"testCondition\",\n            level=sumologic.HierarchyLevelNextLevelsWithConditionLevelArgs(\n                entity_type=\"namespace\",\n            ),\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleHierarchy = new SumoLogic.Hierarchy(\"exampleHierarchy\", new()\n    {\n        Filter = new SumoLogic.Inputs.HierarchyFilterArgs\n        {\n            Key = \"_origin\",\n            Value = \"kubernetes\",\n        },\n        Levels = new[]\n        {\n            new SumoLogic.Inputs.HierarchyLevelArgs\n            {\n                EntityType = \"cluster\",\n                NextLevel = new SumoLogic.Inputs.HierarchyLevelNextLevelArgs\n                {\n                    EntityType = \"node\",\n                },\n                NextLevelsWithConditions = new[]\n                {\n                    new SumoLogic.Inputs.HierarchyLevelNextLevelsWithConditionArgs\n                    {\n                        Condition = \"testCondition\",\n                        Level = new SumoLogic.Inputs.HierarchyLevelNextLevelsWithConditionLevelArgs\n                        {\n                            EntityType = \"namespace\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewHierarchy(ctx, \"exampleHierarchy\", \u0026sumologic.HierarchyArgs{\n\t\t\tFilter: \u0026HierarchyFilterArgs{\n\t\t\t\tKey:   pulumi.String(\"_origin\"),\n\t\t\t\tValue: pulumi.String(\"kubernetes\"),\n\t\t\t},\n\t\t\tLevels: HierarchyLevelArray{\n\t\t\t\t\u0026HierarchyLevelArgs{\n\t\t\t\t\tEntityType: pulumi.String(\"cluster\"),\n\t\t\t\t\tNextLevel: \u0026HierarchyLevelNextLevelArgs{\n\t\t\t\t\t\tEntityType: pulumi.String(\"node\"),\n\t\t\t\t\t},\n\t\t\t\t\tNextLevelsWithConditions: HierarchyLevelNextLevelsWithConditionArray{\n\t\t\t\t\t\t\u0026HierarchyLevelNextLevelsWithConditionArgs{\n\t\t\t\t\t\t\tCondition: pulumi.String(\"testCondition\"),\n\t\t\t\t\t\t\tLevel: \u0026HierarchyLevelNextLevelsWithConditionLevelArgs{\n\t\t\t\t\t\t\t\tEntityType: pulumi.String(\"namespace\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Hierarchy;\nimport com.pulumi.sumologic.HierarchyArgs;\nimport com.pulumi.sumologic.inputs.HierarchyFilterArgs;\nimport com.pulumi.sumologic.inputs.HierarchyLevelArgs;\nimport com.pulumi.sumologic.inputs.HierarchyLevelNextLevelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleHierarchy = new Hierarchy(\"exampleHierarchy\", HierarchyArgs.builder()        \n            .filter(HierarchyFilterArgs.builder()\n                .key(\"_origin\")\n                .value(\"kubernetes\")\n                .build())\n            .levels(HierarchyLevelArgs.builder()\n                .entityType(\"cluster\")\n                .nextLevel(HierarchyLevelNextLevelArgs.builder()\n                    .entityType(\"node\")\n                    .build())\n                .nextLevelsWithConditions(HierarchyLevelNextLevelsWithConditionArgs.builder()\n                    .condition(\"testCondition\")\n                    .level(HierarchyLevelNextLevelsWithConditionLevelArgs.builder()\n                        .entityType(\"namespace\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleHierarchy:\n    type: sumologic:Hierarchy\n    properties:\n      filter:\n        key: _origin\n        value: kubernetes\n      levels:\n        - entityType: cluster\n          nextLevel:\n            entityType: node\n          nextLevelsWithConditions:\n            - condition: testCondition\n              level:\n                entityType: namespace\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nHierarchies can be imported using the id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/hierarchy:Hierarchy test id\n```\n\n [1]https://help.sumologic.com/Visualizations-and-Alerts/Explore ",
            "properties": {
                "filter": {
                    "$ref": "#/types/sumologic:index/HierarchyFilter:HierarchyFilter",
                    "description": "An optional clause that a hierarchy requires to be matched.\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevel:HierarchyLevel"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the hierarchy.\n"
                }
            },
            "required": [
                "levels",
                "name"
            ],
            "inputProperties": {
                "filter": {
                    "$ref": "#/types/sumologic:index/HierarchyFilter:HierarchyFilter",
                    "description": "An optional clause that a hierarchy requires to be matched.\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HierarchyLevel:HierarchyLevel"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the hierarchy.\n"
                }
            },
            "requiredInputs": [
                "levels"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hierarchy resources.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sumologic:index/HierarchyFilter:HierarchyFilter",
                        "description": "An optional clause that a hierarchy requires to be matched.\n"
                    },
                    "levels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/HierarchyLevel:HierarchyLevel"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the hierarchy.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/httpSource:HttpSource": {
            "description": "Provides a [Sumologic HTTP source](https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source), [Sumologic HTTP Traces source](https://help.sumologic.com/Traces/HTTP_Traces_Source), [Sumologic Kinesis Log source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source) and [Sumologic HTTP_OTLP_source][4]. To start using Traces contact your Sumo account representative to activate.\n\n__IMPORTANT:__ The endpoint is stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst httpSource = new sumologic.HttpSource(\"http_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    description: \"My description\",\n    filters: [{\n        filterType: \"Exclude\",\n        name: \"Test Exclude Debug\",\n        regexp: \".*DEBUG.*\",\n    }],\n});\nconst httpTracesSource = new sumologic.HttpSource(\"http_traces_source\", {\n    category: \"my/source/category\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"Zipkin\",\n    description: \"My description\",\n});\nconst kinesisLog = new sumologic.HttpSource(\"kinesisLog\", {\n    category: \"demo-category\",\n    collectorId: sumologic_collector_test.id,\n    contentType: \"KinesisLog\",\n    description: \"demo-desc\",\n});\nconst httpOtlpSource = new sumologic.HttpSource(\"http_otlp_source\", {\n    category: \"my/source/category\",\n    collectorId: sumologic_collector_test.id,\n    contentType: \"Otlp\",\n    description: \"My description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nhttp_source = sumologic.HttpSource(\"httpSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    description=\"My description\",\n    filters=[sumologic.HttpSourceFilterArgs(\n        filter_type=\"Exclude\",\n        name=\"Test Exclude Debug\",\n        regexp=\".*DEBUG.*\",\n    )])\nhttp_traces_source = sumologic.HttpSource(\"httpTracesSource\",\n    category=\"my/source/category\",\n    collector_id=collector.id,\n    content_type=\"Zipkin\",\n    description=\"My description\")\nkinesis_log = sumologic.HttpSource(\"kinesisLog\",\n    category=\"demo-category\",\n    collector_id=sumologic_collector[\"test\"][\"id\"],\n    content_type=\"KinesisLog\",\n    description=\"demo-desc\")\nhttp_otlp_source = sumologic.HttpSource(\"httpOtlpSource\",\n    category=\"my/source/category\",\n    collector_id=sumologic_collector[\"test\"][\"id\"],\n    content_type=\"Otlp\",\n    description=\"My description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var httpSource = new SumoLogic.HttpSource(\"httpSource\", new()\n    {\n        Category = \"my/source/category\",\n        CollectorId = collector.Id,\n        Description = \"My description\",\n        Filters = new[]\n        {\n            new SumoLogic.Inputs.HttpSourceFilterArgs\n            {\n                FilterType = \"Exclude\",\n                Name = \"Test Exclude Debug\",\n                Regexp = \".*DEBUG.*\",\n            },\n        },\n    });\n\n    var httpTracesSource = new SumoLogic.HttpSource(\"httpTracesSource\", new()\n    {\n        Category = \"my/source/category\",\n        CollectorId = collector.Id,\n        ContentType = \"Zipkin\",\n        Description = \"My description\",\n    });\n\n    var kinesisLog = new SumoLogic.HttpSource(\"kinesisLog\", new()\n    {\n        Category = \"demo-category\",\n        CollectorId = sumologic_collector.Test.Id,\n        ContentType = \"KinesisLog\",\n        Description = \"demo-desc\",\n    });\n\n    var httpOtlpSource = new SumoLogic.HttpSource(\"httpOtlpSource\", new()\n    {\n        Category = \"my/source/category\",\n        CollectorId = sumologic_collector.Test.Id,\n        ContentType = \"Otlp\",\n        Description = \"My description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"httpSource\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tFilters: HttpSourceFilterArray{\n\t\t\t\t\u0026HttpSourceFilterArgs{\n\t\t\t\t\tFilterType: pulumi.String(\"Exclude\"),\n\t\t\t\t\tName:       pulumi.String(\"Test Exclude Debug\"),\n\t\t\t\t\tRegexp:     pulumi.String(\".*DEBUG.*\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"httpTracesSource\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"Zipkin\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"kinesisLog\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"demo-category\"),\n\t\t\tCollectorId: pulumi.Any(sumologic_collector.Test.Id),\n\t\t\tContentType: pulumi.String(\"KinesisLog\"),\n\t\t\tDescription: pulumi.String(\"demo-desc\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewHttpSource(ctx, \"httpOtlpSource\", \u0026sumologic.HttpSourceArgs{\n\t\t\tCategory:    pulumi.String(\"my/source/category\"),\n\t\t\tCollectorId: pulumi.Any(sumologic_collector.Test.Id),\n\t\t\tContentType: pulumi.String(\"Otlp\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.HttpSource;\nimport com.pulumi.sumologic.HttpSourceArgs;\nimport com.pulumi.sumologic.inputs.HttpSourceFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var httpSource = new HttpSource(\"httpSource\", HttpSourceArgs.builder()        \n            .category(\"my/source/category\")\n            .collectorId(collector.id())\n            .description(\"My description\")\n            .filters(HttpSourceFilterArgs.builder()\n                .filterType(\"Exclude\")\n                .name(\"Test Exclude Debug\")\n                .regexp(\".*DEBUG.*\")\n                .build())\n            .build());\n\n        var httpTracesSource = new HttpSource(\"httpTracesSource\", HttpSourceArgs.builder()        \n            .category(\"my/source/category\")\n            .collectorId(collector.id())\n            .contentType(\"Zipkin\")\n            .description(\"My description\")\n            .build());\n\n        var kinesisLog = new HttpSource(\"kinesisLog\", HttpSourceArgs.builder()        \n            .category(\"demo-category\")\n            .collectorId(sumologic_collector.test().id())\n            .contentType(\"KinesisLog\")\n            .description(\"demo-desc\")\n            .build());\n\n        var httpOtlpSource = new HttpSource(\"httpOtlpSource\", HttpSourceArgs.builder()        \n            .category(\"my/source/category\")\n            .collectorId(sumologic_collector.test().id())\n            .contentType(\"Otlp\")\n            .description(\"My description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  httpSource:\n    type: sumologic:HttpSource\n    properties:\n      category: my/source/category\n      collectorId: ${collector.id}\n      description: My description\n      filters:\n        - filterType: Exclude\n          name: Test Exclude Debug\n          regexp: .*DEBUG.*\n  httpTracesSource:\n    type: sumologic:HttpSource\n    properties:\n      category: my/source/category\n      collectorId: ${collector.id}\n      contentType: Zipkin\n      description: My description\n  kinesisLog:\n    type: sumologic:HttpSource\n    properties:\n      category: demo-category\n      collectorId: ${sumologic_collector.test.id}\n      contentType: KinesisLog\n      description: demo-desc\n  httpOtlpSource:\n    type: sumologic:HttpSource\n    properties:\n      category: my/source/category\n      collectorId: ${sumologic_collector.test.id}\n      contentType: Otlp\n      description: My description\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nHTTP sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/httpSource:HttpSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/httpSource:HttpSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source [2]https://help.sumologic.com/Traces/HTTP_Traces_Source [3]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source [4]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/OTLP_HTTP_Source ",
            "properties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "When configuring a HTTP Traces Source, set this property to `Zipkin`. When configuring a Kinesis Logs Source, set this property to `KinesisLog`. When configuring a HTTP OTLP Source, set this property to `Otlp`. This should only be used when creating a Traces, Kinesis Log or HTTP OTLP source.\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean",
                    "description": "When set to `true`, will create one log message per HTTP request.\n"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use for sending data to this source.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "name",
                "url"
            ],
            "inputProperties": {
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "When configuring a HTTP Traces Source, set this property to `Zipkin`. When configuring a Kinesis Logs Source, set this property to `KinesisLog`. When configuring a HTTP OTLP Source, set this property to `Otlp`. This should only be used when creating a Traces, Kinesis Log or HTTP OTLP source.\n"
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean",
                    "description": "When set to `true`, will create one log message per HTTP request.\n"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpSource resources.\n",
                "properties": {
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "When configuring a HTTP Traces Source, set this property to `Zipkin`. When configuring a Kinesis Logs Source, set this property to `KinesisLog`. When configuring a HTTP OTLP Source, set this property to `Otlp`. This should only be used when creating a Traces, Kinesis Log or HTTP OTLP source.\n"
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/HttpSourceDefaultDateFormat:HttpSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/HttpSourceFilter:HttpSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean",
                        "description": "When set to `true`, will create one log message per HTTP request.\n"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use for sending data to this source.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/ingestBudget:IngestBudget": {
            "description": "Provides a [Sumologic Ingest Budget](https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets). To assign an Ingest Budget to the Collector use the field `_budget` with the Field Value of the Ingest Budget to assign.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst budget = new sumologic.IngestBudget(\"budget\", {\n    capacityBytes: 30000000000,\n    description: \"For testing purposes\",\n    fieldValue: \"test\",\n});\nconst collector = new sumologic.Collector(\"collector\", {\n    fields: {\n        _budget: budget.fieldValue,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nbudget = sumologic.IngestBudget(\"budget\",\n    capacity_bytes=30000000000,\n    description=\"For testing purposes\",\n    field_value=\"test\")\ncollector = sumologic.Collector(\"collector\", fields={\n    \"_budget\": budget.field_value,\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var budget = new SumoLogic.IngestBudget(\"budget\", new()\n    {\n        CapacityBytes = 30000000000,\n        Description = \"For testing purposes\",\n        FieldValue = \"test\",\n    });\n\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Fields = \n        {\n            { \"_budget\", budget.FieldValue },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbudget, err := sumologic.NewIngestBudget(ctx, \"budget\", \u0026sumologic.IngestBudgetArgs{\n\t\t\tCapacityBytes: pulumi.Int(30000000000),\n\t\t\tDescription:   pulumi.String(\"For testing purposes\"),\n\t\t\tFieldValue:    pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tFields: pulumi.StringMap{\n\t\t\t\t\"_budget\": budget.FieldValue,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.IngestBudget;\nimport com.pulumi.sumologic.IngestBudgetArgs;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var budget = new IngestBudget(\"budget\", IngestBudgetArgs.builder()        \n            .capacityBytes(30000000000)\n            .description(\"For testing purposes\")\n            .fieldValue(\"test\")\n            .build());\n\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .fields(Map.of(\"_budget\", budget.fieldValue()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  collector:\n    type: sumologic:Collector\n    properties:\n      fields:\n        _budget: ${budget.fieldValue}\n  budget:\n    type: sumologic:IngestBudget\n    properties:\n      capacityBytes: 3e+10\n      description: For testing purposes\n      fieldValue: test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIngest budgets can be imported using the name, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/ingestBudget:IngestBudget budget budgetName\n```\n\n [1]https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets [2]https://en.wikipedia.org/wiki/Tz_database ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ingest budget.\n"
                },
                "fieldValue": {
                    "type": "string",
                    "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "required": [
                "capacityBytes",
                "fieldValue",
                "name"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the ingest budget.\n"
                },
                "fieldValue": {
                    "type": "string",
                    "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "requiredInputs": [
                "capacityBytes",
                "fieldValue"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IngestBudget resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                    },
                    "capacityBytes": {
                        "type": "integer",
                        "description": "Capacity of the ingest budget, in bytes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the ingest budget.\n"
                    },
                    "fieldValue": {
                        "type": "string",
                        "description": "Custom field value that is used to assign Collectors to the ingest budget.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                    },
                    "resetTime": {
                        "type": "string",
                        "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/ingestBudgetV2:IngestBudgetV2": {
            "description": "Provides a [Sumologic Ingest Budget v2][1].This API is in private beta and is not available until given access. To participate in the beta program contact your Sumo Logic account representative.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst budget = new sumologic.IngestBudgetV2(\"budget\", {\n    action: \"keepCollecting\",\n    auditThreshold: 85,\n    capacityBytes: 30000000000,\n    description: \"For testing purposes\",\n    resetTime: \"00:00\",\n    scope: \"_sourceCategory=*prod*nginx*\",\n    timezone: \"Etc/UTC\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nbudget = sumologic.IngestBudgetV2(\"budget\",\n    action=\"keepCollecting\",\n    audit_threshold=85,\n    capacity_bytes=30000000000,\n    description=\"For testing purposes\",\n    reset_time=\"00:00\",\n    scope=\"_sourceCategory=*prod*nginx*\",\n    timezone=\"Etc/UTC\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var budget = new SumoLogic.IngestBudgetV2(\"budget\", new()\n    {\n        Action = \"keepCollecting\",\n        AuditThreshold = 85,\n        CapacityBytes = 30000000000,\n        Description = \"For testing purposes\",\n        ResetTime = \"00:00\",\n        Scope = \"_sourceCategory=*prod*nginx*\",\n        Timezone = \"Etc/UTC\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewIngestBudgetV2(ctx, \"budget\", \u0026sumologic.IngestBudgetV2Args{\n\t\t\tAction:         pulumi.String(\"keepCollecting\"),\n\t\t\tAuditThreshold: pulumi.Int(85),\n\t\t\tCapacityBytes:  pulumi.Int(30000000000),\n\t\t\tDescription:    pulumi.String(\"For testing purposes\"),\n\t\t\tResetTime:      pulumi.String(\"00:00\"),\n\t\t\tScope:          pulumi.String(\"_sourceCategory=*prod*nginx*\"),\n\t\t\tTimezone:       pulumi.String(\"Etc/UTC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.IngestBudgetV2;\nimport com.pulumi.sumologic.IngestBudgetV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var budget = new IngestBudgetV2(\"budget\", IngestBudgetV2Args.builder()        \n            .action(\"keepCollecting\")\n            .auditThreshold(85)\n            .capacityBytes(30000000000)\n            .description(\"For testing purposes\")\n            .resetTime(\"00:00\")\n            .scope(\"_sourceCategory=*prod*nginx*\")\n            .timezone(\"Etc/UTC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  budget:\n    type: sumologic:IngestBudgetV2\n    properties:\n      action: keepCollecting\n      auditThreshold: 85\n      capacityBytes: 3e+10\n      description: For testing purposes\n      resetTime: 00:00\n      scope: _sourceCategory=*prod*nginx*\n      timezone: Etc/UTC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIngest budgets can be imported using the name, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/ingestBudgetV2:IngestBudgetV2 budget budgetName\n```\n\n [1]https://help.sumologic.com/Beta/Metadata_Ingest_Budgets [2]https://en.wikipedia.org/wiki/Tz_database ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "auditThreshold": {
                    "type": "integer",
                    "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "required": [
                "action",
                "capacityBytes",
                "name",
                "resetTime",
                "scope",
                "timezone"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                },
                "auditThreshold": {
                    "type": "integer",
                    "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                },
                "capacityBytes": {
                    "type": "integer",
                    "description": "Capacity of the ingest budget, in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                },
                "resetTime": {
                    "type": "string",
                    "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                }
            },
            "requiredInputs": [
                "action",
                "capacityBytes",
                "resetTime",
                "scope",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IngestBudgetV2 resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to take when ingest budget's capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.\n"
                    },
                    "auditThreshold": {
                        "type": "integer",
                        "description": "The threshold as a percentage of when an ingest budget's capacity usage is logged in the Audit Index.\n"
                    },
                    "capacityBytes": {
                        "type": "integer",
                        "description": "Capacity of the ingest budget, in bytes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the collector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the ingest budget. This must be unique across all of the ingest budgets\n"
                    },
                    "resetTime": {
                        "type": "string",
                        "description": "Reset time of the ingest budget in HH:MM format. Defaults to `00:00`\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/installedCollector:InstalledCollector": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst installedCollector = new sumologic.InstalledCollector(\"installed_collector\", {\n    category: \"macos/test\",\n    ephemeral: true,\n    fields: {\n        key: \"value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ninstalled_collector = sumologic.InstalledCollector(\"installedCollector\",\n    category=\"macos/test\",\n    ephemeral=True,\n    fields={\n        \"key\": \"value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var installedCollector = new SumoLogic.InstalledCollector(\"installedCollector\", new()\n    {\n        Category = \"macos/test\",\n        Ephemeral = true,\n        Fields = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewInstalledCollector(ctx, \"installedCollector\", \u0026sumologic.InstalledCollectorArgs{\n\t\t\tCategory:  pulumi.String(\"macos/test\"),\n\t\t\tEphemeral: pulumi.Bool(true),\n\t\t\tFields: pulumi.StringMap{\n\t\t\t\t\"key\": pulumi.String(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.InstalledCollector;\nimport com.pulumi.sumologic.InstalledCollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var installedCollector = new InstalledCollector(\"installedCollector\", InstalledCollectorArgs.builder()        \n            .category(\"macos/test\")\n            .ephemeral(true)\n            .fields(Map.of(\"key\", \"value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  installedCollector:\n    type: sumologic:InstalledCollector\n    properties:\n      category: macos/test\n      ephemeral: true\n      fields:\n        key: value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCollectors can be imported using the collector id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/installedCollector:InstalledCollector test 1234567890\n```\n\n Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/installedCollector:InstalledCollector test my_test_collector\n```\n\n [1]https://help.sumologic.com/03Send-Data/Installed-Collectors/01About-Installed-Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields [4]https://www.terraform.io/docs/configuration/resources.html#prevent_destroy [5]:https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral ",
            "properties": {
                "alive": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "collectorVersion": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "ephemeral": {
                    "type": "boolean",
                    "description": "When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "hostName": {
                    "type": "string"
                },
                "lastSeenAlive": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "sourceSyncMode": {
                    "type": "string"
                },
                "targetCpu": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "required": [
                "alive",
                "collectorVersion",
                "ephemeral",
                "lastSeenAlive",
                "name"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the collector.\n"
                },
                "ephemeral": {
                    "type": "boolean",
                    "description": "When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].\n"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map containing [key/value pairs][3].\n"
                },
                "hostName": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                },
                "sourceSyncMode": {
                    "type": "string"
                },
                "targetCpu": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string",
                    "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                }
            },
            "requiredInputs": [
                "ephemeral"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstalledCollector resources.\n",
                "properties": {
                    "alive": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string",
                        "description": "The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.\n"
                    },
                    "collectorVersion": {
                        "type": "string"
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the collector.\n"
                    },
                    "ephemeral": {
                        "type": "boolean",
                        "description": "When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].\n"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map containing [key/value pairs][3].\n"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "lastSeenAlive": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.\n"
                    },
                    "sourceSyncMode": {
                        "type": "string"
                    },
                    "targetCpu": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/kineisLogSource:KineisLogSource": {
            "description": "Provides a [Sumologic Kinesis Log source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source). This source is used to ingest log via Kinesis Firehose from AWS.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst kinesisLogAccessKey = new sumologic.KineisLogSource(\"kinesis_log_access_key\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"prod/kinesis/log\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"KinesisLog\",\n    description: \"Description for Kinesis Log Source\",\n    path: {\n        bucketName: \"testBucket\",\n        pathExpression: \"http-endpoint-failed/*\",\n        scanInterval: 30000,\n        type: \"KinesisLogPath\",\n    },\n});\nconst kinesisLogRoleArn = new sumologic.KineisLogSource(\"kinesis_log_role_arn\", {\n    authentication: {\n        roleArn: \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n        type: \"AWSRoleBasedAuthentication\",\n    },\n    category: \"prod/kinesis/log\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"KinesisLog\",\n    description: \"Description for Kinesis Log Source\",\n    path: {\n        bucketName: \"testBucket\",\n        pathExpression: \"http-endpoint-failed/*\",\n        scanInterval: 30000,\n        type: \"KinesisLogPath\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\nkinesis_log_access_key = sumologic.KineisLogSource(\"kinesisLogAccessKey\",\n    authentication=sumologic.KineisLogSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"prod/kinesis/log\",\n    collector_id=collector.id,\n    content_type=\"KinesisLog\",\n    description=\"Description for Kinesis Log Source\",\n    path=sumologic.KineisLogSourcePathArgs(\n        bucket_name=\"testBucket\",\n        path_expression=\"http-endpoint-failed/*\",\n        scan_interval=30000,\n        type=\"KinesisLogPath\",\n    ))\nkinesis_log_role_arn = sumologic.KineisLogSource(\"kinesisLogRoleArn\",\n    authentication=sumologic.KineisLogSourceAuthenticationArgs(\n        role_arn=\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n        type=\"AWSRoleBasedAuthentication\",\n    ),\n    category=\"prod/kinesis/log\",\n    collector_id=collector.id,\n    content_type=\"KinesisLog\",\n    description=\"Description for Kinesis Log Source\",\n    path=sumologic.KineisLogSourcePathArgs(\n        bucket_name=\"testBucket\",\n        path_expression=\"http-endpoint-failed/*\",\n        scan_interval=30000,\n        type=\"KinesisLogPath\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var kinesisLogAccessKey = new SumoLogic.KineisLogSource(\"kinesisLogAccessKey\", new()\n    {\n        Authentication = new SumoLogic.Inputs.KineisLogSourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"prod/kinesis/log\",\n        CollectorId = collector.Id,\n        ContentType = \"KinesisLog\",\n        Description = \"Description for Kinesis Log Source\",\n        Path = new SumoLogic.Inputs.KineisLogSourcePathArgs\n        {\n            BucketName = \"testBucket\",\n            PathExpression = \"http-endpoint-failed/*\",\n            ScanInterval = 30000,\n            Type = \"KinesisLogPath\",\n        },\n    });\n\n    var kinesisLogRoleArn = new SumoLogic.KineisLogSource(\"kinesisLogRoleArn\", new()\n    {\n        Authentication = new SumoLogic.Inputs.KineisLogSourceAuthenticationArgs\n        {\n            RoleArn = \"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\",\n            Type = \"AWSRoleBasedAuthentication\",\n        },\n        Category = \"prod/kinesis/log\",\n        CollectorId = collector.Id,\n        ContentType = \"KinesisLog\",\n        Description = \"Description for Kinesis Log Source\",\n        Path = new SumoLogic.Inputs.KineisLogSourcePathArgs\n        {\n            BucketName = \"testBucket\",\n            PathExpression = \"http-endpoint-failed/*\",\n            ScanInterval = 30000,\n            Type = \"KinesisLogPath\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewKineisLogSource(ctx, \"kinesisLogAccessKey\", \u0026sumologic.KineisLogSourceArgs{\n\t\t\tAuthentication: \u0026KineisLogSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"prod/kinesis/log\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"KinesisLog\"),\n\t\t\tDescription: pulumi.String(\"Description for Kinesis Log Source\"),\n\t\t\tPath: \u0026KineisLogSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"testBucket\"),\n\t\t\t\tPathExpression: pulumi.String(\"http-endpoint-failed/*\"),\n\t\t\t\tScanInterval:   pulumi.Int(30000),\n\t\t\t\tType:           pulumi.String(\"KinesisLogPath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewKineisLogSource(ctx, \"kinesisLogRoleArn\", \u0026sumologic.KineisLogSourceArgs{\n\t\t\tAuthentication: \u0026KineisLogSourceAuthenticationArgs{\n\t\t\t\tRoleArn: pulumi.String(\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\"),\n\t\t\t\tType:    pulumi.String(\"AWSRoleBasedAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"prod/kinesis/log\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"KinesisLog\"),\n\t\t\tDescription: pulumi.String(\"Description for Kinesis Log Source\"),\n\t\t\tPath: \u0026KineisLogSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"testBucket\"),\n\t\t\t\tPathExpression: pulumi.String(\"http-endpoint-failed/*\"),\n\t\t\t\tScanInterval:   pulumi.Int(30000),\n\t\t\t\tType:           pulumi.String(\"KinesisLogPath\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.KineisLogSource;\nimport com.pulumi.sumologic.KineisLogSourceArgs;\nimport com.pulumi.sumologic.inputs.KineisLogSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.KineisLogSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var kinesisLogAccessKey = new KineisLogSource(\"kinesisLogAccessKey\", KineisLogSourceArgs.builder()        \n            .authentication(KineisLogSourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"prod/kinesis/log\")\n            .collectorId(collector.id())\n            .contentType(\"KinesisLog\")\n            .description(\"Description for Kinesis Log Source\")\n            .path(KineisLogSourcePathArgs.builder()\n                .bucketName(\"testBucket\")\n                .pathExpression(\"http-endpoint-failed/*\")\n                .scanInterval(30000)\n                .type(\"KinesisLogPath\")\n                .build())\n            .build());\n\n        var kinesisLogRoleArn = new KineisLogSource(\"kinesisLogRoleArn\", KineisLogSourceArgs.builder()        \n            .authentication(KineisLogSourceAuthenticationArgs.builder()\n                .roleArn(\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\")\n                .type(\"AWSRoleBasedAuthentication\")\n                .build())\n            .category(\"prod/kinesis/log\")\n            .collectorId(collector.id())\n            .contentType(\"KinesisLog\")\n            .description(\"Description for Kinesis Log Source\")\n            .path(KineisLogSourcePathArgs.builder()\n                .bucketName(\"testBucket\")\n                .pathExpression(\"http-endpoint-failed/*\")\n                .scanInterval(30000)\n                .type(\"KinesisLogPath\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  kinesisLogAccessKey:\n    type: sumologic:KineisLogSource\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: prod/kinesis/log\n      collectorId: ${collector.id}\n      contentType: KinesisLog\n      description: Description for Kinesis Log Source\n      path:\n        bucketName: testBucket\n        pathExpression: http-endpoint-failed/*\n        scanInterval: 30000\n        type: KinesisLogPath\n  kinesisLogRoleArn:\n    type: sumologic:KineisLogSource\n    properties:\n      authentication:\n        roleArn: arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\n        type: AWSRoleBasedAuthentication\n      category: prod/kinesis/log\n      collectorId: ${collector.id}\n      contentType: KinesisLog\n      description: Description for Kinesis Log Source\n      path:\n        bucketName: testBucket\n        pathExpression: http-endpoint-failed/*\n        scanInterval: 30000\n        type: KinesisLogPath\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nKinesis Log sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kineisLogSource:KineisLogSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kineisLogSource:KineisLogSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KineisLogSourceAuthentication:KineisLogSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KineisLogSourceDefaultDateFormat:KineisLogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KineisLogSourceFilter:KineisLogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KineisLogSourcePath:KineisLogSourcePath",
                    "description": "The location of S3 bucket for failed Kinesis log data.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to be used while creating Kinesis Firehose on AWS.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "collectorId",
                "contentType",
                "name",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KineisLogSourceAuthentication:KineisLogSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KineisLogSourceDefaultDateFormat:KineisLogSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KineisLogSourceFilter:KineisLogSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KineisLogSourcePath:KineisLogSourcePath",
                    "description": "The location of S3 bucket for failed Kinesis log data.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "collectorId",
                "contentType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KineisLogSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/KineisLogSourceAuthentication:KineisLogSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KineisLogSourceDefaultDateFormat:KineisLogSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KineisLogSourceFilter:KineisLogSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/KineisLogSourcePath:KineisLogSourcePath",
                        "description": "The location of S3 bucket for failed Kinesis log data.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to be used while creating Kinesis Firehose on AWS.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/kinesisMetricsSource:KinesisMetricsSource": {
            "description": "\n\n\n## Import\n\nKinesis Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test my-test-collector/my-test-source\n```\n\n ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to used while creating Kinesis Firehose on AWS.\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "messagePerRequest": {
                    "type": "boolean"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KinesisMetricsSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourceAuthentication:KinesisMetricsSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n"
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KinesisMetricsSourceDefaultDateFormat:KinesisMetricsSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/KinesisMetricsSourceFilter:KinesisMetricsSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "messagePerRequest": {
                        "type": "boolean"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/KinesisMetricsSourcePath:KinesisMetricsSourcePath",
                        "description": "The location to scan for new data.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to used while creating Kinesis Firehose on AWS.\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/lookupTable:LookupTable": {
            "description": "Provides a [Sumologic Lookup Table](https://help.sumologic.com/05Search/Lookup_Tables).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst lookupTable = new sumologic.LookupTable(\"lookupTable\", {\n    description: \"some description\",\n    fields: [\n        {\n            fieldName: \"FieldName1\",\n            fieldType: \"boolean\",\n        },\n        {\n            fieldName: \"FieldName2\",\n            fieldType: \"string\",\n        },\n    ],\n    parentFolderId: \"\u003cpersonal folder id\u003e\",\n    primaryKeys: [\"FieldName1\"],\n    sizeLimitAction: \"DeleteOldData\",\n    ttl: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nlookup_table = sumologic.LookupTable(\"lookupTable\",\n    description=\"some description\",\n    fields=[\n        sumologic.LookupTableFieldArgs(\n            field_name=\"FieldName1\",\n            field_type=\"boolean\",\n        ),\n        sumologic.LookupTableFieldArgs(\n            field_name=\"FieldName2\",\n            field_type=\"string\",\n        ),\n    ],\n    parent_folder_id=\"\u003cpersonal folder id\u003e\",\n    primary_keys=[\"FieldName1\"],\n    size_limit_action=\"DeleteOldData\",\n    ttl=100)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lookupTable = new SumoLogic.LookupTable(\"lookupTable\", new()\n    {\n        Description = \"some description\",\n        Fields = new[]\n        {\n            new SumoLogic.Inputs.LookupTableFieldArgs\n            {\n                FieldName = \"FieldName1\",\n                FieldType = \"boolean\",\n            },\n            new SumoLogic.Inputs.LookupTableFieldArgs\n            {\n                FieldName = \"FieldName2\",\n                FieldType = \"string\",\n            },\n        },\n        ParentFolderId = \"\u003cpersonal folder id\u003e\",\n        PrimaryKeys = new[]\n        {\n            \"FieldName1\",\n        },\n        SizeLimitAction = \"DeleteOldData\",\n        Ttl = 100,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewLookupTable(ctx, \"lookupTable\", \u0026sumologic.LookupTableArgs{\n\t\t\tDescription: pulumi.String(\"some description\"),\n\t\t\tFields: LookupTableFieldArray{\n\t\t\t\t\u0026LookupTableFieldArgs{\n\t\t\t\t\tFieldName: pulumi.String(\"FieldName1\"),\n\t\t\t\t\tFieldType: pulumi.String(\"boolean\"),\n\t\t\t\t},\n\t\t\t\t\u0026LookupTableFieldArgs{\n\t\t\t\t\tFieldName: pulumi.String(\"FieldName2\"),\n\t\t\t\t\tFieldType: pulumi.String(\"string\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tParentFolderId: pulumi.String(\"\u003cpersonal folder id\u003e\"),\n\t\t\tPrimaryKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FieldName1\"),\n\t\t\t},\n\t\t\tSizeLimitAction: pulumi.String(\"DeleteOldData\"),\n\t\t\tTtl:             pulumi.Int(100),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.LookupTable;\nimport com.pulumi.sumologic.LookupTableArgs;\nimport com.pulumi.sumologic.inputs.LookupTableFieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lookupTable = new LookupTable(\"lookupTable\", LookupTableArgs.builder()        \n            .description(\"some description\")\n            .fields(            \n                LookupTableFieldArgs.builder()\n                    .fieldName(\"FieldName1\")\n                    .fieldType(\"boolean\")\n                    .build(),\n                LookupTableFieldArgs.builder()\n                    .fieldName(\"FieldName2\")\n                    .fieldType(\"string\")\n                    .build())\n            .parentFolderId(\"\u003cpersonal folder id\u003e\")\n            .primaryKeys(\"FieldName1\")\n            .sizeLimitAction(\"DeleteOldData\")\n            .ttl(100)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lookupTable:\n    type: sumologic:LookupTable\n    properties:\n      description: some description\n      fields:\n        - fieldName: FieldName1\n          fieldType: boolean\n        - fieldName: FieldName2\n          fieldType: string\n      parentFolderId: \u003cpersonal folder id\u003e\n      primaryKeys:\n        - FieldName1\n      sizeLimitAction: DeleteOldData\n      ttl: 100\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the partition.\n\n\n## Import\n\nLookup Tables can be imported using the id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/lookupTable:LookupTable test 1234567890\n```\n\n [1]https://help.sumologic.com/05Search/Lookup_Tables ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the lookup table.\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                    },
                    "description": "The list of fields in the lookup table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the lookup table.\n"
                },
                "parentFolderId": {
                    "type": "string",
                    "description": "The parent-folder-path identifier of the lookup table in the Library.\n"
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The primary key field names.\n"
                },
                "sizeLimitAction": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer",
                    "description": "A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.\n"
                }
            },
            "required": [
                "description",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the lookup table.\n"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                    },
                    "description": "The list of fields in the lookup table.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the lookup table.\n",
                    "willReplaceOnChanges": true
                },
                "parentFolderId": {
                    "type": "string",
                    "description": "The parent-folder-path identifier of the lookup table in the Library.\n",
                    "willReplaceOnChanges": true
                },
                "primaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The primary key field names.\n",
                    "willReplaceOnChanges": true
                },
                "sizeLimitAction": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer",
                    "description": "A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LookupTable resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the lookup table.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/LookupTableField:LookupTableField"
                        },
                        "description": "The list of fields in the lookup table.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the lookup table.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentFolderId": {
                        "type": "string",
                        "description": "The parent-folder-path identifier of the lookup table in the Library.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The primary key field names.\n",
                        "willReplaceOnChanges": true
                    },
                    "sizeLimitAction": {
                        "type": "string"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/metadataSource:MetadataSource": {
            "description": "Provides a Sumologic Metadata (Tag) source. This source allows you to collect tags from EC2 instances running on AWS.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n\n## Import\n\nMetadata sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/metadataSource:MetadataSource test 123/456\n```\n\n Metadata sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/metadataSource:MetadataSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]:https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Metadata-(Tag)-Source#Define_EC2_tag_filters [3]:https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Metadata-(Tag)-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication",
                    "description": "Authentication details for AWS access.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. For Metadata source this is `AwsMetadata`. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication",
                    "description": "Authentication details for AWS access.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. For Metadata source this is `AwsMetadata`. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/MetadataSourceAuthentication:MetadataSourceAuthentication",
                        "description": "Authentication details for AWS access.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. For Metadata source this is `AwsMetadata`. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MetadataSourceDefaultDateFormat:MetadataSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MetadataSourceFilter:MetadataSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/MetadataSourcePath:MetadataSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/monitor:Monitor": {
            "description": "Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).\nIf Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor).\n\n## Example SLO Monitors\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfSloMonitor1 = new sumologic.Monitor(\"tf_slo_monitor_1\", {\n    contentType: \"Monitor\",\n    evaluationDelay: \"5m\",\n    isDisabled: false,\n    monitorType: \"Slo\",\n    notifications: [{\n        notification: {\n            connectionType: \"Email\",\n            messageBody: \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            recipients: [\"abc@example.com\"],\n            subject: \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n            timeZone: \"PST\",\n        },\n        runForTriggerTypes: [\n            \"Critical\",\n            \"ResolvedCritical\",\n        ],\n    }],\n    playbook: \"test playbook\",\n    sloId: \"0000000000000009\",\n    triggerConditions: {\n        sloSliCondition: {\n            critical: {\n                sliThreshold: 99.5,\n            },\n            warning: {\n                sliThreshold: 99.9,\n            },\n        },\n    },\n    type: \"MonitorsLibraryMonitor\",\n});\nconst tfSloMonitor2 = new sumologic.Monitor(\"tf_slo_monitor_2\", {\n    contentType: \"Monitor\",\n    evaluationDelay: \"5m\",\n    isDisabled: false,\n    monitorType: \"Slo\",\n    sloId: \"0000000000000009\",\n    triggerConditions: {\n        sloBurnRateCondition: {\n            critical: {\n                burnRateThreshold: 10,\n                timeRange: \"1d\",\n            },\n            warning: {\n                burnRateThreshold: 5,\n                timeRange: \"1d\",\n            },\n        },\n    },\n    type: \"MonitorsLibraryMonitor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_slo_monitor1 = sumologic.Monitor(\"tfSloMonitor1\",\n    content_type=\"Monitor\",\n    evaluation_delay=\"5m\",\n    is_disabled=False,\n    monitor_type=\"Slo\",\n    notifications=[sumologic.MonitorNotificationArgs(\n        notification=sumologic.MonitorNotificationNotificationArgs(\n            connection_type=\"Email\",\n            message_body=\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n            recipients=[\"abc@example.com\"],\n            subject=\"Monitor Alert: {{TriggerType}} on {{Name}}\",\n            time_zone=\"PST\",\n        ),\n        run_for_trigger_types=[\n            \"Critical\",\n            \"ResolvedCritical\",\n        ],\n    )],\n    playbook=\"test playbook\",\n    slo_id=\"0000000000000009\",\n    trigger_conditions=sumologic.MonitorTriggerConditionsArgs(\n        slo_sli_condition=sumologic.MonitorTriggerConditionsSloSliConditionArgs(\n            critical=sumologic.MonitorTriggerConditionsSloSliConditionCriticalArgs(\n                sli_threshold=99.5,\n            ),\n            warning=sumologic.MonitorTriggerConditionsSloSliConditionWarningArgs(\n                sli_threshold=99.9,\n            ),\n        ),\n    ),\n    type=\"MonitorsLibraryMonitor\")\ntf_slo_monitor2 = sumologic.Monitor(\"tfSloMonitor2\",\n    content_type=\"Monitor\",\n    evaluation_delay=\"5m\",\n    is_disabled=False,\n    monitor_type=\"Slo\",\n    slo_id=\"0000000000000009\",\n    trigger_conditions=sumologic.MonitorTriggerConditionsArgs(\n        slo_burn_rate_condition=sumologic.MonitorTriggerConditionsSloBurnRateConditionArgs(\n            critical=sumologic.MonitorTriggerConditionsSloBurnRateConditionCriticalArgs(\n                burn_rate_threshold=10,\n                time_range=\"1d\",\n            ),\n            warning=sumologic.MonitorTriggerConditionsSloBurnRateConditionWarningArgs(\n                burn_rate_threshold=5,\n                time_range=\"1d\",\n            ),\n        ),\n    ),\n    type=\"MonitorsLibraryMonitor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfSloMonitor1 = new SumoLogic.Monitor(\"tfSloMonitor1\", new()\n    {\n        ContentType = \"Monitor\",\n        EvaluationDelay = \"5m\",\n        IsDisabled = false,\n        MonitorType = \"Slo\",\n        Notifications = new[]\n        {\n            new SumoLogic.Inputs.MonitorNotificationArgs\n            {\n                Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                {\n                    ConnectionType = \"Email\",\n                    MessageBody = \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                    Recipients = new[]\n                    {\n                        \"abc@example.com\",\n                    },\n                    Subject = \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                    TimeZone = \"PST\",\n                },\n                RunForTriggerTypes = new[]\n                {\n                    \"Critical\",\n                    \"ResolvedCritical\",\n                },\n            },\n        },\n        Playbook = \"test playbook\",\n        SloId = \"0000000000000009\",\n        TriggerConditions = new SumoLogic.Inputs.MonitorTriggerConditionsArgs\n        {\n            SloSliCondition = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionArgs\n            {\n                Critical = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionCriticalArgs\n                {\n                    SliThreshold = 99.5,\n                },\n                Warning = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionWarningArgs\n                {\n                    SliThreshold = 99.9,\n                },\n            },\n        },\n        Type = \"MonitorsLibraryMonitor\",\n    });\n\n    var tfSloMonitor2 = new SumoLogic.Monitor(\"tfSloMonitor2\", new()\n    {\n        ContentType = \"Monitor\",\n        EvaluationDelay = \"5m\",\n        IsDisabled = false,\n        MonitorType = \"Slo\",\n        SloId = \"0000000000000009\",\n        TriggerConditions = new SumoLogic.Inputs.MonitorTriggerConditionsArgs\n        {\n            SloBurnRateCondition = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionArgs\n            {\n                Critical = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionCriticalArgs\n                {\n                    BurnRateThreshold = 10,\n                    TimeRange = \"1d\",\n                },\n                Warning = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionWarningArgs\n                {\n                    BurnRateThreshold = 5,\n                    TimeRange = \"1d\",\n                },\n            },\n        },\n        Type = \"MonitorsLibraryMonitor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitor(ctx, \"tfSloMonitor1\", \u0026sumologic.MonitorArgs{\n\t\t\tContentType:     pulumi.String(\"Monitor\"),\n\t\t\tEvaluationDelay: pulumi.String(\"5m\"),\n\t\t\tIsDisabled:      pulumi.Bool(false),\n\t\t\tMonitorType:     pulumi.String(\"Slo\"),\n\t\t\tNotifications: MonitorNotificationArray{\n\t\t\t\t\u0026MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Email\"),\n\t\t\t\t\t\tMessageBody:    pulumi.String(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\"),\n\t\t\t\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"abc@example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubject:  pulumi.String(\"Monitor Alert: {{TriggerType}} on {{Name}}\"),\n\t\t\t\t\t\tTimeZone: pulumi.String(\"PST\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPlaybook: pulumi.String(\"test playbook\"),\n\t\t\tSloId:    pulumi.String(\"0000000000000009\"),\n\t\t\tTriggerConditions: \u0026MonitorTriggerConditionsArgs{\n\t\t\t\tSloSliCondition: \u0026MonitorTriggerConditionsSloSliConditionArgs{\n\t\t\t\t\tCritical: \u0026MonitorTriggerConditionsSloSliConditionCriticalArgs{\n\t\t\t\t\t\tSliThreshold: pulumi.Float64(99.5),\n\t\t\t\t\t},\n\t\t\t\t\tWarning: \u0026MonitorTriggerConditionsSloSliConditionWarningArgs{\n\t\t\t\t\t\tSliThreshold: pulumi.Float64(99.9),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewMonitor(ctx, \"tfSloMonitor2\", \u0026sumologic.MonitorArgs{\n\t\t\tContentType:     pulumi.String(\"Monitor\"),\n\t\t\tEvaluationDelay: pulumi.String(\"5m\"),\n\t\t\tIsDisabled:      pulumi.Bool(false),\n\t\t\tMonitorType:     pulumi.String(\"Slo\"),\n\t\t\tSloId:           pulumi.String(\"0000000000000009\"),\n\t\t\tTriggerConditions: \u0026MonitorTriggerConditionsArgs{\n\t\t\t\tSloBurnRateCondition: \u0026MonitorTriggerConditionsSloBurnRateConditionArgs{\n\t\t\t\t\tCritical: \u0026MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{\n\t\t\t\t\t\tBurnRateThreshold: pulumi.Float64(10),\n\t\t\t\t\t\tTimeRange:         pulumi.String(\"1d\"),\n\t\t\t\t\t},\n\t\t\t\t\tWarning: \u0026MonitorTriggerConditionsSloBurnRateConditionWarningArgs{\n\t\t\t\t\t\tBurnRateThreshold: pulumi.Float64(5),\n\t\t\t\t\t\tTimeRange:         pulumi.String(\"1d\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Monitor;\nimport com.pulumi.sumologic.MonitorArgs;\nimport com.pulumi.sumologic.inputs.MonitorNotificationArgs;\nimport com.pulumi.sumologic.inputs.MonitorNotificationNotificationArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloSliConditionArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloSliConditionCriticalArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloSliConditionWarningArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloBurnRateConditionArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloBurnRateConditionCriticalArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerConditionsSloBurnRateConditionWarningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfSloMonitor1 = new Monitor(\"tfSloMonitor1\", MonitorArgs.builder()        \n            .contentType(\"Monitor\")\n            .evaluationDelay(\"5m\")\n            .isDisabled(false)\n            .monitorType(\"Slo\")\n            .notifications(MonitorNotificationArgs.builder()\n                .notification(MonitorNotificationNotificationArgs.builder()\n                    .connectionType(\"Email\")\n                    .messageBody(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\")\n                    .recipients(\"abc@example.com\")\n                    .subject(\"Monitor Alert: {{TriggerType}} on {{Name}}\")\n                    .timeZone(\"PST\")\n                    .build())\n                .runForTriggerTypes(                \n                    \"Critical\",\n                    \"ResolvedCritical\")\n                .build())\n            .playbook(\"test playbook\")\n            .sloId(\"0000000000000009\")\n            .triggerConditions(MonitorTriggerConditionsArgs.builder()\n                .sloSliCondition(MonitorTriggerConditionsSloSliConditionArgs.builder()\n                    .critical(MonitorTriggerConditionsSloSliConditionCriticalArgs.builder()\n                        .sliThreshold(99.5)\n                        .build())\n                    .warning(MonitorTriggerConditionsSloSliConditionWarningArgs.builder()\n                        .sliThreshold(99.9)\n                        .build())\n                    .build())\n                .build())\n            .type(\"MonitorsLibraryMonitor\")\n            .build());\n\n        var tfSloMonitor2 = new Monitor(\"tfSloMonitor2\", MonitorArgs.builder()        \n            .contentType(\"Monitor\")\n            .evaluationDelay(\"5m\")\n            .isDisabled(false)\n            .monitorType(\"Slo\")\n            .sloId(\"0000000000000009\")\n            .triggerConditions(MonitorTriggerConditionsArgs.builder()\n                .sloBurnRateCondition(MonitorTriggerConditionsSloBurnRateConditionArgs.builder()\n                    .critical(MonitorTriggerConditionsSloBurnRateConditionCriticalArgs.builder()\n                        .burnRateThreshold(10)\n                        .timeRange(\"1d\")\n                        .build())\n                    .warning(MonitorTriggerConditionsSloBurnRateConditionWarningArgs.builder()\n                        .burnRateThreshold(5)\n                        .timeRange(\"1d\")\n                        .build())\n                    .build())\n                .build())\n            .type(\"MonitorsLibraryMonitor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfSloMonitor1:\n    type: sumologic:Monitor\n    properties:\n      contentType: Monitor\n      evaluationDelay: 5m\n      isDisabled: false\n      monitorType: Slo\n      notifications:\n        - notification:\n            connectionType: Email\n            messageBody: 'Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}'\n            recipients:\n              - abc@example.com\n            subject: 'Monitor Alert: {{TriggerType}} on {{Name}}'\n            timeZone: PST\n          runForTriggerTypes:\n            - Critical\n            - ResolvedCritical\n      playbook: test playbook\n      sloId: 0000000000000009\n      triggerConditions:\n        sloSliCondition:\n          critical:\n            sliThreshold: 99.5\n          warning:\n            sliThreshold: 99.9\n      type: MonitorsLibraryMonitor\n  tfSloMonitor2:\n    type: sumologic:Monitor\n    properties:\n      contentType: Monitor\n      evaluationDelay: 5m\n      isDisabled: false\n      monitorType: Slo\n      sloId: 0000000000000009\n      triggerConditions:\n        sloBurnRateCondition:\n          critical:\n            burnRateThreshold: 10\n            timeRange: 1d\n          warning:\n            burnRateThreshold: 5\n            timeRange: 1d\n      type: MonitorsLibraryMonitor\n```\n\n## Monitor Folders\n\n\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD\nNOTE: Monitor folders are considered a different resource from Library content folders.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfMonitorFolder1 = new sumologic.MonitorFolder(\"tf_monitor_folder_1\", {\n    description: \"a folder for monitors\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_monitor_folder1 = sumologic.MonitorFolder(\"tfMonitorFolder1\", description=\"a folder for monitors\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfMonitorFolder1 = new SumoLogic.MonitorFolder(\"tfMonitorFolder1\", new()\n    {\n        Description = \"a folder for monitors\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitorFolder(ctx, \"tfMonitorFolder1\", \u0026sumologic.MonitorFolderArgs{\n\t\t\tDescription: pulumi.String(\"a folder for monitors\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.MonitorFolder;\nimport com.pulumi.sumologic.MonitorFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfMonitorFolder1 = new MonitorFolder(\"tfMonitorFolder1\", MonitorFolderArgs.builder()        \n            .description(\"a folder for monitors\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfMonitorFolder1:\n    type: sumologic:MonitorFolder\n    properties:\n      description: a folder for monitors\n```\n=======\nNOTE: Monitor folders are considered a different resource from Library content folders. See [sumologic.MonitorFolder][2] for more details.\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e v2.11.0\n\n## The `trigger_conditions` block\n\nA `trigger_conditions` block configures conditions for sending notifications.\n### Example\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n### Arguments\nA `trigger_conditions` block contains one or more subblocks of the following types:\n- `logs_static_condition`\n- `metrics_static_condition`\n- `logs_outlier_condition`\n- `metrics_outlier_condition`\n- `logs_missing_data_condition`\n- `metrics_missing_data_condition`\n- `slo_sli_condition`\n- `slo_burn_rate_condition`\n\nSubblocks should be limited to at most 1 missing data condition and at most 1 static / outlier condition.\n\nHere is a summary of arguments for each condition type (fields which are not marked as `Required` are optional):\n#### logs_static_condition\n  - `field`\n  - `critical`\n    - `time_range` (Required)\n    - `alert` (Required)\n      - `threshold`\n      - `threshold_type`\n    - `resolution` (Required)\n      - `threshold`\n      - `threshold_type`\n  - `warning`\n    - `time_range` (Required)\n    - `alert` (Required)\n      - `threshold`\n      - `threshold_type`\n    - `resolution` (Required)\n      - `threshold`\n      - `threshold_type`\n#### metrics_static_condition\n  - `critical`\n    - `time_range` (Required)\n    - `occurrence_type` (Required)\n    - `alert` (Required)\n      - `threshold`\n      - `threshold_type`\n    - `resolution` (Required)\n      - `threshold`\n      - `threshold_type`\n  - `warning`\n    - `time_range` (Required)\n    - `occurrence_type` (Required)\n    - `alert` (Required)\n      - `threshold`\n      - `threshold_type`\n    - `resolution` (Required)\n      - `threshold`\n      - `threshold_type`\n#### logs_outlier_condition\n  - `field`\n  - `direction`\n  - `critical`\n     - `window`\n     - `consecutive`\n     - `threshold`\n  - `warning`\n     - `window`\n     - `consecutive`\n     - `threshold`\n#### metrics_outlier_condition\n  - `direction`\n  - `critical`\n     - `baseline_window`\n     - `threshold`\n  - `warning`\n    - `baseline_window`\n    - `threshold`\n#### logs_missing_data_condition\n  - `time_range` (Required)\n#### metrics_missing_data_condition\n  - `time_range` (Required)\n  - `trigger_source` (Required)\n#### slo_sli_condition\n  - `critical`\n    - `sli_threshold` (Required) : The remaining SLI error budget threshold percentage [0,100).\n  - `warning`\n    - `sli_threshold` (Required)\n  \n#### slo_burn_rate_condition\n  - `critical`\n    - `time_range` (Required) : The relative time range for the burn rate percentage evaluation.\n    - `burn_rate_threshold` (Required) : The burn rate percentage threshold.\n  - `warning`\n    - `time_range` (Required)\n    - `burn_rate_threshold` (Required)\n\n## The `triggers` block\n\nThe `triggers` block is deprecated. Please use `trigger_conditions` to specify notification conditions.\n\nHere's an example logs monitor that uses `triggers` to specify trigger conditions:\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfLogsMonitor1 = new sumologic.Monitor(\"tf_logs_monitor_1\", {\n    contentType: \"Monitor\",\n    description: \"tf logs monitor\",\n    isDisabled: false,\n    monitorType: \"Logs\",\n    notifications: [\n        {\n            notification: {\n                connectionType: \"Email\",\n                messageBody: \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                recipients: [\"abc@example.com\"],\n                subject: \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                timeZone: \"PST\",\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n        {\n            notification: {\n                connectionId: \"0000000000ABC123\",\n                connectionType: \"Webhook\",\n            },\n            runForTriggerTypes: [\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        },\n    ],\n    queries: [{\n        query: \"_sourceCategory=event-action info\",\n        rowId: \"A\",\n    }],\n    triggers: [\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"ResultCount\",\n            threshold: 40,\n            thresholdType: \"GreaterThan\",\n            timeRange: \"15m\",\n            triggerSource: \"AllResults\",\n            triggerType: \"Critical\",\n        },\n        {\n            detectionMethod: \"StaticCondition\",\n            occurrenceType: \"ResultCount\",\n            threshold: 40,\n            thresholdType: \"LessThanOrEqual\",\n            timeRange: \"15m\",\n            triggerSource: \"AllResults\",\n            triggerType: \"ResolvedCritical\",\n        },\n    ],\n    type: \"MonitorsLibraryMonitor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_logs_monitor1 = sumologic.Monitor(\"tfLogsMonitor1\",\n    content_type=\"Monitor\",\n    description=\"tf logs monitor\",\n    is_disabled=False,\n    monitor_type=\"Logs\",\n    notifications=[\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_type=\"Email\",\n                message_body=\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                recipients=[\"abc@example.com\"],\n                subject=\"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                time_zone=\"PST\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n        sumologic.MonitorNotificationArgs(\n            notification=sumologic.MonitorNotificationNotificationArgs(\n                connection_id=\"0000000000ABC123\",\n                connection_type=\"Webhook\",\n            ),\n            run_for_trigger_types=[\n                \"Critical\",\n                \"ResolvedCritical\",\n            ],\n        ),\n    ],\n    queries=[sumologic.MonitorQueryArgs(\n        query=\"_sourceCategory=event-action info\",\n        row_id=\"A\",\n    )],\n    triggers=[\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"ResultCount\",\n            threshold=40,\n            threshold_type=\"GreaterThan\",\n            time_range=\"15m\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"Critical\",\n        ),\n        sumologic.MonitorTriggerArgs(\n            detection_method=\"StaticCondition\",\n            occurrence_type=\"ResultCount\",\n            threshold=40,\n            threshold_type=\"LessThanOrEqual\",\n            time_range=\"15m\",\n            trigger_source=\"AllResults\",\n            trigger_type=\"ResolvedCritical\",\n        ),\n    ],\n    type=\"MonitorsLibraryMonitor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfLogsMonitor1 = new SumoLogic.Monitor(\"tfLogsMonitor1\", new()\n    {\n        ContentType = \"Monitor\",\n        Description = \"tf logs monitor\",\n        IsDisabled = false,\n        MonitorType = \"Logs\",\n        Notifications = new[]\n        {\n            new SumoLogic.Inputs.MonitorNotificationArgs\n            {\n                Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                {\n                    ConnectionType = \"Email\",\n                    MessageBody = \"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\",\n                    Recipients = new[]\n                    {\n                        \"abc@example.com\",\n                    },\n                    Subject = \"Monitor Alert: {{TriggerType}} on {{Name}}\",\n                    TimeZone = \"PST\",\n                },\n                RunForTriggerTypes = new[]\n                {\n                    \"Critical\",\n                    \"ResolvedCritical\",\n                },\n            },\n            new SumoLogic.Inputs.MonitorNotificationArgs\n            {\n                Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs\n                {\n                    ConnectionId = \"0000000000ABC123\",\n                    ConnectionType = \"Webhook\",\n                },\n                RunForTriggerTypes = new[]\n                {\n                    \"Critical\",\n                    \"ResolvedCritical\",\n                },\n            },\n        },\n        Queries = new[]\n        {\n            new SumoLogic.Inputs.MonitorQueryArgs\n            {\n                Query = \"_sourceCategory=event-action info\",\n                RowId = \"A\",\n            },\n        },\n        Triggers = new[]\n        {\n            new SumoLogic.Inputs.MonitorTriggerArgs\n            {\n                DetectionMethod = \"StaticCondition\",\n                OccurrenceType = \"ResultCount\",\n                Threshold = 40,\n                ThresholdType = \"GreaterThan\",\n                TimeRange = \"15m\",\n                TriggerSource = \"AllResults\",\n                TriggerType = \"Critical\",\n            },\n            new SumoLogic.Inputs.MonitorTriggerArgs\n            {\n                DetectionMethod = \"StaticCondition\",\n                OccurrenceType = \"ResultCount\",\n                Threshold = 40,\n                ThresholdType = \"LessThanOrEqual\",\n                TimeRange = \"15m\",\n                TriggerSource = \"AllResults\",\n                TriggerType = \"ResolvedCritical\",\n            },\n        },\n        Type = \"MonitorsLibraryMonitor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitor(ctx, \"tfLogsMonitor1\", \u0026sumologic.MonitorArgs{\n\t\t\tContentType: pulumi.String(\"Monitor\"),\n\t\t\tDescription: pulumi.String(\"tf logs monitor\"),\n\t\t\tIsDisabled:  pulumi.Bool(false),\n\t\t\tMonitorType: pulumi.String(\"Logs\"),\n\t\t\tNotifications: MonitorNotificationArray{\n\t\t\t\t\u0026MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Email\"),\n\t\t\t\t\t\tMessageBody:    pulumi.String(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\"),\n\t\t\t\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"abc@example.com\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubject:  pulumi.String(\"Monitor Alert: {{TriggerType}} on {{Name}}\"),\n\t\t\t\t\t\tTimeZone: pulumi.String(\"PST\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026MonitorNotificationArgs{\n\t\t\t\t\tNotification: \u0026MonitorNotificationNotificationArgs{\n\t\t\t\t\t\tConnectionId:   pulumi.String(\"0000000000ABC123\"),\n\t\t\t\t\t\tConnectionType: pulumi.String(\"Webhook\"),\n\t\t\t\t\t},\n\t\t\t\t\tRunForTriggerTypes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Critical\"),\n\t\t\t\t\t\tpulumi.String(\"ResolvedCritical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tQueries: MonitorQueryArray{\n\t\t\t\t\u0026MonitorQueryArgs{\n\t\t\t\t\tQuery: pulumi.String(\"_sourceCategory=event-action info\"),\n\t\t\t\t\tRowId: pulumi.String(\"A\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTriggers: MonitorTriggerArray{\n\t\t\t\t\u0026MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"GreaterThan\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"Critical\"),\n\t\t\t\t},\n\t\t\t\t\u0026MonitorTriggerArgs{\n\t\t\t\t\tDetectionMethod: pulumi.String(\"StaticCondition\"),\n\t\t\t\t\tOccurrenceType:  pulumi.String(\"ResultCount\"),\n\t\t\t\t\tThreshold:       pulumi.Float64(40),\n\t\t\t\t\tThresholdType:   pulumi.String(\"LessThanOrEqual\"),\n\t\t\t\t\tTimeRange:       pulumi.String(\"15m\"),\n\t\t\t\t\tTriggerSource:   pulumi.String(\"AllResults\"),\n\t\t\t\t\tTriggerType:     pulumi.String(\"ResolvedCritical\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"MonitorsLibraryMonitor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Monitor;\nimport com.pulumi.sumologic.MonitorArgs;\nimport com.pulumi.sumologic.inputs.MonitorNotificationArgs;\nimport com.pulumi.sumologic.inputs.MonitorNotificationNotificationArgs;\nimport com.pulumi.sumologic.inputs.MonitorQueryArgs;\nimport com.pulumi.sumologic.inputs.MonitorTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfLogsMonitor1 = new Monitor(\"tfLogsMonitor1\", MonitorArgs.builder()        \n            .contentType(\"Monitor\")\n            .description(\"tf logs monitor\")\n            .isDisabled(false)\n            .monitorType(\"Logs\")\n            .notifications(            \n                MonitorNotificationArgs.builder()\n                    .notification(MonitorNotificationNotificationArgs.builder()\n                        .connectionType(\"Email\")\n                        .messageBody(\"Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}\")\n                        .recipients(\"abc@example.com\")\n                        .subject(\"Monitor Alert: {{TriggerType}} on {{Name}}\")\n                        .timeZone(\"PST\")\n                        .build())\n                    .runForTriggerTypes(                    \n                        \"Critical\",\n                        \"ResolvedCritical\")\n                    .build(),\n                MonitorNotificationArgs.builder()\n                    .notification(MonitorNotificationNotificationArgs.builder()\n                        .connectionId(\"0000000000ABC123\")\n                        .connectionType(\"Webhook\")\n                        .build())\n                    .runForTriggerTypes(                    \n                        \"Critical\",\n                        \"ResolvedCritical\")\n                    .build())\n            .queries(MonitorQueryArgs.builder()\n                .query(\"_sourceCategory=event-action info\")\n                .rowId(\"A\")\n                .build())\n            .triggers(            \n                MonitorTriggerArgs.builder()\n                    .detectionMethod(\"StaticCondition\")\n                    .occurrenceType(\"ResultCount\")\n                    .threshold(40)\n                    .thresholdType(\"GreaterThan\")\n                    .timeRange(\"15m\")\n                    .triggerSource(\"AllResults\")\n                    .triggerType(\"Critical\")\n                    .build(),\n                MonitorTriggerArgs.builder()\n                    .detectionMethod(\"StaticCondition\")\n                    .occurrenceType(\"ResultCount\")\n                    .threshold(40)\n                    .thresholdType(\"LessThanOrEqual\")\n                    .timeRange(\"15m\")\n                    .triggerSource(\"AllResults\")\n                    .triggerType(\"ResolvedCritical\")\n                    .build())\n            .type(\"MonitorsLibraryMonitor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfLogsMonitor1:\n    type: sumologic:Monitor\n    properties:\n      contentType: Monitor\n      description: tf logs monitor\n      isDisabled: false\n      monitorType: Logs\n      notifications:\n        - notification:\n            connectionType: Email\n            messageBody: 'Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}'\n            recipients:\n              - abc@example.com\n            subject: 'Monitor Alert: {{TriggerType}} on {{Name}}'\n            timeZone: PST\n          runForTriggerTypes:\n            - Critical\n            - ResolvedCritical\n        - notification:\n            connectionId: 0000000000ABC123\n            connectionType: Webhook\n          runForTriggerTypes:\n            - Critical\n            - ResolvedCritical\n      queries:\n        - query: _sourceCategory=event-action info\n          rowId: A\n      triggers:\n        - detectionMethod: StaticCondition\n          occurrenceType: ResultCount\n          threshold: 40\n          thresholdType: GreaterThan\n          timeRange: 15m\n          triggerSource: AllResults\n          triggerType: Critical\n        - detectionMethod: StaticCondition\n          occurrenceType: ResultCount\n          threshold: 40\n          thresholdType: LessThanOrEqual\n          timeRange: 15m\n          triggerSource: AllResults\n          triggerType: ResolvedCritical\n      type: MonitorsLibraryMonitor\n```\n\n\n## Import\n\nMonitors can be imported using the monitor ID, such ashcl\n\n```sh\n $ pulumi import sumologic:index/monitor:Monitor test 1234567890\n```\n\n [1]https://help.sumologic.com/?cid=10020 [2]monitor_folder.html.markdown [3]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor ",
            "properties": {
                "alertName": {
                    "type": "string",
                    "description": "The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of the content object. Valid value:\n- `Monitor`\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the monitor.\n"
                },
                "evaluationDelay": {
                    "type": "string"
                },
                "groupNotifications": {
                    "type": "boolean",
                    "description": "Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.\n"
                },
                "isDisabled": {
                    "type": "boolean",
                    "description": "Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "monitorType": {
                    "type": "string",
                    "description": "The type of monitor. Valid values:\n- `Logs`: A logs query monitor.\n- `Metrics`: A metrics query monitor.\n- `Slo`: A SLO based monitor  (beta).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor. The name must be alphanumeric.\n"
                },
                "notificationGroupFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                    },
                    "description": "The notifications the monitor will send when the respective trigger condition is met.\n"
                },
                "objPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorObjPermission:MonitorObjPermission"
                    },
                    "description": "`obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.\n"
                },
                "playbook": {
                    "type": "string",
                    "description": "Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                    },
                    "description": "All queries from the monitor.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "Identifier of the SLO definition for the monitor. This is only applicable \u0026 required for Slo `monitor_type`.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The current status for this monitor. Values are:\n- `Critical`\n- `Warning`\n- `MissingData`\n- `Normal`\n- `Disabled`\n"
                },
                "triggerConditions": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditions:MonitorTriggerConditions",
                    "description": "Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                    },
                    "description": "Defines the conditions of when to send notifications.\n",
                    "deprecationMessage": "The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `trigger_conditions` instead."
                },
                "type": {
                    "type": "string",
                    "description": "The type of object model. Valid value:\n- `MonitorsLibraryMonitor`\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "evaluationDelay",
                "isLocked",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "monitorType",
                "name",
                "parentId",
                "statuses",
                "version"
            ],
            "inputProperties": {
                "alertName": {
                    "type": "string",
                    "description": "The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The type of the content object. Valid value:\n- `Monitor`\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the monitor.\n"
                },
                "evaluationDelay": {
                    "type": "string"
                },
                "groupNotifications": {
                    "type": "boolean",
                    "description": "Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.\n"
                },
                "isDisabled": {
                    "type": "boolean",
                    "description": "Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "monitorType": {
                    "type": "string",
                    "description": "The type of monitor. Valid values:\n- `Logs`: A logs query monitor.\n- `Metrics`: A metrics query monitor.\n- `Slo`: A SLO based monitor  (beta).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor. The name must be alphanumeric.\n"
                },
                "notificationGroupFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.\n"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                    },
                    "description": "The notifications the monitor will send when the respective trigger condition is met.\n"
                },
                "objPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorObjPermission:MonitorObjPermission"
                    },
                    "description": "`obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.\n"
                },
                "playbook": {
                    "type": "string",
                    "description": "Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                    },
                    "description": "All queries from the monitor.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "Identifier of the SLO definition for the monitor. This is only applicable \u0026 required for Slo `monitor_type`.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The current status for this monitor. Values are:\n- `Critical`\n- `Warning`\n- `MissingData`\n- `Normal`\n- `Disabled`\n"
                },
                "triggerConditions": {
                    "$ref": "#/types/sumologic:index/MonitorTriggerConditions:MonitorTriggerConditions",
                    "description": "Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                    },
                    "description": "Defines the conditions of when to send notifications.\n",
                    "deprecationMessage": "The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `trigger_conditions` instead."
                },
                "type": {
                    "type": "string",
                    "description": "The type of object model. Valid value:\n- `MonitorsLibraryMonitor`\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "monitorType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Monitor resources.\n",
                "properties": {
                    "alertName": {
                        "type": "string",
                        "description": "The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The type of the content object. Valid value:\n- `Monitor`\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the monitor.\n"
                    },
                    "evaluationDelay": {
                        "type": "string"
                    },
                    "groupNotifications": {
                        "type": "boolean",
                        "description": "Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.\n"
                    },
                    "isDisabled": {
                        "type": "boolean",
                        "description": "Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.\n"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "monitorType": {
                        "type": "string",
                        "description": "The type of monitor. Valid values:\n- `Logs`: A logs query monitor.\n- `Metrics`: A metrics query monitor.\n- `Slo`: A SLO based monitor  (beta).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the monitor. The name must be alphanumeric.\n"
                    },
                    "notificationGroupFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorNotification:MonitorNotification"
                        },
                        "description": "The notifications the monitor will send when the respective trigger condition is met.\n"
                    },
                    "objPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorObjPermission:MonitorObjPermission"
                        },
                        "description": "`obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.\n"
                    },
                    "playbook": {
                        "type": "string",
                        "description": "Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.\n"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorQuery:MonitorQuery"
                        },
                        "description": "All queries from the monitor.\n"
                    },
                    "sloId": {
                        "type": "string",
                        "description": "Identifier of the SLO definition for the monitor. This is only applicable \u0026 required for Slo `monitor_type`.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The current status for this monitor. Values are:\n- `Critical`\n- `Warning`\n- `MissingData`\n- `Normal`\n- `Disabled`\n"
                    },
                    "triggerConditions": {
                        "$ref": "#/types/sumologic:index/MonitorTriggerConditions:MonitorTriggerConditions",
                        "description": "Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.\n"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorTrigger:MonitorTrigger"
                        },
                        "description": "Defines the conditions of when to send notifications.\n",
                        "deprecationMessage": "The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `trigger_conditions` instead."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object model. Valid value:\n- `MonitorsLibraryMonitor`\n"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/monitorFolder:MonitorFolder": {
            "description": "Provides the ability to create, read, delete, and update folders for [Monitors](https://help.sumologic.com/?cid=10020).\n\u003e If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor folder resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders). \n\n## Example Monitor Folder\n\nNOTE: Monitor folders are considered a different resource from Library content folders.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfMonitorFolder1 = new sumologic.MonitorFolder(\"tf_monitor_folder_1\", {\n    description: \"A folder for monitors managed by terraform.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_monitor_folder1 = sumologic.MonitorFolder(\"tfMonitorFolder1\", description=\"A folder for monitors managed by terraform.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfMonitorFolder1 = new SumoLogic.MonitorFolder(\"tfMonitorFolder1\", new()\n    {\n        Description = \"A folder for monitors managed by terraform.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewMonitorFolder(ctx, \"tfMonitorFolder1\", \u0026sumologic.MonitorFolderArgs{\n\t\t\tDescription: pulumi.String(\"A folder for monitors managed by terraform.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.MonitorFolder;\nimport com.pulumi.sumologic.MonitorFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfMonitorFolder1 = new MonitorFolder(\"tfMonitorFolder1\", MonitorFolderArgs.builder()        \n            .description(\"A folder for monitors managed by terraform.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfMonitorFolder1:\n    type: sumologic:MonitorFolder\n    properties:\n      description: A folder for monitors managed by terraform.\n```\n\n\n## Import\n\nMonitor folders can be imported using the monitor folder identifier, such ashcl\n\n```sh\n $ pulumi import sumologic:index/monitorFolder:MonitorFolder tf_monitor_folder_1 0000000000ABC123\n```\n\n [1]https://help.sumologic.com/?cid=10020 [2]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders ",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the monitor folder.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor folder. The name must be alphanumeric.\n"
                },
                "objPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorFolderObjPermission:MonitorFolderObjPermission"
                    },
                    "description": "`obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of object model. Valid value:\n- `MonitorsLibraryFolder`\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "description",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "name",
                "parentId",
                "version"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the monitor folder.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor folder. The name must be alphanumeric.\n"
                },
                "objPermissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/MonitorFolderObjPermission:MonitorFolderObjPermission"
                    },
                    "description": "`obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of object model. Valid value:\n- `MonitorsLibraryFolder`\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitorFolder resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the monitor folder.\n"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the monitor folder. The name must be alphanumeric.\n"
                    },
                    "objPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/MonitorFolderObjPermission:MonitorFolderObjPermission"
                        },
                        "description": "`obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.\n"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of object model. Valid value:\n- `MonitorsLibraryFolder`\n"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/partition:Partition": {
            "description": "Provides a [Sumologic Partition](https://help.sumologic.com/Manage/Partitions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst examplePartition = new sumologic.Partition(\"examplePartition\", {\n    analyticsTier: \"continuous\",\n    isCompliant: false,\n    routingExpression: \"_sourcecategory=*/IAC\",\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Partition;\nimport com.pulumi.sumologic.PartitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePartition = new Partition(\"examplePartition\", PartitionArgs.builder()        \n            .analyticsTier(\"continuous\")\n            .isCompliant(false)\n            .lifecycle(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .routingExpression(\"_sourcecategory=*/IAC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  examplePartition:\n    type: sumologic:Partition\n    properties:\n      analyticsTier: continuous\n      isCompliant: false\n      lifecycle:\n        preventDestroy: true\n      routingExpression: _sourcecategory=*/IAC\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the partition.\n\n\n## Import\n\nPartitions can can be imported using the id. The list of partitions and their ids can be obtained using the Sumologic [partions api][2]. hcl\n\n```sh\n $ pulumi import sumologic:index/partition:Partition partition 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Partitions [2]https://api.sumologic.com/docs/#operation/listPartitions ",
            "properties": {
                "analyticsTier": {
                    "type": "string",
                    "description": "The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`\n"
                },
                "dataForwardingId": {
                    "type": "string"
                },
                "indexType": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the partition.\n"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean",
                    "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.\n"
                },
                "routingExpression": {
                    "type": "string",
                    "description": "The query that defines the data to be included in the partition.\n"
                },
                "totalBytes": {
                    "type": "integer"
                }
            },
            "required": [
                "dataForwardingId",
                "indexType",
                "isActive",
                "name",
                "totalBytes"
            ],
            "inputProperties": {
                "analyticsTier": {
                    "type": "string",
                    "description": "The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`\n"
                },
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the partition.\n",
                    "willReplaceOnChanges": true
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean",
                    "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.\n"
                },
                "routingExpression": {
                    "type": "string",
                    "description": "The query that defines the data to be included in the partition.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Partition resources.\n",
                "properties": {
                    "analyticsTier": {
                        "type": "string",
                        "description": "The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`\n"
                    },
                    "dataForwardingId": {
                        "type": "string"
                    },
                    "indexType": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "isCompliant": {
                        "type": "boolean",
                        "description": "Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the partition.\n",
                        "willReplaceOnChanges": true
                    },
                    "reduceRetentionPeriodImmediately": {
                        "type": "boolean",
                        "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                    },
                    "retentionPeriod": {
                        "type": "integer",
                        "description": "The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.\n"
                    },
                    "routingExpression": {
                        "type": "string",
                        "description": "The query that defines the data to be included in the partition.\n"
                    },
                    "totalBytes": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/passwordPolicy:PasswordPolicy": {
            "description": "Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,\nplease ensure that only a single instance of such resource is defined.\nThe behavior for defining more than one password policy resources is undefined.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst examplePasswordPolicy = new sumologic.PasswordPolicy(\"examplePasswordPolicy\", {\n    accountLockoutDurationInMins: 30,\n    accountLockoutThreshold: 6,\n    failedLoginResetDurationInMins: 10,\n    maxLength: 128,\n    maxPasswordAgeInDays: 365,\n    minLength: 8,\n    minUniquePasswords: 10,\n    mustContainDigits: true,\n    mustContainLowercase: true,\n    mustContainSpecialChars: true,\n    mustContainUppercase: true,\n    rememberMfa: true,\n    requireMfa: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_password_policy = sumologic.PasswordPolicy(\"examplePasswordPolicy\",\n    account_lockout_duration_in_mins=30,\n    account_lockout_threshold=6,\n    failed_login_reset_duration_in_mins=10,\n    max_length=128,\n    max_password_age_in_days=365,\n    min_length=8,\n    min_unique_passwords=10,\n    must_contain_digits=True,\n    must_contain_lowercase=True,\n    must_contain_special_chars=True,\n    must_contain_uppercase=True,\n    remember_mfa=True,\n    require_mfa=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePasswordPolicy = new SumoLogic.PasswordPolicy(\"examplePasswordPolicy\", new()\n    {\n        AccountLockoutDurationInMins = 30,\n        AccountLockoutThreshold = 6,\n        FailedLoginResetDurationInMins = 10,\n        MaxLength = 128,\n        MaxPasswordAgeInDays = 365,\n        MinLength = 8,\n        MinUniquePasswords = 10,\n        MustContainDigits = true,\n        MustContainLowercase = true,\n        MustContainSpecialChars = true,\n        MustContainUppercase = true,\n        RememberMfa = true,\n        RequireMfa = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewPasswordPolicy(ctx, \"examplePasswordPolicy\", \u0026sumologic.PasswordPolicyArgs{\n\t\t\tAccountLockoutDurationInMins:   pulumi.Int(30),\n\t\t\tAccountLockoutThreshold:        pulumi.Int(6),\n\t\t\tFailedLoginResetDurationInMins: pulumi.Int(10),\n\t\t\tMaxLength:                      pulumi.Int(128),\n\t\t\tMaxPasswordAgeInDays:           pulumi.Int(365),\n\t\t\tMinLength:                      pulumi.Int(8),\n\t\t\tMinUniquePasswords:             pulumi.Int(10),\n\t\t\tMustContainDigits:              pulumi.Bool(true),\n\t\t\tMustContainLowercase:           pulumi.Bool(true),\n\t\t\tMustContainSpecialChars:        pulumi.Bool(true),\n\t\t\tMustContainUppercase:           pulumi.Bool(true),\n\t\t\tRememberMfa:                    pulumi.Bool(true),\n\t\t\tRequireMfa:                     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.PasswordPolicy;\nimport com.pulumi.sumologic.PasswordPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePasswordPolicy = new PasswordPolicy(\"examplePasswordPolicy\", PasswordPolicyArgs.builder()        \n            .accountLockoutDurationInMins(30)\n            .accountLockoutThreshold(6)\n            .failedLoginResetDurationInMins(10)\n            .maxLength(128)\n            .maxPasswordAgeInDays(365)\n            .minLength(8)\n            .minUniquePasswords(10)\n            .mustContainDigits(true)\n            .mustContainLowercase(true)\n            .mustContainSpecialChars(true)\n            .mustContainUppercase(true)\n            .rememberMfa(true)\n            .requireMfa(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  examplePasswordPolicy:\n    type: sumologic:PasswordPolicy\n    properties:\n      accountLockoutDurationInMins: 30\n      accountLockoutThreshold: 6\n      failedLoginResetDurationInMins: 10\n      maxLength: 128\n      maxPasswordAgeInDays: 365\n      minLength: 8\n      minUniquePasswords: 10\n      mustContainDigits: true\n      mustContainLowercase: true\n      mustContainSpecialChars: true\n      mustContainUppercase: true\n      rememberMfa: true\n      requireMfa: false\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accountLockoutDurationInMins": {
                    "type": "integer",
                    "description": "The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.\n"
                },
                "accountLockoutThreshold": {
                    "type": "integer",
                    "description": "Number of failed login attempts allowed before account is locked-out. Defaults to 6.\n"
                },
                "failedLoginResetDurationInMins": {
                    "type": "integer",
                    "description": "The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)\n"
                },
                "maxPasswordAgeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "The minimum length of the password. Defaults to 8.\n"
                },
                "minUniquePasswords": {
                    "type": "integer",
                    "description": "The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.\n"
                },
                "mustContainDigits": {
                    "type": "boolean",
                    "description": "If the password must contain digits. Defaults to true.\n"
                },
                "mustContainLowercase": {
                    "type": "boolean",
                    "description": "If the password must contain lower case characters. Defaults to true.\n"
                },
                "mustContainSpecialChars": {
                    "type": "boolean",
                    "description": "If the password must contain special characters. Defaults to true.\n"
                },
                "mustContainUppercase": {
                    "type": "boolean",
                    "description": "If the password must contain upper case characters. Defaults to true.\n"
                },
                "rememberMfa": {
                    "type": "boolean",
                    "description": "If MFA should be remembered on the browser. Defaults to true.\n"
                },
                "requireMfa": {
                    "type": "boolean",
                    "description": "If MFA should be required to log in. Defaults to false.\n"
                }
            },
            "inputProperties": {
                "accountLockoutDurationInMins": {
                    "type": "integer",
                    "description": "The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.\n"
                },
                "accountLockoutThreshold": {
                    "type": "integer",
                    "description": "Number of failed login attempts allowed before account is locked-out. Defaults to 6.\n"
                },
                "failedLoginResetDurationInMins": {
                    "type": "integer",
                    "description": "The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)\n"
                },
                "maxPasswordAgeInDays": {
                    "type": "integer",
                    "description": "Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "The minimum length of the password. Defaults to 8.\n"
                },
                "minUniquePasswords": {
                    "type": "integer",
                    "description": "The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.\n"
                },
                "mustContainDigits": {
                    "type": "boolean",
                    "description": "If the password must contain digits. Defaults to true.\n"
                },
                "mustContainLowercase": {
                    "type": "boolean",
                    "description": "If the password must contain lower case characters. Defaults to true.\n"
                },
                "mustContainSpecialChars": {
                    "type": "boolean",
                    "description": "If the password must contain special characters. Defaults to true.\n"
                },
                "mustContainUppercase": {
                    "type": "boolean",
                    "description": "If the password must contain upper case characters. Defaults to true.\n"
                },
                "rememberMfa": {
                    "type": "boolean",
                    "description": "If MFA should be remembered on the browser. Defaults to true.\n"
                },
                "requireMfa": {
                    "type": "boolean",
                    "description": "If MFA should be required to log in. Defaults to false.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordPolicy resources.\n",
                "properties": {
                    "accountLockoutDurationInMins": {
                        "type": "integer",
                        "description": "The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.\n"
                    },
                    "accountLockoutThreshold": {
                        "type": "integer",
                        "description": "Number of failed login attempts allowed before account is locked-out. Defaults to 6.\n"
                    },
                    "failedLoginResetDurationInMins": {
                        "type": "integer",
                        "description": "The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.\n"
                    },
                    "maxLength": {
                        "type": "integer",
                        "description": "The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)\n"
                    },
                    "maxPasswordAgeInDays": {
                        "type": "integer",
                        "description": "Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "The minimum length of the password. Defaults to 8.\n"
                    },
                    "minUniquePasswords": {
                        "type": "integer",
                        "description": "The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.\n"
                    },
                    "mustContainDigits": {
                        "type": "boolean",
                        "description": "If the password must contain digits. Defaults to true.\n"
                    },
                    "mustContainLowercase": {
                        "type": "boolean",
                        "description": "If the password must contain lower case characters. Defaults to true.\n"
                    },
                    "mustContainSpecialChars": {
                        "type": "boolean",
                        "description": "If the password must contain special characters. Defaults to true.\n"
                    },
                    "mustContainUppercase": {
                        "type": "boolean",
                        "description": "If the password must contain upper case characters. Defaults to true.\n"
                    },
                    "rememberMfa": {
                        "type": "boolean",
                        "description": "If MFA should be remembered on the browser. Defaults to true.\n"
                    },
                    "requireMfa": {
                        "type": "boolean",
                        "description": "If MFA should be required to log in. Defaults to false.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/policies:Policies": {
            "description": "Sets the Sumologic Policies. Since each policy is global for the entire organization, please ensure that only a single\ninstance of this resource is defined. The behavior for defining more than one policies resource is undefined.\n\nThe following policies are supported:\n- [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index)\n- [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards)\n- [Maximum Web Session Timeout Policy](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout)\n- [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index)\n- [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org)\n- [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst examplePolicies = new sumologic.Policies(\"example_policies\", {\n    audit: false,\n    dataAccessLevel: false,\n    maxUserSessionTimeout: \"7d\",\n    searchAudit: false,\n    shareDashboardsOutsideOrganization: false,\n    userConcurrentSessionsLimit: {\n        enabled: false,\n        maxConcurrentSessions: 100,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_policies = sumologic.Policies(\"examplePolicies\",\n    audit=False,\n    data_access_level=False,\n    max_user_session_timeout=\"7d\",\n    search_audit=False,\n    share_dashboards_outside_organization=False,\n    user_concurrent_sessions_limit=sumologic.PoliciesUserConcurrentSessionsLimitArgs(\n        enabled=False,\n        max_concurrent_sessions=100,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var examplePolicies = new SumoLogic.Policies(\"examplePolicies\", new()\n    {\n        Audit = false,\n        DataAccessLevel = false,\n        MaxUserSessionTimeout = \"7d\",\n        SearchAudit = false,\n        ShareDashboardsOutsideOrganization = false,\n        UserConcurrentSessionsLimit = new SumoLogic.Inputs.PoliciesUserConcurrentSessionsLimitArgs\n        {\n            Enabled = false,\n            MaxConcurrentSessions = 100,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewPolicies(ctx, \"examplePolicies\", \u0026sumologic.PoliciesArgs{\n\t\t\tAudit:                              pulumi.Bool(false),\n\t\t\tDataAccessLevel:                    pulumi.Bool(false),\n\t\t\tMaxUserSessionTimeout:              pulumi.String(\"7d\"),\n\t\t\tSearchAudit:                        pulumi.Bool(false),\n\t\t\tShareDashboardsOutsideOrganization: pulumi.Bool(false),\n\t\t\tUserConcurrentSessionsLimit: \u0026PoliciesUserConcurrentSessionsLimitArgs{\n\t\t\t\tEnabled:               pulumi.Bool(false),\n\t\t\t\tMaxConcurrentSessions: pulumi.Int(100),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Policies;\nimport com.pulumi.sumologic.PoliciesArgs;\nimport com.pulumi.sumologic.inputs.PoliciesUserConcurrentSessionsLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePolicies = new Policies(\"examplePolicies\", PoliciesArgs.builder()        \n            .audit(false)\n            .dataAccessLevel(false)\n            .maxUserSessionTimeout(\"7d\")\n            .searchAudit(false)\n            .shareDashboardsOutsideOrganization(false)\n            .userConcurrentSessionsLimit(PoliciesUserConcurrentSessionsLimitArgs.builder()\n                .enabled(false)\n                .maxConcurrentSessions(100)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  examplePolicies:\n    type: sumologic:Policies\n    properties:\n      audit: false\n      dataAccessLevel: false\n      maxUserSessionTimeout: 7d\n      searchAudit: false\n      shareDashboardsOutsideOrganization: false\n      userConcurrentSessionsLimit:\n        enabled: false\n        maxConcurrentSessions: 100\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPolicies can be imported using the id `org-policies`. hcl\n\n```sh\n $ pulumi import sumologic:index/policies:Policies example_policies org-policies\n```\n\n [1]https://help.sumologic.com/Manage/Security/Audit-Index [2]https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards [3]https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout [4]https://help.sumologic.com/Manage/Security/Search_Audit_Index [5]https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org [6]https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions ",
            "properties": {
                "audit": {
                    "type": "boolean",
                    "description": "Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.\n"
                },
                "dataAccessLevel": {
                    "type": "boolean",
                    "description": "Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.\n"
                },
                "maxUserSessionTimeout": {
                    "type": "string",
                    "description": "The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.\n"
                },
                "searchAudit": {
                    "type": "boolean",
                    "description": "Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.\n"
                },
                "shareDashboardsOutsideOrganization": {
                    "type": "boolean",
                    "description": "Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.\n"
                },
                "userConcurrentSessionsLimit": {
                    "$ref": "#/types/sumologic:index/PoliciesUserConcurrentSessionsLimit:PoliciesUserConcurrentSessionsLimit",
                    "description": "The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.\n"
                }
            },
            "required": [
                "audit",
                "dataAccessLevel",
                "maxUserSessionTimeout",
                "searchAudit",
                "shareDashboardsOutsideOrganization",
                "userConcurrentSessionsLimit"
            ],
            "inputProperties": {
                "audit": {
                    "type": "boolean",
                    "description": "Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.\n"
                },
                "dataAccessLevel": {
                    "type": "boolean",
                    "description": "Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.\n"
                },
                "maxUserSessionTimeout": {
                    "type": "string",
                    "description": "The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.\n"
                },
                "searchAudit": {
                    "type": "boolean",
                    "description": "Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.\n"
                },
                "shareDashboardsOutsideOrganization": {
                    "type": "boolean",
                    "description": "Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.\n"
                },
                "userConcurrentSessionsLimit": {
                    "$ref": "#/types/sumologic:index/PoliciesUserConcurrentSessionsLimit:PoliciesUserConcurrentSessionsLimit",
                    "description": "The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.\n"
                }
            },
            "requiredInputs": [
                "audit",
                "dataAccessLevel",
                "maxUserSessionTimeout",
                "searchAudit",
                "shareDashboardsOutsideOrganization",
                "userConcurrentSessionsLimit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policies resources.\n",
                "properties": {
                    "audit": {
                        "type": "boolean",
                        "description": "Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.\n"
                    },
                    "dataAccessLevel": {
                        "type": "boolean",
                        "description": "Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.\n"
                    },
                    "maxUserSessionTimeout": {
                        "type": "string",
                        "description": "The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.\n"
                    },
                    "searchAudit": {
                        "type": "boolean",
                        "description": "Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.\n"
                    },
                    "shareDashboardsOutsideOrganization": {
                        "type": "boolean",
                        "description": "Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.\n"
                    },
                    "userConcurrentSessionsLimit": {
                        "$ref": "#/types/sumologic:index/PoliciesUserConcurrentSessionsLimit:PoliciesUserConcurrentSessionsLimit",
                        "description": "The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/pollingSource:PollingSource": {
            "description": "!\u003e **WARNING:** This data source is deprecated and will be removed in the next major version.\n\nProvides a Sumologic Polling source. This source is used to import data from various AWS products, eg. AWS S3 buckets, Cloudwatch Metrics etc.\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.PollingSource;\nimport com.pulumi.sumologic.PollingSourceArgs;\nimport com.pulumi.sumologic.inputs.PollingSourceFilterArgs;\nimport com.pulumi.sumologic.inputs.PollingSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.PollingSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tagfilters =         \n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n            %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var s3Audit = new PollingSource(\"s3Audit\", PollingSourceArgs.builder()        \n            .description(\"My description\")\n            .category(\"aws/s3audit\")\n            .contentType(\"AwsS3AuditBucket\")\n            .scanInterval(300000)\n            .paused(false)\n            .collectorId(collector.id())\n            .filters(PollingSourceFilterArgs.builder()\n                .name(\"Exclude Comments\")\n                .filterType(\"Exclude\")\n                .regexp(\"#.*\")\n                .build())\n            .authentication(PollingSourceAuthenticationArgs.builder()\n                .type(\"S3BucketAuthentication\")\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .build())\n            .path(PollingSourcePathArgs.builder()\n                .type(\"S3BucketPathExpression\")\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .build())\n            .build());\n\n        var cwMetrics = new PollingSource(\"cwMetrics\", PollingSourceArgs.builder()        \n            .description(\"My description\")\n            .category(\"aws/cw\")\n            .contentType(\"AwsCloudWatch\")\n            .scanInterval(300000)\n            .paused(false)\n            .collectorId(collector.id())\n            .authentication(PollingSourceAuthenticationArgs.builder()\n                .type(\"AWSRoleBasedAuthentication\")\n                .roleArn(\"arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\")\n                .build())\n            .path(PollingSourcePathArgs.builder()\n                .type(\"CloudWatchPath\")\n                .limitToRegions(\"us-west-2\")\n                .limitToNamespaces(                \n                    \"AWS/Route53\",\n                    \"AWS/S3\",\n                    \"customNamespace\")\n                .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s3Audit:\n    type: sumologic:PollingSource\n    properties:\n      description: My description\n      category: aws/s3audit\n      contentType: AwsS3AuditBucket\n      scanInterval: 300000\n      paused: false\n      collectorId: ${collector.id}\n      filters:\n        - name: Exclude Comments\n          filterType: Exclude\n          regexp: '#.*'\n      authentication:\n        type: S3BucketAuthentication\n        accessKey: someKey\n        secretKey: '******'\n      path:\n        type: S3BucketPathExpression\n        bucketName: Bucket1\n        pathExpression: '*'\n  cwMetrics:\n    type: sumologic:PollingSource\n    properties:\n      description: My description\n      category: aws/cw\n      contentType: AwsCloudWatch\n      scanInterval: 300000\n      paused: false\n      collectorId: ${collector.id}\n      authentication:\n        type: AWSRoleBasedAuthentication\n        roleArn: arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI\n      path:\n        type: CloudWatchPath\n        limitToRegions:\n          - us-west-2\n        limitToNamespaces:\n          - AWS/Route53\n          - AWS/S3\n          - customNamespace\n        dynamic:\n          - forEach: ${tagfilters}\n            content:\n              - type: ${tag_filters.value.type}\n                namespace: ${tag_filters.value.namespace}\n                tags: ${tag_filters.value.tags}\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\nvariables:\n  tagfilters:\n    - type: TagFilters\n      namespace: All\n      tags:\n        - k3=v3\n    - type: TagFilters\n      namespace: AWS/Route53\n      tags:\n        - k1=v1\n    - type: TagFilters\n      namespace: AWS/S3\n      tags:\n        - k2=v2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPolling sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/pollingSource:PollingSource test 123/456\n```\n\n HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/pollingSource:PollingSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PollingSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/PollingSourceAuthentication:PollingSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/PollingSourceDefaultDateFormat:PollingSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/PollingSourceFilter:PollingSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/PollingSourcePath:PollingSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/role:Role": {
            "description": "Provides a [Sumologic Role](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleRole = new sumologic.Role(\"example_role\", {\n    capabilities: [\"manageCollectors\"],\n    description: \"Testing resource sumologic_role\",\n    filterPredicate: \"_sourceCategory=Test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_role = sumologic.Role(\"exampleRole\",\n    capabilities=[\"manageCollectors\"],\n    description=\"Testing resource sumologic_role\",\n    filter_predicate=\"_sourceCategory=Test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRole = new SumoLogic.Role(\"exampleRole\", new()\n    {\n        Capabilities = new[]\n        {\n            \"manageCollectors\",\n        },\n        Description = \"Testing resource sumologic_role\",\n        FilterPredicate = \"_sourceCategory=Test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewRole(ctx, \"exampleRole\", \u0026sumologic.RoleArgs{\n\t\t\tCapabilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"manageCollectors\"),\n\t\t\t},\n\t\t\tDescription:     pulumi.String(\"Testing resource sumologic_role\"),\n\t\t\tFilterPredicate: pulumi.String(\"_sourceCategory=Test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Role;\nimport com.pulumi.sumologic.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRole = new Role(\"exampleRole\", RoleArgs.builder()        \n            .capabilities(\"manageCollectors\")\n            .description(\"Testing resource sumologic_role\")\n            .filterPredicate(\"_sourceCategory=Test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRole:\n    type: sumologic:Role\n    properties:\n      capabilities:\n        - manageCollectors\n      description: Testing resource sumologic_role\n      filterPredicate: _sourceCategory=Test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoles can be imported using the role id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/role:Role role 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles [2]https://api.sumologic.com/docs/#operation/createRole ",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of capabilities associated with this role. For a complete list of capability names, please see `capabilities` field in the request of [CreateRole](https://api.sumologic.com/docs/#operation/createRole) endpoint.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the role.\n"
                },
                "filterPredicate": {
                    "type": "string",
                    "description": "A search filter to restrict access to specific logs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of capabilities associated with this role. For a complete list of capability names, please see `capabilities` field in the request of [CreateRole](https://api.sumologic.com/docs/#operation/createRole) endpoint.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the role.\n"
                },
                "filterPredicate": {
                    "type": "string",
                    "description": "A search filter to restrict access to specific logs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of capabilities associated with this role. For a complete list of capability names, please see `capabilities` field in the request of [CreateRole](https://api.sumologic.com/docs/#operation/createRole) endpoint.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the role.\n"
                    },
                    "filterPredicate": {
                        "type": "string",
                        "description": "A search filter to restrict access to specific logs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/s3AuditSource:S3AuditSource": {
            "description": "Provides a [AWS S3 Audit Source][2].\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst s3Audit = new sumologic.S3AuditSource(\"s3_audit\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/s3audit\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsS3AuditBucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ns3_audit = sumologic.S3AuditSource(\"s3Audit\",\n    authentication=sumologic.S3AuditSourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/s3audit\",\n    collector_id=collector.id,\n    content_type=\"AwsS3AuditBucket\",\n    description=\"My description\",\n    path=sumologic.S3AuditSourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var s3Audit = new SumoLogic.S3AuditSource(\"s3Audit\", new()\n    {\n        Authentication = new SumoLogic.Inputs.S3AuditSourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"aws/s3audit\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsS3AuditBucket\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.S3AuditSourcePathArgs\n        {\n            BucketName = \"Bucket1\",\n            PathExpression = \"*\",\n            Type = \"S3BucketPathExpression\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewS3AuditSource(ctx, \"s3Audit\", \u0026sumologic.S3AuditSourceArgs{\n\t\t\tAuthentication: \u0026S3AuditSourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/s3audit\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsS3AuditBucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026S3AuditSourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.S3AuditSource;\nimport com.pulumi.sumologic.S3AuditSourceArgs;\nimport com.pulumi.sumologic.inputs.S3AuditSourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.S3AuditSourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var s3Audit = new S3AuditSource(\"s3Audit\", S3AuditSourceArgs.builder()        \n            .authentication(S3AuditSourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"aws/s3audit\")\n            .collectorId(collector.id())\n            .contentType(\"AwsS3AuditBucket\")\n            .description(\"My description\")\n            .path(S3AuditSourcePathArgs.builder()\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .type(\"S3BucketPathExpression\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s3Audit:\n    type: sumologic:S3AuditSource\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: aws/s3audit\n      collectorId: ${collector.id}\n      contentType: AwsS3AuditBucket\n      description: My description\n      path:\n        bucketName: Bucket1\n        pathExpression: '*'\n        type: S3BucketPathExpression\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nS3 Audit sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test 123/456\n```\n\n S3 Audit sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-S3-Audit-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3AuditSource resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/S3AuditSourceAuthentication:S3AuditSourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3AuditSourceDefaultDateFormat:S3AuditSourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3AuditSourceFilter:S3AuditSourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/S3AuditSourcePath:S3AuditSourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/s3Source:S3Source": {
            "description": "Provides a [Sumologic AWS S3 Source][2].\n\n__IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst collector = new sumologic.Collector(\"collector\", {\n    description: \"Just testing this\",\n});\nconst s3Source = new sumologic.S3Source(\"s3_source\", {\n    authentication: {\n        accessKey: \"someKey\",\n        secretKey: \"******\",\n        type: \"S3BucketAuthentication\",\n    },\n    category: \"aws/s3\",\n    collectorId: collector.id.apply(id =\u003e Number.parseFloat(id)),\n    contentType: \"AwsS3Bucket\",\n    description: \"My description\",\n    path: {\n        bucketName: \"Bucket1\",\n        pathExpression: \"*\",\n        type: \"S3BucketPathExpression\",\n    },\n    paused: false,\n    scanInterval: 300000,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncollector = sumologic.Collector(\"collector\", description=\"Just testing this\")\ns3_source = sumologic.S3Source(\"s3Source\",\n    authentication=sumologic.S3SourceAuthenticationArgs(\n        access_key=\"someKey\",\n        secret_key=\"******\",\n        type=\"S3BucketAuthentication\",\n    ),\n    category=\"aws/s3\",\n    collector_id=collector.id,\n    content_type=\"AwsS3Bucket\",\n    description=\"My description\",\n    path=sumologic.S3SourcePathArgs(\n        bucket_name=\"Bucket1\",\n        path_expression=\"*\",\n        type=\"S3BucketPathExpression\",\n    ),\n    paused=False,\n    scan_interval=300000)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var collector = new SumoLogic.Collector(\"collector\", new()\n    {\n        Description = \"Just testing this\",\n    });\n\n    var s3Source = new SumoLogic.S3Source(\"s3Source\", new()\n    {\n        Authentication = new SumoLogic.Inputs.S3SourceAuthenticationArgs\n        {\n            AccessKey = \"someKey\",\n            SecretKey = \"******\",\n            Type = \"S3BucketAuthentication\",\n        },\n        Category = \"aws/s3\",\n        CollectorId = collector.Id,\n        ContentType = \"AwsS3Bucket\",\n        Description = \"My description\",\n        Path = new SumoLogic.Inputs.S3SourcePathArgs\n        {\n            BucketName = \"Bucket1\",\n            PathExpression = \"*\",\n            Type = \"S3BucketPathExpression\",\n        },\n        Paused = false,\n        ScanInterval = 300000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcollector, err := sumologic.NewCollector(ctx, \"collector\", \u0026sumologic.CollectorArgs{\n\t\t\tDescription: pulumi.String(\"Just testing this\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewS3Source(ctx, \"s3Source\", \u0026sumologic.S3SourceArgs{\n\t\t\tAuthentication: \u0026S3SourceAuthenticationArgs{\n\t\t\t\tAccessKey: pulumi.String(\"someKey\"),\n\t\t\t\tSecretKey: pulumi.String(\"******\"),\n\t\t\t\tType:      pulumi.String(\"S3BucketAuthentication\"),\n\t\t\t},\n\t\t\tCategory:    pulumi.String(\"aws/s3\"),\n\t\t\tCollectorId: collector.ID(),\n\t\t\tContentType: pulumi.String(\"AwsS3Bucket\"),\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t\tPath: \u0026S3SourcePathArgs{\n\t\t\t\tBucketName:     pulumi.String(\"Bucket1\"),\n\t\t\t\tPathExpression: pulumi.String(\"*\"),\n\t\t\t\tType:           pulumi.String(\"S3BucketPathExpression\"),\n\t\t\t},\n\t\t\tPaused:       pulumi.Bool(false),\n\t\t\tScanInterval: pulumi.Int(300000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Collector;\nimport com.pulumi.sumologic.CollectorArgs;\nimport com.pulumi.sumologic.S3Source;\nimport com.pulumi.sumologic.S3SourceArgs;\nimport com.pulumi.sumologic.inputs.S3SourceAuthenticationArgs;\nimport com.pulumi.sumologic.inputs.S3SourcePathArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var collector = new Collector(\"collector\", CollectorArgs.builder()        \n            .description(\"Just testing this\")\n            .build());\n\n        var s3Source = new S3Source(\"s3Source\", S3SourceArgs.builder()        \n            .authentication(S3SourceAuthenticationArgs.builder()\n                .accessKey(\"someKey\")\n                .secretKey(\"******\")\n                .type(\"S3BucketAuthentication\")\n                .build())\n            .category(\"aws/s3\")\n            .collectorId(collector.id())\n            .contentType(\"AwsS3Bucket\")\n            .description(\"My description\")\n            .path(S3SourcePathArgs.builder()\n                .bucketName(\"Bucket1\")\n                .pathExpression(\"*\")\n                .type(\"S3BucketPathExpression\")\n                .build())\n            .paused(false)\n            .scanInterval(300000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s3Source:\n    type: sumologic:S3Source\n    properties:\n      authentication:\n        accessKey: someKey\n        secretKey: '******'\n        type: S3BucketAuthentication\n      category: aws/s3\n      collectorId: ${collector.id}\n      contentType: AwsS3Bucket\n      description: My description\n      path:\n        bucketName: Bucket1\n        pathExpression: '*'\n        type: S3BucketPathExpression\n      paused: false\n      scanInterval: 300000\n  collector:\n    type: sumologic:Collector\n    properties:\n      description: Just testing this\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nS3 sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3Source:S3Source test 123/456\n```\n\n S3 sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/s3Source:S3Source test my-test-collector/my-test-source\n```\n\n [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source ",
            "properties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n"
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n"
                },
                "cutoffRelativeTime": {
                    "type": "string"
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath",
                    "description": "The location to scan for new data.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "required": [
                "authentication",
                "collectorId",
                "contentType",
                "name",
                "path",
                "paused",
                "scanInterval",
                "url"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication",
                    "description": "Authentication details for connecting to the S3 bucket.\n",
                    "willReplaceOnChanges": true
                },
                "automaticDateParsing": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "collectorId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "contentType": {
                    "type": "string",
                    "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                    "willReplaceOnChanges": true
                },
                "cutoffRelativeTime": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "cutoffTimestamp": {
                    "type": "integer"
                },
                "defaultDateFormats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                    }
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                    }
                },
                "forceTimezone": {
                    "type": "boolean"
                },
                "hostName": {
                    "type": "string"
                },
                "manualPrefixRegexp": {
                    "type": "string"
                },
                "multilineProcessingEnabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath",
                    "description": "The location to scan for new data.\n",
                    "willReplaceOnChanges": true
                },
                "paused": {
                    "type": "boolean",
                    "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                },
                "scanInterval": {
                    "type": "integer",
                    "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                },
                "timezone": {
                    "type": "string"
                },
                "useAutolineMatching": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "authentication",
                "collectorId",
                "contentType",
                "path",
                "paused",
                "scanInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Source resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/sumologic:index/S3SourceAuthentication:S3SourceAuthentication",
                        "description": "Authentication details for connecting to the S3 bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "automaticDateParsing": {
                        "type": "boolean"
                    },
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "contentType": {
                        "type": "string",
                        "description": "The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).\n",
                        "willReplaceOnChanges": true
                    },
                    "cutoffRelativeTime": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "cutoffTimestamp": {
                        "type": "integer"
                    },
                    "defaultDateFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3SourceDefaultDateFormat:S3SourceDefaultDateFormat"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/S3SourceFilter:S3SourceFilter"
                        }
                    },
                    "forceTimezone": {
                        "type": "boolean"
                    },
                    "hostName": {
                        "type": "string"
                    },
                    "manualPrefixRegexp": {
                        "type": "string"
                    },
                    "multilineProcessingEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "$ref": "#/types/sumologic:index/S3SourcePath:S3SourcePath",
                        "description": "The location to scan for new data.\n",
                        "willReplaceOnChanges": true
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "When set to true, the scanner is paused. To disable, set to false.\n"
                    },
                    "scanInterval": {
                        "type": "integer",
                        "description": "Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.\n"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)).\n"
                    },
                    "useAutolineMatching": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/samlConfiguration:SamlConfiguration": {
            "description": "Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleSamlConfiguration = new sumologic.SamlConfiguration(\"exampleSamlConfiguration\", {\n    authnRequestUrl: \"\",\n    configurationName: \"SumoLogic\",\n    debugMode: false,\n    disableRequestedAuthnContext: false,\n    emailAttribute: \"\",\n    isRedirectBinding: false,\n    issuer: \"http://www.okta.com/abxcseyuiwelflkdjh\",\n    logoutEnabled: false,\n    logoutUrl: \"\",\n    onDemandProvisioningEnabled: {\n        firstNameAttribute: \"firstName\",\n        lastNameAttribute: \"lastName\",\n        onDemandProvisioningRoles: [\"Administrator\"],\n    },\n    rolesAttribute: \"Administrator\",\n    signAuthnRequest: false,\n    spInitiatedLoginEnabled: false,\n    spInitiatedLoginPath: \"\",\n    x509cert1: \"string\",\n    x509cert2: \"\",\n    x509cert3: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_saml_configuration = sumologic.SamlConfiguration(\"exampleSamlConfiguration\",\n    authn_request_url=\"\",\n    configuration_name=\"SumoLogic\",\n    debug_mode=False,\n    disable_requested_authn_context=False,\n    email_attribute=\"\",\n    is_redirect_binding=False,\n    issuer=\"http://www.okta.com/abxcseyuiwelflkdjh\",\n    logout_enabled=False,\n    logout_url=\"\",\n    on_demand_provisioning_enabled=sumologic.SamlConfigurationOnDemandProvisioningEnabledArgs(\n        first_name_attribute=\"firstName\",\n        last_name_attribute=\"lastName\",\n        on_demand_provisioning_roles=[\"Administrator\"],\n    ),\n    roles_attribute=\"Administrator\",\n    sign_authn_request=False,\n    sp_initiated_login_enabled=False,\n    sp_initiated_login_path=\"\",\n    x509cert1=\"string\",\n    x509cert2=\"\",\n    x509cert3=\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSamlConfiguration = new SumoLogic.SamlConfiguration(\"exampleSamlConfiguration\", new()\n    {\n        AuthnRequestUrl = \"\",\n        ConfigurationName = \"SumoLogic\",\n        DebugMode = false,\n        DisableRequestedAuthnContext = false,\n        EmailAttribute = \"\",\n        IsRedirectBinding = false,\n        Issuer = \"http://www.okta.com/abxcseyuiwelflkdjh\",\n        LogoutEnabled = false,\n        LogoutUrl = \"\",\n        OnDemandProvisioningEnabled = new SumoLogic.Inputs.SamlConfigurationOnDemandProvisioningEnabledArgs\n        {\n            FirstNameAttribute = \"firstName\",\n            LastNameAttribute = \"lastName\",\n            OnDemandProvisioningRoles = new[]\n            {\n                \"Administrator\",\n            },\n        },\n        RolesAttribute = \"Administrator\",\n        SignAuthnRequest = false,\n        SpInitiatedLoginEnabled = false,\n        SpInitiatedLoginPath = \"\",\n        X509cert1 = \"string\",\n        X509cert2 = \"\",\n        X509cert3 = \"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewSamlConfiguration(ctx, \"exampleSamlConfiguration\", \u0026sumologic.SamlConfigurationArgs{\n\t\t\tAuthnRequestUrl:              pulumi.String(\"\"),\n\t\t\tConfigurationName:            pulumi.String(\"SumoLogic\"),\n\t\t\tDebugMode:                    pulumi.Bool(false),\n\t\t\tDisableRequestedAuthnContext: pulumi.Bool(false),\n\t\t\tEmailAttribute:               pulumi.String(\"\"),\n\t\t\tIsRedirectBinding:            pulumi.Bool(false),\n\t\t\tIssuer:                       pulumi.String(\"http://www.okta.com/abxcseyuiwelflkdjh\"),\n\t\t\tLogoutEnabled:                pulumi.Bool(false),\n\t\t\tLogoutUrl:                    pulumi.String(\"\"),\n\t\t\tOnDemandProvisioningEnabled: \u0026SamlConfigurationOnDemandProvisioningEnabledArgs{\n\t\t\t\tFirstNameAttribute: pulumi.String(\"firstName\"),\n\t\t\t\tLastNameAttribute:  pulumi.String(\"lastName\"),\n\t\t\t\tOnDemandProvisioningRoles: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"Administrator\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRolesAttribute:          pulumi.String(\"Administrator\"),\n\t\t\tSignAuthnRequest:        pulumi.Bool(false),\n\t\t\tSpInitiatedLoginEnabled: pulumi.Bool(false),\n\t\t\tSpInitiatedLoginPath:    pulumi.String(\"\"),\n\t\t\tX509cert1:               pulumi.String(\"string\"),\n\t\t\tX509cert2:               pulumi.String(\"\"),\n\t\t\tX509cert3:               pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SamlConfiguration;\nimport com.pulumi.sumologic.SamlConfigurationArgs;\nimport com.pulumi.sumologic.inputs.SamlConfigurationOnDemandProvisioningEnabledArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSamlConfiguration = new SamlConfiguration(\"exampleSamlConfiguration\", SamlConfigurationArgs.builder()        \n            .authnRequestUrl(\"\")\n            .configurationName(\"SumoLogic\")\n            .debugMode(false)\n            .disableRequestedAuthnContext(false)\n            .emailAttribute(\"\")\n            .isRedirectBinding(false)\n            .issuer(\"http://www.okta.com/abxcseyuiwelflkdjh\")\n            .logoutEnabled(false)\n            .logoutUrl(\"\")\n            .onDemandProvisioningEnabled(SamlConfigurationOnDemandProvisioningEnabledArgs.builder()\n                .firstNameAttribute(\"firstName\")\n                .lastNameAttribute(\"lastName\")\n                .onDemandProvisioningRoles(\"Administrator\")\n                .build())\n            .rolesAttribute(\"Administrator\")\n            .signAuthnRequest(false)\n            .spInitiatedLoginEnabled(false)\n            .spInitiatedLoginPath(\"\")\n            .x509cert1(\"string\")\n            .x509cert2(\"\")\n            .x509cert3(\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSamlConfiguration:\n    type: sumologic:SamlConfiguration\n    properties:\n      authnRequestUrl:\n      configurationName: SumoLogic\n      debugMode: false\n      disableRequestedAuthnContext: false\n      emailAttribute:\n      isRedirectBinding: false\n      issuer: http://www.okta.com/abxcseyuiwelflkdjh\n      logoutEnabled: false\n      logoutUrl:\n      onDemandProvisioningEnabled:\n        firstNameAttribute: firstName\n        lastNameAttribute: lastName\n        onDemandProvisioningRoles:\n          - Administrator\n      rolesAttribute: Administrator\n      signAuthnRequest: false\n      spInitiatedLoginEnabled: false\n      spInitiatedLoginPath:\n      x509cert1: string\n      x509cert2:\n      x509cert3:\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the SAML Configuration.\n- `certificate` - Authentication Request Signing Certificate for the user.\n- `assertion_consumer_url` - The URL on Sumo Logic where the IdP will redirect to with its authentication response.\n- `entity_id` - A unique identifier that is the intended audience of the SAML assertion.\n\n\n## Import\n\nSAML Configuration can be imported using the SAML configuration id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979\n```\n\n [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On ",
            "properties": {
                "assertionConsumerUrl": {
                    "type": "string"
                },
                "authnRequestUrl": {
                    "type": "string",
                    "description": "The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to \"\".\n"
                },
                "certificate": {
                    "type": "string"
                },
                "configurationName": {
                    "type": "string",
                    "description": "Name of the SSO policy or another name used to describe the policy internally.\n"
                },
                "debugMode": {
                    "type": "boolean",
                    "description": "True if additional details are included when a user fails to sign in. Defaults to false.\n"
                },
                "disableRequestedAuthnContext": {
                    "type": "boolean",
                    "description": "True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "The email address of the new user account. Defaults to \"\".\n"
                },
                "entityId": {
                    "type": "string"
                },
                "isRedirectBinding": {
                    "type": "boolean",
                    "description": "True if the SAML binding is of HTTP Redirect type. Defaults to false.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The unique URL assigned to the organization by the SAML Identity Provider.\n"
                },
                "logoutEnabled": {
                    "type": "boolean",
                    "description": "True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that users will be redirected to after signing out of Sumo Logic. Defaults to \"\".\n"
                },
                "onDemandProvisioningEnabled": {
                    "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled",
                    "description": "The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.\n"
                },
                "rolesAttribute": {
                    "type": "string",
                    "description": "The role that Sumo Logic will assign to users when they sign in. Defaults to \"\".\n"
                },
                "signAuthnRequest": {
                    "type": "boolean",
                    "description": "True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.\n"
                },
                "spInitiatedLoginEnabled": {
                    "type": "boolean",
                    "description": "True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.\n"
                },
                "spInitiatedLoginPath": {
                    "type": "string",
                    "description": "The identifier used to generate a unique URL for user login. Defaults to \"\".\n"
                },
                "x509cert1": {
                    "type": "string",
                    "description": "The certificate is used to verify the signature in SAML assertions.\n"
                },
                "x509cert2": {
                    "type": "string",
                    "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to \"\".\n"
                },
                "x509cert3": {
                    "type": "string",
                    "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to \"\".\n"
                }
            },
            "required": [
                "assertionConsumerUrl",
                "certificate",
                "configurationName",
                "entityId",
                "issuer",
                "x509cert1"
            ],
            "inputProperties": {
                "authnRequestUrl": {
                    "type": "string",
                    "description": "The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to \"\".\n"
                },
                "configurationName": {
                    "type": "string",
                    "description": "Name of the SSO policy or another name used to describe the policy internally.\n"
                },
                "debugMode": {
                    "type": "boolean",
                    "description": "True if additional details are included when a user fails to sign in. Defaults to false.\n"
                },
                "disableRequestedAuthnContext": {
                    "type": "boolean",
                    "description": "True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "The email address of the new user account. Defaults to \"\".\n"
                },
                "isRedirectBinding": {
                    "type": "boolean",
                    "description": "True if the SAML binding is of HTTP Redirect type. Defaults to false.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The unique URL assigned to the organization by the SAML Identity Provider.\n"
                },
                "logoutEnabled": {
                    "type": "boolean",
                    "description": "True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.\n"
                },
                "logoutUrl": {
                    "type": "string",
                    "description": "The URL that users will be redirected to after signing out of Sumo Logic. Defaults to \"\".\n"
                },
                "onDemandProvisioningEnabled": {
                    "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled",
                    "description": "The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.\n"
                },
                "rolesAttribute": {
                    "type": "string",
                    "description": "The role that Sumo Logic will assign to users when they sign in. Defaults to \"\".\n"
                },
                "signAuthnRequest": {
                    "type": "boolean",
                    "description": "True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.\n"
                },
                "spInitiatedLoginEnabled": {
                    "type": "boolean",
                    "description": "True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.\n"
                },
                "spInitiatedLoginPath": {
                    "type": "string",
                    "description": "The identifier used to generate a unique URL for user login. Defaults to \"\".\n"
                },
                "x509cert1": {
                    "type": "string",
                    "description": "The certificate is used to verify the signature in SAML assertions.\n"
                },
                "x509cert2": {
                    "type": "string",
                    "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to \"\".\n"
                },
                "x509cert3": {
                    "type": "string",
                    "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to \"\".\n"
                }
            },
            "requiredInputs": [
                "configurationName",
                "issuer",
                "x509cert1"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SamlConfiguration resources.\n",
                "properties": {
                    "assertionConsumerUrl": {
                        "type": "string"
                    },
                    "authnRequestUrl": {
                        "type": "string",
                        "description": "The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to \"\".\n"
                    },
                    "certificate": {
                        "type": "string"
                    },
                    "configurationName": {
                        "type": "string",
                        "description": "Name of the SSO policy or another name used to describe the policy internally.\n"
                    },
                    "debugMode": {
                        "type": "boolean",
                        "description": "True if additional details are included when a user fails to sign in. Defaults to false.\n"
                    },
                    "disableRequestedAuthnContext": {
                        "type": "boolean",
                        "description": "True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "The email address of the new user account. Defaults to \"\".\n"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "isRedirectBinding": {
                        "type": "boolean",
                        "description": "True if the SAML binding is of HTTP Redirect type. Defaults to false.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The unique URL assigned to the organization by the SAML Identity Provider.\n"
                    },
                    "logoutEnabled": {
                        "type": "boolean",
                        "description": "True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.\n"
                    },
                    "logoutUrl": {
                        "type": "string",
                        "description": "The URL that users will be redirected to after signing out of Sumo Logic. Defaults to \"\".\n"
                    },
                    "onDemandProvisioningEnabled": {
                        "$ref": "#/types/sumologic:index/SamlConfigurationOnDemandProvisioningEnabled:SamlConfigurationOnDemandProvisioningEnabled",
                        "description": "The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.\n"
                    },
                    "rolesAttribute": {
                        "type": "string",
                        "description": "The role that Sumo Logic will assign to users when they sign in. Defaults to \"\".\n"
                    },
                    "signAuthnRequest": {
                        "type": "boolean",
                        "description": "True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.\n"
                    },
                    "spInitiatedLoginEnabled": {
                        "type": "boolean",
                        "description": "True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.\n"
                    },
                    "spInitiatedLoginPath": {
                        "type": "string",
                        "description": "The identifier used to generate a unique URL for user login. Defaults to \"\".\n"
                    },
                    "x509cert1": {
                        "type": "string",
                        "description": "The certificate is used to verify the signature in SAML assertions.\n"
                    },
                    "x509cert2": {
                        "type": "string",
                        "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to \"\".\n"
                    },
                    "x509cert3": {
                        "type": "string",
                        "description": "The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to \"\".\n"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/scheduledView:ScheduledView": {
            "description": "Provides a [Sumologic Scheduled View](https://help.sumologic.com/Manage/Scheduled-Views).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst failedConnections = new sumologic.ScheduledView(\"failed_connections\", {\n    indexName: \"failed_connections\",\n    query: `_view=connections connectionStats\n| parse \"connectionStats.CS *\" as body\n| json field=body \"exitCode\", \"isHttp2\"\n| lookup org_name from shared/partners on partner_id=partnerid\n| timeslice 10m\n`,\n    retentionPeriod: 365,\n    startTime: \"2019-09-01T00:00:00Z\",\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.ScheduledView;\nimport com.pulumi.sumologic.ScheduledViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var failedConnections = new ScheduledView(\"failedConnections\", ScheduledViewArgs.builder()        \n            .indexName(\"failed_connections\")\n            .lifecycle(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .query(\"\"\"\n_view=connections connectionStats\n| parse \"connectionStats.CS *\" as body\n| json field=body \"exitCode\", \"isHttp2\"\n| lookup org_name from shared/partners on partner_id=partnerid\n| timeslice 10m\n\n            \"\"\")\n            .retentionPeriod(365)\n            .startTime(\"2019-09-01T00:00:00Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  failedConnections:\n    type: sumologic:ScheduledView\n    properties:\n      indexName: failed_connections\n      lifecycle:\n        preventDestroy: true\n      query: |+\n        _view=connections connectionStats\n        | parse \"connectionStats.CS *\" as body\n        | json field=body \"exitCode\", \"isHttp2\"\n        | lookup org_name from shared/partners on partner_id=partnerid\n        | timeslice 10m\n\n      retentionPeriod: 365\n      startTime: 2019-09-01T00:00:00Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nScheduled Views can can be imported using the id. The list of scheduled views and their ids can be obtained using the Sumologic [scheduled views api][2]. hcl\n\n```sh\n $ pulumi import sumologic:index/scheduledView:ScheduledView failed_connections 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Scheduled-Views [2]https://api.sumologic.com/docs/#operation/listScheduledViews ",
            "properties": {
                "dataForwardingId": {
                    "type": "string",
                    "description": "An optional ID of a data forwarding configuration to be used by the scheduled view.\n"
                },
                "indexName": {
                    "type": "string",
                    "description": "Name of the index (scheduled view).\n"
                },
                "parsingMode": {
                    "type": "string",
                    "description": "Default to `Manual`. Define the parsing mode to scan the JSON format log messages. Possible values are: `AutoParse` - In AutoParse mode, the system automatically figures out fields to parse based on the search query. `Manual` - While in the Manual mode, no fields are parsed out automatically. For more information see Dynamic Parsing.\n"
                },
                "query": {
                    "type": "string",
                    "description": "Log query defining the scheduled view.\n"
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean",
                    "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "The number of days to retain data in the scheduled view, or -1 to use the default value for your account. Only relevant if your account has multi-retention. enabled.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start timestamp in UTC in RFC3339 format.\n"
                }
            },
            "required": [
                "indexName",
                "query",
                "startTime"
            ],
            "inputProperties": {
                "dataForwardingId": {
                    "type": "string",
                    "description": "An optional ID of a data forwarding configuration to be used by the scheduled view.\n"
                },
                "indexName": {
                    "type": "string",
                    "description": "Name of the index (scheduled view).\n",
                    "willReplaceOnChanges": true
                },
                "parsingMode": {
                    "type": "string",
                    "description": "Default to `Manual`. Define the parsing mode to scan the JSON format log messages. Possible values are: `AutoParse` - In AutoParse mode, the system automatically figures out fields to parse based on the search query. `Manual` - While in the Manual mode, no fields are parsed out automatically. For more information see Dynamic Parsing.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "Log query defining the scheduled view.\n",
                    "willReplaceOnChanges": true
                },
                "reduceRetentionPeriodImmediately": {
                    "type": "boolean",
                    "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                },
                "retentionPeriod": {
                    "type": "integer",
                    "description": "The number of days to retain data in the scheduled view, or -1 to use the default value for your account. Only relevant if your account has multi-retention. enabled.\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start timestamp in UTC in RFC3339 format.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "indexName",
                "query",
                "startTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScheduledView resources.\n",
                "properties": {
                    "dataForwardingId": {
                        "type": "string",
                        "description": "An optional ID of a data forwarding configuration to be used by the scheduled view.\n"
                    },
                    "indexName": {
                        "type": "string",
                        "description": "Name of the index (scheduled view).\n",
                        "willReplaceOnChanges": true
                    },
                    "parsingMode": {
                        "type": "string",
                        "description": "Default to `Manual`. Define the parsing mode to scan the JSON format log messages. Possible values are: `AutoParse` - In AutoParse mode, the system automatically figures out fields to parse based on the search query. `Manual` - While in the Manual mode, no fields are parsed out automatically. For more information see Dynamic Parsing.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "Log query defining the scheduled view.\n",
                        "willReplaceOnChanges": true
                    },
                    "reduceRetentionPeriodImmediately": {
                        "type": "boolean",
                        "description": "This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.\n"
                    },
                    "retentionPeriod": {
                        "type": "integer",
                        "description": "The number of days to retain data in the scheduled view, or -1 to use the default value for your account. Only relevant if your account has multi-retention. enabled.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start timestamp in UTC in RFC3339 format.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/slo:Slo": {
            "description": "Provides the ability to create, read, delete, and update [SLOs](https://help.sumologic.com/Beta/SLO_Reliability_Management).\n",
            "properties": {
                "application": {
                    "type": "string",
                    "description": "Name of the application.\nDefaults to true.\n"
                },
                "compliances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloCompliance:SloCompliance"
                    },
                    "description": "The compliance settings for the SLO.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SLO.\n"
                },
                "indicator": {
                    "$ref": "#/types/sumologic:index/SloIndicator:SloIndicator",
                    "description": "The service level indicator on which SLO is to be defined. more details on the difference\nb/w them can be found on\nthe [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)\n- window_based_evaluation - Evaluate SLI using successful/total windows.\n- request_based_evaluation - Evaluate SLI based on occurrence of successful\nevents / total events over entire compliance period.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO. The name must be alphanumeric.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the SLO Folder that contains this SLO. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service.\n"
                },
                "signalType": {
                    "type": "string",
                    "description": "The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`\n, `Other`. Defaults to `Latency`.\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "application",
                "compliances",
                "createdAt",
                "createdBy",
                "indicator",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "name",
                "parentId",
                "service",
                "signalType",
                "version"
            ],
            "inputProperties": {
                "application": {
                    "type": "string",
                    "description": "Name of the application.\nDefaults to true.\n"
                },
                "compliances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sumologic:index/SloCompliance:SloCompliance"
                    },
                    "description": "The compliance settings for the SLO.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SLO.\n"
                },
                "indicator": {
                    "$ref": "#/types/sumologic:index/SloIndicator:SloIndicator",
                    "description": "The service level indicator on which SLO is to be defined. more details on the difference\nb/w them can be found on\nthe [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)\n- window_based_evaluation - Evaluate SLI using successful/total windows.\n- request_based_evaluation - Evaluate SLI based on occurrence of successful\nevents / total events over entire compliance period.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO. The name must be alphanumeric.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The ID of the SLO Folder that contains this SLO. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Name of the service.\n"
                },
                "signalType": {
                    "type": "string",
                    "description": "The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`\n, `Other`. Defaults to `Latency`.\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "compliances",
                "indicator",
                "signalType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Slo resources.\n",
                "properties": {
                    "application": {
                        "type": "string",
                        "description": "Name of the application.\nDefaults to true.\n"
                    },
                    "compliances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sumologic:index/SloCompliance:SloCompliance"
                        },
                        "description": "The compliance settings for the SLO.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SLO.\n"
                    },
                    "indicator": {
                        "$ref": "#/types/sumologic:index/SloIndicator:SloIndicator",
                        "description": "The service level indicator on which SLO is to be defined. more details on the difference\nb/w them can be found on\nthe [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)\n- window_based_evaluation - Evaluate SLI using successful/total windows.\n- request_based_evaluation - Evaluate SLI based on occurrence of successful\nevents / total events over entire compliance period.\n"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SLO. The name must be alphanumeric.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The ID of the SLO Folder that contains this SLO. Defaults to the root folder.\n"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "service": {
                        "type": "string",
                        "description": "Name of the service.\n"
                    },
                    "signalType": {
                        "type": "string",
                        "description": "The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`\n, `Other`. Defaults to `Latency`.\n"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/sloFolder:SloFolder": {
            "description": "Provides the ability to create, read, delete, and update folders for SLO's.\n\n## Example SLO Folder\n\nNOTE: SLO folders are considered a different resource from Library content and monitor folders.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfSloFolder = new sumologic.SloFolder(\"tf_slo_folder\", {\n    description: \"A folder for SLO's managed by terraform.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_slo_folder = sumologic.SloFolder(\"tfSloFolder\", description=\"A folder for SLO's managed by terraform.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfSloFolder = new SumoLogic.SloFolder(\"tfSloFolder\", new()\n    {\n        Description = \"A folder for SLO's managed by terraform.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewSloFolder(ctx, \"tfSloFolder\", \u0026sumologic.SloFolderArgs{\n\t\t\tDescription: pulumi.String(\"A folder for SLO's managed by terraform.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SloFolder;\nimport com.pulumi.sumologic.SloFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfSloFolder = new SloFolder(\"tfSloFolder\", SloFolderArgs.builder()        \n            .description(\"A folder for SLO's managed by terraform.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfSloFolder:\n    type: sumologic:SloFolder\n    properties:\n      description: A folder for SLO's managed by terraform.\n```\n\n## Example Nested SLO Folders\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst tfPaymentsTeamRootFolder = new sumologic.SloFolder(\"tfPaymentsTeamRootFolder\", {description: \"SLO's payments services.\"});\nconst tfPaymentsTeamProdFolder = new sumologic.SloFolder(\"tfPaymentsTeamProdFolder\", {\n    description: \"SLOs for the Payments service on Production Environment.\",\n    parentId: tfPaymentsTeamRootFolder.id,\n});\nconst tfPaymentsTeamStagFolder = new sumologic.SloFolder(\"tfPaymentsTeamStagFolder\", {\n    description: \"SLOs for the payments service on Staging Environment.\",\n    parentId: tfPaymentsTeamRootFolder.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ntf_payments_team_root_folder = sumologic.SloFolder(\"tfPaymentsTeamRootFolder\", description=\"SLO's payments services.\")\ntf_payments_team_prod_folder = sumologic.SloFolder(\"tfPaymentsTeamProdFolder\",\n    description=\"SLOs for the Payments service on Production Environment.\",\n    parent_id=tf_payments_team_root_folder.id)\ntf_payments_team_stag_folder = sumologic.SloFolder(\"tfPaymentsTeamStagFolder\",\n    description=\"SLOs for the payments service on Staging Environment.\",\n    parent_id=tf_payments_team_root_folder.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tfPaymentsTeamRootFolder = new SumoLogic.SloFolder(\"tfPaymentsTeamRootFolder\", new()\n    {\n        Description = \"SLO's payments services.\",\n    });\n\n    var tfPaymentsTeamProdFolder = new SumoLogic.SloFolder(\"tfPaymentsTeamProdFolder\", new()\n    {\n        Description = \"SLOs for the Payments service on Production Environment.\",\n        ParentId = tfPaymentsTeamRootFolder.Id,\n    });\n\n    var tfPaymentsTeamStagFolder = new SumoLogic.SloFolder(\"tfPaymentsTeamStagFolder\", new()\n    {\n        Description = \"SLOs for the payments service on Staging Environment.\",\n        ParentId = tfPaymentsTeamRootFolder.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttfPaymentsTeamRootFolder, err := sumologic.NewSloFolder(ctx, \"tfPaymentsTeamRootFolder\", \u0026sumologic.SloFolderArgs{\n\t\t\tDescription: pulumi.String(\"SLO's payments services.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewSloFolder(ctx, \"tfPaymentsTeamProdFolder\", \u0026sumologic.SloFolderArgs{\n\t\t\tDescription: pulumi.String(\"SLOs for the Payments service on Production Environment.\"),\n\t\t\tParentId:    tfPaymentsTeamRootFolder.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewSloFolder(ctx, \"tfPaymentsTeamStagFolder\", \u0026sumologic.SloFolderArgs{\n\t\t\tDescription: pulumi.String(\"SLOs for the payments service on Staging Environment.\"),\n\t\t\tParentId:    tfPaymentsTeamRootFolder.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SloFolder;\nimport com.pulumi.sumologic.SloFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tfPaymentsTeamRootFolder = new SloFolder(\"tfPaymentsTeamRootFolder\", SloFolderArgs.builder()        \n            .description(\"SLO's payments services.\")\n            .build());\n\n        var tfPaymentsTeamProdFolder = new SloFolder(\"tfPaymentsTeamProdFolder\", SloFolderArgs.builder()        \n            .description(\"SLOs for the Payments service on Production Environment.\")\n            .parentId(tfPaymentsTeamRootFolder.id())\n            .build());\n\n        var tfPaymentsTeamStagFolder = new SloFolder(\"tfPaymentsTeamStagFolder\", SloFolderArgs.builder()        \n            .description(\"SLOs for the payments service on Staging Environment.\")\n            .parentId(tfPaymentsTeamRootFolder.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tfPaymentsTeamRootFolder:\n    type: sumologic:SloFolder\n    properties:\n      description: SLO's payments services.\n  tfPaymentsTeamProdFolder:\n    type: sumologic:SloFolder\n    properties:\n      description: SLOs for the Payments service on Production Environment.\n      parentId: ${tfPaymentsTeamRootFolder.id}\n  tfPaymentsTeamStagFolder:\n    type: sumologic:SloFolder\n    properties:\n      description: SLOs for the payments service on Staging Environment.\n      parentId: ${tfPaymentsTeamRootFolder.id}\n```\n\n\n## Import\n\nSLO folders can be imported using the SLO folder identifier, such as:\n\nshell\n\n```sh\n $ pulumi import sumologic:index/sloFolder:SloFolder tf_slo_folder_1 0000000000ABC123\n```\n\n ",
            "properties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SLO folder.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO folder. The name must be alphanumeric.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "description",
                "isMutable",
                "isSystem",
                "modifiedAt",
                "modifiedBy",
                "name",
                "parentId",
                "version"
            ],
            "inputProperties": {
                "contentType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SLO folder.\n"
                },
                "isLocked": {
                    "type": "boolean"
                },
                "isMutable": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "modifiedAt": {
                    "type": "string"
                },
                "modifiedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO folder. The name must be alphanumeric.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.\n"
                },
                "postRequestMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SloFolder resources.\n",
                "properties": {
                    "contentType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SLO folder.\n"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "isMutable": {
                        "type": "boolean"
                    },
                    "isSystem": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string"
                    },
                    "modifiedBy": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SLO folder. The name must be alphanumeric.\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.\n"
                    },
                    "postRequestMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/subdomain:Subdomain": {
            "description": "Provides a [Sumologic Subdomain](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleSubdomain = new sumologic.Subdomain(\"exampleSubdomain\", {\n    subdomain: \"my-company\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_subdomain = sumologic.Subdomain(\"exampleSubdomain\", subdomain=\"my-company\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleSubdomain = new SumoLogic.Subdomain(\"exampleSubdomain\", new()\n    {\n        SubdomainName = \"my-company\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewSubdomain(ctx, \"exampleSubdomain\", \u0026sumologic.SubdomainArgs{\n\t\t\tSubdomain: pulumi.String(\"my-company\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Subdomain;\nimport com.pulumi.sumologic.SubdomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleSubdomain = new Subdomain(\"exampleSubdomain\", SubdomainArgs.builder()        \n            .subdomain(\"my-company\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSubdomain:\n    type: sumologic:Subdomain\n    properties:\n      subdomain: my-company\n```\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - Unique identifier for the subdomain.\n\n[1]: https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain\n",
            "properties": {
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain.\n",
                    "language": {
                        "csharp": {
                            "name": "SubdomainName"
                        }
                    }
                }
            },
            "required": [
                "subdomain"
            ],
            "inputProperties": {
                "subdomain": {
                    "type": "string",
                    "description": "The subdomain.\n",
                    "language": {
                        "csharp": {
                            "name": "SubdomainName"
                        }
                    }
                }
            },
            "requiredInputs": [
                "subdomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subdomain resources.\n",
                "properties": {
                    "subdomain": {
                        "type": "string",
                        "description": "The subdomain.\n",
                        "language": {
                            "csharp": {
                                "name": "SubdomainName"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/token:Token": {
            "description": "Provides a [Sumologic Token](https://help.sumologic.com/Manage/Security/Installation_Tokens).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleToken = new sumologic.Token(\"example_token\", {\n    description: \"Testing resource sumologic_token\",\n    status: \"Active\",\n    type: \"CollectorRegistration\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_token = sumologic.Token(\"exampleToken\",\n    description=\"Testing resource sumologic_token\",\n    status=\"Active\",\n    type=\"CollectorRegistration\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleToken = new SumoLogic.Token(\"exampleToken\", new()\n    {\n        Description = \"Testing resource sumologic_token\",\n        Status = \"Active\",\n        Type = \"CollectorRegistration\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.NewToken(ctx, \"exampleToken\", \u0026sumologic.TokenArgs{\n\t\t\tDescription: pulumi.String(\"Testing resource sumologic_token\"),\n\t\t\tStatus:      pulumi.String(\"Active\"),\n\t\t\tType:        pulumi.String(\"CollectorRegistration\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Token;\nimport com.pulumi.sumologic.TokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleToken = new Token(\"exampleToken\", TokenArgs.builder()        \n            .description(\"Testing resource sumologic_token\")\n            .status(\"Active\")\n            .type(\"CollectorRegistration\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleToken:\n    type: sumologic:Token\n    properties:\n      description: Testing resource sumologic_token\n      status: Active\n      type: CollectorRegistration\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTokens can be imported using the name, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/token:Token test id\n```\n\n [1]https://help.sumologic.com/Manage/Security/Installation_Tokens ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "encodedTokenAndUrl": {
                    "type": "string",
                    "description": "The encoded token for collector registration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the token. This must be unique across all of the tokens.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the token. Valid values:\n- `Active`\n- `Inactive`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the token. Valid value:\n- `CollectorRegistration`.\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "required": [
                "encodedTokenAndUrl",
                "name",
                "status",
                "type",
                "version"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the token. This must be unique across all of the tokens.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the token. Valid values:\n- `Active`\n- `Inactive`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the token. Valid value:\n- `CollectorRegistration`.\n"
                },
                "version": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "status",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the token.\n"
                    },
                    "encodedTokenAndUrl": {
                        "type": "string",
                        "description": "The encoded token for collector registration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name of the token. This must be unique across all of the tokens.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the token. Valid values:\n- `Active`\n- `Inactive`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the token. Valid value:\n- `CollectorRegistration`.\n"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "sumologic:index/user:User": {
            "description": "Provides a [Sumologic User](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst exampleRole = new sumologic.Role(\"exampleRole\", {description: \"Testing resource sumologic_role\"});\nconst exampleUser1 = new sumologic.User(\"exampleUser1\", {\n    firstName: \"Jon\",\n    lastName: \"Doe\",\n    email: \"jon.doe@gmail.com\",\n    isActive: true,\n    roleIds: [exampleRole.id],\n    transferTo: \"\",\n});\nconst exampleUser2 = new sumologic.User(\"exampleUser2\", {\n    firstName: \"Jane\",\n    lastName: \"Smith\",\n    email: \"jane.smith@gmail.com\",\n    roleIds: [exampleRole.id],\n    transferTo: exampleUser1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nexample_role = sumologic.Role(\"exampleRole\", description=\"Testing resource sumologic_role\")\nexample_user1 = sumologic.User(\"exampleUser1\",\n    first_name=\"Jon\",\n    last_name=\"Doe\",\n    email=\"jon.doe@gmail.com\",\n    is_active=True,\n    role_ids=[example_role.id],\n    transfer_to=\"\")\nexample_user2 = sumologic.User(\"exampleUser2\",\n    first_name=\"Jane\",\n    last_name=\"Smith\",\n    email=\"jane.smith@gmail.com\",\n    role_ids=[example_role.id],\n    transfer_to=example_user1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleRole = new SumoLogic.Role(\"exampleRole\", new()\n    {\n        Description = \"Testing resource sumologic_role\",\n    });\n\n    var exampleUser1 = new SumoLogic.User(\"exampleUser1\", new()\n    {\n        FirstName = \"Jon\",\n        LastName = \"Doe\",\n        Email = \"jon.doe@gmail.com\",\n        IsActive = true,\n        RoleIds = new[]\n        {\n            exampleRole.Id,\n        },\n        TransferTo = \"\",\n    });\n\n    var exampleUser2 = new SumoLogic.User(\"exampleUser2\", new()\n    {\n        FirstName = \"Jane\",\n        LastName = \"Smith\",\n        Email = \"jane.smith@gmail.com\",\n        RoleIds = new[]\n        {\n            exampleRole.Id,\n        },\n        TransferTo = exampleUser1.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleRole, err := sumologic.NewRole(ctx, \"exampleRole\", \u0026sumologic.RoleArgs{\n\t\t\tDescription: pulumi.String(\"Testing resource sumologic_role\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser1, err := sumologic.NewUser(ctx, \"exampleUser1\", \u0026sumologic.UserArgs{\n\t\t\tFirstName: pulumi.String(\"Jon\"),\n\t\t\tLastName:  pulumi.String(\"Doe\"),\n\t\t\tEmail:     pulumi.String(\"jon.doe@gmail.com\"),\n\t\t\tIsActive:  pulumi.Bool(true),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\texampleRole.ID(),\n\t\t\t},\n\t\t\tTransferTo: pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sumologic.NewUser(ctx, \"exampleUser2\", \u0026sumologic.UserArgs{\n\t\t\tFirstName: pulumi.String(\"Jane\"),\n\t\t\tLastName:  pulumi.String(\"Smith\"),\n\t\t\tEmail:     pulumi.String(\"jane.smith@gmail.com\"),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\texampleRole.ID(),\n\t\t\t},\n\t\t\tTransferTo: exampleUser1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.Role;\nimport com.pulumi.sumologic.RoleArgs;\nimport com.pulumi.sumologic.User;\nimport com.pulumi.sumologic.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRole = new Role(\"exampleRole\", RoleArgs.builder()        \n            .description(\"Testing resource sumologic_role\")\n            .build());\n\n        var exampleUser1 = new User(\"exampleUser1\", UserArgs.builder()        \n            .firstName(\"Jon\")\n            .lastName(\"Doe\")\n            .email(\"jon.doe@gmail.com\")\n            .isActive(true)\n            .roleIds(exampleRole.id())\n            .transferTo(\"\")\n            .build());\n\n        var exampleUser2 = new User(\"exampleUser2\", UserArgs.builder()        \n            .firstName(\"Jane\")\n            .lastName(\"Smith\")\n            .email(\"jane.smith@gmail.com\")\n            .roleIds(exampleRole.id())\n            .transferTo(exampleUser1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRole:\n    type: sumologic:Role\n    properties:\n      description: Testing resource sumologic_role\n  exampleUser1:\n    type: sumologic:User\n    properties:\n      firstName: Jon\n      lastName: Doe\n      email: jon.doe@gmail.com\n      isActive: true\n      roleIds:\n        - ${exampleRole.id}\n      transferTo:\n  exampleUser2:\n    type: sumologic:User\n    properties:\n      firstName: Jane\n      lastName: Smith\n      email: jane.smith@gmail.com\n      roleIds:\n        - ${exampleRole.id}\n      transferTo: ${exampleUser1.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the user id, e.g.hcl\n\n```sh\n $ pulumi import sumologic:index/user:User user 1234567890\n```\n\n [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users ",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "Email of the user.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "This has the value true if the user is active and false if they have been deactivated.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roleIds associated with the user.\n"
                },
                "transferTo": {
                    "type": "string",
                    "description": "UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.\n"
                }
            },
            "required": [
                "email",
                "firstName",
                "isActive",
                "lastName",
                "roleIds",
                "transferTo"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "Email of the user.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n"
                },
                "isActive": {
                    "type": "boolean",
                    "description": "This has the value true if the user is active and false if they have been deactivated.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n"
                },
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roleIds associated with the user.\n"
                },
                "transferTo": {
                    "type": "string",
                    "description": "UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.\n"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "isActive",
                "lastName",
                "roleIds",
                "transferTo"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email of the user.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user.\n"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "This has the value true if the user is active and false if they have been deactivated.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user.\n"
                    },
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roleIds associated with the user.\n"
                    },
                    "transferTo": {
                        "type": "string",
                        "description": "UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sumologic:index/getAdminRecommendedFolder:getAdminRecommendedFolder": {
            "description": "Provides an easy way to retrieve the Admin Recommended Folder.\n\nIn order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.\nPlease refer to the Example Usage section below for more details. \n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The ID of the Admin Recommended Folder.\n- `name` - The name of the Admin Recommended Folder.\n- `description` - The description of the Admin Recommended Folder.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAdminRecommendedFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdminRecommendedFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name"
                ]
            }
        },
        "sumologic:index/getCallerIdentity:getCallerIdentity": {
            "description": "Provides an easy way to retrieve Sumo Logic auth details.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst current = pulumi.output(sumologic.getCallerIdentity());\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\ncurrent = sumologic.get_caller_identity()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = SumoLogic.GetCallerIdentity.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.GetCallerIdentity(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```yaml\nvariables:\n  current:\n    Fn::Invoke:\n      Function: sumologic:getCallerIdentity\n      Arguments: {}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `access_id` - Sumo Logic access ID.\n- `environment` - API endpoint environment.\n",
            "outputs": {
                "description": "A collection of values returned by getCallerIdentity.\n",
                "properties": {
                    "accessId": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessId",
                    "environment",
                    "id"
                ]
            }
        },
        "sumologic:index/getCollector:getCollector": {
            "description": "Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisCollector = pulumi.output(sumologic.getCollector({\n    name: \"MyCollector\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_collector(name=\"MyCollector\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = SumoLogic.GetCollector.Invoke(new()\n    {\n        Name = \"MyCollector\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupCollector(ctx, \u0026GetCollectorArgs{\n\t\t\tName: pulumi.StringRef(\"MyCollector\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetCollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()\n            .name(\"MyCollector\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: sumologic:getCollector\n      Arguments:\n        name: MyCollector\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst that = pulumi.output(sumologic.getCollector({\n    id: 1234567890,\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthat = sumologic.get_collector(id=1234567890)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var that = SumoLogic.GetCollector.Invoke(new()\n    {\n        Id = 1234567890,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupCollector(ctx, \u0026GetCollectorArgs{\n\t\t\tId: pulumi.IntRef(1234567890),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetCollectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  that:\n    Fn::Invoke:\n      Function: sumologic:getCollector\n      Arguments:\n        id: 1234567890\n```\n\nA collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.\n\nIf both `id` and `name` have been specified, `id` takes precedence.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the collector. This can be used to attach sources to the collector.\n- `name` - The name of the collector.\n- `description` - The description of the collector.\n- `category` - The default source category for any source attached to this collector.\n- `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCollector.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCollector.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "fields",
                    "id",
                    "name",
                    "timezone"
                ]
            }
        },
        "sumologic:index/getCseLogMappingVendorProduct:getCseLogMappingVendorProduct": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst webGateway = pulumi.output(sumologic.getCseLogMappingVendorProduct({\n    product: \"Web Gateway\",\n    vendor: \"McAfee\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nweb_gateway = sumologic.get_cse_log_mapping_vendor_product(product=\"Web Gateway\",\n    vendor=\"McAfee\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webGateway = SumoLogic.GetCseLogMappingVendorProduct.Invoke(new()\n    {\n        Product = \"Web Gateway\",\n        Vendor = \"McAfee\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.GetCseLogMappingVendorProduct(ctx, \u0026GetCseLogMappingVendorProductArgs{\n\t\t\tProduct: \"Web Gateway\",\n\t\t\tVendor:  \"McAfee\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webGateway = SumologicFunctions.getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs.builder()\n            .product(\"Web Gateway\")\n            .vendor(\"McAfee\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  webGateway:\n    Fn::Invoke:\n      Function: sumologic:getCseLogMappingVendorProduct\n      Arguments:\n        product: Web Gateway\n        vendor: McAfee\n```\n\nA Log mapping vendor product can be looked up by providing values of `product` and `vendor`\nBoth `product` and `vendor` values are mandatory. If not provided an error will be generated.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `guid` - The internal GUID of the log mapping vendor product.\n- `product` - The name of the product.\n- `vendor` - The name of the vendor.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCseLogMappingVendorProduct.\n",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "product": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "product",
                    "vendor"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCseLogMappingVendorProduct.\n",
                "properties": {
                    "guid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "product": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "guid",
                    "product",
                    "vendor",
                    "id"
                ]
            }
        },
        "sumologic:index/getFolder:getFolder": {
            "description": "Provides an easy way to retrieve a folder.\n\nYou must specify the absolute path of the folder to retrieve. The content library has \"Library\"\nfolder at the root level. For items in \"Personal\" folder, the base path is \"/Library/Users/user@sumologic.com\"\nwhere \"user@sumologic.com\" is the email address of the user. For example, if a user with email address\n`wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be\n`/Library/Users/wile@acme.com/Rockets`.\n\nFor items in \"Admin Recommended\" folder, the base path is \"/Library/Admin Recommended\". For example,\ngiven a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.\n\n\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The ID of the folder.\n- `name` - The name of the folder.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFolder.\n",
                "properties": {
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFolder.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "path"
                ]
            }
        },
        "sumologic:index/getHttpSource:getHttpSource": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisHttpSource = pulumi.output(sumologic.getHttpSource({\n    collectorId: 121212,\n    name: \"source_name\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_http_source(collector_id=121212,\n    name=\"source_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = SumoLogic.GetHttpSource.Invoke(new()\n    {\n        CollectorId = 121212,\n        Name = \"source_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupHttpSource(ctx, \u0026GetHttpSourceArgs{\n\t\t\tCollectorId: pulumi.IntRef(121212),\n\t\t\tName:        pulumi.StringRef(\"source_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetHttpSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()\n            .collectorId(121212)\n            .name(\"source_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: sumologic:getHttpSource\n      Arguments:\n        collectorId: 121212\n        name: source_name\n```\n\nA HTTP Source can be looked up by using a combination of `collector_id` \u0026 `name`.\nIf either `id` or `name` are not present, the data source block fails with a panic (at this point).\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the collector. This can be used to attach sources to the collector.\n- `name` - The name of the collector.\n- `description` - The description of the collector.\n- `category` - The default source category for any source attached to this collector.\n- `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.\n- `multiline` - Multiline processing enabled or not.\n- `url` - The HTTP endpoint to use for sending data to this source.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHttpSource.\n",
                "properties": {
                    "collectorId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHttpSource.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "collectorId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "multiline": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "id",
                    "multiline",
                    "timezone",
                    "url"
                ]
            }
        },
        "sumologic:index/getMyUserId:getMyUserId": {
            "inputs": {
                "description": "A collection of arguments for invoking getMyUserId.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMyUserId.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "sumologic:index/getPersonalFolder:getPersonalFolder": {
            "description": "Provides an easy way to retrieve the Personal Folder.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst personalFolder = pulumi.output(sumologic.getPersonalFolder());\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\npersonal_folder = sumologic.get_personal_folder()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var personalFolder = SumoLogic.GetPersonalFolder.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.GetPersonalFolder(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetPersonalFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var personalFolder = SumologicFunctions.getPersonalFolder();\n\n    }\n}\n```\n```yaml\nvariables:\n  personalFolder:\n    Fn::Invoke:\n      Function: sumologic:getPersonalFolder\n      Arguments: {}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The ID of the Personal Folder.\n- `name` - The name of the Personal Folder.\n- `description` - The description of the Personal Folder.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPersonalFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPersonalFolder.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name"
                ]
            }
        },
        "sumologic:index/getRole:getRole": {
            "description": "Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisRole = pulumi.output(sumologic.getRole({\n    name: \"MyRole\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_role(name=\"MyRole\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = SumoLogic.GetRole.Invoke(new()\n    {\n        Name = \"MyRole\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupRole(ctx, \u0026GetRoleArgs{\n\t\t\tName: pulumi.StringRef(\"MyRole\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SumologicFunctions.getRole(GetRoleArgs.builder()\n            .name(\"MyRole\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: sumologic:getRole\n      Arguments:\n        name: MyRole\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst that = pulumi.output(sumologic.getRole({\n    id: \"1234567890\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthat = sumologic.get_role(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var that = SumoLogic.GetRole.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupRole(ctx, \u0026GetRoleArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var that = SumologicFunctions.getRole(GetRoleArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  that:\n    Fn::Invoke:\n      Function: sumologic:getRole\n      Arguments:\n        id: 1234567890\n```\n\nA role can be looked up by either `id` or `name`. One of those attributes needs to be specified.\n\nIf both `id` and `name` have been specified, `id` takes precedence.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the role. This can be used to create users having that role.\n- `name` - The name of the role.\n- `description` - The description of the role.\n- `filter_predicate` - The search filter to restrict access to specific logs.\n- `capabilities` - The list of capabilities associated with the role.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "filterPredicate": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "capabilities",
                    "description",
                    "filterPredicate",
                    "id",
                    "name"
                ]
            }
        },
        "sumologic:index/getUser:getUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst thisUser = pulumi.output(sumologic.getUser({\n    id: \"1234567890\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthis = sumologic.get_user(id=\"1234567890\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = SumoLogic.GetUser.Invoke(new()\n    {\n        Id = \"1234567890\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tId: pulumi.StringRef(\"1234567890\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = SumologicFunctions.getUser(GetUserArgs.builder()\n            .id(\"1234567890\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    Fn::Invoke:\n      Function: sumologic:getUser\n      Arguments:\n        id: 1234567890\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sumologic from \"@pulumi/sumologic\";\n\nconst that = pulumi.output(sumologic.getUser({\n    email: \"user@example.com\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sumologic as sumologic\n\nthat = sumologic.get_user(email=\"user@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing SumoLogic = Pulumi.SumoLogic;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var that = SumoLogic.GetUser.Invoke(new()\n    {\n        Email = \"user@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sumologic.LookupUser(ctx, \u0026GetUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"user@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sumologic.SumologicFunctions;\nimport com.pulumi.sumologic.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var that = SumologicFunctions.getUser(GetUserArgs.builder()\n            .email(\"user@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  that:\n    Fn::Invoke:\n      Function: sumologic:getUser\n      Arguments:\n        email: user@example.com\n```\n\nA user can be looked up by either `id` or `email`. One of those attributes needs to be specified.\n\nIf both `id` and `email` have been specified, `id` takes precedence.\n{{% /example %}}\n{{% /examples %}}\n## Attributes reference\n\nThe following attributes are exported:\n\n- `id` - The internal ID of the user.\n- `email` - (Required) Email of the user.\n- `first_name` - (Required) First name of the user.\n- `last_name` - (Required) Last name of the user.\n- `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.\n- `role_ids` - (Required) List of roleIds associated with the user.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "boolean"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "firstName",
                    "id",
                    "isActive",
                    "lastName",
                    "roleIds"
                ]
            }
        }
    }
}