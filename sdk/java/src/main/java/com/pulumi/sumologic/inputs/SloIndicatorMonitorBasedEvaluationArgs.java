// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs;
import java.util.Objects;


public final class SloIndicatorMonitorBasedEvaluationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloIndicatorMonitorBasedEvaluationArgs Empty = new SloIndicatorMonitorBasedEvaluationArgs();

    /**
     * Monitor details on which SLO will be based. Only single monitor is supported here.
     * 
     */
    @Import(name="monitorTriggers", required=true)
    private Output<SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs> monitorTriggers;

    /**
     * @return Monitor details on which SLO will be based. Only single monitor is supported here.
     * 
     */
    public Output<SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs> monitorTriggers() {
        return this.monitorTriggers;
    }

    private SloIndicatorMonitorBasedEvaluationArgs() {}

    private SloIndicatorMonitorBasedEvaluationArgs(SloIndicatorMonitorBasedEvaluationArgs $) {
        this.monitorTriggers = $.monitorTriggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloIndicatorMonitorBasedEvaluationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloIndicatorMonitorBasedEvaluationArgs $;

        public Builder() {
            $ = new SloIndicatorMonitorBasedEvaluationArgs();
        }

        public Builder(SloIndicatorMonitorBasedEvaluationArgs defaults) {
            $ = new SloIndicatorMonitorBasedEvaluationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param monitorTriggers Monitor details on which SLO will be based. Only single monitor is supported here.
         * 
         * @return builder
         * 
         */
        public Builder monitorTriggers(Output<SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs> monitorTriggers) {
            $.monitorTriggers = monitorTriggers;
            return this;
        }

        /**
         * @param monitorTriggers Monitor details on which SLO will be based. Only single monitor is supported here.
         * 
         * @return builder
         * 
         */
        public Builder monitorTriggers(SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs monitorTriggers) {
            return monitorTriggers(Output.of(monitorTriggers));
        }

        public SloIndicatorMonitorBasedEvaluationArgs build() {
            if ($.monitorTriggers == null) {
                throw new MissingRequiredPropertyException("SloIndicatorMonitorBasedEvaluationArgs", "monitorTriggers");
            }
            return $;
        }
    }

}
