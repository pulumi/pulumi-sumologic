// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.CseOutlierRuleArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.CseOutlierRuleState;
import com.pulumi.sumologic.outputs.CseOutlierRuleAggregationFunctions;
import com.pulumi.sumologic.outputs.CseOutlierRuleEntitySelector;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## ___
 * 
 * layout: &#34;sumologic&#34;
 * page_title: &#34;SumoLogic: sumologic.CseOutlierRule&#34;
 * description: |-
 *   Provides a CSE Outlier Rule
 * ---
 * 
 * # sumologic.CseOutlierRule
 * Provides a Sumo Logic CSE [Outlier Rule](https://help.sumologic.com/docs/cse/rules/write-outlier-rule/).
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.CseFirstSeenRule;
 * import com.pulumi.sumologic.CseFirstSeenRuleArgs;
 * import com.pulumi.sumologic.inputs.CseFirstSeenRuleEntitySelectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var firstSeenRule = new CseFirstSeenRule(&#34;firstSeenRule&#34;, CseFirstSeenRuleArgs.builder()        
 *             .aggregationFunctions(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .baselineWindowSize(&#34;1209600000&#34;)
 *             .descriptionExpression(&#34;Spike in Login Failures - {{ user_username }}&#34;)
 *             .deviationThreshold(3)
 *             .enabled(true)
 *             .entitySelectors(CseFirstSeenRuleEntitySelectorArgs.builder()
 *                 .entityType(&#34;_username&#34;)
 *                 .expression(&#34;user_username&#34;)
 *                 .build())
 *             .floorValue(0)
 *             .groupByFields(&#34;user_username&#34;)
 *             .isPrototype(false)
 *             .matchExpression(&#34;objectType=\&#34;Authentication\&#34; AND success=false&#34;)
 *             .nameExpression(&#34;Spike in Login Failures - {{ user_username }}&#34;)
 *             .retentionWindowSize(&#34;7776000000&#34;)
 *             .severity(1)
 *             .summaryExpression(&#34;Spike in Login Failures - {{ user_username }}&#34;)
 *             .windowSize(&#34;T24H&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Outlier rules can be imported using the field id, e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/cseOutlierRule:CseOutlierRule outlier_rule id
 * ```
 * 
 */
@ResourceType(type="sumologic:index/cseOutlierRule:CseOutlierRule")
public class CseOutlierRule extends com.pulumi.resources.CustomResource {
    @Export(name="aggregationFunctions", refs={CseOutlierRuleAggregationFunctions.class}, tree="[0]")
    private Output<CseOutlierRuleAggregationFunctions> aggregationFunctions;

    public Output<CseOutlierRuleAggregationFunctions> aggregationFunctions() {
        return this.aggregationFunctions;
    }
    /**
     * The baseline window size in milliseconds
     * 
     */
    @Export(name="baselineWindowSize", refs={String.class}, tree="[0]")
    private Output<String> baselineWindowSize;

    /**
     * @return The baseline window size in milliseconds
     * 
     */
    public Output<String> baselineWindowSize() {
        return this.baselineWindowSize;
    }
    /**
     * The description of the generated Signals
     * 
     */
    @Export(name="descriptionExpression", refs={String.class}, tree="[0]")
    private Output<String> descriptionExpression;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Output<String> descriptionExpression() {
        return this.descriptionExpression;
    }
    /**
     * The deviation threshold used to calculate the threshold to trigger signals
     * 
     */
    @Export(name="deviationThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> deviationThreshold;

    /**
     * @return The deviation threshold used to calculate the threshold to trigger signals
     * 
     */
    public Output<Integer> deviationThreshold() {
        return this.deviationThreshold;
    }
    /**
     * Whether the rule should generate Signals
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The entities to generate Signals on
     * 
     */
    @Export(name="entitySelectors", refs={List.class,CseOutlierRuleEntitySelector.class}, tree="[0,1]")
    private Output<List<CseOutlierRuleEntitySelector>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * 
     */
    public Output<List<CseOutlierRuleEntitySelector>> entitySelectors() {
        return this.entitySelectors;
    }
    /**
     * The minimum threshold to trigger signals
     * 
     */
    @Export(name="floorValue", refs={Integer.class}, tree="[0]")
    private Output<Integer> floorValue;

    /**
     * @return The minimum threshold to trigger signals
     * 
     */
    public Output<Integer> floorValue() {
        return this.floorValue;
    }
    /**
     * A list of fields to group records by
     * 
     */
    @Export(name="groupByFields", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Output<Optional<List<String>>> groupByFields() {
        return Codegen.optional(this.groupByFields);
    }
    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Export(name="isPrototype", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Output<Optional<Boolean>> isPrototype() {
        return Codegen.optional(this.isPrototype);
    }
    /**
     * The expression for which records to match on
     * 
     */
    @Export(name="matchExpression", refs={String.class}, tree="[0]")
    private Output<String> matchExpression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Output<String> matchExpression() {
        return this.matchExpression;
    }
    /**
     * The name of the Rule
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the generated Signals
     * 
     */
    @Export(name="nameExpression", refs={String.class}, tree="[0]")
    private Output<String> nameExpression;

    /**
     * @return The name of the generated Signals
     * 
     */
    public Output<String> nameExpression() {
        return this.nameExpression;
    }
    /**
     * The retention window size in milliseconds
     * 
     */
    @Export(name="retentionWindowSize", refs={String.class}, tree="[0]")
    private Output<String> retentionWindowSize;

    /**
     * @return The retention window size in milliseconds
     * 
     */
    public Output<String> retentionWindowSize() {
        return this.retentionWindowSize;
    }
    /**
     * The severity of the generated Signals
     * 
     */
    @Export(name="severity", refs={Integer.class}, tree="[0]")
    private Output<Integer> severity;

    /**
     * @return The severity of the generated Signals
     * 
     */
    public Output<Integer> severity() {
        return this.severity;
    }
    /**
     * The summary of the generated Signals
     * 
     */
    @Export(name="summaryExpression", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Output<Optional<String>> summaryExpression() {
        return Codegen.optional(this.summaryExpression);
    }
    /**
     * The tags of the generated Signals
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
     * 
     * The following attributes are exported:
     * 
     */
    @Export(name="windowSize", refs={String.class}, tree="[0]")
    private Output<String> windowSize;

    /**
     * @return The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
     * 
     * The following attributes are exported:
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CseOutlierRule(String name) {
        this(name, CseOutlierRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CseOutlierRule(String name, CseOutlierRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CseOutlierRule(String name, CseOutlierRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseOutlierRule:CseOutlierRule", name, args == null ? CseOutlierRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CseOutlierRule(String name, Output<String> id, @Nullable CseOutlierRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseOutlierRule:CseOutlierRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CseOutlierRule get(String name, Output<String> id, @Nullable CseOutlierRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CseOutlierRule(name, id, state, options);
    }
}
