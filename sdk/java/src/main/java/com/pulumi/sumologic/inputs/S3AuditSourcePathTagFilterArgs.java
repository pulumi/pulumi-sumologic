// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3AuditSourcePathTagFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3AuditSourcePathTagFilterArgs Empty = new S3AuditSourcePathTagFilterArgs();

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private S3AuditSourcePathTagFilterArgs() {}

    private S3AuditSourcePathTagFilterArgs(S3AuditSourcePathTagFilterArgs $) {
        this.namespace = $.namespace;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3AuditSourcePathTagFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3AuditSourcePathTagFilterArgs $;

        public Builder() {
            $ = new S3AuditSourcePathTagFilterArgs();
        }

        public Builder(S3AuditSourcePathTagFilterArgs defaults) {
            $ = new S3AuditSourcePathTagFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public S3AuditSourcePathTagFilterArgs build() {
            return $;
        }
    }

}
