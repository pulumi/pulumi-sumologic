// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCollectorResult {
    private String category;
    private String description;
    private Map<String,String> fields;
    private Integer id;
    private String name;
    private String timezone;

    private GetCollectorResult() {}
    public String category() {
        return this.category;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> fields() {
        return this.fields;
    }
    public Integer id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCollectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String category;
        private String description;
        private Map<String,String> fields;
        private Integer id;
        private String name;
        private String timezone;
        public Builder() {}
        public Builder(GetCollectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.category = defaults.category;
    	      this.description = defaults.description;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fields(Map<String,String> fields) {
            if (fields == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "fields");
            }
            this.fields = fields;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetCollectorResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public GetCollectorResult build() {
            final var _resultValue = new GetCollectorResult();
            _resultValue.category = category;
            _resultValue.description = description;
            _resultValue.fields = fields;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
