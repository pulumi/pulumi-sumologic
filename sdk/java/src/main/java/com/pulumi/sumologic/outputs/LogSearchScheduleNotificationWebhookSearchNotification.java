// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogSearchScheduleNotificationWebhookSearchNotification {
    /**
     * @return If set to true, one webhook per result will be sent when the trigger conditions are met.
     * 
     */
    private @Nullable Boolean itemizeAlerts;
    /**
     * @return The maximum number of results for which we send separate alerts.
     * 
     */
    private @Nullable Integer maxItemizedAlerts;
    /**
     * @return A JSON object in the format required by the target WebHook URL.
     * 
     */
    private @Nullable String payload;
    /**
     * @return Identifier of the webhook connection.
     * 
     */
    private String webhookId;

    private LogSearchScheduleNotificationWebhookSearchNotification() {}
    /**
     * @return If set to true, one webhook per result will be sent when the trigger conditions are met.
     * 
     */
    public Optional<Boolean> itemizeAlerts() {
        return Optional.ofNullable(this.itemizeAlerts);
    }
    /**
     * @return The maximum number of results for which we send separate alerts.
     * 
     */
    public Optional<Integer> maxItemizedAlerts() {
        return Optional.ofNullable(this.maxItemizedAlerts);
    }
    /**
     * @return A JSON object in the format required by the target WebHook URL.
     * 
     */
    public Optional<String> payload() {
        return Optional.ofNullable(this.payload);
    }
    /**
     * @return Identifier of the webhook connection.
     * 
     */
    public String webhookId() {
        return this.webhookId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSearchScheduleNotificationWebhookSearchNotification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean itemizeAlerts;
        private @Nullable Integer maxItemizedAlerts;
        private @Nullable String payload;
        private String webhookId;
        public Builder() {}
        public Builder(LogSearchScheduleNotificationWebhookSearchNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.itemizeAlerts = defaults.itemizeAlerts;
    	      this.maxItemizedAlerts = defaults.maxItemizedAlerts;
    	      this.payload = defaults.payload;
    	      this.webhookId = defaults.webhookId;
        }

        @CustomType.Setter
        public Builder itemizeAlerts(@Nullable Boolean itemizeAlerts) {

            this.itemizeAlerts = itemizeAlerts;
            return this;
        }
        @CustomType.Setter
        public Builder maxItemizedAlerts(@Nullable Integer maxItemizedAlerts) {

            this.maxItemizedAlerts = maxItemizedAlerts;
            return this;
        }
        @CustomType.Setter
        public Builder payload(@Nullable String payload) {

            this.payload = payload;
            return this;
        }
        @CustomType.Setter
        public Builder webhookId(String webhookId) {
            if (webhookId == null) {
              throw new MissingRequiredPropertyException("LogSearchScheduleNotificationWebhookSearchNotification", "webhookId");
            }
            this.webhookId = webhookId;
            return this;
        }
        public LogSearchScheduleNotificationWebhookSearchNotification build() {
            final var _resultValue = new LogSearchScheduleNotificationWebhookSearchNotification();
            _resultValue.itemizeAlerts = itemizeAlerts;
            _resultValue.maxItemizedAlerts = maxItemizedAlerts;
            _resultValue.payload = payload;
            _resultValue.webhookId = webhookId;
            return _resultValue;
        }
    }
}
