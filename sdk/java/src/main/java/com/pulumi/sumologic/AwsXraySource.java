// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.AwsXraySourceArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.AwsXraySourceState;
import com.pulumi.sumologic.outputs.AwsXraySourceAuthentication;
import com.pulumi.sumologic.outputs.AwsXraySourceDefaultDateFormat;
import com.pulumi.sumologic.outputs.AwsXraySourceFilter;
import com.pulumi.sumologic.outputs.AwsXraySourcePath;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Sumologic AWS XRay source to collect metrics derived from XRay traces.
 * 
 * __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.Collector;
 * import com.pulumi.sumologic.CollectorArgs;
 * import com.pulumi.sumologic.AwsXraySource;
 * import com.pulumi.sumologic.AwsXraySourceArgs;
 * import com.pulumi.sumologic.inputs.AwsXraySourceAuthenticationArgs;
 * import com.pulumi.sumologic.inputs.AwsXraySourcePathArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var collector = new Collector(&#34;collector&#34;, CollectorArgs.builder()        
 *             .description(&#34;Just testing this&#34;)
 *             .build());
 * 
 *         var awsXraySource = new AwsXraySource(&#34;awsXraySource&#34;, AwsXraySourceArgs.builder()        
 *             .authentication(AwsXraySourceAuthenticationArgs.builder()
 *                 .roleArn(&#34;arn:aws:iam::01234567890:role/sumo-role&#34;)
 *                 .type(&#34;AWSRoleBasedAuthentication&#34;)
 *                 .build())
 *             .category(&#34;aws/xray&#34;)
 *             .collectorId(collector.id())
 *             .contentType(&#34;AwsXRay&#34;)
 *             .description(&#34;My description&#34;)
 *             .path(AwsXraySourcePathArgs.builder()
 *                 .limitToRegions(&#34;us-west-2&#34;)
 *                 .type(&#34;AwsXRayPath&#34;)
 *                 .build())
 *             .paused(false)
 *             .scanInterval(300000)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * AWS XRay sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/awsXraySource:AwsXraySource test 123/456
 * ```
 * 
 *  AWS XRay sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/awsXraySource:AwsXraySource test my-test-collector/my-test-source
 * ```
 * 
 */
@ResourceType(type="sumologic:index/awsXraySource:AwsXraySource")
public class AwsXraySource extends com.pulumi.resources.CustomResource {
    /**
     * Authentication details for making `xray:Get*` calls.
     * 
     */
    @Export(name="authentication", type=AwsXraySourceAuthentication.class, parameters={})
    private Output<AwsXraySourceAuthentication> authentication;

    /**
     * @return Authentication details for making `xray:Get*` calls.
     * 
     */
    public Output<AwsXraySourceAuthentication> authentication() {
        return this.authentication;
    }
    @Export(name="automaticDateParsing", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> automaticDateParsing;

    public Output<Optional<Boolean>> automaticDateParsing() {
        return Codegen.optional(this.automaticDateParsing);
    }
    @Export(name="category", type=String.class, parameters={})
    private Output</* @Nullable */ String> category;

    public Output<Optional<String>> category() {
        return Codegen.optional(this.category);
    }
    @Export(name="collectorId", type=Integer.class, parameters={})
    private Output<Integer> collectorId;

    public Output<Integer> collectorId() {
        return this.collectorId;
    }
    /**
     * The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
     * 
     */
    @Export(name="contentType", type=String.class, parameters={})
    private Output<String> contentType;

    /**
     * @return The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }
    @Export(name="cutoffRelativeTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> cutoffRelativeTime;

    public Output<Optional<String>> cutoffRelativeTime() {
        return Codegen.optional(this.cutoffRelativeTime);
    }
    @Export(name="cutoffTimestamp", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cutoffTimestamp;

    public Output<Optional<Integer>> cutoffTimestamp() {
        return Codegen.optional(this.cutoffTimestamp);
    }
    @Export(name="defaultDateFormats", type=List.class, parameters={AwsXraySourceDefaultDateFormat.class})
    private Output</* @Nullable */ List<AwsXraySourceDefaultDateFormat>> defaultDateFormats;

    public Output<Optional<List<AwsXraySourceDefaultDateFormat>>> defaultDateFormats() {
        return Codegen.optional(this.defaultDateFormats);
    }
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="fields", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> fields;

    public Output<Optional<Map<String,String>>> fields() {
        return Codegen.optional(this.fields);
    }
    @Export(name="filters", type=List.class, parameters={AwsXraySourceFilter.class})
    private Output</* @Nullable */ List<AwsXraySourceFilter>> filters;

    public Output<Optional<List<AwsXraySourceFilter>>> filters() {
        return Codegen.optional(this.filters);
    }
    @Export(name="forceTimezone", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceTimezone;

    public Output<Optional<Boolean>> forceTimezone() {
        return Codegen.optional(this.forceTimezone);
    }
    @Export(name="hostName", type=String.class, parameters={})
    private Output</* @Nullable */ String> hostName;

    public Output<Optional<String>> hostName() {
        return Codegen.optional(this.hostName);
    }
    @Export(name="manualPrefixRegexp", type=String.class, parameters={})
    private Output</* @Nullable */ String> manualPrefixRegexp;

    public Output<Optional<String>> manualPrefixRegexp() {
        return Codegen.optional(this.manualPrefixRegexp);
    }
    @Export(name="multilineProcessingEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> multilineProcessingEnabled;

    public Output<Optional<Boolean>> multilineProcessingEnabled() {
        return Codegen.optional(this.multilineProcessingEnabled);
    }
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    /**
     * The location to scan for new data.
     * 
     */
    @Export(name="path", type=AwsXraySourcePath.class, parameters={})
    private Output<AwsXraySourcePath> path;

    /**
     * @return The location to scan for new data.
     * 
     */
    public Output<AwsXraySourcePath> path() {
        return this.path;
    }
    /**
     * When set to true, the scanner is paused. To disable, set to false.
     * 
     */
    @Export(name="paused", type=Boolean.class, parameters={})
    private Output<Boolean> paused;

    /**
     * @return When set to true, the scanner is paused. To disable, set to false.
     * 
     */
    public Output<Boolean> paused() {
        return this.paused;
    }
    /**
     * Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
     * 
     */
    @Export(name="scanInterval", type=Integer.class, parameters={})
    private Output<Integer> scanInterval;

    /**
     * @return Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
     * 
     */
    public Output<Integer> scanInterval() {
        return this.scanInterval;
    }
    @Export(name="timezone", type=String.class, parameters={})
    private Output</* @Nullable */ String> timezone;

    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    public Output<String> url() {
        return this.url;
    }
    @Export(name="useAutolineMatching", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useAutolineMatching;

    public Output<Optional<Boolean>> useAutolineMatching() {
        return Codegen.optional(this.useAutolineMatching);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AwsXraySource(String name) {
        this(name, AwsXraySourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AwsXraySource(String name, AwsXraySourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AwsXraySource(String name, AwsXraySourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/awsXraySource:AwsXraySource", name, args == null ? AwsXraySourceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AwsXraySource(String name, Output<String> id, @Nullable AwsXraySourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/awsXraySource:AwsXraySource", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AwsXraySource get(String name, Output<String> id, @Nullable AwsXraySourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AwsXraySource(name, id, state, options);
    }
}
