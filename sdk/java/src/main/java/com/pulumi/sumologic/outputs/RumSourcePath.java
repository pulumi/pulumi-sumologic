// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RumSourcePath {
    /**
     * @return (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
     * 
     */
    private @Nullable String applicationName;
    /**
     * @return Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
     * 
     */
    private @Nullable Map<String,String> customTags;
    /**
     * @return Your production, staging, or development environment name.
     * 
     */
    private @Nullable String deploymentEnvironment;
    /**
     * @return Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*{@literal /}, /^https:\/\/api.mydomain.com\/log\/.*{@literal /}&#34;
     * 
     */
    private @Nullable List<String> ignoreUrls;
    /**
     * @return (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*{@literal /}&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*{@literal /}&#34;.
     * 
     */
    private @Nullable List<String> propagateTraceHeaderCorsUrls;
    /**
     * @return Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10%!w(MISSING)ould be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
     * 
     */
    private @Nullable Double samplingRate;
    /**
     * @return Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
     * 
     */
    private @Nullable String selectedCountry;
    /**
     * @return Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
     * 
     */
    private String serviceName;

    private RumSourcePath() {}
    /**
     * @return (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
     * 
     */
    public Optional<String> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }
    /**
     * @return Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
     * 
     */
    public Map<String,String> customTags() {
        return this.customTags == null ? Map.of() : this.customTags;
    }
    /**
     * @return Your production, staging, or development environment name.
     * 
     */
    public Optional<String> deploymentEnvironment() {
        return Optional.ofNullable(this.deploymentEnvironment);
    }
    /**
     * @return Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*{@literal /}, /^https:\/\/api.mydomain.com\/log\/.*{@literal /}&#34;
     * 
     */
    public List<String> ignoreUrls() {
        return this.ignoreUrls == null ? List.of() : this.ignoreUrls;
    }
    /**
     * @return (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*{@literal /}&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*{@literal /}&#34;.
     * 
     */
    public List<String> propagateTraceHeaderCorsUrls() {
        return this.propagateTraceHeaderCorsUrls == null ? List.of() : this.propagateTraceHeaderCorsUrls;
    }
    /**
     * @return Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10%!w(MISSING)ould be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
     * 
     */
    public Optional<Double> samplingRate() {
        return Optional.ofNullable(this.samplingRate);
    }
    /**
     * @return Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
     * 
     */
    public Optional<String> selectedCountry() {
        return Optional.ofNullable(this.selectedCountry);
    }
    /**
     * @return Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RumSourcePath defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String applicationName;
        private @Nullable Map<String,String> customTags;
        private @Nullable String deploymentEnvironment;
        private @Nullable List<String> ignoreUrls;
        private @Nullable List<String> propagateTraceHeaderCorsUrls;
        private @Nullable Double samplingRate;
        private @Nullable String selectedCountry;
        private String serviceName;
        public Builder() {}
        public Builder(RumSourcePath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationName = defaults.applicationName;
    	      this.customTags = defaults.customTags;
    	      this.deploymentEnvironment = defaults.deploymentEnvironment;
    	      this.ignoreUrls = defaults.ignoreUrls;
    	      this.propagateTraceHeaderCorsUrls = defaults.propagateTraceHeaderCorsUrls;
    	      this.samplingRate = defaults.samplingRate;
    	      this.selectedCountry = defaults.selectedCountry;
    	      this.serviceName = defaults.serviceName;
        }

        @CustomType.Setter
        public Builder applicationName(@Nullable String applicationName) {

            this.applicationName = applicationName;
            return this;
        }
        @CustomType.Setter
        public Builder customTags(@Nullable Map<String,String> customTags) {

            this.customTags = customTags;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentEnvironment(@Nullable String deploymentEnvironment) {

            this.deploymentEnvironment = deploymentEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreUrls(@Nullable List<String> ignoreUrls) {

            this.ignoreUrls = ignoreUrls;
            return this;
        }
        public Builder ignoreUrls(String... ignoreUrls) {
            return ignoreUrls(List.of(ignoreUrls));
        }
        @CustomType.Setter
        public Builder propagateTraceHeaderCorsUrls(@Nullable List<String> propagateTraceHeaderCorsUrls) {

            this.propagateTraceHeaderCorsUrls = propagateTraceHeaderCorsUrls;
            return this;
        }
        public Builder propagateTraceHeaderCorsUrls(String... propagateTraceHeaderCorsUrls) {
            return propagateTraceHeaderCorsUrls(List.of(propagateTraceHeaderCorsUrls));
        }
        @CustomType.Setter
        public Builder samplingRate(@Nullable Double samplingRate) {

            this.samplingRate = samplingRate;
            return this;
        }
        @CustomType.Setter
        public Builder selectedCountry(@Nullable String selectedCountry) {

            this.selectedCountry = selectedCountry;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("RumSourcePath", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        public RumSourcePath build() {
            final var _resultValue = new RumSourcePath();
            _resultValue.applicationName = applicationName;
            _resultValue.customTags = customTags;
            _resultValue.deploymentEnvironment = deploymentEnvironment;
            _resultValue.ignoreUrls = ignoreUrls;
            _resultValue.propagateTraceHeaderCorsUrls = propagateTraceHeaderCorsUrls;
            _resultValue.samplingRate = samplingRate;
            _resultValue.selectedCountry = selectedCountry;
            _resultValue.serviceName = serviceName;
            return _resultValue;
        }
    }
}
