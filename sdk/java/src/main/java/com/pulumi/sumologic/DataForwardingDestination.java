// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.DataForwardingDestinationArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.DataForwardingDestinationState;
import com.pulumi.sumologic.outputs.DataForwardingDestinationAuthentication;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provider to manage [Sumologic Data Forwarding Destination](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#configure-an-s3-data-forwarding-destination)
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="sumologic:index/dataForwardingDestination:DataForwardingDestination")
public class DataForwardingDestination extends com.pulumi.resources.CustomResource {
    @Export(name="authentication", refs={DataForwardingDestinationAuthentication.class}, tree="[0]")
    private Output<DataForwardingDestinationAuthentication> authentication;

    public Output<DataForwardingDestinationAuthentication> authentication() {
        return this.authentication;
    }
    /**
     * The name of the Amazon S3 bucket.
     * 
     */
    @Export(name="bucketName", refs={String.class}, tree="[0]")
    private Output<String> bucketName;

    /**
     * @return The name of the Amazon S3 bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }
    /**
     * Description of the S3 data forwarding destination.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the S3 data forwarding destination.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Name of the S3 data forwarding destination.
     * 
     */
    @Export(name="destinationName", refs={String.class}, tree="[0]")
    private Output<String> destinationName;

    /**
     * @return Name of the S3 data forwarding destination.
     * 
     */
    public Output<String> destinationName() {
        return this.destinationName;
    }
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enabled;

    public Output<Optional<Boolean>> enabled() {
        return Codegen.optional(this.enabled);
    }
    @Export(name="s3Region", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> s3Region;

    public Output<Optional<String>> s3Region() {
        return Codegen.optional(this.s3Region);
    }
    @Export(name="s3ServerSideEncryption", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> s3ServerSideEncryption;

    public Output<Optional<Boolean>> s3ServerSideEncryption() {
        return Codegen.optional(this.s3ServerSideEncryption);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DataForwardingDestination(java.lang.String name) {
        this(name, DataForwardingDestinationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DataForwardingDestination(java.lang.String name, DataForwardingDestinationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DataForwardingDestination(java.lang.String name, DataForwardingDestinationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DataForwardingDestination(java.lang.String name, Output<java.lang.String> id, @Nullable DataForwardingDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, state, makeResourceOptions(options, id), false);
    }

    private static DataForwardingDestinationArgs makeArgs(DataForwardingDestinationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DataForwardingDestinationArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DataForwardingDestination get(java.lang.String name, Output<java.lang.String> id, @Nullable DataForwardingDestinationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DataForwardingDestination(name, id, state, options);
    }
}
