// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KineisLogSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final KineisLogSourcePathArgs Empty = new KineisLogSourcePathArgs();

    /**
     * The name of the bucket. This is needed if using type `KinesisLogPath`.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The name of the bucket. This is needed if using type `KinesisLogPath`.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
     * 
     */
    @Import(name="pathExpression")
    private @Nullable Output<String> pathExpression;

    /**
     * @return The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
     * 
     */
    public Optional<Output<String>> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }

    /**
     * The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
     * 
     */
    @Import(name="scanInterval")
    private @Nullable Output<Integer> scanInterval;

    /**
     * @return The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
     * 
     */
    public Optional<Output<Integer>> scanInterval() {
        return Optional.ofNullable(this.scanInterval);
    }

    /**
     * Must be either `KinesisLogPath` or `NoPathExpression`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Must be either `KinesisLogPath` or `NoPathExpression`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private KineisLogSourcePathArgs() {}

    private KineisLogSourcePathArgs(KineisLogSourcePathArgs $) {
        this.bucketName = $.bucketName;
        this.pathExpression = $.pathExpression;
        this.scanInterval = $.scanInterval;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KineisLogSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KineisLogSourcePathArgs $;

        public Builder() {
            $ = new KineisLogSourcePathArgs();
        }

        public Builder(KineisLogSourcePathArgs defaults) {
            $ = new KineisLogSourcePathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName The name of the bucket. This is needed if using type `KinesisLogPath`.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of the bucket. This is needed if using type `KinesisLogPath`.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param pathExpression The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
         * 
         * @return builder
         * 
         */
        public Builder pathExpression(@Nullable Output<String> pathExpression) {
            $.pathExpression = pathExpression;
            return this;
        }

        /**
         * @param pathExpression The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
         * 
         * @return builder
         * 
         */
        public Builder pathExpression(String pathExpression) {
            return pathExpression(Output.of(pathExpression));
        }

        /**
         * @param scanInterval The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder scanInterval(@Nullable Output<Integer> scanInterval) {
            $.scanInterval = scanInterval;
            return this;
        }

        /**
         * @param scanInterval The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder scanInterval(Integer scanInterval) {
            return scanInterval(Output.of(scanInterval));
        }

        /**
         * @param type Must be either `KinesisLogPath` or `NoPathExpression`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Must be either `KinesisLogPath` or `NoPathExpression`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public KineisLogSourcePathArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
