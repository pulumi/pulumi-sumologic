// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * Email of the user.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email of the user.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * First name of the user.
     * 
     */
    @Import(name="firstName", required=true)
    private Output<String> firstName;

    /**
     * @return First name of the user.
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }

    /**
     * This has the value true if the user is active and false if they have been deactivated.
     * 
     */
    @Import(name="isActive", required=true)
    private Output<Boolean> isActive;

    /**
     * @return This has the value true if the user is active and false if they have been deactivated.
     * 
     */
    public Output<Boolean> isActive() {
        return this.isActive;
    }

    /**
     * Last name of the user.
     * 
     */
    @Import(name="lastName", required=true)
    private Output<String> lastName;

    /**
     * @return Last name of the user.
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }

    /**
     * List of roleIds associated with the user.
     * 
     */
    @Import(name="roleIds", required=true)
    private Output<List<String>> roleIds;

    /**
     * @return List of roleIds associated with the user.
     * 
     */
    public Output<List<String>> roleIds() {
        return this.roleIds;
    }

    /**
     * UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
     * 
     */
    @Import(name="transferTo", required=true)
    private Output<String> transferTo;

    /**
     * @return UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
     * 
     */
    public Output<String> transferTo() {
        return this.transferTo;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.email = $.email;
        this.firstName = $.firstName;
        this.isActive = $.isActive;
        this.lastName = $.lastName;
        this.roleIds = $.roleIds;
        this.transferTo = $.transferTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param isActive This has the value true if the user is active and false if they have been deactivated.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive This has the value true if the user is active and false if they have been deactivated.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(Output<List<String>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(List<String> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(String... roleIds) {
            return roleIds(List.of(roleIds));
        }

        /**
         * @param transferTo UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
         * 
         * @return builder
         * 
         */
        public Builder transferTo(Output<String> transferTo) {
            $.transferTo = transferTo;
            return this;
        }

        /**
         * @param transferTo UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
         * 
         * @return builder
         * 
         */
        public Builder transferTo(String transferTo) {
            return transferTo(Output.of(transferTo));
        }

        public UserArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.firstName = Objects.requireNonNull($.firstName, "expected parameter 'firstName' to be non-null");
            $.isActive = Objects.requireNonNull($.isActive, "expected parameter 'isActive' to be non-null");
            $.lastName = Objects.requireNonNull($.lastName, "expected parameter 'lastName' to be non-null");
            $.roleIds = Objects.requireNonNull($.roleIds, "expected parameter 'roleIds' to be non-null");
            $.transferTo = Objects.requireNonNull($.transferTo, "expected parameter 'transferTo' to be non-null");
            return $;
        }
    }

}
