// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.CseLogMappingFieldLookup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CseLogMappingField {
    private @Nullable List<String> alternateValues;
    private @Nullable Boolean caseInsensitive;
    private @Nullable String defaultValue;
    private @Nullable List<String> fieldJoins;
    private @Nullable String format;
    private @Nullable List<String> formatParameters;
    private @Nullable String joinDelimiter;
    private @Nullable List<CseLogMappingFieldLookup> lookups;
    /**
     * @return The name of the log mapping.
     * 
     */
    private String name;
    /**
     * @return List of skipped values.
     * 
     */
    private @Nullable List<String> skippedValues;
    private @Nullable String splitDelimiter;
    private @Nullable Integer splitIndex;
    private @Nullable String timeZone;
    private @Nullable String value;
    private @Nullable String valueType;

    private CseLogMappingField() {}
    public List<String> alternateValues() {
        return this.alternateValues == null ? List.of() : this.alternateValues;
    }
    public Optional<Boolean> caseInsensitive() {
        return Optional.ofNullable(this.caseInsensitive);
    }
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    public List<String> fieldJoins() {
        return this.fieldJoins == null ? List.of() : this.fieldJoins;
    }
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    public List<String> formatParameters() {
        return this.formatParameters == null ? List.of() : this.formatParameters;
    }
    public Optional<String> joinDelimiter() {
        return Optional.ofNullable(this.joinDelimiter);
    }
    public List<CseLogMappingFieldLookup> lookups() {
        return this.lookups == null ? List.of() : this.lookups;
    }
    /**
     * @return The name of the log mapping.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of skipped values.
     * 
     */
    public List<String> skippedValues() {
        return this.skippedValues == null ? List.of() : this.skippedValues;
    }
    public Optional<String> splitDelimiter() {
        return Optional.ofNullable(this.splitDelimiter);
    }
    public Optional<Integer> splitIndex() {
        return Optional.ofNullable(this.splitIndex);
    }
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    public Optional<String> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CseLogMappingField defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> alternateValues;
        private @Nullable Boolean caseInsensitive;
        private @Nullable String defaultValue;
        private @Nullable List<String> fieldJoins;
        private @Nullable String format;
        private @Nullable List<String> formatParameters;
        private @Nullable String joinDelimiter;
        private @Nullable List<CseLogMappingFieldLookup> lookups;
        private String name;
        private @Nullable List<String> skippedValues;
        private @Nullable String splitDelimiter;
        private @Nullable Integer splitIndex;
        private @Nullable String timeZone;
        private @Nullable String value;
        private @Nullable String valueType;
        public Builder() {}
        public Builder(CseLogMappingField defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alternateValues = defaults.alternateValues;
    	      this.caseInsensitive = defaults.caseInsensitive;
    	      this.defaultValue = defaults.defaultValue;
    	      this.fieldJoins = defaults.fieldJoins;
    	      this.format = defaults.format;
    	      this.formatParameters = defaults.formatParameters;
    	      this.joinDelimiter = defaults.joinDelimiter;
    	      this.lookups = defaults.lookups;
    	      this.name = defaults.name;
    	      this.skippedValues = defaults.skippedValues;
    	      this.splitDelimiter = defaults.splitDelimiter;
    	      this.splitIndex = defaults.splitIndex;
    	      this.timeZone = defaults.timeZone;
    	      this.value = defaults.value;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder alternateValues(@Nullable List<String> alternateValues) {

            this.alternateValues = alternateValues;
            return this;
        }
        public Builder alternateValues(String... alternateValues) {
            return alternateValues(List.of(alternateValues));
        }
        @CustomType.Setter
        public Builder caseInsensitive(@Nullable Boolean caseInsensitive) {

            this.caseInsensitive = caseInsensitive;
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {

            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder fieldJoins(@Nullable List<String> fieldJoins) {

            this.fieldJoins = fieldJoins;
            return this;
        }
        public Builder fieldJoins(String... fieldJoins) {
            return fieldJoins(List.of(fieldJoins));
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder formatParameters(@Nullable List<String> formatParameters) {

            this.formatParameters = formatParameters;
            return this;
        }
        public Builder formatParameters(String... formatParameters) {
            return formatParameters(List.of(formatParameters));
        }
        @CustomType.Setter
        public Builder joinDelimiter(@Nullable String joinDelimiter) {

            this.joinDelimiter = joinDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder lookups(@Nullable List<CseLogMappingFieldLookup> lookups) {

            this.lookups = lookups;
            return this;
        }
        public Builder lookups(CseLogMappingFieldLookup... lookups) {
            return lookups(List.of(lookups));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("CseLogMappingField", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder skippedValues(@Nullable List<String> skippedValues) {

            this.skippedValues = skippedValues;
            return this;
        }
        public Builder skippedValues(String... skippedValues) {
            return skippedValues(List.of(skippedValues));
        }
        @CustomType.Setter
        public Builder splitDelimiter(@Nullable String splitDelimiter) {

            this.splitDelimiter = splitDelimiter;
            return this;
        }
        @CustomType.Setter
        public Builder splitIndex(@Nullable Integer splitIndex) {

            this.splitIndex = splitIndex;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {

            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder valueType(@Nullable String valueType) {

            this.valueType = valueType;
            return this;
        }
        public CseLogMappingField build() {
            final var _resultValue = new CseLogMappingField();
            _resultValue.alternateValues = alternateValues;
            _resultValue.caseInsensitive = caseInsensitive;
            _resultValue.defaultValue = defaultValue;
            _resultValue.fieldJoins = fieldJoins;
            _resultValue.format = format;
            _resultValue.formatParameters = formatParameters;
            _resultValue.joinDelimiter = joinDelimiter;
            _resultValue.lookups = lookups;
            _resultValue.name = name;
            _resultValue.skippedValues = skippedValues;
            _resultValue.splitDelimiter = splitDelimiter;
            _resultValue.splitIndex = splitIndex;
            _resultValue.timeZone = timeZone;
            _resultValue.value = value;
            _resultValue.valueType = valueType;
            return _resultValue;
        }
    }
}
