// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.AzureMetricsSourcePathAzureTagFilterArgs;
import com.pulumi.sumologic.inputs.AzureMetricsSourcePathCustomServiceArgs;
import com.pulumi.sumologic.inputs.AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs;
import com.pulumi.sumologic.inputs.AzureMetricsSourcePathTagFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureMetricsSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureMetricsSourcePathArgs Empty = new AzureMetricsSourcePathArgs();

    /**
     * Tag filters allow you to filter the Azure metrics by the tags you have assigned to your Azure resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for namespaces you configured for the source above.
     * 
     */
    @Import(name="azureTagFilters")
    private @Nullable Output<List<AzureMetricsSourcePathAzureTagFilterArgs>> azureTagFilters;

    /**
     * @return Tag filters allow you to filter the Azure metrics by the tags you have assigned to your Azure resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for namespaces you configured for the source above.
     * 
     */
    public Optional<Output<List<AzureMetricsSourcePathAzureTagFilterArgs>>> azureTagFilters() {
        return Optional.ofNullable(this.azureTagFilters);
    }

    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    @Import(name="customServices")
    private @Nullable Output<List<AzureMetricsSourcePathCustomServiceArgs>> customServices;

    public Optional<Output<List<AzureMetricsSourcePathCustomServiceArgs>>> customServices() {
        return Optional.ofNullable(this.customServices);
    }

    /**
     * The  environment to collect Azure metrics.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The  environment to collect Azure metrics.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="eventHubName")
    private @Nullable Output<String> eventHubName;

    public Optional<Output<String>> eventHubName() {
        return Optional.ofNullable(this.eventHubName);
    }

    /**
     * The list of namespaces to collect metrics. By default all namespaces are selected.
     * 
     */
    @Import(name="limitToNamespaces")
    private @Nullable Output<List<String>> limitToNamespaces;

    /**
     * @return The list of namespaces to collect metrics. By default all namespaces are selected.
     * 
     */
    public Optional<Output<List<String>>> limitToNamespaces() {
        return Optional.ofNullable(this.limitToNamespaces);
    }

    @Import(name="limitToRegions")
    private @Nullable Output<List<String>> limitToRegions;

    public Optional<Output<List<String>>> limitToRegions() {
        return Optional.ofNullable(this.limitToRegions);
    }

    @Import(name="limitToServices")
    private @Nullable Output<List<String>> limitToServices;

    public Optional<Output<List<String>>> limitToServices() {
        return Optional.ofNullable(this.limitToServices);
    }

    /**
     * Namespace for which you want to define the tag filters.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace for which you want to define the tag filters.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="pathExpression")
    private @Nullable Output<String> pathExpression;

    public Optional<Output<String>> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="snsTopicOrSubscriptionArns")
    private @Nullable Output<List<AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns;

    public Optional<Output<List<AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs>>> snsTopicOrSubscriptionArns() {
        return Optional.ofNullable(this.snsTopicOrSubscriptionArns);
    }

    @Import(name="tagFilters")
    private @Nullable Output<List<AzureMetricsSourcePathTagFilterArgs>> tagFilters;

    public Optional<Output<List<AzureMetricsSourcePathTagFilterArgs>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="useVersionedApi")
    private @Nullable Output<Boolean> useVersionedApi;

    public Optional<Output<Boolean>> useVersionedApi() {
        return Optional.ofNullable(this.useVersionedApi);
    }

    private AzureMetricsSourcePathArgs() {}

    private AzureMetricsSourcePathArgs(AzureMetricsSourcePathArgs $) {
        this.azureTagFilters = $.azureTagFilters;
        this.bucketName = $.bucketName;
        this.consumerGroup = $.consumerGroup;
        this.customServices = $.customServices;
        this.environment = $.environment;
        this.eventHubName = $.eventHubName;
        this.limitToNamespaces = $.limitToNamespaces;
        this.limitToRegions = $.limitToRegions;
        this.limitToServices = $.limitToServices;
        this.namespace = $.namespace;
        this.pathExpression = $.pathExpression;
        this.region = $.region;
        this.snsTopicOrSubscriptionArns = $.snsTopicOrSubscriptionArns;
        this.tagFilters = $.tagFilters;
        this.type = $.type;
        this.useVersionedApi = $.useVersionedApi;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureMetricsSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureMetricsSourcePathArgs $;

        public Builder() {
            $ = new AzureMetricsSourcePathArgs();
        }

        public Builder(AzureMetricsSourcePathArgs defaults) {
            $ = new AzureMetricsSourcePathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureTagFilters Tag filters allow you to filter the Azure metrics by the tags you have assigned to your Azure resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for namespaces you configured for the source above.
         * 
         * @return builder
         * 
         */
        public Builder azureTagFilters(@Nullable Output<List<AzureMetricsSourcePathAzureTagFilterArgs>> azureTagFilters) {
            $.azureTagFilters = azureTagFilters;
            return this;
        }

        /**
         * @param azureTagFilters Tag filters allow you to filter the Azure metrics by the tags you have assigned to your Azure resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for namespaces you configured for the source above.
         * 
         * @return builder
         * 
         */
        public Builder azureTagFilters(List<AzureMetricsSourcePathAzureTagFilterArgs> azureTagFilters) {
            return azureTagFilters(Output.of(azureTagFilters));
        }

        /**
         * @param azureTagFilters Tag filters allow you to filter the Azure metrics by the tags you have assigned to your Azure resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for namespaces you configured for the source above.
         * 
         * @return builder
         * 
         */
        public Builder azureTagFilters(AzureMetricsSourcePathAzureTagFilterArgs... azureTagFilters) {
            return azureTagFilters(List.of(azureTagFilters));
        }

        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        public Builder customServices(@Nullable Output<List<AzureMetricsSourcePathCustomServiceArgs>> customServices) {
            $.customServices = customServices;
            return this;
        }

        public Builder customServices(List<AzureMetricsSourcePathCustomServiceArgs> customServices) {
            return customServices(Output.of(customServices));
        }

        public Builder customServices(AzureMetricsSourcePathCustomServiceArgs... customServices) {
            return customServices(List.of(customServices));
        }

        /**
         * @param environment The  environment to collect Azure metrics.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The  environment to collect Azure metrics.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        public Builder eventHubName(@Nullable Output<String> eventHubName) {
            $.eventHubName = eventHubName;
            return this;
        }

        public Builder eventHubName(String eventHubName) {
            return eventHubName(Output.of(eventHubName));
        }

        /**
         * @param limitToNamespaces The list of namespaces to collect metrics. By default all namespaces are selected.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(@Nullable Output<List<String>> limitToNamespaces) {
            $.limitToNamespaces = limitToNamespaces;
            return this;
        }

        /**
         * @param limitToNamespaces The list of namespaces to collect metrics. By default all namespaces are selected.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(List<String> limitToNamespaces) {
            return limitToNamespaces(Output.of(limitToNamespaces));
        }

        /**
         * @param limitToNamespaces The list of namespaces to collect metrics. By default all namespaces are selected.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }

        public Builder limitToRegions(@Nullable Output<List<String>> limitToRegions) {
            $.limitToRegions = limitToRegions;
            return this;
        }

        public Builder limitToRegions(List<String> limitToRegions) {
            return limitToRegions(Output.of(limitToRegions));
        }

        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }

        public Builder limitToServices(@Nullable Output<List<String>> limitToServices) {
            $.limitToServices = limitToServices;
            return this;
        }

        public Builder limitToServices(List<String> limitToServices) {
            return limitToServices(Output.of(limitToServices));
        }

        public Builder limitToServices(String... limitToServices) {
            return limitToServices(List.of(limitToServices));
        }

        /**
         * @param namespace Namespace for which you want to define the tag filters.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace for which you want to define the tag filters.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder pathExpression(@Nullable Output<String> pathExpression) {
            $.pathExpression = pathExpression;
            return this;
        }

        public Builder pathExpression(String pathExpression) {
            return pathExpression(Output.of(pathExpression));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder snsTopicOrSubscriptionArns(@Nullable Output<List<AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns) {
            $.snsTopicOrSubscriptionArns = snsTopicOrSubscriptionArns;
            return this;
        }

        public Builder snsTopicOrSubscriptionArns(List<AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs> snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(Output.of(snsTopicOrSubscriptionArns));
        }

        public Builder snsTopicOrSubscriptionArns(AzureMetricsSourcePathSnsTopicOrSubscriptionArnArgs... snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(List.of(snsTopicOrSubscriptionArns));
        }

        public Builder tagFilters(@Nullable Output<List<AzureMetricsSourcePathTagFilterArgs>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        public Builder tagFilters(List<AzureMetricsSourcePathTagFilterArgs> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        public Builder tagFilters(AzureMetricsSourcePathTagFilterArgs... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder useVersionedApi(@Nullable Output<Boolean> useVersionedApi) {
            $.useVersionedApi = useVersionedApi;
            return this;
        }

        public Builder useVersionedApi(Boolean useVersionedApi) {
            return useVersionedApi(Output.of(useVersionedApi));
        }

        public AzureMetricsSourcePathArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("AzureMetricsSourcePathArgs", "type");
            }
            return $;
        }
    }

}
