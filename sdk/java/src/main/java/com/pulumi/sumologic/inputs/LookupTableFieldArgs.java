// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class LookupTableFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final LookupTableFieldArgs Empty = new LookupTableFieldArgs();

    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    public Output<String> fieldName() {
        return this.fieldName;
    }

    @Import(name="fieldType", required=true)
    private Output<String> fieldType;

    public Output<String> fieldType() {
        return this.fieldType;
    }

    private LookupTableFieldArgs() {}

    private LookupTableFieldArgs(LookupTableFieldArgs $) {
        this.fieldName = $.fieldName;
        this.fieldType = $.fieldType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LookupTableFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LookupTableFieldArgs $;

        public Builder() {
            $ = new LookupTableFieldArgs();
        }

        public Builder(LookupTableFieldArgs defaults) {
            $ = new LookupTableFieldArgs(Objects.requireNonNull(defaults));
        }

        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        public Builder fieldType(Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        public LookupTableFieldArgs build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            $.fieldType = Objects.requireNonNull($.fieldType, "expected parameter 'fieldType' to be non-null");
            return $;
        }
    }

}
