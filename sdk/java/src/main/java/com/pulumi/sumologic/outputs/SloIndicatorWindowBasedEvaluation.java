// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.sumologic.outputs.SloIndicatorWindowBasedEvaluationQuery;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SloIndicatorWindowBasedEvaluation {
    /**
     * @return Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
     * , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
     * 
     */
    private final @Nullable String aggregation;
    /**
     * @return Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
     * , `GreaterThanOrEqual`.
     * 
     */
    private final String op;
    /**
     * @return The queries to use.
     * 
     */
    private final List<SloIndicatorWindowBasedEvaluationQuery> queries;
    /**
     * @return The type of query to use. Valid values are `Metrics` or `Logs`.
     * 
     */
    private final String queryType;
    /**
     * @return The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
     * based evaluation.
     * 
     */
    private final String size;
    /**
     * @return Compared against threshold query&#39;s raw data points to determine success criteria.
     * 
     */
    private final Double threshold;

    @CustomType.Constructor
    private SloIndicatorWindowBasedEvaluation(
        @CustomType.Parameter("aggregation") @Nullable String aggregation,
        @CustomType.Parameter("op") String op,
        @CustomType.Parameter("queries") List<SloIndicatorWindowBasedEvaluationQuery> queries,
        @CustomType.Parameter("queryType") String queryType,
        @CustomType.Parameter("size") String size,
        @CustomType.Parameter("threshold") Double threshold) {
        this.aggregation = aggregation;
        this.op = op;
        this.queries = queries;
        this.queryType = queryType;
        this.size = size;
        this.threshold = threshold;
    }

    /**
     * @return Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
     * , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
     * 
     */
    public Optional<String> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }
    /**
     * @return Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
     * , `GreaterThanOrEqual`.
     * 
     */
    public String op() {
        return this.op;
    }
    /**
     * @return The queries to use.
     * 
     */
    public List<SloIndicatorWindowBasedEvaluationQuery> queries() {
        return this.queries;
    }
    /**
     * @return The type of query to use. Valid values are `Metrics` or `Logs`.
     * 
     */
    public String queryType() {
        return this.queryType;
    }
    /**
     * @return The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
     * based evaluation.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return Compared against threshold query&#39;s raw data points to determine success criteria.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloIndicatorWindowBasedEvaluation defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aggregation;
        private String op;
        private List<SloIndicatorWindowBasedEvaluationQuery> queries;
        private String queryType;
        private String size;
        private Double threshold;

        public Builder() {
    	      // Empty
        }

        public Builder(SloIndicatorWindowBasedEvaluation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.op = defaults.op;
    	      this.queries = defaults.queries;
    	      this.queryType = defaults.queryType;
    	      this.size = defaults.size;
    	      this.threshold = defaults.threshold;
        }

        public Builder aggregation(@Nullable String aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        public Builder op(String op) {
            this.op = Objects.requireNonNull(op);
            return this;
        }
        public Builder queries(List<SloIndicatorWindowBasedEvaluationQuery> queries) {
            this.queries = Objects.requireNonNull(queries);
            return this;
        }
        public Builder queries(SloIndicatorWindowBasedEvaluationQuery... queries) {
            return queries(List.of(queries));
        }
        public Builder queryType(String queryType) {
            this.queryType = Objects.requireNonNull(queryType);
            return this;
        }
        public Builder size(String size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }        public SloIndicatorWindowBasedEvaluation build() {
            return new SloIndicatorWindowBasedEvaluation(aggregation, op, queries, queryType, size, threshold);
        }
    }
}
