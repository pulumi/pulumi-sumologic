// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.CseEntityNormalizationConfigurationDomainMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseEntityNormalizationConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseEntityNormalizationConfigurationArgs Empty = new CseEntityNormalizationConfigurationArgs();

    /**
     * Normalize AWS ARN and Usernames.
     * 
     */
    @Import(name="awsNormalizationEnabled", required=true)
    private Output<Boolean> awsNormalizationEnabled;

    /**
     * @return Normalize AWS ARN and Usernames.
     * 
     */
    public Output<Boolean> awsNormalizationEnabled() {
        return this.awsNormalizationEnabled;
    }

    /**
     * When normalization is configured, at least one domain must be configured and a &#34;Normalized Default Domain&#34; must be provided.
     * 
     */
    @Import(name="defaultNormalizedDomain")
    private @Nullable Output<String> defaultNormalizedDomain;

    /**
     * @return When normalization is configured, at least one domain must be configured and a &#34;Normalized Default Domain&#34; must be provided.
     * 
     */
    public Optional<Output<String>> defaultNormalizedDomain() {
        return Optional.ofNullable(this.defaultNormalizedDomain);
    }

    /**
     * Secondary domains.
     * 
     */
    @Import(name="domainMappings", required=true)
    private Output<List<CseEntityNormalizationConfigurationDomainMappingArgs>> domainMappings;

    /**
     * @return Secondary domains.
     * 
     */
    public Output<List<CseEntityNormalizationConfigurationDomainMappingArgs>> domainMappings() {
        return this.domainMappings;
    }

    /**
     * Normalize names in the form user@somedomain.net or hostname.somedomain.net
     * 
     */
    @Import(name="fqdnNormalizationEnabled", required=true)
    private Output<Boolean> fqdnNormalizationEnabled;

    /**
     * @return Normalize names in the form user@somedomain.net or hostname.somedomain.net
     * 
     */
    public Output<Boolean> fqdnNormalizationEnabled() {
        return this.fqdnNormalizationEnabled;
    }

    /**
     * If hostname normalization is enabled.
     * 
     */
    @Import(name="normalizeHostnames", required=true)
    private Output<Boolean> normalizeHostnames;

    /**
     * @return If hostname normalization is enabled.
     * 
     */
    public Output<Boolean> normalizeHostnames() {
        return this.normalizeHostnames;
    }

    /**
     * If username normalization is enabled.
     * 
     */
    @Import(name="normalizeUsernames", required=true)
    private Output<Boolean> normalizeUsernames;

    /**
     * @return If username normalization is enabled.
     * 
     */
    public Output<Boolean> normalizeUsernames() {
        return this.normalizeUsernames;
    }

    /**
     * Normalize active directory domains username and hostname formats.
     * 
     */
    @Import(name="windowsNormalizationEnabled", required=true)
    private Output<Boolean> windowsNormalizationEnabled;

    /**
     * @return Normalize active directory domains username and hostname formats.
     * 
     */
    public Output<Boolean> windowsNormalizationEnabled() {
        return this.windowsNormalizationEnabled;
    }

    private CseEntityNormalizationConfigurationArgs() {}

    private CseEntityNormalizationConfigurationArgs(CseEntityNormalizationConfigurationArgs $) {
        this.awsNormalizationEnabled = $.awsNormalizationEnabled;
        this.defaultNormalizedDomain = $.defaultNormalizedDomain;
        this.domainMappings = $.domainMappings;
        this.fqdnNormalizationEnabled = $.fqdnNormalizationEnabled;
        this.normalizeHostnames = $.normalizeHostnames;
        this.normalizeUsernames = $.normalizeUsernames;
        this.windowsNormalizationEnabled = $.windowsNormalizationEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseEntityNormalizationConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseEntityNormalizationConfigurationArgs $;

        public Builder() {
            $ = new CseEntityNormalizationConfigurationArgs();
        }

        public Builder(CseEntityNormalizationConfigurationArgs defaults) {
            $ = new CseEntityNormalizationConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsNormalizationEnabled Normalize AWS ARN and Usernames.
         * 
         * @return builder
         * 
         */
        public Builder awsNormalizationEnabled(Output<Boolean> awsNormalizationEnabled) {
            $.awsNormalizationEnabled = awsNormalizationEnabled;
            return this;
        }

        /**
         * @param awsNormalizationEnabled Normalize AWS ARN and Usernames.
         * 
         * @return builder
         * 
         */
        public Builder awsNormalizationEnabled(Boolean awsNormalizationEnabled) {
            return awsNormalizationEnabled(Output.of(awsNormalizationEnabled));
        }

        /**
         * @param defaultNormalizedDomain When normalization is configured, at least one domain must be configured and a &#34;Normalized Default Domain&#34; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder defaultNormalizedDomain(@Nullable Output<String> defaultNormalizedDomain) {
            $.defaultNormalizedDomain = defaultNormalizedDomain;
            return this;
        }

        /**
         * @param defaultNormalizedDomain When normalization is configured, at least one domain must be configured and a &#34;Normalized Default Domain&#34; must be provided.
         * 
         * @return builder
         * 
         */
        public Builder defaultNormalizedDomain(String defaultNormalizedDomain) {
            return defaultNormalizedDomain(Output.of(defaultNormalizedDomain));
        }

        /**
         * @param domainMappings Secondary domains.
         * 
         * @return builder
         * 
         */
        public Builder domainMappings(Output<List<CseEntityNormalizationConfigurationDomainMappingArgs>> domainMappings) {
            $.domainMappings = domainMappings;
            return this;
        }

        /**
         * @param domainMappings Secondary domains.
         * 
         * @return builder
         * 
         */
        public Builder domainMappings(List<CseEntityNormalizationConfigurationDomainMappingArgs> domainMappings) {
            return domainMappings(Output.of(domainMappings));
        }

        /**
         * @param domainMappings Secondary domains.
         * 
         * @return builder
         * 
         */
        public Builder domainMappings(CseEntityNormalizationConfigurationDomainMappingArgs... domainMappings) {
            return domainMappings(List.of(domainMappings));
        }

        /**
         * @param fqdnNormalizationEnabled Normalize names in the form user@somedomain.net or hostname.somedomain.net
         * 
         * @return builder
         * 
         */
        public Builder fqdnNormalizationEnabled(Output<Boolean> fqdnNormalizationEnabled) {
            $.fqdnNormalizationEnabled = fqdnNormalizationEnabled;
            return this;
        }

        /**
         * @param fqdnNormalizationEnabled Normalize names in the form user@somedomain.net or hostname.somedomain.net
         * 
         * @return builder
         * 
         */
        public Builder fqdnNormalizationEnabled(Boolean fqdnNormalizationEnabled) {
            return fqdnNormalizationEnabled(Output.of(fqdnNormalizationEnabled));
        }

        /**
         * @param normalizeHostnames If hostname normalization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder normalizeHostnames(Output<Boolean> normalizeHostnames) {
            $.normalizeHostnames = normalizeHostnames;
            return this;
        }

        /**
         * @param normalizeHostnames If hostname normalization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder normalizeHostnames(Boolean normalizeHostnames) {
            return normalizeHostnames(Output.of(normalizeHostnames));
        }

        /**
         * @param normalizeUsernames If username normalization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder normalizeUsernames(Output<Boolean> normalizeUsernames) {
            $.normalizeUsernames = normalizeUsernames;
            return this;
        }

        /**
         * @param normalizeUsernames If username normalization is enabled.
         * 
         * @return builder
         * 
         */
        public Builder normalizeUsernames(Boolean normalizeUsernames) {
            return normalizeUsernames(Output.of(normalizeUsernames));
        }

        /**
         * @param windowsNormalizationEnabled Normalize active directory domains username and hostname formats.
         * 
         * @return builder
         * 
         */
        public Builder windowsNormalizationEnabled(Output<Boolean> windowsNormalizationEnabled) {
            $.windowsNormalizationEnabled = windowsNormalizationEnabled;
            return this;
        }

        /**
         * @param windowsNormalizationEnabled Normalize active directory domains username and hostname formats.
         * 
         * @return builder
         * 
         */
        public Builder windowsNormalizationEnabled(Boolean windowsNormalizationEnabled) {
            return windowsNormalizationEnabled(Output.of(windowsNormalizationEnabled));
        }

        public CseEntityNormalizationConfigurationArgs build() {
            $.awsNormalizationEnabled = Objects.requireNonNull($.awsNormalizationEnabled, "expected parameter 'awsNormalizationEnabled' to be non-null");
            $.domainMappings = Objects.requireNonNull($.domainMappings, "expected parameter 'domainMappings' to be non-null");
            $.fqdnNormalizationEnabled = Objects.requireNonNull($.fqdnNormalizationEnabled, "expected parameter 'fqdnNormalizationEnabled' to be non-null");
            $.normalizeHostnames = Objects.requireNonNull($.normalizeHostnames, "expected parameter 'normalizeHostnames' to be non-null");
            $.normalizeUsernames = Objects.requireNonNull($.normalizeUsernames, "expected parameter 'normalizeUsernames' to be non-null");
            $.windowsNormalizationEnabled = Objects.requireNonNull($.windowsNormalizationEnabled, "expected parameter 'windowsNormalizationEnabled' to be non-null");
            return $;
        }
    }

}
