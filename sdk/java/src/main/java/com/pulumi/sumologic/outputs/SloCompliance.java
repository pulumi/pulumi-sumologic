// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SloCompliance {
    /**
     * @return The type of compliance to use. Valid values are `Rolling` or `Calendar`.
     * 
     */
    private String complianceType;
    /**
     * @return The size of the compliance period to use.
     * - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
     * - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
     * 
     */
    private String size;
    /**
     * @return Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
     * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
     * For `Month` it&#39;s not required and is set to first day of the month.
     * 
     */
    private @Nullable String startFrom;
    /**
     * @return Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
     * 
     */
    private Double target;
    /**
     * @return Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
     * 
     */
    private String timezone;

    private SloCompliance() {}
    /**
     * @return The type of compliance to use. Valid values are `Rolling` or `Calendar`.
     * 
     */
    public String complianceType() {
        return this.complianceType;
    }
    /**
     * @return The size of the compliance period to use.
     * - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
     * - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
     * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
     * For `Month` it&#39;s not required and is set to first day of the month.
     * 
     */
    public Optional<String> startFrom() {
        return Optional.ofNullable(this.startFrom);
    }
    /**
     * @return Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
     * 
     */
    public Double target() {
        return this.target;
    }
    /**
     * @return Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
     * 
     */
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloCompliance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String complianceType;
        private String size;
        private @Nullable String startFrom;
        private Double target;
        private String timezone;
        public Builder() {}
        public Builder(SloCompliance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complianceType = defaults.complianceType;
    	      this.size = defaults.size;
    	      this.startFrom = defaults.startFrom;
    	      this.target = defaults.target;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder complianceType(String complianceType) {
            if (complianceType == null) {
              throw new MissingRequiredPropertyException("SloCompliance", "complianceType");
            }
            this.complianceType = complianceType;
            return this;
        }
        @CustomType.Setter
        public Builder size(String size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("SloCompliance", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder startFrom(@Nullable String startFrom) {

            this.startFrom = startFrom;
            return this;
        }
        @CustomType.Setter
        public Builder target(Double target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("SloCompliance", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("SloCompliance", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public SloCompliance build() {
            final var _resultValue = new SloCompliance();
            _resultValue.complianceType = complianceType;
            _resultValue.size = size;
            _resultValue.startFrom = startFrom;
            _resultValue.target = target;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
