// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.MutingScheduleArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.MutingScheduleState;
import com.pulumi.sumologic.outputs.MutingScheduleMonitor;
import com.pulumi.sumologic.outputs.MutingScheduleNotificationGroup;
import com.pulumi.sumologic.outputs.MutingScheduleSchedule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides the ability to create, read, delete, and update [MutingSchedule](https://help.sumologic.com/docs/alerts/monitors/muting-schedules/).
 * 
 * ## Example One-Time Muting Schedule From 12AM to 1AM on 2023-08-05 for All Monitors
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.MutingSchedule;
 * import com.pulumi.sumologic.MutingScheduleArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleMonitorArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mutingSchedule = new MutingSchedule("mutingSchedule", MutingScheduleArgs.builder()
 *             .name("One-Time Schedule for All Monitors")
 *             .type("MutingSchedulesLibraryMutingSchedule")
 *             .contentType("MutingSchedule")
 *             .monitor(MutingScheduleMonitorArgs.builder()
 *                 .all(true)
 *                 .build())
 *             .schedule(MutingScheduleScheduleArgs.builder()
 *                 .timezone("America/Los_Angeles")
 *                 .startDate("2023-08-05")
 *                 .startTime("00:00")
 *                 .duration(60)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Example Daily Muting Schedule From 9AM to 10AM and 5PM to 6PM Starting On 2023-08-05 for a Monitor or Folder
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.MutingSchedule;
 * import com.pulumi.sumologic.MutingScheduleArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleMonitorArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mutingSchedule = new MutingSchedule("mutingSchedule", MutingScheduleArgs.builder()
 *             .name("Daily schedule at 9am and 5pm for 30 minutes for all monitors")
 *             .type("MutingSchedulesLibraryMutingSchedule")
 *             .contentType("MutingSchedule")
 *             .monitor(MutingScheduleMonitorArgs.builder()
 *                 .ids("0000000000000002")
 *                 .build())
 *             .schedule(MutingScheduleScheduleArgs.builder()
 *                 .timezone("America/Los_Angeles")
 *                 .startDate("2023-08-05")
 *                 .startTime("00:00")
 *                 .duration(60)
 *                 .rrule("FREQ=DAILY;INTERVAL=1;BYHOUR=9,17")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Example Muting Schedule for an Alert Group on All Monitors Every 3rd Saturday from 12AM to 1AM
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.MutingSchedule;
 * import com.pulumi.sumologic.MutingScheduleArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleMonitorArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleNotificationGroupArgs;
 * import com.pulumi.sumologic.inputs.MutingScheduleScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mutingSchedule = new MutingSchedule("mutingSchedule", MutingScheduleArgs.builder()
 *             .name("Muting alerts from us-east-1 every 3rd saturday from 12AM to 1AM")
 *             .type("MutingSchedulesLibraryMutingSchedule")
 *             .contentType("MutingSchedule")
 *             .monitor(MutingScheduleMonitorArgs.builder()
 *                 .all(true)
 *                 .build())
 *             .notificationGroups(MutingScheduleNotificationGroupArgs.builder()
 *                 .groupKey("region")
 *                 .groupValues("us-east-1")
 *                 .build())
 *             .schedule(MutingScheduleScheduleArgs.builder()
 *                 .timezone("America/Los_Angeles")
 *                 .startDate("2023-08-05")
 *                 .startTime("00:00")
 *                 .duration(60)
 *                 .rrule("FREQ=MONTHLY;INTERVAL=1;BYDAY=+3SA")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="sumologic:index/mutingSchedule:MutingSchedule")
public class MutingSchedule extends com.pulumi.resources.CustomResource {
    /**
     * The type of the content object. Valid value: `MutingSchedule`
     * 
     */
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentType;

    /**
     * @return The type of the content object. Valid value: `MutingSchedule`
     * 
     */
    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt;
    }
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * Description of the muting schedule.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the muting schedule.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="isMutable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isMutable;

    public Output<Boolean> isMutable() {
        return this.isMutable;
    }
    @Export(name="isSystem", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSystem;

    public Output<Boolean> isSystem() {
        return this.isSystem;
    }
    @Export(name="modifiedAt", refs={String.class}, tree="[0]")
    private Output<String> modifiedAt;

    public Output<String> modifiedAt() {
        return this.modifiedAt;
    }
    @Export(name="modifiedBy", refs={String.class}, tree="[0]")
    private Output<String> modifiedBy;

    public Output<String> modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * Monitor scope that the schedule applies to. See `Monitor Scope` for more details.
     * 
     */
    @Export(name="monitor", refs={MutingScheduleMonitor.class}, tree="[0]")
    private Output</* @Nullable */ MutingScheduleMonitor> monitor;

    /**
     * @return Monitor scope that the schedule applies to. See `Monitor Scope` for more details.
     * 
     */
    public Output<Optional<MutingScheduleMonitor>> monitor() {
        return Codegen.optional(this.monitor);
    }
    /**
     * Name of the muting schedule.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the muting schedule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Alert group scope that the schedule applies to. See `Group Scope` for more details.
     * 
     */
    @Export(name="notificationGroups", refs={List.class,MutingScheduleNotificationGroup.class}, tree="[0,1]")
    private Output</* @Nullable */ List<MutingScheduleNotificationGroup>> notificationGroups;

    /**
     * @return Alert group scope that the schedule applies to. See `Group Scope` for more details.
     * 
     */
    public Output<Optional<List<MutingScheduleNotificationGroup>>> notificationGroups() {
        return Codegen.optional(this.notificationGroups);
    }
    @Export(name="parentId", refs={String.class}, tree="[0]")
    private Output<String> parentId;

    public Output<String> parentId() {
        return this.parentId;
    }
    /**
     * Schedule definition. See `Schedule Definition` for more details.
     * 
     */
    @Export(name="schedule", refs={MutingScheduleSchedule.class}, tree="[0]")
    private Output<MutingScheduleSchedule> schedule;

    /**
     * @return Schedule definition. See `Schedule Definition` for more details.
     * 
     */
    public Output<MutingScheduleSchedule> schedule() {
        return this.schedule;
    }
    /**
     * The type of object model. Valid value: `MutingSchedulesLibraryMutingSchedule`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of object model. Valid value: `MutingSchedulesLibraryMutingSchedule`
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MutingSchedule(java.lang.String name) {
        this(name, MutingScheduleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MutingSchedule(java.lang.String name, MutingScheduleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MutingSchedule(java.lang.String name, MutingScheduleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/mutingSchedule:MutingSchedule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MutingSchedule(java.lang.String name, Output<java.lang.String> id, @Nullable MutingScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/mutingSchedule:MutingSchedule", name, state, makeResourceOptions(options, id), false);
    }

    private static MutingScheduleArgs makeArgs(MutingScheduleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MutingScheduleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MutingSchedule get(java.lang.String name, Output<java.lang.String> id, @Nullable MutingScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MutingSchedule(name, id, state, options);
    }
}
