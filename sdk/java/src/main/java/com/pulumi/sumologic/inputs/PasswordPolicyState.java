// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PasswordPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PasswordPolicyState Empty = new PasswordPolicyState();

    /**
     * The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     * 
     */
    @Import(name="accountLockoutDurationInMins")
    private @Nullable Output<Integer> accountLockoutDurationInMins;

    /**
     * @return The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     * 
     */
    public Optional<Output<Integer>> accountLockoutDurationInMins() {
        return Optional.ofNullable(this.accountLockoutDurationInMins);
    }

    /**
     * Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     * 
     */
    @Import(name="accountLockoutThreshold")
    private @Nullable Output<Integer> accountLockoutThreshold;

    /**
     * @return Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     * 
     */
    public Optional<Output<Integer>> accountLockoutThreshold() {
        return Optional.ofNullable(this.accountLockoutThreshold);
    }

    /**
     * The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     * 
     */
    @Import(name="failedLoginResetDurationInMins")
    private @Nullable Output<Integer> failedLoginResetDurationInMins;

    /**
     * @return The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     * 
     */
    public Optional<Output<Integer>> failedLoginResetDurationInMins() {
        return Optional.ofNullable(this.failedLoginResetDurationInMins);
    }

    /**
     * The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     * 
     */
    @Import(name="maxPasswordAgeInDays")
    private @Nullable Output<Integer> maxPasswordAgeInDays;

    /**
     * @return Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     * 
     */
    public Optional<Output<Integer>> maxPasswordAgeInDays() {
        return Optional.ofNullable(this.maxPasswordAgeInDays);
    }

    /**
     * The minimum length of the password. Defaults to 8.
     * 
     */
    @Import(name="minLength")
    private @Nullable Output<Integer> minLength;

    /**
     * @return The minimum length of the password. Defaults to 8.
     * 
     */
    public Optional<Output<Integer>> minLength() {
        return Optional.ofNullable(this.minLength);
    }

    /**
     * The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     * 
     */
    @Import(name="minUniquePasswords")
    private @Nullable Output<Integer> minUniquePasswords;

    /**
     * @return The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     * 
     */
    public Optional<Output<Integer>> minUniquePasswords() {
        return Optional.ofNullable(this.minUniquePasswords);
    }

    /**
     * If the password must contain digits. Defaults to true.
     * 
     */
    @Import(name="mustContainDigits")
    private @Nullable Output<Boolean> mustContainDigits;

    /**
     * @return If the password must contain digits. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> mustContainDigits() {
        return Optional.ofNullable(this.mustContainDigits);
    }

    /**
     * If the password must contain lower case characters. Defaults to true.
     * 
     */
    @Import(name="mustContainLowercase")
    private @Nullable Output<Boolean> mustContainLowercase;

    /**
     * @return If the password must contain lower case characters. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> mustContainLowercase() {
        return Optional.ofNullable(this.mustContainLowercase);
    }

    /**
     * If the password must contain special characters. Defaults to true.
     * 
     */
    @Import(name="mustContainSpecialChars")
    private @Nullable Output<Boolean> mustContainSpecialChars;

    /**
     * @return If the password must contain special characters. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> mustContainSpecialChars() {
        return Optional.ofNullable(this.mustContainSpecialChars);
    }

    /**
     * If the password must contain upper case characters. Defaults to true.
     * 
     */
    @Import(name="mustContainUppercase")
    private @Nullable Output<Boolean> mustContainUppercase;

    /**
     * @return If the password must contain upper case characters. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> mustContainUppercase() {
        return Optional.ofNullable(this.mustContainUppercase);
    }

    /**
     * If MFA should be remembered on the browser. Defaults to true.
     * 
     */
    @Import(name="rememberMfa")
    private @Nullable Output<Boolean> rememberMfa;

    /**
     * @return If MFA should be remembered on the browser. Defaults to true.
     * 
     */
    public Optional<Output<Boolean>> rememberMfa() {
        return Optional.ofNullable(this.rememberMfa);
    }

    /**
     * If MFA should be required to log in. Defaults to false.
     * 
     */
    @Import(name="requireMfa")
    private @Nullable Output<Boolean> requireMfa;

    /**
     * @return If MFA should be required to log in. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> requireMfa() {
        return Optional.ofNullable(this.requireMfa);
    }

    private PasswordPolicyState() {}

    private PasswordPolicyState(PasswordPolicyState $) {
        this.accountLockoutDurationInMins = $.accountLockoutDurationInMins;
        this.accountLockoutThreshold = $.accountLockoutThreshold;
        this.failedLoginResetDurationInMins = $.failedLoginResetDurationInMins;
        this.maxLength = $.maxLength;
        this.maxPasswordAgeInDays = $.maxPasswordAgeInDays;
        this.minLength = $.minLength;
        this.minUniquePasswords = $.minUniquePasswords;
        this.mustContainDigits = $.mustContainDigits;
        this.mustContainLowercase = $.mustContainLowercase;
        this.mustContainSpecialChars = $.mustContainSpecialChars;
        this.mustContainUppercase = $.mustContainUppercase;
        this.rememberMfa = $.rememberMfa;
        this.requireMfa = $.requireMfa;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PasswordPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PasswordPolicyState $;

        public Builder() {
            $ = new PasswordPolicyState();
        }

        public Builder(PasswordPolicyState defaults) {
            $ = new PasswordPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountLockoutDurationInMins The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutDurationInMins(@Nullable Output<Integer> accountLockoutDurationInMins) {
            $.accountLockoutDurationInMins = accountLockoutDurationInMins;
            return this;
        }

        /**
         * @param accountLockoutDurationInMins The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutDurationInMins(Integer accountLockoutDurationInMins) {
            return accountLockoutDurationInMins(Output.of(accountLockoutDurationInMins));
        }

        /**
         * @param accountLockoutThreshold Number of failed login attempts allowed before account is locked-out. Defaults to 6.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutThreshold(@Nullable Output<Integer> accountLockoutThreshold) {
            $.accountLockoutThreshold = accountLockoutThreshold;
            return this;
        }

        /**
         * @param accountLockoutThreshold Number of failed login attempts allowed before account is locked-out. Defaults to 6.
         * 
         * @return builder
         * 
         */
        public Builder accountLockoutThreshold(Integer accountLockoutThreshold) {
            return accountLockoutThreshold(Output.of(accountLockoutThreshold));
        }

        /**
         * @param failedLoginResetDurationInMins The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginResetDurationInMins(@Nullable Output<Integer> failedLoginResetDurationInMins) {
            $.failedLoginResetDurationInMins = failedLoginResetDurationInMins;
            return this;
        }

        /**
         * @param failedLoginResetDurationInMins The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder failedLoginResetDurationInMins(Integer failedLoginResetDurationInMins) {
            return failedLoginResetDurationInMins(Output.of(failedLoginResetDurationInMins));
        }

        /**
         * @param maxLength The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param maxPasswordAgeInDays Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAgeInDays(@Nullable Output<Integer> maxPasswordAgeInDays) {
            $.maxPasswordAgeInDays = maxPasswordAgeInDays;
            return this;
        }

        /**
         * @param maxPasswordAgeInDays Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
         * 
         * @return builder
         * 
         */
        public Builder maxPasswordAgeInDays(Integer maxPasswordAgeInDays) {
            return maxPasswordAgeInDays(Output.of(maxPasswordAgeInDays));
        }

        /**
         * @param minLength The minimum length of the password. Defaults to 8.
         * 
         * @return builder
         * 
         */
        public Builder minLength(@Nullable Output<Integer> minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param minLength The minimum length of the password. Defaults to 8.
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            return minLength(Output.of(minLength));
        }

        /**
         * @param minUniquePasswords The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder minUniquePasswords(@Nullable Output<Integer> minUniquePasswords) {
            $.minUniquePasswords = minUniquePasswords;
            return this;
        }

        /**
         * @param minUniquePasswords The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
         * 
         * @return builder
         * 
         */
        public Builder minUniquePasswords(Integer minUniquePasswords) {
            return minUniquePasswords(Output.of(minUniquePasswords));
        }

        /**
         * @param mustContainDigits If the password must contain digits. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainDigits(@Nullable Output<Boolean> mustContainDigits) {
            $.mustContainDigits = mustContainDigits;
            return this;
        }

        /**
         * @param mustContainDigits If the password must contain digits. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainDigits(Boolean mustContainDigits) {
            return mustContainDigits(Output.of(mustContainDigits));
        }

        /**
         * @param mustContainLowercase If the password must contain lower case characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainLowercase(@Nullable Output<Boolean> mustContainLowercase) {
            $.mustContainLowercase = mustContainLowercase;
            return this;
        }

        /**
         * @param mustContainLowercase If the password must contain lower case characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainLowercase(Boolean mustContainLowercase) {
            return mustContainLowercase(Output.of(mustContainLowercase));
        }

        /**
         * @param mustContainSpecialChars If the password must contain special characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainSpecialChars(@Nullable Output<Boolean> mustContainSpecialChars) {
            $.mustContainSpecialChars = mustContainSpecialChars;
            return this;
        }

        /**
         * @param mustContainSpecialChars If the password must contain special characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainSpecialChars(Boolean mustContainSpecialChars) {
            return mustContainSpecialChars(Output.of(mustContainSpecialChars));
        }

        /**
         * @param mustContainUppercase If the password must contain upper case characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainUppercase(@Nullable Output<Boolean> mustContainUppercase) {
            $.mustContainUppercase = mustContainUppercase;
            return this;
        }

        /**
         * @param mustContainUppercase If the password must contain upper case characters. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder mustContainUppercase(Boolean mustContainUppercase) {
            return mustContainUppercase(Output.of(mustContainUppercase));
        }

        /**
         * @param rememberMfa If MFA should be remembered on the browser. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder rememberMfa(@Nullable Output<Boolean> rememberMfa) {
            $.rememberMfa = rememberMfa;
            return this;
        }

        /**
         * @param rememberMfa If MFA should be remembered on the browser. Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder rememberMfa(Boolean rememberMfa) {
            return rememberMfa(Output.of(rememberMfa));
        }

        /**
         * @param requireMfa If MFA should be required to log in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder requireMfa(@Nullable Output<Boolean> requireMfa) {
            $.requireMfa = requireMfa;
            return this;
        }

        /**
         * @param requireMfa If MFA should be required to log in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder requireMfa(Boolean requireMfa) {
            return requireMfa(Output.of(requireMfa));
        }

        public PasswordPolicyState build() {
            return $;
        }
    }

}
