// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.HttpSourceArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.HttpSourceState;
import com.pulumi.sumologic.outputs.HttpSourceDefaultDateFormat;
import com.pulumi.sumologic.outputs.HttpSourceFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a [Sumologic HTTP source](https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source), [Sumologic HTTP Traces source](https://help.sumologic.com/Traces/HTTP_Traces_Source), [Sumologic Kinesis Log source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source) and [Sumologic HTTP_OTLP_source][4]. To start using Traces contact your Sumo account representative to activate.
 * 
 * __IMPORTANT:__ The endpoint is stored in plain-text in the state. This is a potential security issue.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.Collector;
 * import com.pulumi.sumologic.CollectorArgs;
 * import com.pulumi.sumologic.HttpSource;
 * import com.pulumi.sumologic.HttpSourceArgs;
 * import com.pulumi.sumologic.inputs.HttpSourceFilterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var collector = new Collector(&#34;collector&#34;, CollectorArgs.builder()        
 *             .description(&#34;Just testing this&#34;)
 *             .build());
 * 
 *         var httpSource = new HttpSource(&#34;httpSource&#34;, HttpSourceArgs.builder()        
 *             .category(&#34;my/source/category&#34;)
 *             .collectorId(collector.id())
 *             .description(&#34;My description&#34;)
 *             .filters(HttpSourceFilterArgs.builder()
 *                 .filterType(&#34;Exclude&#34;)
 *                 .name(&#34;Test Exclude Debug&#34;)
 *                 .regexp(&#34;.*DEBUG.*&#34;)
 *                 .build())
 *             .build());
 * 
 *         var httpTracesSource = new HttpSource(&#34;httpTracesSource&#34;, HttpSourceArgs.builder()        
 *             .category(&#34;my/source/category&#34;)
 *             .collectorId(collector.id())
 *             .contentType(&#34;Zipkin&#34;)
 *             .description(&#34;My description&#34;)
 *             .build());
 * 
 *         var kinesisLog = new HttpSource(&#34;kinesisLog&#34;, HttpSourceArgs.builder()        
 *             .category(&#34;demo-category&#34;)
 *             .collectorId(sumologic_collector.test().id())
 *             .contentType(&#34;KinesisLog&#34;)
 *             .description(&#34;demo-desc&#34;)
 *             .build());
 * 
 *         var httpOtlpSource = new HttpSource(&#34;httpOtlpSource&#34;, HttpSourceArgs.builder()        
 *             .category(&#34;my/source/category&#34;)
 *             .collectorId(sumologic_collector.test().id())
 *             .contentType(&#34;Otlp&#34;)
 *             .description(&#34;My description&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * HTTP sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/httpSource:HttpSource test 123/456
 * ```
 * 
 *  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/httpSource:HttpSource test my-test-collector/my-test-source
 * ```
 * 
 *  [1]https://help.sumologic.com/Send_Data/Sources/02Sources_for_Hosted_Collectors/HTTP_Source [2]https://help.sumologic.com/Traces/HTTP_Traces_Source [3]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source [4]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/OTLP_HTTP_Source
 * 
 */
@ResourceType(type="sumologic:index/httpSource:HttpSource")
public class HttpSource extends com.pulumi.resources.CustomResource {
    @Export(name="automaticDateParsing", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> automaticDateParsing;

    public Output<Optional<Boolean>> automaticDateParsing() {
        return Codegen.optional(this.automaticDateParsing);
    }
    @Export(name="category", type=String.class, parameters={})
    private Output</* @Nullable */ String> category;

    public Output<Optional<String>> category() {
        return Codegen.optional(this.category);
    }
    @Export(name="collectorId", type=Integer.class, parameters={})
    private Output<Integer> collectorId;

    public Output<Integer> collectorId() {
        return this.collectorId;
    }
    /**
     * When configuring a HTTP Traces Source, set this property to `Zipkin`. When configuring a Kinesis Logs Source, set this property to `KinesisLog`. When configuring a HTTP OTLP Source, set this property to `Otlp`. This should only be used when creating a Traces, Kinesis Log or HTTP OTLP source.
     * 
     */
    @Export(name="contentType", type=String.class, parameters={})
    private Output</* @Nullable */ String> contentType;

    /**
     * @return When configuring a HTTP Traces Source, set this property to `Zipkin`. When configuring a Kinesis Logs Source, set this property to `KinesisLog`. When configuring a HTTP OTLP Source, set this property to `Otlp`. This should only be used when creating a Traces, Kinesis Log or HTTP OTLP source.
     * 
     */
    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="cutoffRelativeTime", type=String.class, parameters={})
    private Output</* @Nullable */ String> cutoffRelativeTime;

    public Output<Optional<String>> cutoffRelativeTime() {
        return Codegen.optional(this.cutoffRelativeTime);
    }
    @Export(name="cutoffTimestamp", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> cutoffTimestamp;

    public Output<Optional<Integer>> cutoffTimestamp() {
        return Codegen.optional(this.cutoffTimestamp);
    }
    @Export(name="defaultDateFormats", type=List.class, parameters={HttpSourceDefaultDateFormat.class})
    private Output</* @Nullable */ List<HttpSourceDefaultDateFormat>> defaultDateFormats;

    public Output<Optional<List<HttpSourceDefaultDateFormat>>> defaultDateFormats() {
        return Codegen.optional(this.defaultDateFormats);
    }
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="fields", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> fields;

    public Output<Optional<Map<String,String>>> fields() {
        return Codegen.optional(this.fields);
    }
    @Export(name="filters", type=List.class, parameters={HttpSourceFilter.class})
    private Output</* @Nullable */ List<HttpSourceFilter>> filters;

    public Output<Optional<List<HttpSourceFilter>>> filters() {
        return Codegen.optional(this.filters);
    }
    @Export(name="forceTimezone", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceTimezone;

    public Output<Optional<Boolean>> forceTimezone() {
        return Codegen.optional(this.forceTimezone);
    }
    @Export(name="hostName", type=String.class, parameters={})
    private Output</* @Nullable */ String> hostName;

    public Output<Optional<String>> hostName() {
        return Codegen.optional(this.hostName);
    }
    @Export(name="manualPrefixRegexp", type=String.class, parameters={})
    private Output</* @Nullable */ String> manualPrefixRegexp;

    public Output<Optional<String>> manualPrefixRegexp() {
        return Codegen.optional(this.manualPrefixRegexp);
    }
    /**
     * When set to `true`, will create one log message per HTTP request.
     * 
     */
    @Export(name="messagePerRequest", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> messagePerRequest;

    /**
     * @return When set to `true`, will create one log message per HTTP request.
     * 
     */
    public Output<Optional<Boolean>> messagePerRequest() {
        return Codegen.optional(this.messagePerRequest);
    }
    @Export(name="multilineProcessingEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> multilineProcessingEnabled;

    public Output<Optional<Boolean>> multilineProcessingEnabled() {
        return Codegen.optional(this.multilineProcessingEnabled);
    }
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="timezone", type=String.class, parameters={})
    private Output</* @Nullable */ String> timezone;

    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * The HTTP endpoint to use for sending data to this source.
     * 
     */
    @Export(name="url", type=String.class, parameters={})
    private Output<String> url;

    /**
     * @return The HTTP endpoint to use for sending data to this source.
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    @Export(name="useAutolineMatching", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useAutolineMatching;

    public Output<Optional<Boolean>> useAutolineMatching() {
        return Codegen.optional(this.useAutolineMatching);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HttpSource(String name) {
        this(name, HttpSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HttpSource(String name, HttpSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HttpSource(String name, HttpSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/httpSource:HttpSource", name, args == null ? HttpSourceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private HttpSource(String name, Output<String> id, @Nullable HttpSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/httpSource:HttpSource", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HttpSource get(String name, Output<String> id, @Nullable HttpSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HttpSource(name, id, state, options);
    }
}
