// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.LogSearchScheduleNotification;
import com.pulumi.sumologic.outputs.LogSearchScheduleParameter;
import com.pulumi.sumologic.outputs.LogSearchScheduleParseableTimeRange;
import com.pulumi.sumologic.outputs.LogSearchScheduleThreshold;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogSearchSchedule {
    private @Nullable String cronExpression;
    private @Nullable Boolean muteErrorEmails;
    private LogSearchScheduleNotification notification;
    private @Nullable List<LogSearchScheduleParameter> parameters;
    private LogSearchScheduleParseableTimeRange parseableTimeRange;
    private String scheduleType;
    private @Nullable LogSearchScheduleThreshold threshold;
    private String timeZone;

    private LogSearchSchedule() {}
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    public Optional<Boolean> muteErrorEmails() {
        return Optional.ofNullable(this.muteErrorEmails);
    }
    public LogSearchScheduleNotification notification() {
        return this.notification;
    }
    public List<LogSearchScheduleParameter> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    public LogSearchScheduleParseableTimeRange parseableTimeRange() {
        return this.parseableTimeRange;
    }
    public String scheduleType() {
        return this.scheduleType;
    }
    public Optional<LogSearchScheduleThreshold> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSearchSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable Boolean muteErrorEmails;
        private LogSearchScheduleNotification notification;
        private @Nullable List<LogSearchScheduleParameter> parameters;
        private LogSearchScheduleParseableTimeRange parseableTimeRange;
        private String scheduleType;
        private @Nullable LogSearchScheduleThreshold threshold;
        private String timeZone;
        public Builder() {}
        public Builder(LogSearchSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.muteErrorEmails = defaults.muteErrorEmails;
    	      this.notification = defaults.notification;
    	      this.parameters = defaults.parameters;
    	      this.parseableTimeRange = defaults.parseableTimeRange;
    	      this.scheduleType = defaults.scheduleType;
    	      this.threshold = defaults.threshold;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder muteErrorEmails(@Nullable Boolean muteErrorEmails) {

            this.muteErrorEmails = muteErrorEmails;
            return this;
        }
        @CustomType.Setter
        public Builder notification(LogSearchScheduleNotification notification) {
            if (notification == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "notification");
            }
            this.notification = notification;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable List<LogSearchScheduleParameter> parameters) {

            this.parameters = parameters;
            return this;
        }
        public Builder parameters(LogSearchScheduleParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder parseableTimeRange(LogSearchScheduleParseableTimeRange parseableTimeRange) {
            if (parseableTimeRange == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "parseableTimeRange");
            }
            this.parseableTimeRange = parseableTimeRange;
            return this;
        }
        @CustomType.Setter
        public Builder scheduleType(String scheduleType) {
            if (scheduleType == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "scheduleType");
            }
            this.scheduleType = scheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable LogSearchScheduleThreshold threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public LogSearchSchedule build() {
            final var _resultValue = new LogSearchSchedule();
            _resultValue.cronExpression = cronExpression;
            _resultValue.muteErrorEmails = muteErrorEmails;
            _resultValue.notification = notification;
            _resultValue.parameters = parameters;
            _resultValue.parseableTimeRange = parseableTimeRange;
            _resultValue.scheduleType = scheduleType;
            _resultValue.threshold = threshold;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
