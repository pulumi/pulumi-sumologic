// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.LogSearchScheduleNotification;
import com.pulumi.sumologic.outputs.LogSearchScheduleParameter;
import com.pulumi.sumologic.outputs.LogSearchScheduleParseableTimeRange;
import com.pulumi.sumologic.outputs.LogSearchScheduleThreshold;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogSearchSchedule {
    /**
     * @return Cron-like expression specifying the search&#39;s schedule. `schedule_type` must be set
     * to &#34;Custom&#34;, otherwise, `schedule_type` takes precedence over `cron_expression`.
     * 
     */
    private @Nullable String cronExpression;
    /**
     * @return If enabled, emails are not sent out in case of errors with the search.
     * 
     */
    private @Nullable Boolean muteErrorEmails;
    /**
     * @return Notification of the log search. See
     * notification schema
     * 
     */
    private LogSearchScheduleNotification notification;
    private @Nullable List<LogSearchScheduleParameter> parameters;
    /**
     * @return Time range of the scheduled log search. See
     * time range schema
     * 
     */
    private LogSearchScheduleParseableTimeRange parseableTimeRange;
    /**
     * @return Run schedule of the scheduled search. Set to &#34;Custom&#34; to specify the schedule with
     * a CRON expression. Possible schedule types are: `15Minutes`, `1Hour`, `2Hours`, `4Hours`, `6Hours`,
     * `8Hours`, `12Hours`, `1Day`, `1Week`, `Custom`.
     * 
     * &gt; With `Custom`, `1Day` and `1Week` schedule types you need to provide the corresponding cron expression
     * to determine when to actually run the search. E.g. valid cron for `1Day` is `0 0 16 ? * 2-6 *`.
     * 
     */
    private String scheduleType;
    /**
     * @return Threshold for when to send notification. See
     * threshold schema
     * 
     */
    private @Nullable LogSearchScheduleThreshold threshold;
    /**
     * @return Time zone for the scheduled log search. Either an abbreviation such as &#34;PST&#34;,
     * a full name such as &#34;America/Los_Angeles&#34;, or a custom ID such as &#34;GMT-8:00&#34;. Note that the support of
     * abbreviations is for JDK 1.1.x compatibility only and full names should be used.
     * 
     */
    private String timeZone;

    private LogSearchSchedule() {}
    /**
     * @return Cron-like expression specifying the search&#39;s schedule. `schedule_type` must be set
     * to &#34;Custom&#34;, otherwise, `schedule_type` takes precedence over `cron_expression`.
     * 
     */
    public Optional<String> cronExpression() {
        return Optional.ofNullable(this.cronExpression);
    }
    /**
     * @return If enabled, emails are not sent out in case of errors with the search.
     * 
     */
    public Optional<Boolean> muteErrorEmails() {
        return Optional.ofNullable(this.muteErrorEmails);
    }
    /**
     * @return Notification of the log search. See
     * notification schema
     * 
     */
    public LogSearchScheduleNotification notification() {
        return this.notification;
    }
    public List<LogSearchScheduleParameter> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * @return Time range of the scheduled log search. See
     * time range schema
     * 
     */
    public LogSearchScheduleParseableTimeRange parseableTimeRange() {
        return this.parseableTimeRange;
    }
    /**
     * @return Run schedule of the scheduled search. Set to &#34;Custom&#34; to specify the schedule with
     * a CRON expression. Possible schedule types are: `15Minutes`, `1Hour`, `2Hours`, `4Hours`, `6Hours`,
     * `8Hours`, `12Hours`, `1Day`, `1Week`, `Custom`.
     * 
     * &gt; With `Custom`, `1Day` and `1Week` schedule types you need to provide the corresponding cron expression
     * to determine when to actually run the search. E.g. valid cron for `1Day` is `0 0 16 ? * 2-6 *`.
     * 
     */
    public String scheduleType() {
        return this.scheduleType;
    }
    /**
     * @return Threshold for when to send notification. See
     * threshold schema
     * 
     */
    public Optional<LogSearchScheduleThreshold> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Time zone for the scheduled log search. Either an abbreviation such as &#34;PST&#34;,
     * a full name such as &#34;America/Los_Angeles&#34;, or a custom ID such as &#34;GMT-8:00&#34;. Note that the support of
     * abbreviations is for JDK 1.1.x compatibility only and full names should be used.
     * 
     */
    public String timeZone() {
        return this.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSearchSchedule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cronExpression;
        private @Nullable Boolean muteErrorEmails;
        private LogSearchScheduleNotification notification;
        private @Nullable List<LogSearchScheduleParameter> parameters;
        private LogSearchScheduleParseableTimeRange parseableTimeRange;
        private String scheduleType;
        private @Nullable LogSearchScheduleThreshold threshold;
        private String timeZone;
        public Builder() {}
        public Builder(LogSearchSchedule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cronExpression = defaults.cronExpression;
    	      this.muteErrorEmails = defaults.muteErrorEmails;
    	      this.notification = defaults.notification;
    	      this.parameters = defaults.parameters;
    	      this.parseableTimeRange = defaults.parseableTimeRange;
    	      this.scheduleType = defaults.scheduleType;
    	      this.threshold = defaults.threshold;
    	      this.timeZone = defaults.timeZone;
        }

        @CustomType.Setter
        public Builder cronExpression(@Nullable String cronExpression) {

            this.cronExpression = cronExpression;
            return this;
        }
        @CustomType.Setter
        public Builder muteErrorEmails(@Nullable Boolean muteErrorEmails) {

            this.muteErrorEmails = muteErrorEmails;
            return this;
        }
        @CustomType.Setter
        public Builder notification(LogSearchScheduleNotification notification) {
            if (notification == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "notification");
            }
            this.notification = notification;
            return this;
        }
        @CustomType.Setter
        public Builder parameters(@Nullable List<LogSearchScheduleParameter> parameters) {

            this.parameters = parameters;
            return this;
        }
        public Builder parameters(LogSearchScheduleParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder parseableTimeRange(LogSearchScheduleParseableTimeRange parseableTimeRange) {
            if (parseableTimeRange == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "parseableTimeRange");
            }
            this.parseableTimeRange = parseableTimeRange;
            return this;
        }
        @CustomType.Setter
        public Builder scheduleType(String scheduleType) {
            if (scheduleType == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "scheduleType");
            }
            this.scheduleType = scheduleType;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable LogSearchScheduleThreshold threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            if (timeZone == null) {
              throw new MissingRequiredPropertyException("LogSearchSchedule", "timeZone");
            }
            this.timeZone = timeZone;
            return this;
        }
        public LogSearchSchedule build() {
            final var _resultValue = new LogSearchSchedule();
            _resultValue.cronExpression = cronExpression;
            _resultValue.muteErrorEmails = muteErrorEmails;
            _resultValue.notification = notification;
            _resultValue.parameters = parameters;
            _resultValue.parseableTimeRange = parseableTimeRange;
            _resultValue.scheduleType = scheduleType;
            _resultValue.threshold = threshold;
            _resultValue.timeZone = timeZone;
            return _resultValue;
        }
    }
}
