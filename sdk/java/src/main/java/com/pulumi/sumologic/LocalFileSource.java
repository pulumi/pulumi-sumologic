// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.LocalFileSourceArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.LocalFileSourceState;
import com.pulumi.sumologic.outputs.LocalFileSourceDefaultDateFormat;
import com.pulumi.sumologic.outputs.LocalFileSourceFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a [Sumologic Local File Source](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.InstalledCollector;
 * import com.pulumi.sumologic.InstalledCollectorArgs;
 * import com.pulumi.sumologic.LocalFileSource;
 * import com.pulumi.sumologic.LocalFileSourceArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var installedCollector = new InstalledCollector("installedCollector", InstalledCollectorArgs.builder()
 *             .name("test-collector")
 *             .category("macos/test")
 *             .ephemeral(true)
 *             .build());
 * 
 *         var local = new LocalFileSource("local", LocalFileSourceArgs.builder()
 *             .name("localfile-mac")
 *             .description("test")
 *             .category("test")
 *             .collectorId(installedCollector.id())
 *             .pathExpression("/Applications/Sumo Logic Collector/logs/*.log.*")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;``
 * 
 * ## Import
 * 
 * Local file sources can be imported using the collector and source IDs, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/localFileSource:LocalFileSource test 123/456
 * ```
 * 
 * Local file sources can also be imported using the collector name and source name, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/localFileSource:LocalFileSource test my-test-collector/my-test-source
 * ```
 * 
 * [1]: https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/
 * 
 * [2]: https://help.sumologic.com/Manage/Fields
 * 
 * [3]: https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources
 * 
 */
@ResourceType(type="sumologic:index/localFileSource:LocalFileSource")
public class LocalFileSource extends com.pulumi.resources.CustomResource {
    @Export(name="automaticDateParsing", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> automaticDateParsing;

    public Output<Optional<Boolean>> automaticDateParsing() {
        return Codegen.optional(this.automaticDateParsing);
    }
    /**
     * The default source category for the source.
     * 
     */
    @Export(name="category", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> category;

    /**
     * @return The default source category for the source.
     * 
     */
    public Output<Optional<String>> category() {
        return Codegen.optional(this.category);
    }
    @Export(name="collectorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> collectorId;

    public Output<Integer> collectorId() {
        return this.collectorId;
    }
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentType;

    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="cutoffRelativeTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cutoffRelativeTime;

    public Output<Optional<String>> cutoffRelativeTime() {
        return Codegen.optional(this.cutoffRelativeTime);
    }
    @Export(name="cutoffTimestamp", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cutoffTimestamp;

    public Output<Optional<Integer>> cutoffTimestamp() {
        return Codegen.optional(this.cutoffTimestamp);
    }
    @Export(name="defaultDateFormats", refs={List.class,LocalFileSourceDefaultDateFormat.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LocalFileSourceDefaultDateFormat>> defaultDateFormats;

    public Output<Optional<List<LocalFileSourceDefaultDateFormat>>> defaultDateFormats() {
        return Codegen.optional(this.defaultDateFormats);
    }
    @Export(name="denyLists", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> denyLists;

    public Output<Optional<List<String>>> denyLists() {
        return Codegen.optional(this.denyLists);
    }
    /**
     * The description of the source.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the source.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Defines the encoding form. Default is &#34;UTF-8&#34;. Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
     * 
     */
    @Export(name="encoding", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> encoding;

    /**
     * @return Defines the encoding form. Default is &#34;UTF-8&#34;. Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
     * 
     */
    public Output<Optional<String>> encoding() {
        return Codegen.optional(this.encoding);
    }
    /**
     * Map containing [key/value pairs][2].
     * 
     */
    @Export(name="fields", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> fields;

    /**
     * @return Map containing [key/value pairs][2].
     * 
     */
    public Output<Optional<Map<String,String>>> fields() {
        return Codegen.optional(this.fields);
    }
    @Export(name="filters", refs={List.class,LocalFileSourceFilter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LocalFileSourceFilter>> filters;

    public Output<Optional<List<LocalFileSourceFilter>>> filters() {
        return Codegen.optional(this.filters);
    }
    @Export(name="forceTimezone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceTimezone;

    public Output<Optional<Boolean>> forceTimezone() {
        return Codegen.optional(this.forceTimezone);
    }
    @Export(name="hashAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashAlgorithm;

    public Output<Optional<String>> hashAlgorithm() {
        return Codegen.optional(this.hashAlgorithm);
    }
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostName;

    public Output<Optional<String>> hostName() {
        return Codegen.optional(this.hostName);
    }
    @Export(name="manualPrefixRegexp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> manualPrefixRegexp;

    public Output<Optional<String>> manualPrefixRegexp() {
        return Codegen.optional(this.manualPrefixRegexp);
    }
    @Export(name="multilineProcessingEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> multilineProcessingEnabled;

    public Output<Optional<Boolean>> multilineProcessingEnabled() {
        return Codegen.optional(this.multilineProcessingEnabled);
    }
    /**
     * The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*&#47;.log].
     * 
     */
    @Export(name="pathExpression", refs={String.class}, tree="[0]")
    private Output<String> pathExpression;

    /**
     * @return A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*&#47;.log].
     * 
     */
    public Output<String> pathExpression() {
        return this.pathExpression;
    }
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    @Export(name="useAutolineMatching", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useAutolineMatching;

    public Output<Optional<Boolean>> useAutolineMatching() {
        return Codegen.optional(this.useAutolineMatching);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LocalFileSource(java.lang.String name) {
        this(name, LocalFileSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LocalFileSource(java.lang.String name, LocalFileSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LocalFileSource(java.lang.String name, LocalFileSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/localFileSource:LocalFileSource", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LocalFileSource(java.lang.String name, Output<java.lang.String> id, @Nullable LocalFileSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/localFileSource:LocalFileSource", name, state, makeResourceOptions(options, id), false);
    }

    private static LocalFileSourceArgs makeArgs(LocalFileSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LocalFileSourceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LocalFileSource get(java.lang.String name, Output<java.lang.String> id, @Nullable LocalFileSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LocalFileSource(name, id, state, options);
    }
}
