// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition {
    private String field;
    private String query;

    private DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition() {}
    public String field() {
        return this.field;
    }
    public String query() {
        return this.query;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String field;
        private String query;
        public Builder() {}
        public Builder(DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.field = defaults.field;
    	      this.query = defaults.query;
        }

        @CustomType.Setter
        public Builder field(String field) {
            if (field == null) {
              throw new MissingRequiredPropertyException("DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition", "field");
            }
            this.field = field;
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            if (query == null) {
              throw new MissingRequiredPropertyException("DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition", "query");
            }
            this.query = query;
            return this;
        }
        public DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition build() {
            final var _resultValue = new DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition();
            _resultValue.field = field;
            _resultValue.query = query;
            return _resultValue;
        }
    }
}
