// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudwatchSourcePathTagFilter {
    /**
     * @return Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
     * 
     */
    private final @Nullable String namespace;
    /**
     * @return List of key-value pairs of tag filters. Eg: `[&#34;k3=v3&#34;]`
     * 
     */
    private final @Nullable List<String> tags;
    /**
     * @return This value has to be set to `TagFilters`
     * 
     */
    private final @Nullable String type;

    @CustomType.Constructor
    private CloudwatchSourcePathTagFilter(
        @CustomType.Parameter("namespace") @Nullable String namespace,
        @CustomType.Parameter("tags") @Nullable List<String> tags,
        @CustomType.Parameter("type") @Nullable String type) {
        this.namespace = namespace;
        this.tags = tags;
        this.type = type;
    }

    /**
     * @return Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
     * 
     */
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return List of key-value pairs of tag filters. Eg: `[&#34;k3=v3&#34;]`
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return This value has to be set to `TagFilters`
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudwatchSourcePathTagFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String namespace;
        private @Nullable List<String> tags;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(CloudwatchSourcePathTagFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.namespace = defaults.namespace;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public CloudwatchSourcePathTagFilter build() {
            return new CloudwatchSourcePathTagFilter(namespace, tags, type);
        }
    }
}
