// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstalledCollectorState extends com.pulumi.resources.ResourceArgs {

    public static final InstalledCollectorState Empty = new InstalledCollectorState();

    @Import(name="alive")
    private @Nullable Output<Boolean> alive;

    public Optional<Output<Boolean>> alive() {
        return Optional.ofNullable(this.alive);
    }

    @Import(name="category")
    private @Nullable Output<String> category;

    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="collectorVersion")
    private @Nullable Output<String> collectorVersion;

    public Optional<Output<String>> collectorVersion() {
        return Optional.ofNullable(this.collectorVersion);
    }

    @Import(name="cutoffTimestamp")
    private @Nullable Output<Integer> cutoffTimestamp;

    public Optional<Output<Integer>> cutoffTimestamp() {
        return Optional.ofNullable(this.cutoffTimestamp);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="ephemeral")
    private @Nullable Output<Boolean> ephemeral;

    public Optional<Output<Boolean>> ephemeral() {
        return Optional.ofNullable(this.ephemeral);
    }

    @Import(name="fields")
    private @Nullable Output<Map<String,String>> fields;

    public Optional<Output<Map<String,String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    @Import(name="lastSeenAlive")
    private @Nullable Output<Integer> lastSeenAlive;

    public Optional<Output<Integer>> lastSeenAlive() {
        return Optional.ofNullable(this.lastSeenAlive);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="sourceSyncMode")
    private @Nullable Output<String> sourceSyncMode;

    public Optional<Output<String>> sourceSyncMode() {
        return Optional.ofNullable(this.sourceSyncMode);
    }

    @Import(name="targetCpu")
    private @Nullable Output<Integer> targetCpu;

    public Optional<Output<Integer>> targetCpu() {
        return Optional.ofNullable(this.targetCpu);
    }

    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private InstalledCollectorState() {}

    private InstalledCollectorState(InstalledCollectorState $) {
        this.alive = $.alive;
        this.category = $.category;
        this.collectorVersion = $.collectorVersion;
        this.cutoffTimestamp = $.cutoffTimestamp;
        this.description = $.description;
        this.ephemeral = $.ephemeral;
        this.fields = $.fields;
        this.hostName = $.hostName;
        this.lastSeenAlive = $.lastSeenAlive;
        this.name = $.name;
        this.sourceSyncMode = $.sourceSyncMode;
        this.targetCpu = $.targetCpu;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstalledCollectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstalledCollectorState $;

        public Builder() {
            $ = new InstalledCollectorState();
        }

        public Builder(InstalledCollectorState defaults) {
            $ = new InstalledCollectorState(Objects.requireNonNull(defaults));
        }

        public Builder alive(@Nullable Output<Boolean> alive) {
            $.alive = alive;
            return this;
        }

        public Builder alive(Boolean alive) {
            return alive(Output.of(alive));
        }

        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder collectorVersion(@Nullable Output<String> collectorVersion) {
            $.collectorVersion = collectorVersion;
            return this;
        }

        public Builder collectorVersion(String collectorVersion) {
            return collectorVersion(Output.of(collectorVersion));
        }

        public Builder cutoffTimestamp(@Nullable Output<Integer> cutoffTimestamp) {
            $.cutoffTimestamp = cutoffTimestamp;
            return this;
        }

        public Builder cutoffTimestamp(Integer cutoffTimestamp) {
            return cutoffTimestamp(Output.of(cutoffTimestamp));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ephemeral(@Nullable Output<Boolean> ephemeral) {
            $.ephemeral = ephemeral;
            return this;
        }

        public Builder ephemeral(Boolean ephemeral) {
            return ephemeral(Output.of(ephemeral));
        }

        public Builder fields(@Nullable Output<Map<String,String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(Map<String,String> fields) {
            return fields(Output.of(fields));
        }

        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        public Builder lastSeenAlive(@Nullable Output<Integer> lastSeenAlive) {
            $.lastSeenAlive = lastSeenAlive;
            return this;
        }

        public Builder lastSeenAlive(Integer lastSeenAlive) {
            return lastSeenAlive(Output.of(lastSeenAlive));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sourceSyncMode(@Nullable Output<String> sourceSyncMode) {
            $.sourceSyncMode = sourceSyncMode;
            return this;
        }

        public Builder sourceSyncMode(String sourceSyncMode) {
            return sourceSyncMode(Output.of(sourceSyncMode));
        }

        public Builder targetCpu(@Nullable Output<Integer> targetCpu) {
            $.targetCpu = targetCpu;
            return this;
        }

        public Builder targetCpu(Integer targetCpu) {
            return targetCpu(Output.of(targetCpu));
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public InstalledCollectorState build() {
            return $;
        }
    }

}
