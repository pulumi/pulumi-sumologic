// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.LookupTableFieldArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LookupTableState extends com.pulumi.resources.ResourceArgs {

    public static final LookupTableState Empty = new LookupTableState();

    /**
     * The description of the lookup table.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the lookup table.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The list of fields in the lookup table.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<LookupTableFieldArgs>> fields;

    /**
     * @return The list of fields in the lookup table.
     * 
     */
    public Optional<Output<List<LookupTableFieldArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The name of the lookup table.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the lookup table.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The parent-folder-path identifier of the lookup table in the Library.
     * 
     */
    @Import(name="parentFolderId")
    private @Nullable Output<String> parentFolderId;

    /**
     * @return The parent-folder-path identifier of the lookup table in the Library.
     * 
     */
    public Optional<Output<String>> parentFolderId() {
        return Optional.ofNullable(this.parentFolderId);
    }

    /**
     * The primary key field names.
     * 
     */
    @Import(name="primaryKeys")
    private @Nullable Output<List<String>> primaryKeys;

    /**
     * @return The primary key field names.
     * 
     */
    public Optional<Output<List<String>>> primaryKeys() {
        return Optional.ofNullable(this.primaryKeys);
    }

    @Import(name="sizeLimitAction")
    private @Nullable Output<String> sizeLimitAction;

    public Optional<Output<String>> sizeLimitAction() {
        return Optional.ofNullable(this.sizeLimitAction);
    }

    /**
     * A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private LookupTableState() {}

    private LookupTableState(LookupTableState $) {
        this.description = $.description;
        this.fields = $.fields;
        this.name = $.name;
        this.parentFolderId = $.parentFolderId;
        this.primaryKeys = $.primaryKeys;
        this.sizeLimitAction = $.sizeLimitAction;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LookupTableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LookupTableState $;

        public Builder() {
            $ = new LookupTableState();
        }

        public Builder(LookupTableState defaults) {
            $ = new LookupTableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fields The list of fields in the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<List<LookupTableFieldArgs>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields The list of fields in the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder fields(List<LookupTableFieldArgs> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param fields The list of fields in the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder fields(LookupTableFieldArgs... fields) {
            return fields(List.of(fields));
        }

        /**
         * @param name The name of the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the lookup table.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentFolderId The parent-folder-path identifier of the lookup table in the Library.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(@Nullable Output<String> parentFolderId) {
            $.parentFolderId = parentFolderId;
            return this;
        }

        /**
         * @param parentFolderId The parent-folder-path identifier of the lookup table in the Library.
         * 
         * @return builder
         * 
         */
        public Builder parentFolderId(String parentFolderId) {
            return parentFolderId(Output.of(parentFolderId));
        }

        /**
         * @param primaryKeys The primary key field names.
         * 
         * @return builder
         * 
         */
        public Builder primaryKeys(@Nullable Output<List<String>> primaryKeys) {
            $.primaryKeys = primaryKeys;
            return this;
        }

        /**
         * @param primaryKeys The primary key field names.
         * 
         * @return builder
         * 
         */
        public Builder primaryKeys(List<String> primaryKeys) {
            return primaryKeys(Output.of(primaryKeys));
        }

        /**
         * @param primaryKeys The primary key field names.
         * 
         * @return builder
         * 
         */
        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }

        public Builder sizeLimitAction(@Nullable Output<String> sizeLimitAction) {
            $.sizeLimitAction = sizeLimitAction;
            return this;
        }

        public Builder sizeLimitAction(String sizeLimitAction) {
            return sizeLimitAction(Output.of(sizeLimitAction));
        }

        /**
         * @param ttl A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public LookupTableState build() {
            return $;
        }
    }

}
