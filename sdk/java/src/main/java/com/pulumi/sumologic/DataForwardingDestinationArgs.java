// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.DataForwardingDestinationAuthenticationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataForwardingDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataForwardingDestinationArgs Empty = new DataForwardingDestinationArgs();

    @Import(name="authentication", required=true)
    private Output<DataForwardingDestinationAuthenticationArgs> authentication;

    public Output<DataForwardingDestinationAuthenticationArgs> authentication() {
        return this.authentication;
    }

    /**
     * The name of the Amazon S3 bucket.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return The name of the Amazon S3 bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Description of the S3 data forwarding destination.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the S3 data forwarding destination.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the S3 data forwarding destination.
     * 
     */
    @Import(name="destinationName", required=true)
    private Output<String> destinationName;

    /**
     * @return Name of the S3 data forwarding destination.
     * 
     */
    public Output<String> destinationName() {
        return this.destinationName;
    }

    /**
     * True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
     * 
     * The following attributes are exported:
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
     * 
     * The following attributes are exported:
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The region where the S3 bucket is located.
     * 
     */
    @Import(name="s3Region")
    private @Nullable Output<String> s3Region;

    /**
     * @return The region where the S3 bucket is located.
     * 
     */
    public Optional<Output<String>> s3Region() {
        return Optional.ofNullable(this.s3Region);
    }

    /**
     * Enable S3 server-side encryption.
     * 
     */
    @Import(name="s3ServerSideEncryption")
    private @Nullable Output<Boolean> s3ServerSideEncryption;

    /**
     * @return Enable S3 server-side encryption.
     * 
     */
    public Optional<Output<Boolean>> s3ServerSideEncryption() {
        return Optional.ofNullable(this.s3ServerSideEncryption);
    }

    private DataForwardingDestinationArgs() {}

    private DataForwardingDestinationArgs(DataForwardingDestinationArgs $) {
        this.authentication = $.authentication;
        this.bucketName = $.bucketName;
        this.description = $.description;
        this.destinationName = $.destinationName;
        this.enabled = $.enabled;
        this.s3Region = $.s3Region;
        this.s3ServerSideEncryption = $.s3ServerSideEncryption;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataForwardingDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataForwardingDestinationArgs $;

        public Builder() {
            $ = new DataForwardingDestinationArgs();
        }

        public Builder(DataForwardingDestinationArgs defaults) {
            $ = new DataForwardingDestinationArgs(Objects.requireNonNull(defaults));
        }

        public Builder authentication(Output<DataForwardingDestinationAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder authentication(DataForwardingDestinationAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param bucketName The name of the Amazon S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of the Amazon S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param description Description of the S3 data forwarding destination.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the S3 data forwarding destination.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationName Name of the S3 data forwarding destination.
         * 
         * @return builder
         * 
         */
        public Builder destinationName(Output<String> destinationName) {
            $.destinationName = destinationName;
            return this;
        }

        /**
         * @param destinationName Name of the S3 data forwarding destination.
         * 
         * @return builder
         * 
         */
        public Builder destinationName(String destinationName) {
            return destinationName(Output.of(destinationName));
        }

        /**
         * @param enabled True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param s3Region The region where the S3 bucket is located.
         * 
         * @return builder
         * 
         */
        public Builder s3Region(@Nullable Output<String> s3Region) {
            $.s3Region = s3Region;
            return this;
        }

        /**
         * @param s3Region The region where the S3 bucket is located.
         * 
         * @return builder
         * 
         */
        public Builder s3Region(String s3Region) {
            return s3Region(Output.of(s3Region));
        }

        /**
         * @param s3ServerSideEncryption Enable S3 server-side encryption.
         * 
         * @return builder
         * 
         */
        public Builder s3ServerSideEncryption(@Nullable Output<Boolean> s3ServerSideEncryption) {
            $.s3ServerSideEncryption = s3ServerSideEncryption;
            return this;
        }

        /**
         * @param s3ServerSideEncryption Enable S3 server-side encryption.
         * 
         * @return builder
         * 
         */
        public Builder s3ServerSideEncryption(Boolean s3ServerSideEncryption) {
            return s3ServerSideEncryption(Output.of(s3ServerSideEncryption));
        }

        public DataForwardingDestinationArgs build() {
            if ($.authentication == null) {
                throw new MissingRequiredPropertyException("DataForwardingDestinationArgs", "authentication");
            }
            if ($.bucketName == null) {
                throw new MissingRequiredPropertyException("DataForwardingDestinationArgs", "bucketName");
            }
            if ($.destinationName == null) {
                throw new MissingRequiredPropertyException("DataForwardingDestinationArgs", "destinationName");
            }
            return $;
        }
    }

}
