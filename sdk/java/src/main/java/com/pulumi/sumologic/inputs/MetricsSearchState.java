// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.MetricsSearchMetricsQueryArgs;
import com.pulumi.sumologic.inputs.MetricsSearchTimeRangeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricsSearchState extends com.pulumi.resources.ResourceArgs {

    public static final MetricsSearchState Empty = new MetricsSearchState();

    /**
     * Description of the search.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the search.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Desired quantization in seconds. Default value is `0`.
     * 
     */
    @Import(name="desiredQuantizationInSecs")
    private @Nullable Output<Integer> desiredQuantizationInSecs;

    /**
     * @return Desired quantization in seconds. Default value is `0`.
     * 
     */
    public Optional<Output<Integer>> desiredQuantizationInSecs() {
        return Optional.ofNullable(this.desiredQuantizationInSecs);
    }

    /**
     * Log query used to add an overlay to the chart.
     * 
     */
    @Import(name="logQuery")
    private @Nullable Output<String> logQuery;

    /**
     * @return Log query used to add an overlay to the chart.
     * 
     */
    public Optional<Output<String>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    /**
     * Array of objects MetricsSearchQuery. Metrics queries, up to the maximum of six.
     * 
     */
    @Import(name="metricsQueries")
    private @Nullable Output<List<MetricsSearchMetricsQueryArgs>> metricsQueries;

    /**
     * @return Array of objects MetricsSearchQuery. Metrics queries, up to the maximum of six.
     * 
     */
    public Optional<Output<List<MetricsSearchMetricsQueryArgs>>> metricsQueries() {
        return Optional.ofNullable(this.metricsQueries);
    }

    /**
     * The identifier of the folder to create the log search in.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The identifier of the folder to create the log search in.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * (Block List, Max: 1, Required) Time range of the log search. See time range schema
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<MetricsSearchTimeRangeArgs> timeRange;

    /**
     * @return (Block List, Max: 1, Required) Time range of the log search. See time range schema
     * 
     */
    public Optional<Output<MetricsSearchTimeRangeArgs>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    /**
     * Title of the search.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the search.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private MetricsSearchState() {}

    private MetricsSearchState(MetricsSearchState $) {
        this.description = $.description;
        this.desiredQuantizationInSecs = $.desiredQuantizationInSecs;
        this.logQuery = $.logQuery;
        this.metricsQueries = $.metricsQueries;
        this.parentId = $.parentId;
        this.timeRange = $.timeRange;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricsSearchState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricsSearchState $;

        public Builder() {
            $ = new MetricsSearchState();
        }

        public Builder(MetricsSearchState defaults) {
            $ = new MetricsSearchState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param desiredQuantizationInSecs Desired quantization in seconds. Default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder desiredQuantizationInSecs(@Nullable Output<Integer> desiredQuantizationInSecs) {
            $.desiredQuantizationInSecs = desiredQuantizationInSecs;
            return this;
        }

        /**
         * @param desiredQuantizationInSecs Desired quantization in seconds. Default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder desiredQuantizationInSecs(Integer desiredQuantizationInSecs) {
            return desiredQuantizationInSecs(Output.of(desiredQuantizationInSecs));
        }

        /**
         * @param logQuery Log query used to add an overlay to the chart.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(@Nullable Output<String> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        /**
         * @param logQuery Log query used to add an overlay to the chart.
         * 
         * @return builder
         * 
         */
        public Builder logQuery(String logQuery) {
            return logQuery(Output.of(logQuery));
        }

        /**
         * @param metricsQueries Array of objects MetricsSearchQuery. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder metricsQueries(@Nullable Output<List<MetricsSearchMetricsQueryArgs>> metricsQueries) {
            $.metricsQueries = metricsQueries;
            return this;
        }

        /**
         * @param metricsQueries Array of objects MetricsSearchQuery. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder metricsQueries(List<MetricsSearchMetricsQueryArgs> metricsQueries) {
            return metricsQueries(Output.of(metricsQueries));
        }

        /**
         * @param metricsQueries Array of objects MetricsSearchQuery. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder metricsQueries(MetricsSearchMetricsQueryArgs... metricsQueries) {
            return metricsQueries(List.of(metricsQueries));
        }

        /**
         * @param parentId The identifier of the folder to create the log search in.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The identifier of the folder to create the log search in.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param timeRange (Block List, Max: 1, Required) Time range of the log search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<MetricsSearchTimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange (Block List, Max: 1, Required) Time range of the log search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(MetricsSearchTimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param title Title of the search.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the search.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public MetricsSearchState build() {
            return $;
        }
    }

}
