// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.CseThresholdRuleEntitySelectorArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseThresholdRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseThresholdRuleArgs Empty = new CseThresholdRuleArgs();

    /**
     * Whether to count distinct values of a field, as opposed to just counting the number of records
     * 
     */
    @Import(name="countDistinct")
    private @Nullable Output<Boolean> countDistinct;

    /**
     * @return Whether to count distinct values of a field, as opposed to just counting the number of records
     * 
     */
    public Optional<Output<Boolean>> countDistinct() {
        return Optional.ofNullable(this.countDistinct);
    }

    /**
     * The field to count if `count_distinct` is set to true
     * 
     */
    @Import(name="countField")
    private @Nullable Output<String> countField;

    /**
     * @return The field to count if `count_distinct` is set to true
     * 
     */
    public Optional<Output<String>> countField() {
        return Optional.ofNullable(this.countField);
    }

    /**
     * The description of the generated Signals
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Whether the rule should generate Signals
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The entities to generate Signals on
     * 
     */
    @Import(name="entitySelectors", required=true)
    private Output<List<CseThresholdRuleEntitySelectorArgs>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * 
     */
    public Output<List<CseThresholdRuleEntitySelectorArgs>> entitySelectors() {
        return this.entitySelectors;
    }

    /**
     * The expression for which records to match on
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    /**
     * A list of fields to group records by
     * 
     */
    @Import(name="groupByFields")
    private @Nullable Output<List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Optional<Output<List<String>>> groupByFields() {
        return Optional.ofNullable(this.groupByFields);
    }

    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Import(name="isPrototype")
    private @Nullable Output<Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Optional<Output<Boolean>> isPrototype() {
        return Optional.ofNullable(this.isPrototype);
    }

    /**
     * A Signal will be fired when this many records/distinct field values are matched
     * 
     */
    @Import(name="limit", required=true)
    private Output<Integer> limit;

    /**
     * @return A Signal will be fired when this many records/distinct field values are matched
     * 
     */
    public Output<Integer> limit() {
        return this.limit;
    }

    /**
     * The name of the Rule and the generated Signals
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Rule and the generated Signals
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The severity of the generated Signals
     * 
     */
    @Import(name="severity", required=true)
    private Output<Integer> severity;

    /**
     * @return The severity of the generated Signals
     * 
     */
    public Output<Integer> severity() {
        return this.severity;
    }

    /**
     * The summary of the generated Signals
     * 
     */
    @Import(name="summaryExpression")
    private @Nullable Output<String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Optional<Output<String>> summaryExpression() {
        return Optional.ofNullable(this.summaryExpression);
    }

    /**
     * The tags of the generated Signals
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     * 
     */
    @Import(name="windowSize", required=true)
    private Output<String> windowSize;

    /**
     * @return How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }

    private CseThresholdRuleArgs() {}

    private CseThresholdRuleArgs(CseThresholdRuleArgs $) {
        this.countDistinct = $.countDistinct;
        this.countField = $.countField;
        this.description = $.description;
        this.enabled = $.enabled;
        this.entitySelectors = $.entitySelectors;
        this.expression = $.expression;
        this.groupByFields = $.groupByFields;
        this.isPrototype = $.isPrototype;
        this.limit = $.limit;
        this.name = $.name;
        this.severity = $.severity;
        this.summaryExpression = $.summaryExpression;
        this.tags = $.tags;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseThresholdRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseThresholdRuleArgs $;

        public Builder() {
            $ = new CseThresholdRuleArgs();
        }

        public Builder(CseThresholdRuleArgs defaults) {
            $ = new CseThresholdRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param countDistinct Whether to count distinct values of a field, as opposed to just counting the number of records
         * 
         * @return builder
         * 
         */
        public Builder countDistinct(@Nullable Output<Boolean> countDistinct) {
            $.countDistinct = countDistinct;
            return this;
        }

        /**
         * @param countDistinct Whether to count distinct values of a field, as opposed to just counting the number of records
         * 
         * @return builder
         * 
         */
        public Builder countDistinct(Boolean countDistinct) {
            return countDistinct(Output.of(countDistinct));
        }

        /**
         * @param countField The field to count if `count_distinct` is set to true
         * 
         * @return builder
         * 
         */
        public Builder countField(@Nullable Output<String> countField) {
            $.countField = countField;
            return this;
        }

        /**
         * @param countField The field to count if `count_distinct` is set to true
         * 
         * @return builder
         * 
         */
        public Builder countField(String countField) {
            return countField(Output.of(countField));
        }

        /**
         * @param description The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(Output<List<CseThresholdRuleEntitySelectorArgs>> entitySelectors) {
            $.entitySelectors = entitySelectors;
            return this;
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(List<CseThresholdRuleEntitySelectorArgs> entitySelectors) {
            return entitySelectors(Output.of(entitySelectors));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(CseThresholdRuleEntitySelectorArgs... entitySelectors) {
            return entitySelectors(List.of(entitySelectors));
        }

        /**
         * @param expression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(@Nullable Output<List<String>> groupByFields) {
            $.groupByFields = groupByFields;
            return this;
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(List<String> groupByFields) {
            return groupByFields(Output.of(groupByFields));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(String... groupByFields) {
            return groupByFields(List.of(groupByFields));
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(@Nullable Output<Boolean> isPrototype) {
            $.isPrototype = isPrototype;
            return this;
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(Boolean isPrototype) {
            return isPrototype(Output.of(isPrototype));
        }

        /**
         * @param limit A Signal will be fired when this many records/distinct field values are matched
         * 
         * @return builder
         * 
         */
        public Builder limit(Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit A Signal will be fired when this many records/distinct field values are matched
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param name The name of the Rule and the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Rule and the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param severity The severity of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder severity(Output<Integer> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder severity(Integer severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(@Nullable Output<String> summaryExpression) {
            $.summaryExpression = summaryExpression;
            return this;
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(String summaryExpression) {
            return summaryExpression(Output.of(summaryExpression));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param windowSize How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public CseThresholdRuleArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.entitySelectors = Objects.requireNonNull($.entitySelectors, "expected parameter 'entitySelectors' to be non-null");
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.limit = Objects.requireNonNull($.limit, "expected parameter 'limit' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.windowSize = Objects.requireNonNull($.windowSize, "expected parameter 'windowSize' to be non-null");
            return $;
        }
    }

}
