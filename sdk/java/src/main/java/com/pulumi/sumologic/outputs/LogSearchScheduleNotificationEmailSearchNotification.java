// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LogSearchScheduleNotificationEmailSearchNotification {
    /**
     * @return If the search results should be included in the notification email
     * as a CSV attachment.
     * 
     */
    private @Nullable Boolean includeCsvAttachment;
    /**
     * @return If the search result histogram should be included in the notification email.
     * 
     */
    private @Nullable Boolean includeHistogram;
    /**
     * @return If the search query should be included in the notification email.
     * 
     */
    private @Nullable Boolean includeQuery;
    /**
     * @return If the search result set should be included in the notification email.
     * 
     */
    private @Nullable Boolean includeResultSet;
    /**
     * @return Subject of the email. If the notification is scheduled with a threshold,
     * the default subject template will be `Search Alert: {{AlertCondition}} results found for {{SearchName}}`.
     * For email notifications without a threshold, the default subject template is `Search Results: {{SearchName}}`.
     * 
     */
    private @Nullable String subjectTemplate;
    /**
     * @return (Block List, Required) A list of email recipients.
     * 
     */
    private List<String> toLists;

    private LogSearchScheduleNotificationEmailSearchNotification() {}
    /**
     * @return If the search results should be included in the notification email
     * as a CSV attachment.
     * 
     */
    public Optional<Boolean> includeCsvAttachment() {
        return Optional.ofNullable(this.includeCsvAttachment);
    }
    /**
     * @return If the search result histogram should be included in the notification email.
     * 
     */
    public Optional<Boolean> includeHistogram() {
        return Optional.ofNullable(this.includeHistogram);
    }
    /**
     * @return If the search query should be included in the notification email.
     * 
     */
    public Optional<Boolean> includeQuery() {
        return Optional.ofNullable(this.includeQuery);
    }
    /**
     * @return If the search result set should be included in the notification email.
     * 
     */
    public Optional<Boolean> includeResultSet() {
        return Optional.ofNullable(this.includeResultSet);
    }
    /**
     * @return Subject of the email. If the notification is scheduled with a threshold,
     * the default subject template will be `Search Alert: {{AlertCondition}} results found for {{SearchName}}`.
     * For email notifications without a threshold, the default subject template is `Search Results: {{SearchName}}`.
     * 
     */
    public Optional<String> subjectTemplate() {
        return Optional.ofNullable(this.subjectTemplate);
    }
    /**
     * @return (Block List, Required) A list of email recipients.
     * 
     */
    public List<String> toLists() {
        return this.toLists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSearchScheduleNotificationEmailSearchNotification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean includeCsvAttachment;
        private @Nullable Boolean includeHistogram;
        private @Nullable Boolean includeQuery;
        private @Nullable Boolean includeResultSet;
        private @Nullable String subjectTemplate;
        private List<String> toLists;
        public Builder() {}
        public Builder(LogSearchScheduleNotificationEmailSearchNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeCsvAttachment = defaults.includeCsvAttachment;
    	      this.includeHistogram = defaults.includeHistogram;
    	      this.includeQuery = defaults.includeQuery;
    	      this.includeResultSet = defaults.includeResultSet;
    	      this.subjectTemplate = defaults.subjectTemplate;
    	      this.toLists = defaults.toLists;
        }

        @CustomType.Setter
        public Builder includeCsvAttachment(@Nullable Boolean includeCsvAttachment) {
            this.includeCsvAttachment = includeCsvAttachment;
            return this;
        }
        @CustomType.Setter
        public Builder includeHistogram(@Nullable Boolean includeHistogram) {
            this.includeHistogram = includeHistogram;
            return this;
        }
        @CustomType.Setter
        public Builder includeQuery(@Nullable Boolean includeQuery) {
            this.includeQuery = includeQuery;
            return this;
        }
        @CustomType.Setter
        public Builder includeResultSet(@Nullable Boolean includeResultSet) {
            this.includeResultSet = includeResultSet;
            return this;
        }
        @CustomType.Setter
        public Builder subjectTemplate(@Nullable String subjectTemplate) {
            this.subjectTemplate = subjectTemplate;
            return this;
        }
        @CustomType.Setter
        public Builder toLists(List<String> toLists) {
            this.toLists = Objects.requireNonNull(toLists);
            return this;
        }
        public Builder toLists(String... toLists) {
            return toLists(List.of(toLists));
        }
        public LogSearchScheduleNotificationEmailSearchNotification build() {
            final var o = new LogSearchScheduleNotificationEmailSearchNotification();
            o.includeCsvAttachment = includeCsvAttachment;
            o.includeHistogram = includeHistogram;
            o.includeQuery = includeQuery;
            o.includeResultSet = includeResultSet;
            o.subjectTemplate = subjectTemplate;
            o.toLists = toLists;
            return o;
        }
    }
}
