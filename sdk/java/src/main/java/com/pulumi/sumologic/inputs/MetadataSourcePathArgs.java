// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetadataSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetadataSourcePathArgs Empty = new MetadataSourcePathArgs();

    /**
     * List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
     * 
     */
    @Import(name="limitToNamespaces")
    private @Nullable Output<List<String>> limitToNamespaces;

    /**
     * @return List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
     * 
     */
    public Optional<Output<List<String>>> limitToNamespaces() {
        return Optional.ofNullable(this.limitToNamespaces);
    }

    /**
     * List of Amazon regions.
     * 
     */
    @Import(name="limitToRegions")
    private @Nullable Output<List<String>> limitToRegions;

    /**
     * @return List of Amazon regions.
     * 
     */
    public Optional<Output<List<String>>> limitToRegions() {
        return Optional.ofNullable(this.limitToRegions);
    }

    /**
     * Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
     * 
     */
    @Import(name="tagFilters")
    private @Nullable Output<List<String>> tagFilters;

    /**
     * @return Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
     * 
     */
    public Optional<Output<List<String>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    /**
     * type of polling source. Only allowed value is `AwsMetadataPath`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return type of polling source. Only allowed value is `AwsMetadataPath`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private MetadataSourcePathArgs() {}

    private MetadataSourcePathArgs(MetadataSourcePathArgs $) {
        this.limitToNamespaces = $.limitToNamespaces;
        this.limitToRegions = $.limitToRegions;
        this.tagFilters = $.tagFilters;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataSourcePathArgs $;

        public Builder() {
            $ = new MetadataSourcePathArgs();
        }

        public Builder(MetadataSourcePathArgs defaults) {
            $ = new MetadataSourcePathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limitToNamespaces List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(@Nullable Output<List<String>> limitToNamespaces) {
            $.limitToNamespaces = limitToNamespaces;
            return this;
        }

        /**
         * @param limitToNamespaces List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(List<String> limitToNamespaces) {
            return limitToNamespaces(Output.of(limitToNamespaces));
        }

        /**
         * @param limitToNamespaces List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
         * 
         * @return builder
         * 
         */
        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }

        /**
         * @param limitToRegions List of Amazon regions.
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(@Nullable Output<List<String>> limitToRegions) {
            $.limitToRegions = limitToRegions;
            return this;
        }

        /**
         * @param limitToRegions List of Amazon regions.
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(List<String> limitToRegions) {
            return limitToRegions(Output.of(limitToRegions));
        }

        /**
         * @param limitToRegions List of Amazon regions.
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }

        /**
         * @param tagFilters Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(@Nullable Output<List<String>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        /**
         * @param tagFilters Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(List<String> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        /**
         * @param tagFilters Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
         * 
         * @return builder
         * 
         */
        public Builder tagFilters(String... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param type type of polling source. Only allowed value is `AwsMetadataPath`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type type of polling source. Only allowed value is `AwsMetadataPath`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MetadataSourcePathArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
