// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngestBudgetV2Args extends com.pulumi.resources.ResourceArgs {

    public static final IngestBudgetV2Args Empty = new IngestBudgetV2Args();

    /**
     * Action to take when ingest budget&#39;s capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to take when ingest budget&#39;s capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * The threshold as a percentage of when an ingest budget&#39;s capacity usage is logged in the Audit Index.
     * 
     */
    @Import(name="auditThreshold")
    private @Nullable Output<Integer> auditThreshold;

    /**
     * @return The threshold as a percentage of when an ingest budget&#39;s capacity usage is logged in the Audit Index.
     * 
     */
    public Optional<Output<Integer>> auditThreshold() {
        return Optional.ofNullable(this.auditThreshold);
    }

    /**
     * Capacity of the ingest budget, in bytes.
     * 
     */
    @Import(name="capacityBytes", required=true)
    private Output<Integer> capacityBytes;

    /**
     * @return Capacity of the ingest budget, in bytes.
     * 
     */
    public Output<Integer> capacityBytes() {
        return this.capacityBytes;
    }

    /**
     * The description of the collector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the collector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the ingest budget. This must be unique across all of the ingest budgets
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of the ingest budget. This must be unique across all of the ingest budgets
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Reset time of the ingest budget in HH:MM format. Defaults to `00:00`
     * 
     */
    @Import(name="resetTime", required=true)
    private Output<String> resetTime;

    /**
     * @return Reset time of the ingest budget in HH:MM format. Defaults to `00:00`
     * 
     */
    public Output<String> resetTime() {
        return this.resetTime;
    }

    /**
     * A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`
     * 
     */
    @Import(name="timezone", required=true)
    private Output<String> timezone;

    /**
     * @return The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`
     * 
     */
    public Output<String> timezone() {
        return this.timezone;
    }

    private IngestBudgetV2Args() {}

    private IngestBudgetV2Args(IngestBudgetV2Args $) {
        this.action = $.action;
        this.auditThreshold = $.auditThreshold;
        this.capacityBytes = $.capacityBytes;
        this.description = $.description;
        this.name = $.name;
        this.resetTime = $.resetTime;
        this.scope = $.scope;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestBudgetV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestBudgetV2Args $;

        public Builder() {
            $ = new IngestBudgetV2Args();
        }

        public Builder(IngestBudgetV2Args defaults) {
            $ = new IngestBudgetV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take when ingest budget&#39;s capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take when ingest budget&#39;s capacity is reached. All actions are audited. Supported values are `stopCollecting` and `keepCollecting`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param auditThreshold The threshold as a percentage of when an ingest budget&#39;s capacity usage is logged in the Audit Index.
         * 
         * @return builder
         * 
         */
        public Builder auditThreshold(@Nullable Output<Integer> auditThreshold) {
            $.auditThreshold = auditThreshold;
            return this;
        }

        /**
         * @param auditThreshold The threshold as a percentage of when an ingest budget&#39;s capacity usage is logged in the Audit Index.
         * 
         * @return builder
         * 
         */
        public Builder auditThreshold(Integer auditThreshold) {
            return auditThreshold(Output.of(auditThreshold));
        }

        /**
         * @param capacityBytes Capacity of the ingest budget, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder capacityBytes(Output<Integer> capacityBytes) {
            $.capacityBytes = capacityBytes;
            return this;
        }

        /**
         * @param capacityBytes Capacity of the ingest budget, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder capacityBytes(Integer capacityBytes) {
            return capacityBytes(Output.of(capacityBytes));
        }

        /**
         * @param description The description of the collector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the collector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Display name of the ingest budget. This must be unique across all of the ingest budgets
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of the ingest budget. This must be unique across all of the ingest budgets
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resetTime Reset time of the ingest budget in HH:MM format. Defaults to `00:00`
         * 
         * @return builder
         * 
         */
        public Builder resetTime(Output<String> resetTime) {
            $.resetTime = resetTime;
            return this;
        }

        /**
         * @param resetTime Reset time of the ingest budget in HH:MM format. Defaults to `00:00`
         * 
         * @return builder
         * 
         */
        public Builder resetTime(String resetTime) {
            return resetTime(Output.of(resetTime));
        }

        /**
         * @param scope A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope A scope is a constraint that will be used to identify the messages on which budget needs to be applied. A scope is consists of key and value separated by =. The field must be enabled in the fields table.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param timezone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention. Defaults to `Etc/UTC`
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public IngestBudgetV2Args build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.capacityBytes = Objects.requireNonNull($.capacityBytes, "expected parameter 'capacityBytes' to be non-null");
            $.resetTime = Objects.requireNonNull($.resetTime, "expected parameter 'resetTime' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.timezone = Objects.requireNonNull($.timezone, "expected parameter 'timezone' to be non-null");
            return $;
        }
    }

}
