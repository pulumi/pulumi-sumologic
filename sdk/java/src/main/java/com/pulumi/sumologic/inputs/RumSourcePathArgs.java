// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RumSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final RumSourcePathArgs Empty = new RumSourcePathArgs();

    /**
     * (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
     * 
     */
    @Import(name="applicationName")
    private @Nullable Output<String> applicationName;

    /**
     * @return (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
     * 
     */
    public Optional<Output<String>> applicationName() {
        return Optional.ofNullable(this.applicationName);
    }

    /**
     * Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
     * 
     */
    @Import(name="customTags")
    private @Nullable Output<Map<String,String>> customTags;

    /**
     * @return Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
     * 
     */
    public Optional<Output<Map<String,String>>> customTags() {
        return Optional.ofNullable(this.customTags);
    }

    /**
     * Your production, staging, or development environment name.
     * 
     */
    @Import(name="deploymentEnvironment")
    private @Nullable Output<String> deploymentEnvironment;

    /**
     * @return Your production, staging, or development environment name.
     * 
     */
    public Optional<Output<String>> deploymentEnvironment() {
        return Optional.ofNullable(this.deploymentEnvironment);
    }

    /**
     * Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*&#47;, /^https:\/\/api.mydomain.com\/log\/.*&#47;&#34;
     * 
     */
    @Import(name="ignoreUrls")
    private @Nullable Output<List<String>> ignoreUrls;

    /**
     * @return Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*&#47;, /^https:\/\/api.mydomain.com\/log\/.*&#47;&#34;
     * 
     */
    public Optional<Output<List<String>>> ignoreUrls() {
        return Optional.ofNullable(this.ignoreUrls);
    }

    /**
     * (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*&#47;&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*&#47;&#34;.
     * 
     */
    @Import(name="propagateTraceHeaderCorsUrls")
    private @Nullable Output<List<String>> propagateTraceHeaderCorsUrls;

    /**
     * @return (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*&#47;&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*&#47;&#34;.
     * 
     */
    public Optional<Output<List<String>>> propagateTraceHeaderCorsUrls() {
        return Optional.ofNullable(this.propagateTraceHeaderCorsUrls);
    }

    /**
     * Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
     * 
     */
    @Import(name="samplingRate")
    private @Nullable Output<Double> samplingRate;

    /**
     * @return Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
     * 
     */
    public Optional<Output<Double>> samplingRate() {
        return Optional.ofNullable(this.samplingRate);
    }

    /**
     * Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
     * 
     */
    @Import(name="selectedCountry")
    private @Nullable Output<String> selectedCountry;

    /**
     * @return Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
     * 
     */
    public Optional<Output<String>> selectedCountry() {
        return Optional.ofNullable(this.selectedCountry);
    }

    /**
     * Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private RumSourcePathArgs() {}

    private RumSourcePathArgs(RumSourcePathArgs $) {
        this.applicationName = $.applicationName;
        this.customTags = $.customTags;
        this.deploymentEnvironment = $.deploymentEnvironment;
        this.ignoreUrls = $.ignoreUrls;
        this.propagateTraceHeaderCorsUrls = $.propagateTraceHeaderCorsUrls;
        this.samplingRate = $.samplingRate;
        this.selectedCountry = $.selectedCountry;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RumSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RumSourcePathArgs $;

        public Builder() {
            $ = new RumSourcePathArgs();
        }

        public Builder(RumSourcePathArgs defaults) {
            $ = new RumSourcePathArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(@Nullable Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param applicationName (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a &#34;default&#34; application.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        /**
         * @param customTags Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
         * 
         * @return builder
         * 
         */
        public Builder customTags(@Nullable Output<Map<String,String>> customTags) {
            $.customTags = customTags;
            return this;
        }

        /**
         * @param customTags Defines custom tags attached to the spans. For example: &#34;internal.version = 0.1.21&#34;
         * 
         * @return builder
         * 
         */
        public Builder customTags(Map<String,String> customTags) {
            return customTags(Output.of(customTags));
        }

        /**
         * @param deploymentEnvironment Your production, staging, or development environment name.
         * 
         * @return builder
         * 
         */
        public Builder deploymentEnvironment(@Nullable Output<String> deploymentEnvironment) {
            $.deploymentEnvironment = deploymentEnvironment;
            return this;
        }

        /**
         * @param deploymentEnvironment Your production, staging, or development environment name.
         * 
         * @return builder
         * 
         */
        public Builder deploymentEnvironment(String deploymentEnvironment) {
            return deploymentEnvironment(Output.of(deploymentEnvironment));
        }

        /**
         * @param ignoreUrls Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*&#47;, /^https:\/\/api.mydomain.com\/log\/.*&#47;&#34;
         * 
         * @return builder
         * 
         */
        public Builder ignoreUrls(@Nullable Output<List<String>> ignoreUrls) {
            $.ignoreUrls = ignoreUrls;
            return this;
        }

        /**
         * @param ignoreUrls Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*&#47;, /^https:\/\/api.mydomain.com\/log\/.*&#47;&#34;
         * 
         * @return builder
         * 
         */
        public Builder ignoreUrls(List<String> ignoreUrls) {
            return ignoreUrls(Output.of(ignoreUrls));
        }

        /**
         * @param ignoreUrls Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: &#34;/^https:\/\/www.tracker.com\/.*&#47;, /^https:\/\/api.mydomain.com\/log\/.*&#47;&#34;
         * 
         * @return builder
         * 
         */
        public Builder ignoreUrls(String... ignoreUrls) {
            return ignoreUrls(List.of(ignoreUrls));
        }

        /**
         * @param propagateTraceHeaderCorsUrls (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*&#47;&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*&#47;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder propagateTraceHeaderCorsUrls(@Nullable Output<List<String>> propagateTraceHeaderCorsUrls) {
            $.propagateTraceHeaderCorsUrls = propagateTraceHeaderCorsUrls;
            return this;
        }

        /**
         * @param propagateTraceHeaderCorsUrls (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*&#47;&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*&#47;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder propagateTraceHeaderCorsUrls(List<String> propagateTraceHeaderCorsUrls) {
            return propagateTraceHeaderCorsUrls(Output.of(propagateTraceHeaderCorsUrls));
        }

        /**
         * @param propagateTraceHeaderCorsUrls (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are &#34;/^https:\/\/api.mydomain.com\/apiv3\/.*&#47;&#34; and &#34;/^https:\/\/www.3rdparty.com\/.*&#47;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder propagateTraceHeaderCorsUrls(String... propagateTraceHeaderCorsUrls) {
            return propagateTraceHeaderCorsUrls(List.of(propagateTraceHeaderCorsUrls));
        }

        /**
         * @param samplingRate Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(@Nullable Output<Double> samplingRate) {
            $.samplingRate = samplingRate;
            return this;
        }

        /**
         * @param samplingRate Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(Double samplingRate) {
            return samplingRate(Output.of(samplingRate));
        }

        /**
         * @param selectedCountry Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
         * 
         * @return builder
         * 
         */
        public Builder selectedCountry(@Nullable Output<String> selectedCountry) {
            $.selectedCountry = selectedCountry;
            return this;
        }

        /**
         * @param selectedCountry Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
         * 
         * @return builder
         * 
         */
        public Builder selectedCountry(String selectedCountry) {
            return selectedCountry(Output.of(selectedCountry));
        }

        /**
         * @param serviceName Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Add a Service Name of a text string to show for the service name in spans (for example, &#34;bookings-web-app&#34;).
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public RumSourcePathArgs build() {
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("RumSourcePathArgs", "serviceName");
            }
            return $;
        }
    }

}
