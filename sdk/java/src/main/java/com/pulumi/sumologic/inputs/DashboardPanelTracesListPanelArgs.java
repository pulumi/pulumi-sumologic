// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.DashboardPanelTracesListPanelQueryArgs;
import com.pulumi.sumologic.inputs.DashboardPanelTracesListPanelTimeRangeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardPanelTracesListPanelArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardPanelTracesListPanelArgs Empty = new DashboardPanelTracesListPanelArgs();

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="keepVisualSettingsConsistentWithParent")
    private @Nullable Output<Boolean> keepVisualSettingsConsistentWithParent;

    public Optional<Output<Boolean>> keepVisualSettingsConsistentWithParent() {
        return Optional.ofNullable(this.keepVisualSettingsConsistentWithParent);
    }

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    @Import(name="queries")
    private @Nullable Output<List<DashboardPanelTracesListPanelQueryArgs>> queries;

    public Optional<Output<List<DashboardPanelTracesListPanelQueryArgs>>> queries() {
        return Optional.ofNullable(this.queries);
    }

    /**
     * Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<DashboardPanelTracesListPanelTimeRangeArgs> timeRange;

    /**
     * @return Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    public Optional<Output<DashboardPanelTracesListPanelTimeRangeArgs>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    /**
     * Title of the dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="visualSettings")
    private @Nullable Output<String> visualSettings;

    public Optional<Output<String>> visualSettings() {
        return Optional.ofNullable(this.visualSettings);
    }

    private DashboardPanelTracesListPanelArgs() {}

    private DashboardPanelTracesListPanelArgs(DashboardPanelTracesListPanelArgs $) {
        this.id = $.id;
        this.keepVisualSettingsConsistentWithParent = $.keepVisualSettingsConsistentWithParent;
        this.key = $.key;
        this.queries = $.queries;
        this.timeRange = $.timeRange;
        this.title = $.title;
        this.visualSettings = $.visualSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardPanelTracesListPanelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardPanelTracesListPanelArgs $;

        public Builder() {
            $ = new DashboardPanelTracesListPanelArgs();
        }

        public Builder(DashboardPanelTracesListPanelArgs defaults) {
            $ = new DashboardPanelTracesListPanelArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder keepVisualSettingsConsistentWithParent(@Nullable Output<Boolean> keepVisualSettingsConsistentWithParent) {
            $.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
            return this;
        }

        public Builder keepVisualSettingsConsistentWithParent(Boolean keepVisualSettingsConsistentWithParent) {
            return keepVisualSettingsConsistentWithParent(Output.of(keepVisualSettingsConsistentWithParent));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder queries(@Nullable Output<List<DashboardPanelTracesListPanelQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        public Builder queries(List<DashboardPanelTracesListPanelQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        public Builder queries(DashboardPanelTracesListPanelQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param timeRange Time range of the dashboard. See time range schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<DashboardPanelTracesListPanelTimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range of the dashboard. See time range schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(DashboardPanelTracesListPanelTimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visualSettings(@Nullable Output<String> visualSettings) {
            $.visualSettings = visualSettings;
            return this;
        }

        public Builder visualSettings(String visualSettings) {
            return visualSettings(Output.of(visualSettings));
        }

        public DashboardPanelTracesListPanelArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("DashboardPanelTracesListPanelArgs", "key");
            }
            return $;
        }
    }

}
