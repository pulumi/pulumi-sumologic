// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.CseAggregationRuleArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.CseAggregationRuleState;
import com.pulumi.sumologic.outputs.CseAggregationRuleAggregationFunction;
import com.pulumi.sumologic.outputs.CseAggregationRuleEntitySelector;
import com.pulumi.sumologic.outputs.CseAggregationRuleSeverityMapping;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Sumo Logic CSE [Aggregation Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/09_Write_an_Aggregation_Rule).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.CseAggregationRule;
 * import com.pulumi.sumologic.CseAggregationRuleArgs;
 * import com.pulumi.sumologic.inputs.CseAggregationRuleAggregationFunctionArgs;
 * import com.pulumi.sumologic.inputs.CseAggregationRuleEntitySelectorArgs;
 * import com.pulumi.sumologic.inputs.CseAggregationRuleSeverityMappingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var aggregationRule = new CseAggregationRule(&#34;aggregationRule&#34;, CseAggregationRuleArgs.builder()        
 *             .aggregationFunctions(CseAggregationRuleAggregationFunctionArgs.builder()
 *                 .name(&#34;distinct_eventid_count&#34;)
 *                 .function(&#34;count_distinct&#34;)
 *                 .arguments(&#34;metadata_deviceEventId&#34;)
 *                 .build())
 *             .descriptionExpression(&#34;Signal description&#34;)
 *             .enabled(true)
 *             .entitySelectors(CseAggregationRuleEntitySelectorArgs.builder()
 *                 .entityType(&#34;_ip&#34;)
 *                 .expression(&#34;srcDevice_ip&#34;)
 *                 .build())
 *             .groupByEntity(true)
 *             .groupByFields(&#34;dstDevice_hostname&#34;)
 *             .matchExpression(&#34;objectType = \&#34;Network\&#34;&#34;)
 *             .isPrototype(false)
 *             .name(&#34;Aggregation Rule Example&#34;)
 *             .nameExpression(&#34;Signal name&#34;)
 *             .severityMapping(CseAggregationRuleSeverityMappingArgs.builder()
 *                 .type(&#34;constant&#34;)
 *                 .default_(5)
 *                 .build())
 *             .summaryExpression(&#34;Signal summary&#34;)
 *             .tags(&#34;_mitreAttackTactic:TA0009&#34;)
 *             .triggerExpression(&#34;distinct_eventid_count &gt; 5&#34;)
 *             .windowSize(&#34;T30M&#34;)
 *             .suppressionWindowSize(2100000)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Aggregation Rules can be imported using the field id, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/cseAggregationRule:CseAggregationRule aggregation_rule id
 * ```
 * 
 */
@ResourceType(type="sumologic:index/cseAggregationRule:CseAggregationRule")
public class CseAggregationRule extends com.pulumi.resources.CustomResource {
    /**
     * One or more named aggregation functions
     * 
     */
    @Export(name="aggregationFunctions", refs={List.class,CseAggregationRuleAggregationFunction.class}, tree="[0,1]")
    private Output<List<CseAggregationRuleAggregationFunction>> aggregationFunctions;

    /**
     * @return One or more named aggregation functions
     * 
     */
    public Output<List<CseAggregationRuleAggregationFunction>> aggregationFunctions() {
        return this.aggregationFunctions;
    }
    /**
     * The description of the generated Signals
     * 
     */
    @Export(name="descriptionExpression", refs={String.class}, tree="[0]")
    private Output<String> descriptionExpression;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Output<String> descriptionExpression() {
        return this.descriptionExpression;
    }
    /**
     * Whether the rule should generate Signals
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The entities to generate Signals on
     * 
     */
    @Export(name="entitySelectors", refs={List.class,CseAggregationRuleEntitySelector.class}, tree="[0,1]")
    private Output<List<CseAggregationRuleEntitySelector>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * 
     */
    public Output<List<CseAggregationRuleEntitySelector>> entitySelectors() {
        return this.entitySelectors;
    }
    /**
     * Whether to group records by the specified entity fields
     * 
     */
    @Export(name="groupByEntity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> groupByEntity;

    /**
     * @return Whether to group records by the specified entity fields
     * 
     */
    public Output<Optional<Boolean>> groupByEntity() {
        return Codegen.optional(this.groupByEntity);
    }
    /**
     * A list of fields to group records by
     * 
     */
    @Export(name="groupByFields", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Output<Optional<List<String>>> groupByFields() {
        return Codegen.optional(this.groupByFields);
    }
    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Export(name="isPrototype", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Output<Optional<Boolean>> isPrototype() {
        return Codegen.optional(this.isPrototype);
    }
    /**
     * The expression for which records to match on
     * 
     */
    @Export(name="matchExpression", refs={String.class}, tree="[0]")
    private Output<String> matchExpression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Output<String> matchExpression() {
        return this.matchExpression;
    }
    /**
     * The name of the Rule
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the generated Signals
     * 
     */
    @Export(name="nameExpression", refs={String.class}, tree="[0]")
    private Output<String> nameExpression;

    /**
     * @return The name of the generated Signals
     * 
     */
    public Output<String> nameExpression() {
        return this.nameExpression;
    }
    /**
     * The configuration of how the severity of the Signals should be mapped from the Records
     * 
     */
    @Export(name="severityMapping", refs={CseAggregationRuleSeverityMapping.class}, tree="[0]")
    private Output<CseAggregationRuleSeverityMapping> severityMapping;

    /**
     * @return The configuration of how the severity of the Signals should be mapped from the Records
     * 
     */
    public Output<CseAggregationRuleSeverityMapping> severityMapping() {
        return this.severityMapping;
    }
    /**
     * The summary of the generated Signals
     * 
     */
    @Export(name="summaryExpression", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Output<Optional<String>> summaryExpression() {
        return Codegen.optional(this.summaryExpression);
    }
    /**
     * For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    @Export(name="suppressionWindowSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> suppressionWindowSize;

    /**
     * @return For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    public Output<Optional<Integer>> suppressionWindowSize() {
        return Codegen.optional(this.suppressionWindowSize);
    }
    /**
     * The tags of the generated Signals
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The expression to determine whether a Signal should be created based on the aggregation results
     * 
     */
    @Export(name="triggerExpression", refs={String.class}, tree="[0]")
    private Output<String> triggerExpression;

    /**
     * @return The expression to determine whether a Signal should be created based on the aggregation results
     * 
     */
    public Output<String> triggerExpression() {
        return this.triggerExpression;
    }
    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, T05D or CUSTOM
     * 
     */
    @Export(name="windowSize", refs={String.class}, tree="[0]")
    private Output<String> windowSize;

    /**
     * @return How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, T05D or CUSTOM
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }
    @Export(name="windowSizeMillis", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> windowSizeMillis;

    public Output<Optional<String>> windowSizeMillis() {
        return Codegen.optional(this.windowSizeMillis);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CseAggregationRule(String name) {
        this(name, CseAggregationRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CseAggregationRule(String name, CseAggregationRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CseAggregationRule(String name, CseAggregationRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseAggregationRule:CseAggregationRule", name, args == null ? CseAggregationRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CseAggregationRule(String name, Output<String> id, @Nullable CseAggregationRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseAggregationRule:CseAggregationRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CseAggregationRule get(String name, Output<String> id, @Nullable CseAggregationRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CseAggregationRule(name, id, state, options);
    }
}
