// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.resources.InvokeArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.GetAdminRecommendedFolderArgs;
import com.pulumi.sumologic.inputs.GetAdminRecommendedFolderPlainArgs;
import com.pulumi.sumologic.inputs.GetCollectorArgs;
import com.pulumi.sumologic.inputs.GetCollectorPlainArgs;
import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;
import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductPlainArgs;
import com.pulumi.sumologic.inputs.GetFolderArgs;
import com.pulumi.sumologic.inputs.GetFolderPlainArgs;
import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
import com.pulumi.sumologic.inputs.GetHttpSourcePlainArgs;
import com.pulumi.sumologic.inputs.GetMyUserIdArgs;
import com.pulumi.sumologic.inputs.GetMyUserIdPlainArgs;
import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
import com.pulumi.sumologic.inputs.GetPersonalFolderPlainArgs;
import com.pulumi.sumologic.inputs.GetRoleArgs;
import com.pulumi.sumologic.inputs.GetRolePlainArgs;
import com.pulumi.sumologic.inputs.GetUserArgs;
import com.pulumi.sumologic.inputs.GetUserPlainArgs;
import com.pulumi.sumologic.outputs.GetAdminRecommendedFolderResult;
import com.pulumi.sumologic.outputs.GetCallerIdentityResult;
import com.pulumi.sumologic.outputs.GetCollectorResult;
import com.pulumi.sumologic.outputs.GetCseLogMappingVendorProductResult;
import com.pulumi.sumologic.outputs.GetFolderResult;
import com.pulumi.sumologic.outputs.GetHttpSourceResult;
import com.pulumi.sumologic.outputs.GetMyUserIdResult;
import com.pulumi.sumologic.outputs.GetPersonalFolderResult;
import com.pulumi.sumologic.outputs.GetRoleResult;
import com.pulumi.sumologic.outputs.GetUserResult;
import java.util.concurrent.CompletableFuture;

public final class SumologicFunctions {
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static Output<GetAdminRecommendedFolderResult> getAdminRecommendedFolder() {
        return getAdminRecommendedFolder(GetAdminRecommendedFolderArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static CompletableFuture<GetAdminRecommendedFolderResult> getAdminRecommendedFolderPlain() {
        return getAdminRecommendedFolderPlain(GetAdminRecommendedFolderPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static Output<GetAdminRecommendedFolderResult> getAdminRecommendedFolder(GetAdminRecommendedFolderArgs args) {
        return getAdminRecommendedFolder(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static CompletableFuture<GetAdminRecommendedFolderResult> getAdminRecommendedFolderPlain(GetAdminRecommendedFolderPlainArgs args) {
        return getAdminRecommendedFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static Output<GetAdminRecommendedFolderResult> getAdminRecommendedFolder(GetAdminRecommendedFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getAdminRecommendedFolder:getAdminRecommendedFolder", TypeShape.of(GetAdminRecommendedFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve the Admin Recommended Folder.
     * 
     * In order to use the Admin Recommended Folder, you should configure the provider to run in admin mode.
     * Please refer to the Example Usage section below for more details.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Admin Recommended Folder.
     * - `name` - The name of the Admin Recommended Folder.
     * - `description` - The description of the Admin Recommended Folder.
     * 
     */
    public static CompletableFuture<GetAdminRecommendedFolderResult> getAdminRecommendedFolderPlain(GetAdminRecommendedFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getAdminRecommendedFolder:getAdminRecommendedFolder", TypeShape.of(GetAdminRecommendedFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static Output<GetCallerIdentityResult> getCallerIdentity() {
        return getCallerIdentity(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static CompletableFuture<GetCallerIdentityResult> getCallerIdentityPlain() {
        return getCallerIdentityPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static Output<GetCallerIdentityResult> getCallerIdentity(InvokeArgs args) {
        return getCallerIdentity(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static CompletableFuture<GetCallerIdentityResult> getCallerIdentityPlain(InvokeArgs args) {
        return getCallerIdentityPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static Output<GetCallerIdentityResult> getCallerIdentity(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getCallerIdentity:getCallerIdentity", TypeShape.of(GetCallerIdentityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve Sumo Logic auth details.
     * 
     * ## Example Usage
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `access_id` - Sumo Logic access ID.
     * - `environment` - API endpoint environment.
     * 
     */
    public static CompletableFuture<GetCallerIdentityResult> getCallerIdentityPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getCallerIdentity:getCallerIdentity", TypeShape.of(GetCallerIdentityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static Output<GetCollectorResult> getCollector() {
        return getCollector(GetCollectorArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static CompletableFuture<GetCollectorResult> getCollectorPlain() {
        return getCollectorPlain(GetCollectorPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static Output<GetCollectorResult> getCollector(GetCollectorArgs args) {
        return getCollector(args, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static CompletableFuture<GetCollectorResult> getCollectorPlain(GetCollectorPlainArgs args) {
        return getCollectorPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static Output<GetCollectorResult> getCollector(GetCollectorArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getCollector:getCollector", TypeShape.of(GetCollectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .name(&#34;MyCollector&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCollectorArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getCollector(GetCollectorArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * 
     */
    public static CompletableFuture<GetCollectorResult> getCollectorPlain(GetCollectorPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getCollector:getCollector", TypeShape.of(GetCollectorResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webGateway = SumologicFunctions.getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs.builder()
     *             .product(&#34;Web Gateway&#34;)
     *             .vendor(&#34;McAfee&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A Log mapping vendor product can be looked up by providing values of `product` and `vendor`
     * Both `product` and `vendor` values are mandatory. If not provided an error will be generated.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `guid` - The internal GUID of the log mapping vendor product.
     * - `product` - The name of the product.
     * - `vendor` - The name of the vendor.
     * 
     */
    public static Output<GetCseLogMappingVendorProductResult> getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs args) {
        return getCseLogMappingVendorProduct(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webGateway = SumologicFunctions.getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs.builder()
     *             .product(&#34;Web Gateway&#34;)
     *             .vendor(&#34;McAfee&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A Log mapping vendor product can be looked up by providing values of `product` and `vendor`
     * Both `product` and `vendor` values are mandatory. If not provided an error will be generated.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `guid` - The internal GUID of the log mapping vendor product.
     * - `product` - The name of the product.
     * - `vendor` - The name of the vendor.
     * 
     */
    public static CompletableFuture<GetCseLogMappingVendorProductResult> getCseLogMappingVendorProductPlain(GetCseLogMappingVendorProductPlainArgs args) {
        return getCseLogMappingVendorProductPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webGateway = SumologicFunctions.getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs.builder()
     *             .product(&#34;Web Gateway&#34;)
     *             .vendor(&#34;McAfee&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A Log mapping vendor product can be looked up by providing values of `product` and `vendor`
     * Both `product` and `vendor` values are mandatory. If not provided an error will be generated.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `guid` - The internal GUID of the log mapping vendor product.
     * - `product` - The name of the product.
     * - `vendor` - The name of the vendor.
     * 
     */
    public static Output<GetCseLogMappingVendorProductResult> getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getCseLogMappingVendorProduct:getCseLogMappingVendorProduct", TypeShape.of(GetCseLogMappingVendorProductResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetCseLogMappingVendorProductArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var webGateway = SumologicFunctions.getCseLogMappingVendorProduct(GetCseLogMappingVendorProductArgs.builder()
     *             .product(&#34;Web Gateway&#34;)
     *             .vendor(&#34;McAfee&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A Log mapping vendor product can be looked up by providing values of `product` and `vendor`
     * Both `product` and `vendor` values are mandatory. If not provided an error will be generated.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `guid` - The internal GUID of the log mapping vendor product.
     * - `product` - The name of the product.
     * - `vendor` - The name of the vendor.
     * 
     */
    public static CompletableFuture<GetCseLogMappingVendorProductResult> getCseLogMappingVendorProductPlain(GetCseLogMappingVendorProductPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getCseLogMappingVendorProduct:getCseLogMappingVendorProduct", TypeShape.of(GetCseLogMappingVendorProductResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve a folder.
     * 
     * You must specify the absolute path of the folder to retrieve. The content library has &#34;Library&#34;
     * folder at the root level. For items in &#34;Personal&#34; folder, the base path is &#34;/Library/Users/user@sumologic.com&#34;
     * where &#34;user@sumologic.com&#34; is the email address of the user. For example, if a user with email address
     * `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be
     * `/Library/Users/wile@acme.com/Rockets`.
     * 
     * For items in &#34;Admin Recommended&#34; folder, the base path is &#34;/Library/Admin Recommended&#34;. For example,
     * given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the folder.
     * - `name` - The name of the folder.
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args) {
        return getFolder(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve a folder.
     * 
     * You must specify the absolute path of the folder to retrieve. The content library has &#34;Library&#34;
     * folder at the root level. For items in &#34;Personal&#34; folder, the base path is &#34;/Library/Users/user@sumologic.com&#34;
     * where &#34;user@sumologic.com&#34; is the email address of the user. For example, if a user with email address
     * `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be
     * `/Library/Users/wile@acme.com/Rockets`.
     * 
     * For items in &#34;Admin Recommended&#34; folder, the base path is &#34;/Library/Admin Recommended&#34;. For example,
     * given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the folder.
     * - `name` - The name of the folder.
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args) {
        return getFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve a folder.
     * 
     * You must specify the absolute path of the folder to retrieve. The content library has &#34;Library&#34;
     * folder at the root level. For items in &#34;Personal&#34; folder, the base path is &#34;/Library/Users/user@sumologic.com&#34;
     * where &#34;user@sumologic.com&#34; is the email address of the user. For example, if a user with email address
     * `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be
     * `/Library/Users/wile@acme.com/Rockets`.
     * 
     * For items in &#34;Admin Recommended&#34; folder, the base path is &#34;/Library/Admin Recommended&#34;. For example,
     * given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the folder.
     * - `name` - The name of the folder.
     * 
     */
    public static Output<GetFolderResult> getFolder(GetFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve a folder.
     * 
     * You must specify the absolute path of the folder to retrieve. The content library has &#34;Library&#34;
     * folder at the root level. For items in &#34;Personal&#34; folder, the base path is &#34;/Library/Users/user@sumologic.com&#34;
     * where &#34;user@sumologic.com&#34; is the email address of the user. For example, if a user with email address
     * `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be
     * `/Library/Users/wile@acme.com/Rockets`.
     * 
     * For items in &#34;Admin Recommended&#34; folder, the base path is &#34;/Library/Admin Recommended&#34;. For example,
     * given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
     * 
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the folder.
     * - `name` - The name of the folder.
     * 
     */
    public static CompletableFuture<GetFolderResult> getFolderPlain(GetFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getFolder:getFolder", TypeShape.of(GetFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static Output<GetHttpSourceResult> getHttpSource() {
        return getHttpSource(GetHttpSourceArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static CompletableFuture<GetHttpSourceResult> getHttpSourcePlain() {
        return getHttpSourcePlain(GetHttpSourcePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static Output<GetHttpSourceResult> getHttpSource(GetHttpSourceArgs args) {
        return getHttpSource(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static CompletableFuture<GetHttpSourceResult> getHttpSourcePlain(GetHttpSourcePlainArgs args) {
        return getHttpSourcePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static Output<GetHttpSourceResult> getHttpSource(GetHttpSourceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getHttpSource:getHttpSource", TypeShape.of(GetHttpSourceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetHttpSourceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getHttpSource(GetHttpSourceArgs.builder()
     *             .collectorId(121212)
     *             .name(&#34;source_name&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
     * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
     * - `name` - The name of the collector.
     * - `description` - The description of the collector.
     * - `category` - The default source category for any source attached to this collector.
     * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
     * - `multiline` - Multiline processing enabled or not.
     * - `url` - The HTTP endpoint to use for sending data to this source.
     * 
     */
    public static CompletableFuture<GetHttpSourceResult> getHttpSourcePlain(GetHttpSourcePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getHttpSource:getHttpSource", TypeShape.of(GetHttpSourceResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetMyUserIdResult> getMyUserId() {
        return getMyUserId(GetMyUserIdArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetMyUserIdResult> getMyUserIdPlain() {
        return getMyUserIdPlain(GetMyUserIdPlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<GetMyUserIdResult> getMyUserId(GetMyUserIdArgs args) {
        return getMyUserId(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetMyUserIdResult> getMyUserIdPlain(GetMyUserIdPlainArgs args) {
        return getMyUserIdPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetMyUserIdResult> getMyUserId(GetMyUserIdArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getMyUserId:getMyUserId", TypeShape.of(GetMyUserIdResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetMyUserIdResult> getMyUserIdPlain(GetMyUserIdPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getMyUserId:getMyUserId", TypeShape.of(GetMyUserIdResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static Output<GetPersonalFolderResult> getPersonalFolder() {
        return getPersonalFolder(GetPersonalFolderArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static CompletableFuture<GetPersonalFolderResult> getPersonalFolderPlain() {
        return getPersonalFolderPlain(GetPersonalFolderPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static Output<GetPersonalFolderResult> getPersonalFolder(GetPersonalFolderArgs args) {
        return getPersonalFolder(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static CompletableFuture<GetPersonalFolderResult> getPersonalFolderPlain(GetPersonalFolderPlainArgs args) {
        return getPersonalFolderPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static Output<GetPersonalFolderResult> getPersonalFolder(GetPersonalFolderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getPersonalFolder:getPersonalFolder", TypeShape.of(GetPersonalFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides an easy way to retrieve the Personal Folder.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var personalFolder = SumologicFunctions.getPersonalFolder();
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The ID of the Personal Folder.
     * - `name` - The name of the Personal Folder.
     * - `description` - The description of the Personal Folder.
     * 
     */
    public static CompletableFuture<GetPersonalFolderResult> getPersonalFolderPlain(GetPersonalFolderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getPersonalFolder:getPersonalFolder", TypeShape.of(GetPersonalFolderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static Output<GetRoleResult> getRole() {
        return getRole(GetRoleArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain() {
        return getRolePlain(GetRolePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args) {
        return getRole(args, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args) {
        return getRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static Output<GetRoleResult> getRole(GetRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .name(&#34;MyRole&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getRole(GetRoleArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
     * 
     * If both `id` and `name` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the role. This can be used to create users having that role.
     * - `name` - The name of the role.
     * - `description` - The description of the role.
     * - `filter_predicate` - The search filter to restrict access to specific logs.
     * - `capabilities` - The list of capabilities associated with the role.
     * 
     */
    public static CompletableFuture<GetRoleResult> getRolePlain(GetRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getRole:getRole", TypeShape.of(GetRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static Output<GetUserResult> getUser() {
        return getUser(GetUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain() {
        return getUserPlain(GetUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("sumologic:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var this = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .id(&#34;1234567890&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.sumologic.SumologicFunctions;
     * import com.pulumi.sumologic.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var that = SumologicFunctions.getUser(GetUserArgs.builder()
     *             .email(&#34;user@example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * A user can be looked up by either `id` or `email`. One of those attributes needs to be specified.
     * 
     * If both `id` and `email` have been specified, `id` takes precedence.
     * ## Attributes reference
     * 
     * The following attributes are exported:
     * 
     * - `id` - The internal ID of the user.
     * - `email` - (Required) Email of the user.
     * - `first_name` - (Required) First name of the user.
     * - `last_name` - (Required) Last name of the user.
     * - `is_active` - (Required) This has the value true if the user is active and false if they have been deactivated.
     * - `role_ids` - (Required) List of roleIds associated with the user.
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("sumologic:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
}
