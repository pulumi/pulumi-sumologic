// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.DashboardPanelTracesListPanelQuery;
import com.pulumi.sumologic.outputs.DashboardPanelTracesListPanelTimeRange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardPanelTracesListPanel {
    private @Nullable String id;
    private @Nullable Boolean keepVisualSettingsConsistentWithParent;
    private String key;
    private @Nullable List<DashboardPanelTracesListPanelQuery> queries;
    /**
     * @return Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    private @Nullable DashboardPanelTracesListPanelTimeRange timeRange;
    /**
     * @return Title of the dashboard.
     * 
     */
    private @Nullable String title;
    private @Nullable String visualSettings;

    private DashboardPanelTracesListPanel() {}
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Boolean> keepVisualSettingsConsistentWithParent() {
        return Optional.ofNullable(this.keepVisualSettingsConsistentWithParent);
    }
    public String key() {
        return this.key;
    }
    public List<DashboardPanelTracesListPanelQuery> queries() {
        return this.queries == null ? List.of() : this.queries;
    }
    /**
     * @return Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    public Optional<DashboardPanelTracesListPanelTimeRange> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }
    /**
     * @return Title of the dashboard.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    public Optional<String> visualSettings() {
        return Optional.ofNullable(this.visualSettings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardPanelTracesListPanel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String id;
        private @Nullable Boolean keepVisualSettingsConsistentWithParent;
        private String key;
        private @Nullable List<DashboardPanelTracesListPanelQuery> queries;
        private @Nullable DashboardPanelTracesListPanelTimeRange timeRange;
        private @Nullable String title;
        private @Nullable String visualSettings;
        public Builder() {}
        public Builder(DashboardPanelTracesListPanel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.keepVisualSettingsConsistentWithParent = defaults.keepVisualSettingsConsistentWithParent;
    	      this.key = defaults.key;
    	      this.queries = defaults.queries;
    	      this.timeRange = defaults.timeRange;
    	      this.title = defaults.title;
    	      this.visualSettings = defaults.visualSettings;
        }

        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keepVisualSettingsConsistentWithParent(@Nullable Boolean keepVisualSettingsConsistentWithParent) {

            this.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("DashboardPanelTracesListPanel", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder queries(@Nullable List<DashboardPanelTracesListPanelQuery> queries) {

            this.queries = queries;
            return this;
        }
        public Builder queries(DashboardPanelTracesListPanelQuery... queries) {
            return queries(List.of(queries));
        }
        @CustomType.Setter
        public Builder timeRange(@Nullable DashboardPanelTracesListPanelTimeRange timeRange) {

            this.timeRange = timeRange;
            return this;
        }
        @CustomType.Setter
        public Builder title(@Nullable String title) {

            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder visualSettings(@Nullable String visualSettings) {

            this.visualSettings = visualSettings;
            return this;
        }
        public DashboardPanelTracesListPanel build() {
            final var _resultValue = new DashboardPanelTracesListPanel();
            _resultValue.id = id;
            _resultValue.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
            _resultValue.key = key;
            _resultValue.queries = queries;
            _resultValue.timeRange = timeRange;
            _resultValue.title = title;
            _resultValue.visualSettings = visualSettings;
            return _resultValue;
        }
    }
}
