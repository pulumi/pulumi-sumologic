// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final FieldArgs Empty = new FieldArgs();

    /**
     * Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
     * 
     */
    @Import(name="dataType")
    private @Nullable Output<String> dataType;

    /**
     * @return Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
     * 
     */
    public Optional<Output<String>> dataType() {
        return Optional.ofNullable(this.dataType);
    }

    /**
     * Name of the field.
     * 
     */
    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    /**
     * @return Name of the field.
     * 
     */
    public Output<String> fieldName() {
        return this.fieldName;
    }

    /**
     * State of the field (either `Enabled` or `Disabled`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the field (either `Enabled` or `Disabled`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private FieldArgs() {}

    private FieldArgs(FieldArgs $) {
        this.dataType = $.dataType;
        this.fieldName = $.fieldName;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldArgs $;

        public Builder() {
            $ = new FieldArgs();
        }

        public Builder(FieldArgs defaults) {
            $ = new FieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
         * 
         * @return builder
         * 
         */
        public Builder dataType(@Nullable Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param fieldName Name of the field.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName Name of the field.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param state State of the field (either `Enabled` or `Disabled`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the field (either `Enabled` or `Disabled`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public FieldArgs build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            return $;
        }
    }

}
