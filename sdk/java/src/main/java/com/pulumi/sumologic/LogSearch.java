// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.LogSearchArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.LogSearchState;
import com.pulumi.sumologic.outputs.LogSearchQueryParameter;
import com.pulumi.sumologic.outputs.LogSearchSchedule;
import com.pulumi.sumologic.outputs.LogSearchTimeRange;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Sumologic Log Search.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SumologicFunctions;
 * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
 * import com.pulumi.sumologic.LogSearch;
 * import com.pulumi.sumologic.LogSearchArgs;
 * import com.pulumi.sumologic.inputs.LogSearchTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchTimeRangeBeginBoundedTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchTimeRangeBeginBoundedTimeRangeFromArgs;
 * import com.pulumi.sumologic.inputs.LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchQueryParameterArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleNotificationArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleNotificationEmailSearchNotificationArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleParseableTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.LogSearchScheduleThresholdArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var personalFolder = SumologicFunctions.getPersonalFolder();
 * 
 *         var exampleLogSearch = new LogSearch(&#34;exampleLogSearch&#34;, LogSearchArgs.builder()        
 *             .description(&#34;Demo search description&#34;)
 *             .parentId(personalFolder.applyValue(getPersonalFolderResult -&gt; getPersonalFolderResult.id()))
 *             .queryString(&#34;&#34;&#34;
 *         _sourceCategory=api
 *         | parse &#34;parameter1=*,&#34; as parameter1
 *         | parse &#34;parameter2=*,&#34; as parameter2
 *         | where parameter1 matches {{param1}}
 *         | where parameter2 matches {{param2}}
 *         | count by _sourceHost
 *             &#34;&#34;&#34;)
 *             .parsingMode(&#34;AutoParse&#34;)
 *             .runByReceiptTime(true)
 *             .timeRange(LogSearchTimeRangeArgs.builder()
 *                 .beginBoundedTimeRange(LogSearchTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                     .from(LogSearchTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                         .relativeTimeRange(LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()
 *                             .relativeTime(&#34;-30m&#34;)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .queryParameters(            
 *                 LogSearchQueryParameterArgs.builder()
 *                     .name(&#34;param1&#34;)
 *                     .description(&#34;Description for param1&#34;)
 *                     .dataType(&#34;STRING&#34;)
 *                     .value(&#34;*&#34;)
 *                     .build(),
 *                 LogSearchQueryParameterArgs.builder()
 *                     .name(&#34;param2&#34;)
 *                     .description(&#34;Description for param2&#34;)
 *                     .dataType(&#34;STRING&#34;)
 *                     .value(&#34;*&#34;)
 *                     .build())
 *             .schedule(LogSearchScheduleArgs.builder()
 *                 .cronExpression(&#34;0 0 * * * ? *&#34;)
 *                 .muteErrorEmails(false)
 *                 .notification(LogSearchScheduleNotificationArgs.builder()
 *                     .emailSearchNotification(LogSearchScheduleNotificationEmailSearchNotificationArgs.builder()
 *                         .includeCsvAttachment(false)
 *                         .includeHistogram(false)
 *                         .includeQuery(true)
 *                         .includeResultSet(true)
 *                         .subjectTemplate(&#34;Search Alert: {{TriggerCondition}} found for {{SearchName}}&#34;)
 *                         .toLists(&#34;will@acme.com&#34;)
 *                         .build())
 *                     .build())
 *                 .parseableTimeRange(LogSearchScheduleParseableTimeRangeArgs.builder()
 *                     .beginBoundedTimeRange(LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                         .from(LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                             .relativeTimeRange(LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()
 *                                 .relativeTime(&#34;-15m&#34;)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .scheduleType(&#34;1Week&#34;)
 *                 .threshold(LogSearchScheduleThresholdArgs.builder()
 *                     .count(10)
 *                     .operator(&#34;gt&#34;)
 *                     .thresholdType(&#34;group&#34;)
 *                     .build())
 *                 .timeZone(&#34;America/Los_Angeles&#34;)
 *                 .parameters(                
 *                     LogSearchScheduleParameterArgs.builder()
 *                         .name(&#34;param1&#34;)
 *                         .value(&#34;*&#34;)
 *                         .build(),
 *                     LogSearchScheduleParameterArgs.builder()
 *                         .name(&#34;param2&#34;)
 *                         .value(&#34;*&#34;)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Attributes reference
 * 
 * In addition to all arguments above, the following attributes are exported:
 * 
 * - `id` - The ID of the log search.
 * 
 * ## Import
 * 
 * A log search can be imported using it&#39;s identifier, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/logSearch:LogSearch example_search 0000000007FFD79D
 * ```
 * 
 */
@ResourceType(type="sumologic:index/logSearch:LogSearch")
public class LogSearch extends com.pulumi.resources.CustomResource {
    /**
     * Description of the search.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the search.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Name of the search.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the search.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The identifier of the folder to create the log search in.
     * 
     */
    @Export(name="parentId", refs={String.class}, tree="[0]")
    private Output<String> parentId;

    /**
     * @return The identifier of the folder to create the log search in.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }
    /**
     * Define the parsing mode to scan the JSON format log messages. Possible values are:
     * `AutoParse` and  `Manual`. Default value is `Manual`.
     * 
     * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
     * the `Manual` mode, no fields are parsed out automatically. For more information see
     * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
     * 
     */
    @Export(name="parsingMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> parsingMode;

    /**
     * @return Define the parsing mode to scan the JSON format log messages. Possible values are:
     * `AutoParse` and  `Manual`. Default value is `Manual`.
     * 
     * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
     * the `Manual` mode, no fields are parsed out automatically. For more information see
     * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
     * 
     */
    public Output<Optional<String>> parsingMode() {
        return Codegen.optional(this.parsingMode);
    }
    /**
     * Up to 10 `query_parameter` blocks can be added one for each parameter in the `query_string`.
     * See query parameter schema.
     * 
     */
    @Export(name="queryParameters", refs={List.class,LogSearchQueryParameter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LogSearchQueryParameter>> queryParameters;

    /**
     * @return Up to 10 `query_parameter` blocks can be added one for each parameter in the `query_string`.
     * See query parameter schema.
     * 
     */
    public Output<Optional<List<LogSearchQueryParameter>>> queryParameters() {
        return Codegen.optional(this.queryParameters);
    }
    /**
     * Log query to perform.
     * 
     */
    @Export(name="queryString", refs={String.class}, tree="[0]")
    private Output<String> queryString;

    /**
     * @return Log query to perform.
     * 
     */
    public Output<String> queryString() {
        return this.queryString;
    }
    /**
     * This has the value `true` if the search is to be run by receipt time and
     * `false` if it is to be run by message time. Default value is `false`.
     * 
     */
    @Export(name="runByReceiptTime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> runByReceiptTime;

    /**
     * @return This has the value `true` if the search is to be run by receipt time and
     * `false` if it is to be run by message time. Default value is `false`.
     * 
     */
    public Output<Optional<Boolean>> runByReceiptTime() {
        return Codegen.optional(this.runByReceiptTime);
    }
    /**
     * Schedule of the log search. See schedule schema
     * 
     */
    @Export(name="schedule", refs={LogSearchSchedule.class}, tree="[0]")
    private Output</* @Nullable */ LogSearchSchedule> schedule;

    /**
     * @return Schedule of the log search. See schedule schema
     * 
     */
    public Output<Optional<LogSearchSchedule>> schedule() {
        return Codegen.optional(this.schedule);
    }
    /**
     * Time range of the log search. See time range schema
     * 
     */
    @Export(name="timeRange", refs={LogSearchTimeRange.class}, tree="[0]")
    private Output<LogSearchTimeRange> timeRange;

    /**
     * @return Time range of the log search. See time range schema
     * 
     */
    public Output<LogSearchTimeRange> timeRange() {
        return this.timeRange;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LogSearch(String name) {
        this(name, LogSearchArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LogSearch(String name, LogSearchArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LogSearch(String name, LogSearchArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/logSearch:LogSearch", name, args == null ? LogSearchArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LogSearch(String name, Output<String> id, @Nullable LogSearchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/logSearch:LogSearch", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LogSearch get(String name, Output<String> id, @Nullable LogSearchState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LogSearch(name, id, state, options);
    }
}
