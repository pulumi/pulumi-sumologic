// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LogSearchScheduleNotificationSaveToLookupNotification {
    /**
     * @return Whether to merge the file contents with existing data in the lookup table.
     * 
     */
    private Boolean isLookupMergeOperation;
    /**
     * @return Path of the lookup table to save the results to.
     * 
     */
    private String lookupFilePath;

    private LogSearchScheduleNotificationSaveToLookupNotification() {}
    /**
     * @return Whether to merge the file contents with existing data in the lookup table.
     * 
     */
    public Boolean isLookupMergeOperation() {
        return this.isLookupMergeOperation;
    }
    /**
     * @return Path of the lookup table to save the results to.
     * 
     */
    public String lookupFilePath() {
        return this.lookupFilePath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogSearchScheduleNotificationSaveToLookupNotification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isLookupMergeOperation;
        private String lookupFilePath;
        public Builder() {}
        public Builder(LogSearchScheduleNotificationSaveToLookupNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isLookupMergeOperation = defaults.isLookupMergeOperation;
    	      this.lookupFilePath = defaults.lookupFilePath;
        }

        @CustomType.Setter
        public Builder isLookupMergeOperation(Boolean isLookupMergeOperation) {
            this.isLookupMergeOperation = Objects.requireNonNull(isLookupMergeOperation);
            return this;
        }
        @CustomType.Setter
        public Builder lookupFilePath(String lookupFilePath) {
            this.lookupFilePath = Objects.requireNonNull(lookupFilePath);
            return this;
        }
        public LogSearchScheduleNotificationSaveToLookupNotification build() {
            final var _resultValue = new LogSearchScheduleNotificationSaveToLookupNotification();
            _resultValue.isLookupMergeOperation = isLookupMergeOperation;
            _resultValue.lookupFilePath = lookupFilePath;
            return _resultValue;
        }
    }
}
