// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs Empty = new MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs();

    @Import(name="minAnomalyCount")
    private @Nullable Output<Integer> minAnomalyCount;

    public Optional<Output<Integer>> minAnomalyCount() {
        return Optional.ofNullable(this.minAnomalyCount);
    }

    @Import(name="sensitivity")
    private @Nullable Output<Double> sensitivity;

    public Optional<Output<Double>> sensitivity() {
        return Optional.ofNullable(this.sensitivity);
    }

    @Import(name="timeRange", required=true)
    private Output<String> timeRange;

    public Output<String> timeRange() {
        return this.timeRange;
    }

    private MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs() {}

    private MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs(MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs $) {
        this.minAnomalyCount = $.minAnomalyCount;
        this.sensitivity = $.sensitivity;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs $;

        public Builder() {
            $ = new MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs();
        }

        public Builder(MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs defaults) {
            $ = new MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs(Objects.requireNonNull(defaults));
        }

        public Builder minAnomalyCount(@Nullable Output<Integer> minAnomalyCount) {
            $.minAnomalyCount = minAnomalyCount;
            return this;
        }

        public Builder minAnomalyCount(Integer minAnomalyCount) {
            return minAnomalyCount(Output.of(minAnomalyCount));
        }

        public Builder sensitivity(@Nullable Output<Double> sensitivity) {
            $.sensitivity = sensitivity;
            return this;
        }

        public Builder sensitivity(Double sensitivity) {
            return sensitivity(Output.of(sensitivity));
        }

        public Builder timeRange(Output<String> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        public Builder timeRange(String timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs build() {
            if ($.timeRange == null) {
                throw new MissingRequiredPropertyException("MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs", "timeRange");
            }
            return $;
        }
    }

}
