// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class CseOutlierRuleAggregationFunctionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseOutlierRuleAggregationFunctionsArgs Empty = new CseOutlierRuleAggregationFunctionsArgs();

    @Import(name="arguments", required=true)
    private Output<List<String>> arguments;

    public Output<List<String>> arguments() {
        return this.arguments;
    }

    @Import(name="function", required=true)
    private Output<String> function;

    public Output<String> function() {
        return this.function;
    }

    /**
     * The name of the Rule
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private CseOutlierRuleAggregationFunctionsArgs() {}

    private CseOutlierRuleAggregationFunctionsArgs(CseOutlierRuleAggregationFunctionsArgs $) {
        this.arguments = $.arguments;
        this.function = $.function;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseOutlierRuleAggregationFunctionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseOutlierRuleAggregationFunctionsArgs $;

        public Builder() {
            $ = new CseOutlierRuleAggregationFunctionsArgs();
        }

        public Builder(CseOutlierRuleAggregationFunctionsArgs defaults) {
            $ = new CseOutlierRuleAggregationFunctionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder arguments(Output<List<String>> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(List<String> arguments) {
            return arguments(Output.of(arguments));
        }

        public Builder arguments(String... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder function(Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CseOutlierRuleAggregationFunctionsArgs build() {
            if ($.arguments == null) {
                throw new MissingRequiredPropertyException("CseOutlierRuleAggregationFunctionsArgs", "arguments");
            }
            if ($.function == null) {
                throw new MissingRequiredPropertyException("CseOutlierRuleAggregationFunctionsArgs", "function");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CseOutlierRuleAggregationFunctionsArgs", "name");
            }
            return $;
        }
    }

}
