// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PoliciesUserConcurrentSessionsLimit {
    private Boolean enabled;
    private @Nullable Integer maxConcurrentSessions;

    private PoliciesUserConcurrentSessionsLimit() {}
    public Boolean enabled() {
        return this.enabled;
    }
    public Optional<Integer> maxConcurrentSessions() {
        return Optional.ofNullable(this.maxConcurrentSessions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PoliciesUserConcurrentSessionsLimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private @Nullable Integer maxConcurrentSessions;
        public Builder() {}
        public Builder(PoliciesUserConcurrentSessionsLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.maxConcurrentSessions = defaults.maxConcurrentSessions;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("PoliciesUserConcurrentSessionsLimit", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentSessions(@Nullable Integer maxConcurrentSessions) {

            this.maxConcurrentSessions = maxConcurrentSessions;
            return this;
        }
        public PoliciesUserConcurrentSessionsLimit build() {
            final var _resultValue = new PoliciesUserConcurrentSessionsLimit();
            _resultValue.enabled = enabled;
            _resultValue.maxConcurrentSessions = maxConcurrentSessions;
            return _resultValue;
        }
    }
}
