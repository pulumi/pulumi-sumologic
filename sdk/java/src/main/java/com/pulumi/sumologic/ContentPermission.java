// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.ContentPermissionArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.ContentPermissionState;
import com.pulumi.sumologic.outputs.ContentPermissionPermission;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a way to configure permissions on a content to share it with a user, a role, or the entire
 * org. You can read more [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content).
 * 
 * There are three permission levels `View`, `Edit` and `Manage`. You can read more about different
 * levels [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
 * 
 * &gt; When you add a new permission to a content, all the lower level permissions are added by default.
 * For example, giving a user &#34;Manage&#34; permission on a content, implicitly gives them &#34;Edit&#34; and &#34;View&#34;
 * permissions on the content. Due to this behavior, when you add a higher level permission, you must
 * also add all the lower level permissions. For example, when you give a user &#34;Edit&#34; permission via
 * the resource, you must give them &#34;View&#34; permission otherwise state and configuration will be out
 * of sync.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SumologicFunctions;
 * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
 * import com.pulumi.sumologic.Content;
 * import com.pulumi.sumologic.ContentArgs;
 * import com.pulumi.sumologic.inputs.GetRoleArgs;
 * import com.pulumi.sumologic.inputs.GetUserArgs;
 * import com.pulumi.sumologic.ContentPermission;
 * import com.pulumi.sumologic.ContentPermissionArgs;
 * import com.pulumi.sumologic.inputs.ContentPermissionPermissionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var personalFolder = SumologicFunctions.getPersonalFolder();
 * 
 *         var permissionTestContent = new Content(&#34;permissionTestContent&#34;, ContentArgs.builder()        
 *             .parentId(personalFolder.applyValue(getPersonalFolderResult -&gt; getPersonalFolderResult.id()))
 *             .config(serializeJson(
 *                 jsonObject(
 *                     jsonProperty(&#34;type&#34;, &#34;FolderSyncDefinition&#34;),
 *                     jsonProperty(&#34;name&#34;, &#34;test_permission_resource_folder&#34;),
 *                     jsonProperty(&#34;description&#34;, &#34;&#34;),
 *                     jsonProperty(&#34;children&#34;, jsonArray(
 *                     ))
 *                 )))
 *             .build());
 * 
 *         final var role = SumologicFunctions.getRole(GetRoleArgs.builder()
 *             .name(&#34;test_role&#34;)
 *             .build());
 * 
 *         final var user = SumologicFunctions.getUser(GetUserArgs.builder()
 *             .email(&#34;user@example.com&#34;)
 *             .build());
 * 
 *         var contentPermissionTest = new ContentPermission(&#34;contentPermissionTest&#34;, ContentPermissionArgs.builder()        
 *             .contentId(permissionTestContent.id())
 *             .notifyRecipient(true)
 *             .notificationMessage(&#34;You now have the permission to access this content&#34;)
 *             .permissions(            
 *                 ContentPermissionPermissionArgs.builder()
 *                     .permissionName(&#34;View&#34;)
 *                     .sourceType(&#34;role&#34;)
 *                     .sourceId(role.applyValue(getRoleResult -&gt; getRoleResult.id()))
 *                     .build(),
 *                 ContentPermissionPermissionArgs.builder()
 *                     .permissionName(&#34;View&#34;)
 *                     .sourceType(&#34;user&#34;)
 *                     .sourceId(user.applyValue(getUserResult -&gt; getUserResult.id()))
 *                     .build(),
 *                 ContentPermissionPermissionArgs.builder()
 *                     .permissionName(&#34;Edit&#34;)
 *                     .sourceType(&#34;user&#34;)
 *                     .sourceId(user.applyValue(getUserResult -&gt; getUserResult.id()))
 *                     .build(),
 *                 ContentPermissionPermissionArgs.builder()
 *                     .permissionName(&#34;Manage&#34;)
 *                     .sourceType(&#34;user&#34;)
 *                     .sourceId(user.applyValue(getUserResult -&gt; getUserResult.id()))
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Permisions on a content item can be imported using the content identifier, e.g.hcl // import permissions for content item with identifier = 0000000008E0183E
 * 
 * ```sh
 *  $ pulumi import sumologic:index/contentPermission:ContentPermission dashboard_permission_import 0000000008E0183E
 * ```
 * 
 */
@ResourceType(type="sumologic:index/contentPermission:ContentPermission")
public class ContentPermission extends com.pulumi.resources.CustomResource {
    /**
     * The identifier of the content item for which you want to update
     * permissions.
     * 
     */
    @Export(name="contentId", type=String.class, parameters={})
    private Output<String> contentId;

    /**
     * @return The identifier of the content item for which you want to update
     * permissions.
     * 
     */
    public Output<String> contentId() {
        return this.contentId;
    }
    /**
     * The notification message to send to the users.
     * 
     */
    @Export(name="notificationMessage", type=String.class, parameters={})
    private Output</* @Nullable */ String> notificationMessage;

    /**
     * @return The notification message to send to the users.
     * 
     */
    public Output<Optional<String>> notificationMessage() {
        return Codegen.optional(this.notificationMessage);
    }
    /**
     * Boolean value. Set it to &#34;true&#34; to notify the recipients by email.
     * 
     */
    @Export(name="notifyRecipient", type=Boolean.class, parameters={})
    private Output<Boolean> notifyRecipient;

    /**
     * @return Boolean value. Set it to &#34;true&#34; to notify the recipients by email.
     * 
     */
    public Output<Boolean> notifyRecipient() {
        return this.notifyRecipient;
    }
    /**
     * Permission block defining permission on the content. See
     * permission schema for details.
     * 
     */
    @Export(name="permissions", type=List.class, parameters={ContentPermissionPermission.class})
    private Output<List<ContentPermissionPermission>> permissions;

    /**
     * @return Permission block defining permission on the content. See
     * permission schema for details.
     * 
     */
    public Output<List<ContentPermissionPermission>> permissions() {
        return this.permissions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContentPermission(String name) {
        this(name, ContentPermissionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContentPermission(String name, ContentPermissionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContentPermission(String name, ContentPermissionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/contentPermission:ContentPermission", name, args == null ? ContentPermissionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ContentPermission(String name, Output<String> id, @Nullable ContentPermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/contentPermission:ContentPermission", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContentPermission get(String name, Output<String> id, @Nullable ContentPermissionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ContentPermission(name, id, state, options);
    }
}
