// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.DashboardPanelSumoSearchPanelColoringRuleColorThreshold;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class DashboardPanelSumoSearchPanelColoringRule {
    private @Nullable List<DashboardPanelSumoSearchPanelColoringRuleColorThreshold> colorThresholds;
    private String multipleSeriesAggregateFunction;
    private String scope;
    private String singleSeriesAggregateFunction;

    private DashboardPanelSumoSearchPanelColoringRule() {}
    public List<DashboardPanelSumoSearchPanelColoringRuleColorThreshold> colorThresholds() {
        return this.colorThresholds == null ? List.of() : this.colorThresholds;
    }
    public String multipleSeriesAggregateFunction() {
        return this.multipleSeriesAggregateFunction;
    }
    public String scope() {
        return this.scope;
    }
    public String singleSeriesAggregateFunction() {
        return this.singleSeriesAggregateFunction;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardPanelSumoSearchPanelColoringRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<DashboardPanelSumoSearchPanelColoringRuleColorThreshold> colorThresholds;
        private String multipleSeriesAggregateFunction;
        private String scope;
        private String singleSeriesAggregateFunction;
        public Builder() {}
        public Builder(DashboardPanelSumoSearchPanelColoringRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.colorThresholds = defaults.colorThresholds;
    	      this.multipleSeriesAggregateFunction = defaults.multipleSeriesAggregateFunction;
    	      this.scope = defaults.scope;
    	      this.singleSeriesAggregateFunction = defaults.singleSeriesAggregateFunction;
        }

        @CustomType.Setter
        public Builder colorThresholds(@Nullable List<DashboardPanelSumoSearchPanelColoringRuleColorThreshold> colorThresholds) {

            this.colorThresholds = colorThresholds;
            return this;
        }
        public Builder colorThresholds(DashboardPanelSumoSearchPanelColoringRuleColorThreshold... colorThresholds) {
            return colorThresholds(List.of(colorThresholds));
        }
        @CustomType.Setter
        public Builder multipleSeriesAggregateFunction(String multipleSeriesAggregateFunction) {
            if (multipleSeriesAggregateFunction == null) {
              throw new MissingRequiredPropertyException("DashboardPanelSumoSearchPanelColoringRule", "multipleSeriesAggregateFunction");
            }
            this.multipleSeriesAggregateFunction = multipleSeriesAggregateFunction;
            return this;
        }
        @CustomType.Setter
        public Builder scope(String scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("DashboardPanelSumoSearchPanelColoringRule", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder singleSeriesAggregateFunction(String singleSeriesAggregateFunction) {
            if (singleSeriesAggregateFunction == null) {
              throw new MissingRequiredPropertyException("DashboardPanelSumoSearchPanelColoringRule", "singleSeriesAggregateFunction");
            }
            this.singleSeriesAggregateFunction = singleSeriesAggregateFunction;
            return this;
        }
        public DashboardPanelSumoSearchPanelColoringRule build() {
            final var _resultValue = new DashboardPanelSumoSearchPanelColoringRule();
            _resultValue.colorThresholds = colorThresholds;
            _resultValue.multipleSeriesAggregateFunction = multipleSeriesAggregateFunction;
            _resultValue.scope = scope;
            _resultValue.singleSeriesAggregateFunction = singleSeriesAggregateFunction;
            return _resultValue;
        }
    }
}
