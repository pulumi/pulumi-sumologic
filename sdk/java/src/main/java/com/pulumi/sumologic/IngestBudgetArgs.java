// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IngestBudgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngestBudgetArgs Empty = new IngestBudgetArgs();

    @Import(name="action")
    private @Nullable Output<String> action;

    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    @Import(name="capacityBytes", required=true)
    private Output<Integer> capacityBytes;

    public Output<Integer> capacityBytes() {
        return this.capacityBytes;
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="fieldValue", required=true)
    private Output<String> fieldValue;

    public Output<String> fieldValue() {
        return this.fieldValue;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="resetTime")
    private @Nullable Output<String> resetTime;

    public Optional<Output<String>> resetTime() {
        return Optional.ofNullable(this.resetTime);
    }

    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private IngestBudgetArgs() {}

    private IngestBudgetArgs(IngestBudgetArgs $) {
        this.action = $.action;
        this.capacityBytes = $.capacityBytes;
        this.description = $.description;
        this.fieldValue = $.fieldValue;
        this.name = $.name;
        this.resetTime = $.resetTime;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngestBudgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngestBudgetArgs $;

        public Builder() {
            $ = new IngestBudgetArgs();
        }

        public Builder(IngestBudgetArgs defaults) {
            $ = new IngestBudgetArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder capacityBytes(Output<Integer> capacityBytes) {
            $.capacityBytes = capacityBytes;
            return this;
        }

        public Builder capacityBytes(Integer capacityBytes) {
            return capacityBytes(Output.of(capacityBytes));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fieldValue(Output<String> fieldValue) {
            $.fieldValue = fieldValue;
            return this;
        }

        public Builder fieldValue(String fieldValue) {
            return fieldValue(Output.of(fieldValue));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resetTime(@Nullable Output<String> resetTime) {
            $.resetTime = resetTime;
            return this;
        }

        public Builder resetTime(String resetTime) {
            return resetTime(Output.of(resetTime));
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public IngestBudgetArgs build() {
            if ($.capacityBytes == null) {
                throw new MissingRequiredPropertyException("IngestBudgetArgs", "capacityBytes");
            }
            if ($.fieldValue == null) {
                throw new MissingRequiredPropertyException("IngestBudgetArgs", "fieldValue");
            }
            return $;
        }
    }

}
