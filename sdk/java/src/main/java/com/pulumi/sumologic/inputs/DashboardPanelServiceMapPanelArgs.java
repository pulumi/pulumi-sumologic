// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardPanelServiceMapPanelArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardPanelServiceMapPanelArgs Empty = new DashboardPanelServiceMapPanelArgs();

    @Import(name="application")
    private @Nullable Output<String> application;

    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    @Import(name="environment")
    private @Nullable Output<String> environment;

    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="keepVisualSettingsConsistentWithParent")
    private @Nullable Output<Boolean> keepVisualSettingsConsistentWithParent;

    public Optional<Output<Boolean>> keepVisualSettingsConsistentWithParent() {
        return Optional.ofNullable(this.keepVisualSettingsConsistentWithParent);
    }

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    @Import(name="service")
    private @Nullable Output<String> service;

    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    @Import(name="showRemoteServices")
    private @Nullable Output<Boolean> showRemoteServices;

    public Optional<Output<Boolean>> showRemoteServices() {
        return Optional.ofNullable(this.showRemoteServices);
    }

    /**
     * Title of the dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    @Import(name="visualSettings")
    private @Nullable Output<String> visualSettings;

    public Optional<Output<String>> visualSettings() {
        return Optional.ofNullable(this.visualSettings);
    }

    private DashboardPanelServiceMapPanelArgs() {}

    private DashboardPanelServiceMapPanelArgs(DashboardPanelServiceMapPanelArgs $) {
        this.application = $.application;
        this.environment = $.environment;
        this.id = $.id;
        this.keepVisualSettingsConsistentWithParent = $.keepVisualSettingsConsistentWithParent;
        this.key = $.key;
        this.service = $.service;
        this.showRemoteServices = $.showRemoteServices;
        this.title = $.title;
        this.visualSettings = $.visualSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardPanelServiceMapPanelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardPanelServiceMapPanelArgs $;

        public Builder() {
            $ = new DashboardPanelServiceMapPanelArgs();
        }

        public Builder(DashboardPanelServiceMapPanelArgs defaults) {
            $ = new DashboardPanelServiceMapPanelArgs(Objects.requireNonNull(defaults));
        }

        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        public Builder application(String application) {
            return application(Output.of(application));
        }

        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder keepVisualSettingsConsistentWithParent(@Nullable Output<Boolean> keepVisualSettingsConsistentWithParent) {
            $.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
            return this;
        }

        public Builder keepVisualSettingsConsistentWithParent(Boolean keepVisualSettingsConsistentWithParent) {
            return keepVisualSettingsConsistentWithParent(Output.of(keepVisualSettingsConsistentWithParent));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        public Builder service(String service) {
            return service(Output.of(service));
        }

        public Builder showRemoteServices(@Nullable Output<Boolean> showRemoteServices) {
            $.showRemoteServices = showRemoteServices;
            return this;
        }

        public Builder showRemoteServices(Boolean showRemoteServices) {
            return showRemoteServices(Output.of(showRemoteServices));
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visualSettings(@Nullable Output<String> visualSettings) {
            $.visualSettings = visualSettings;
            return this;
        }

        public Builder visualSettings(String visualSettings) {
            return visualSettings(Output.of(visualSettings));
        }

        public DashboardPanelServiceMapPanelArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("DashboardPanelServiceMapPanelArgs", "key");
            }
            return $;
        }
    }

}
