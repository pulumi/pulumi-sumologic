// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FieldExtractionRuleState extends com.pulumi.resources.ResourceArgs {

    public static final FieldExtractionRuleState Empty = new FieldExtractionRuleState();

    /**
     * Is the field extraction rule enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Is the field extraction rule enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Name of the field extraction rule. Use a name that makes it easy to identify the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the field extraction rule. Use a name that makes it easy to identify the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Describes the fields to be parsed.
     * 
     */
    @Import(name="parseExpression")
    private @Nullable Output<String> parseExpression;

    /**
     * @return Describes the fields to be parsed.
     * 
     */
    public Optional<Output<String>> parseExpression() {
        return Optional.ofNullable(this.parseExpression);
    }

    /**
     * Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You&#39;ll use the Scope to run a search against the rule.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You&#39;ll use the Scope to run a search against the rule.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private FieldExtractionRuleState() {}

    private FieldExtractionRuleState(FieldExtractionRuleState $) {
        this.enabled = $.enabled;
        this.name = $.name;
        this.parseExpression = $.parseExpression;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldExtractionRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldExtractionRuleState $;

        public Builder() {
            $ = new FieldExtractionRuleState();
        }

        public Builder(FieldExtractionRuleState defaults) {
            $ = new FieldExtractionRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Is the field extraction rule enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Is the field extraction rule enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name Name of the field extraction rule. Use a name that makes it easy to identify the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the field extraction rule. Use a name that makes it easy to identify the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parseExpression Describes the fields to be parsed.
         * 
         * @return builder
         * 
         */
        public Builder parseExpression(@Nullable Output<String> parseExpression) {
            $.parseExpression = parseExpression;
            return this;
        }

        /**
         * @param parseExpression Describes the fields to be parsed.
         * 
         * @return builder
         * 
         */
        public Builder parseExpression(String parseExpression) {
            return parseExpression(Output.of(parseExpression));
        }

        /**
         * @param scope Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You&#39;ll use the Scope to run a search against the rule.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You&#39;ll use the Scope to run a search against the rule.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public FieldExtractionRuleState build() {
            return $;
        }
    }

}
