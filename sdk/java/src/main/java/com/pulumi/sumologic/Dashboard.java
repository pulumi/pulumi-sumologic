// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.DashboardArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.DashboardState;
import com.pulumi.sumologic.outputs.DashboardColoringRule;
import com.pulumi.sumologic.outputs.DashboardLayout;
import com.pulumi.sumologic.outputs.DashboardPanel;
import com.pulumi.sumologic.outputs.DashboardTimeRange;
import com.pulumi.sumologic.outputs.DashboardTopologyLabelMap;
import com.pulumi.sumologic.outputs.DashboardVariable;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a [Sumologic Dashboard (New)][1].
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SumologicFunctions;
 * import com.pulumi.sumologic.inputs.GetPersonalFolderArgs;
 * import com.pulumi.sumologic.Dashboard;
 * import com.pulumi.sumologic.DashboardArgs;
 * import com.pulumi.sumologic.inputs.DashboardTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeFromArgs;
 * import com.pulumi.sumologic.inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardTopologyLabelMapArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelTextPanelArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs;
 * import com.pulumi.sumologic.inputs.DashboardLayoutArgs;
 * import com.pulumi.sumologic.inputs.DashboardLayoutGridArgs;
 * import com.pulumi.sumologic.inputs.DashboardVariableArgs;
 * import com.pulumi.sumologic.inputs.DashboardVariableSourceDefinitionArgs;
 * import com.pulumi.sumologic.inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var personalFolder = SumologicFunctions.getPersonalFolder();
 * 
 *         var api_dashboard = new Dashboard(&#34;api-dashboard&#34;, DashboardArgs.builder()        
 *             .title(&#34;Api Health Dashboard&#34;)
 *             .description(&#34;Demo dashboard description&#34;)
 *             .folderId(personalFolder.applyValue(getPersonalFolderResult -&gt; getPersonalFolderResult.id()))
 *             .refreshInterval(120)
 *             .theme(&#34;Dark&#34;)
 *             .timeRange(DashboardTimeRangeArgs.builder()
 *                 .beginBoundedTimeRange(DashboardTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                     .from(DashboardTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                         .literalTimeRange(DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs.builder()
 *                             .rangeName(&#34;today&#34;)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .topologyLabelMap(DashboardTopologyLabelMapArgs.builder()
 *                 .datas(                
 *                     DashboardTopologyLabelMapDataArgs.builder()
 *                         .label(&#34;cluster&#34;)
 *                         .values(&#34;api-prod&#34;)
 *                         .build(),
 *                     DashboardTopologyLabelMapDataArgs.builder()
 *                         .label(&#34;namespace&#34;)
 *                         .values(&#34;default&#34;)
 *                         .build())
 *                 .build())
 *             .domain(&#34;app&#34;)
 *             .panels(            
 *                 DashboardPanelArgs.builder()
 *                     .textPanel(DashboardPanelTextPanelArgs.builder()
 *                         .key(&#34;text-panel-01&#34;)
 *                         .title(&#34;Api Health&#34;)
 *                         .visualSettings(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;text&#34;, jsonObject(
 *                                     jsonProperty(&#34;verticalAlignment&#34;, &#34;top&#34;),
 *                                     jsonProperty(&#34;horizontalAlignment&#34;, &#34;left&#34;),
 *                                     jsonProperty(&#34;fontSize&#34;, 12)
 *                                 ))
 *                             )))
 *                         .keepVisualSettingsConsistentWithParent(true)
 *                         .text(&#34;&#34;&#34;
 * ## Api Health Monitoring
 * 
 * Use this dashboard to monitor API service health. It contains following panels:
 * 
 * 1. API errors: Errors in last 12 hours
 * 3. API 5xx: Count of 5xx response
 * 3. CPU utilization: CPU utilization in last 60 mins
 *                         &#34;&#34;&#34;)
 *                         .build())
 *                     .build(),
 *                 DashboardPanelArgs.builder()
 *                     .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()
 *                         .key(&#34;search-panel-01&#34;)
 *                         .title(&#34;Api Errors by Host&#34;)
 *                         .description(&#34;Errors in api service since last 12 hours&#34;)
 *                         .visualSettings(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;general&#34;, jsonObject(
 *                                     jsonProperty(&#34;mode&#34;, &#34;timeSeries&#34;),
 *                                     jsonProperty(&#34;type&#34;, &#34;area&#34;),
 *                                     jsonProperty(&#34;displayType&#34;, &#34;stacked&#34;),
 *                                     jsonProperty(&#34;markerSize&#34;, 5),
 *                                     jsonProperty(&#34;lineDashType&#34;, &#34;solid&#34;),
 *                                     jsonProperty(&#34;markerType&#34;, &#34;square&#34;),
 *                                     jsonProperty(&#34;lineThickness&#34;, 1)
 *                                 )),
 *                                 jsonProperty(&#34;title&#34;, jsonObject(
 *                                     jsonProperty(&#34;fontSize&#34;, 14)
 *                                 )),
 *                                 jsonProperty(&#34;legend&#34;, jsonObject(
 *                                     jsonProperty(&#34;enabled&#34;, true),
 *                                     jsonProperty(&#34;verticalAlign&#34;, &#34;bottom&#34;),
 *                                     jsonProperty(&#34;fontSize&#34;, 12),
 *                                     jsonProperty(&#34;maxHeight&#34;, 50),
 *                                     jsonProperty(&#34;showAsTable&#34;, false),
 *                                     jsonProperty(&#34;wrap&#34;, true)
 *                                 ))
 *                             )))
 *                         .keepVisualSettingsConsistentWithParent(true)
 *                         .queries(DashboardPanelSumoSearchPanelQueryArgs.builder()
 *                             .queryString(&#34;_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost&#34;)
 *                             .queryType(&#34;Logs&#34;)
 *                             .queryKey(&#34;A&#34;)
 *                             .build())
 *                         .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()
 *                             .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                                 .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                                     .relativeTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()
 *                                         .relativeTime(&#34;-12h&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 DashboardPanelArgs.builder()
 *                     .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()
 *                         .key(&#34;metrics-panel-01&#34;)
 *                         .title(&#34;Api 5xx Response Count&#34;)
 *                         .description(&#34;Count of 5xx response from api service&#34;)
 *                         .visualSettings(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;general&#34;, jsonObject(
 *                                     jsonProperty(&#34;mode&#34;, &#34;distribution&#34;),
 *                                     jsonProperty(&#34;type&#34;, &#34;pie&#34;),
 *                                     jsonProperty(&#34;displayType&#34;, &#34;default&#34;),
 *                                     jsonProperty(&#34;fillOpacity&#34;, 1),
 *                                     jsonProperty(&#34;startAngle&#34;, 270),
 *                                     jsonProperty(&#34;innerRadius&#34;, &#34;40%&#34;),
 *                                     jsonProperty(&#34;maxNumOfSlices&#34;, 10),
 *                                     jsonProperty(&#34;aggregationType&#34;, &#34;sum&#34;)
 *                                 )),
 *                                 jsonProperty(&#34;title&#34;, jsonObject(
 *                                     jsonProperty(&#34;fontSize&#34;, 14)
 *                                 ))
 *                             )))
 *                         .keepVisualSettingsConsistentWithParent(true)
 *                         .queries(DashboardPanelSumoSearchPanelQueryArgs.builder()
 *                             .queryString(&#34;_sourceCategory=api metric=Api-5xx&#34;)
 *                             .queryType(&#34;Metrics&#34;)
 *                             .queryKey(&#34;A&#34;)
 *                             .metricsQueryMode(&#34;Advanced&#34;)
 *                             .build())
 *                         .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()
 *                             .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                                 .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                                     .literalTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs.builder()
 *                                         .rangeName(&#34;today&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build(),
 *                 DashboardPanelArgs.builder()
 *                     .sumoSearchPanel(DashboardPanelSumoSearchPanelArgs.builder()
 *                         .key(&#34;metrics-panel-02&#34;)
 *                         .title(&#34;CPU Utilization&#34;)
 *                         .description(&#34;CPU utilization in api service&#34;)
 *                         .visualSettings(serializeJson(
 *                             jsonObject(
 *                                 jsonProperty(&#34;general&#34;, jsonObject(
 *                                     jsonProperty(&#34;mode&#34;, &#34;timeSeries&#34;),
 *                                     jsonProperty(&#34;type&#34;, &#34;line&#34;),
 *                                     jsonProperty(&#34;displayType&#34;, &#34;smooth&#34;),
 *                                     jsonProperty(&#34;markerSize&#34;, 5),
 *                                     jsonProperty(&#34;lineDashType&#34;, &#34;dashDot&#34;),
 *                                     jsonProperty(&#34;markerType&#34;, &#34;none&#34;),
 *                                     jsonProperty(&#34;lineThickness&#34;, 1)
 *                                 )),
 *                                 jsonProperty(&#34;title&#34;, jsonObject(
 *                                     jsonProperty(&#34;fontSize&#34;, 14)
 *                                 ))
 *                             )))
 *                         .keepVisualSettingsConsistentWithParent(true)
 *                         .queries(                        
 *                             DashboardPanelSumoSearchPanelQueryArgs.builder()
 *                                 .queryString(&#34;metric=Proc_CPU nite-api-1&#34;)
 *                                 .queryType(&#34;Metrics&#34;)
 *                                 .queryKey(&#34;A&#34;)
 *                                 .metricsQueryMode(&#34;Basic&#34;)
 *                                 .metricsQueryData(DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs.builder()
 *                                     .metric(&#34;Proc_CPU&#34;)
 *                                     .filters(DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs.builder()
 *                                         .key(&#34;_sourcehost&#34;)
 *                                         .negation(false)
 *                                         .value(&#34;nite-api-1&#34;)
 *                                         .build())
 *                                     .aggregationType(&#34;None&#34;)
 *                                     .build())
 *                                 .build(),
 *                             DashboardPanelSumoSearchPanelQueryArgs.builder()
 *                                 .queryString(&#34;metric=Proc_CPU nite-api-2&#34;)
 *                                 .queryType(&#34;Metrics&#34;)
 *                                 .queryKey(&#34;B&#34;)
 *                                 .metricsQueryMode(&#34;Basic&#34;)
 *                                 .metricsQueryData(DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs.builder()
 *                                     .metric(&#34;Proc_CPU&#34;)
 *                                     .filters(DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs.builder()
 *                                         .key(&#34;_sourcehost&#34;)
 *                                         .negation(false)
 *                                         .value(&#34;nite-api-2&#34;)
 *                                         .build())
 *                                     .aggregationType(&#34;None&#34;)
 *                                     .build())
 *                                 .build())
 *                         .timeRange(DashboardPanelSumoSearchPanelTimeRangeArgs.builder()
 *                             .beginBoundedTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs.builder()
 *                                 .from(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs.builder()
 *                                     .relativeTimeRange(DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs.builder()
 *                                         .relativeTime(&#34;-1h&#34;)
 *                                         .build())
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *             .layout(DashboardLayoutArgs.builder()
 *                 .grid(DashboardLayoutGridArgs.builder()
 *                     .layoutStructures(                    
 *                         DashboardLayoutGridLayoutStructureArgs.builder()
 *                             .key(&#34;text-panel-01&#34;)
 *                             .structure(&#34;{\&#34;height\&#34;:5,\&#34;width\&#34;:24,\&#34;x\&#34;:0,\&#34;y\&#34;:0}&#34;)
 *                             .build(),
 *                         DashboardLayoutGridLayoutStructureArgs.builder()
 *                             .key(&#34;search-panel-01&#34;)
 *                             .structure(&#34;{\&#34;height\&#34;:10,\&#34;width\&#34;:12,\&#34;x\&#34;:0,\&#34;y\&#34;:5}&#34;)
 *                             .build(),
 *                         DashboardLayoutGridLayoutStructureArgs.builder()
 *                             .key(&#34;metrics-panel-01&#34;)
 *                             .structure(&#34;{\&#34;height\&#34;:10,\&#34;width\&#34;:12,\&#34;x\&#34;:12,\&#34;y\&#34;:5}&#34;)
 *                             .build(),
 *                         DashboardLayoutGridLayoutStructureArgs.builder()
 *                             .key(&#34;metrics-panel-02&#34;)
 *                             .structure(&#34;{\&#34;height\&#34;:10,\&#34;width\&#34;:24,\&#34;x\&#34;:0,\&#34;y\&#34;:25}&#34;)
 *                             .build())
 *                     .build())
 *                 .build())
 *             .variables(DashboardVariableArgs.builder()
 *                 .name(&#34;_sourceHost&#34;)
 *                 .displayName(&#34;Source Host&#34;)
 *                 .defaultValue(&#34;nite-api-1&#34;)
 *                 .sourceDefinition(DashboardVariableSourceDefinitionArgs.builder()
 *                     .csvVariableSourceDefinition(DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs.builder()
 *                         .values(&#34;nite-api-1,nite-api-2&#34;)
 *                         .build())
 *                     .build())
 *                 .allowMultiSelect(true)
 *                 .includeAllOption(true)
 *                 .hideFromUi(false)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Attributes reference
 * 
 * In addition to all arguments above, the following attributes are exported:
 * 
 * - `id` - The ID of the dashboard.
 * 
 * ### Schema for `topology_label_map`
 * - `data` - (Block List, Required) A list of blocks containing label and it&#39;s values.
 *   - - `label` - (Required) The name of the topology label.
 *   - - `values` - (Required) The values for the topology label.
 * 
 * ### Schema for `time_range`
 * - `complete_literal_time_range` - (Block List, Max: 1, Optional) Literal time range. See
 *   complete_literal_time_range schema for details.
 * - `begin_bounded_time_range` - (Block List, Max: 1, Optional) Bounded time range. See
 *   begin_bounded_time_range schema schema for details.
 *   schema for details.
 * 
 * ### Schema for `complete_literal_time_range`
 * - `range_name` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previous_week`, `previous_month`.
 * 
 * ### Schema for `begin_bounded_time_range`
 * - `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See
 *   time_range_boundary schema for details.
 * - `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See
 *   time_range_boundary schema for details.
 * 
 * ### Schema for `time_range_boundary`
 * - `epoch_time_range` - (Block List, Optional) Time since the epoch.
 *     - `epoch_millis` - (Required) Time as a number of milliseconds since the epoch.
 * 
 * - `iso8601_time_range` - (Block List, Optional) Time in ISO 8601 format.
 *     - `iso8601_time` - (Required) Time as a string in ISO 8601 format.
 * 
 * - `relative_time_range` - (Block List, Optional) Time in relative format.
 *     - `relative_time` - (Required) Relative time as a string consists of following elements:
 *       1. `-` (optional): minus sign indicates time in the past,
 *       2. `&lt;number&gt;`: number of time units,
 *       3. `&lt;time_unit&gt;`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
 *       
 *       Multiple pairs of `&lt;number&gt;&lt;time_unit&gt;` may be provided, and they may be in any order. For example,
 * `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
 * 
 * - `literal_time_range` - (Block List, Optional) Time in literal format.
 *     - `range_name` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
 * 
 * ### Schema for `panel`
 * - `text_panel` - (Block List, Max: 1, Optional) A text panel. See text_panel schema for details.
 * - `sumo_search_panel` - (Block List, Max: 1, Optional) A search panel. See sumo_search_panel schema
 *   for details.
 * 
 * ### Schema for `text_panel`
 * - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
 *   of the panel in the dashboard.
 * - `title` - (Optional) Title of the panel.
 * - `visual_settings` - (Optional) Visual settings of the panel.
 * - `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent
 *   with the settings of the parent panel.
 * - `text` - (Required) Text to display in the panel.
 * 
 * ### Schema for `sumo_search_panel`
 * - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
 *   of the panel in the dashboard.
 * - `title` - (Optional) Title of the panel.
 * - `visual_settings` - (Optional) Visual settings of the panel.
 * - `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent
 *   with the settings of the parent panel.
 * - `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See
 *   query schema for details.
 * - `description` - (Optional) Description of the panel.
 * - `time_range` - (Block List, Max: 1, Optional) Time range of the panel. See time_range schema
 *   for details.
 * - `linked_dashboard` - (Block List, Optional) A list of linked dashboards. See
 *   linked_dashboard schema for details.
 * 
 * ### Schema for `query`
 * - `query_string` - (Required) The metrics or logs query.
 * - `query_type` - (Required) The type of the query. One of `Metrics` or `Logs`.
 * - `query_key` - (Required) The key for metric or log query. Used as an identifier for queries.
 * - `metric_query_mode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.
 *   One of `Basic` or `Advanced`.
 * - `metric_query_data` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See
 *   metric_query_data schema for details.
 * 
 * ### Schema for `metric_query_data`
 * - `metric` - (Required) The metric of the query.
 * - `aggregation_type` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.
 * - `group_by` - The field to group the results by.
 * - `filter` - (Block List, Required) A list of filters for the metrics query.
 *     - `key` - (Required) The key of the metrics filter.
 *     - `value` - (Required) The value of the metrics filter.
 *     - `negation` - (Optional) Whether or not the metrics filter is negated.
 * - `operator` - (Block List, Optional) A list of operator data for the metrics query.
 * 
 * ### Schema for `operator`
 * - `operator_name` - (Required) The name of the metrics operator.
 * - `parameter` - (Block List, Required) A list of operator parameters for the operator data.
 *     - `key` - (Required) The key of the operator parameter.
 *     - `value` - (Required) The value of the operator parameter.
 * 
 * ### Schema for `linked_dashboard`
 * - `id` - (Required) Identifier of the linked dashboard.
 * - `relative_path` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.
 * - `include_time_range` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.
 * - `include_variables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.
 * 
 * ### Schema for `layout`
 * - `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.
 * 
 * ### Schema for `grid`
 * - `layout_structure` - (Block List, Required) Layout structure for the panels in the dashboard.
 *     - `key` - (Required) The identifier of the panel that this structure applies to. It&#39;s same as `panel.key`.
 *     - `structure` - (Required) The structure of the panel.
 * 
 * ### Schema for `variable`
 * - `name` - (Required) Name of the variable. The variable name is case-insensitive.
 * - `display_name` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.
 * - `default_value` - (Optional) Default value of the variable.
 * - `source_definition` - (Required) Source definition for variable values. See
 *   source_definition schema for details.
 * - `allow_multi_select` - (Optional) Allow multiple selections in the values dropdown.
 * - `include_all_option` - (Optional) Include an &#34;All&#34; option at the top of the variable&#39;s values dropdown. _Defaults to true._
 * - `hide_from_ui` - (Optional) Hide the variable in the dashboard UI.
 * 
 * ### Schema for `source_definition`
 * - `log_query_variable_source_definition` - (Optional) Variable values from a log query.
 *     - `query` - (Required) A log query.
 *     - `field` - (Required) A field in log query to populate the variable values
 * - `metadata_variable_source_definition` - (Optional) Variable values from a metric query.
 *     - `filter` - (Required) Filter to search the catalog.
 *     - `key` - (Required) Return the values for this given key.
 * - `csv_variable_source_definition` - (Optional) Variable values in csv format.
 *     - `values` - (Required) A comma separated values for the variable.
 * 
 * ## Import
 * 
 * Dashboard can be imported using the dashboard id, e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc
 * ```
 * 
 *  [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)
 * 
 */
@ResourceType(type="sumologic:index/dashboard:Dashboard")
public class Dashboard extends com.pulumi.resources.CustomResource {
    @Export(name="coloringRules", type=List.class, parameters={DashboardColoringRule.class})
    private Output</* @Nullable */ List<DashboardColoringRule>> coloringRules;

    public Output<Optional<List<DashboardColoringRule>>> coloringRules() {
        return Codegen.optional(this.coloringRules);
    }
    /**
     * Description of the dashboard.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the dashboard.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output</* @Nullable */ String> domain;

    /**
     * @return Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
     * 
     */
    public Output<Optional<String>> domain() {
        return Codegen.optional(this.domain);
    }
    /**
     * The identifier of the folder to save the dashboard in. By default it is saved in your
     * personal folder.
     * 
     */
    @Export(name="folderId", type=String.class, parameters={})
    private Output</* @Nullable */ String> folderId;

    /**
     * @return The identifier of the folder to save the dashboard in. By default it is saved in your
     * personal folder.
     * 
     */
    public Output<Optional<String>> folderId() {
        return Codegen.optional(this.folderId);
    }
    /**
     * Layout of the dashboard. See layout schema for details.
     * 
     */
    @Export(name="layout", type=DashboardLayout.class, parameters={})
    private Output</* @Nullable */ DashboardLayout> layout;

    /**
     * @return Layout of the dashboard. See layout schema for details.
     * 
     */
    public Output<Optional<DashboardLayout>> layout() {
        return Codegen.optional(this.layout);
    }
    /**
     * A list of panels in the dashboard. See panel schema for details.
     * 
     */
    @Export(name="panels", type=List.class, parameters={DashboardPanel.class})
    private Output</* @Nullable */ List<DashboardPanel>> panels;

    /**
     * @return A list of panels in the dashboard. See panel schema for details.
     * 
     */
    public Output<Optional<List<DashboardPanel>>> panels() {
        return Codegen.optional(this.panels);
    }
    /**
     * Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
     * 
     */
    @Export(name="refreshInterval", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> refreshInterval;

    /**
     * @return Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
     * 
     */
    public Output<Optional<Integer>> refreshInterval() {
        return Codegen.optional(this.refreshInterval);
    }
    /**
     * Theme of the dashboard.
     * 
     */
    @Export(name="theme", type=String.class, parameters={})
    private Output</* @Nullable */ String> theme;

    /**
     * @return Theme of the dashboard.
     * 
     */
    public Output<Optional<String>> theme() {
        return Codegen.optional(this.theme);
    }
    /**
     * Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    @Export(name="timeRange", type=DashboardTimeRange.class, parameters={})
    private Output<DashboardTimeRange> timeRange;

    /**
     * @return Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    public Output<DashboardTimeRange> timeRange() {
        return this.timeRange;
    }
    /**
     * Title of the dashboard.
     * 
     */
    @Export(name="title", type=String.class, parameters={})
    private Output<String> title;

    /**
     * @return Title of the dashboard.
     * 
     */
    public Output<String> title() {
        return this.title;
    }
    /**
     * Topology labels for the dashboard. See
     * topology label map schema
     * for details.
     * 
     */
    @Export(name="topologyLabelMap", type=DashboardTopologyLabelMap.class, parameters={})
    private Output</* @Nullable */ DashboardTopologyLabelMap> topologyLabelMap;

    /**
     * @return Topology labels for the dashboard. See
     * topology label map schema
     * for details.
     * 
     */
    public Output<Optional<DashboardTopologyLabelMap>> topologyLabelMap() {
        return Codegen.optional(this.topologyLabelMap);
    }
    /**
     * A list of variables for the dashboard. See variable schema
     * for details.
     * 
     */
    @Export(name="variables", type=List.class, parameters={DashboardVariable.class})
    private Output</* @Nullable */ List<DashboardVariable>> variables;

    /**
     * @return A list of variables for the dashboard. See variable schema
     * for details.
     * 
     */
    public Output<Optional<List<DashboardVariable>>> variables() {
        return Codegen.optional(this.variables);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dashboard(String name) {
        this(name, DashboardArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dashboard(String name, DashboardArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dashboard(String name, DashboardArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/dashboard:Dashboard", name, args == null ? DashboardArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dashboard(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/dashboard:Dashboard", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dashboard get(String name, Output<String> id, @Nullable DashboardState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dashboard(name, id, state, options);
    }
}
