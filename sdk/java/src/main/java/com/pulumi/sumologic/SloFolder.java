// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.SloFolderArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.SloFolderState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides the ability to create, read, delete, and update folders for SLO&#39;s.
 * 
 * ## Example SLO Folder
 * 
 * NOTE: SLO folders are considered a different resource from Library content and monitor folders.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SloFolder;
 * import com.pulumi.sumologic.SloFolderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tfSloFolder = new SloFolder("tfSloFolder", SloFolderArgs.builder()
 *             .name("Terraform Managed SLO's")
 *             .description("A folder for SLO's managed by terraform.")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Example Nested SLO Folders
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SloFolder;
 * import com.pulumi.sumologic.SloFolderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tfPaymentsTeamRootFolder = new SloFolder("tfPaymentsTeamRootFolder", SloFolderArgs.builder()
 *             .name("Security Team SLOs")
 *             .description("SLO's payments services.")
 *             .build());
 * 
 *         var tfPaymentsTeamProdFolder = new SloFolder("tfPaymentsTeamProdFolder", SloFolderArgs.builder()
 *             .name("Production SLOs")
 *             .description("SLOs for the Payments service on Production Environment.")
 *             .parentId(tfPaymentsTeamRootFolder.id())
 *             .build());
 * 
 *         var tfPaymentsTeamStagFolder = new SloFolder("tfPaymentsTeamStagFolder", SloFolderArgs.builder()
 *             .name("Staging SLOs")
 *             .description("SLOs for the payments service on Staging Environment.")
 *             .parentId(tfPaymentsTeamRootFolder.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * SLO folders can be imported using the SLO folder identifier, such as:
 * 
 * ```sh
 * $ pulumi import sumologic:index/sloFolder:SloFolder tf_slo_folder_1 0000000000ABC123
 * ```
 * 
 */
@ResourceType(type="sumologic:index/sloFolder:SloFolder")
public class SloFolder extends com.pulumi.resources.CustomResource {
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentType;

    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt;
    }
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * The description of the SLO folder.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the SLO folder.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    @Export(name="isLocked", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isLocked;

    public Output<Optional<Boolean>> isLocked() {
        return Codegen.optional(this.isLocked);
    }
    @Export(name="isMutable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isMutable;

    public Output<Boolean> isMutable() {
        return this.isMutable;
    }
    @Export(name="isSystem", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSystem;

    public Output<Boolean> isSystem() {
        return this.isSystem;
    }
    @Export(name="modifiedAt", refs={String.class}, tree="[0]")
    private Output<String> modifiedAt;

    public Output<String> modifiedAt() {
        return this.modifiedAt;
    }
    @Export(name="modifiedBy", refs={String.class}, tree="[0]")
    private Output<String> modifiedBy;

    public Output<String> modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * The name of the SLO folder. The name must be alphanumeric.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the SLO folder. The name must be alphanumeric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
     * 
     * Additional data provided in state:
     * 
     */
    @Export(name="parentId", refs={String.class}, tree="[0]")
    private Output<String> parentId;

    /**
     * @return The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
     * 
     * Additional data provided in state:
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }
    @Export(name="postRequestMap", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> postRequestMap;

    public Output<Optional<Map<String,String>>> postRequestMap() {
        return Codegen.optional(this.postRequestMap);
    }
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SloFolder(java.lang.String name) {
        this(name, SloFolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SloFolder(java.lang.String name, SloFolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SloFolder(java.lang.String name, SloFolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/sloFolder:SloFolder", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private SloFolder(java.lang.String name, Output<java.lang.String> id, @Nullable SloFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/sloFolder:SloFolder", name, state, makeResourceOptions(options, id), false);
    }

    private static SloFolderArgs makeArgs(SloFolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SloFolderArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SloFolder get(java.lang.String name, Output<java.lang.String> id, @Nullable SloFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SloFolder(name, id, state, options);
    }
}
