// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.sumologic.outputs.S3AuditSourcePathCustomService;
import com.pulumi.sumologic.outputs.S3AuditSourcePathSnsTopicOrSubscriptionArn;
import com.pulumi.sumologic.outputs.S3AuditSourcePathTagFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class S3AuditSourcePath {
    /**
     * @return The name of the bucket.
     * 
     */
    private @Nullable String bucketName;
    private @Nullable List<S3AuditSourcePathCustomService> customServices;
    private @Nullable List<String> limitToNamespaces;
    private @Nullable List<String> limitToRegions;
    private @Nullable List<String> limitToServices;
    /**
     * @return The path to the data.
     * 
     */
    private @Nullable String pathExpression;
    /**
     * @return This is a computed field for SNS topic/subscription ARN.
     * 
     */
    private @Nullable List<S3AuditSourcePathSnsTopicOrSubscriptionArn> snsTopicOrSubscriptionArns;
    private @Nullable List<S3AuditSourcePathTagFilter> tagFilters;
    /**
     * @return type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    private String type;
    private @Nullable Boolean useVersionedApi;

    private S3AuditSourcePath() {}
    /**
     * @return The name of the bucket.
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    public List<S3AuditSourcePathCustomService> customServices() {
        return this.customServices == null ? List.of() : this.customServices;
    }
    public List<String> limitToNamespaces() {
        return this.limitToNamespaces == null ? List.of() : this.limitToNamespaces;
    }
    public List<String> limitToRegions() {
        return this.limitToRegions == null ? List.of() : this.limitToRegions;
    }
    public List<String> limitToServices() {
        return this.limitToServices == null ? List.of() : this.limitToServices;
    }
    /**
     * @return The path to the data.
     * 
     */
    public Optional<String> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }
    /**
     * @return This is a computed field for SNS topic/subscription ARN.
     * 
     */
    public List<S3AuditSourcePathSnsTopicOrSubscriptionArn> snsTopicOrSubscriptionArns() {
        return this.snsTopicOrSubscriptionArns == null ? List.of() : this.snsTopicOrSubscriptionArns;
    }
    public List<S3AuditSourcePathTagFilter> tagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }
    /**
     * @return type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    public String type() {
        return this.type;
    }
    public Optional<Boolean> useVersionedApi() {
        return Optional.ofNullable(this.useVersionedApi);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(S3AuditSourcePath defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String bucketName;
        private @Nullable List<S3AuditSourcePathCustomService> customServices;
        private @Nullable List<String> limitToNamespaces;
        private @Nullable List<String> limitToRegions;
        private @Nullable List<String> limitToServices;
        private @Nullable String pathExpression;
        private @Nullable List<S3AuditSourcePathSnsTopicOrSubscriptionArn> snsTopicOrSubscriptionArns;
        private @Nullable List<S3AuditSourcePathTagFilter> tagFilters;
        private String type;
        private @Nullable Boolean useVersionedApi;
        public Builder() {}
        public Builder(S3AuditSourcePath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.customServices = defaults.customServices;
    	      this.limitToNamespaces = defaults.limitToNamespaces;
    	      this.limitToRegions = defaults.limitToRegions;
    	      this.limitToServices = defaults.limitToServices;
    	      this.pathExpression = defaults.pathExpression;
    	      this.snsTopicOrSubscriptionArns = defaults.snsTopicOrSubscriptionArns;
    	      this.tagFilters = defaults.tagFilters;
    	      this.type = defaults.type;
    	      this.useVersionedApi = defaults.useVersionedApi;
        }

        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder customServices(@Nullable List<S3AuditSourcePathCustomService> customServices) {
            this.customServices = customServices;
            return this;
        }
        public Builder customServices(S3AuditSourcePathCustomService... customServices) {
            return customServices(List.of(customServices));
        }
        @CustomType.Setter
        public Builder limitToNamespaces(@Nullable List<String> limitToNamespaces) {
            this.limitToNamespaces = limitToNamespaces;
            return this;
        }
        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }
        @CustomType.Setter
        public Builder limitToRegions(@Nullable List<String> limitToRegions) {
            this.limitToRegions = limitToRegions;
            return this;
        }
        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }
        @CustomType.Setter
        public Builder limitToServices(@Nullable List<String> limitToServices) {
            this.limitToServices = limitToServices;
            return this;
        }
        public Builder limitToServices(String... limitToServices) {
            return limitToServices(List.of(limitToServices));
        }
        @CustomType.Setter
        public Builder pathExpression(@Nullable String pathExpression) {
            this.pathExpression = pathExpression;
            return this;
        }
        @CustomType.Setter
        public Builder snsTopicOrSubscriptionArns(@Nullable List<S3AuditSourcePathSnsTopicOrSubscriptionArn> snsTopicOrSubscriptionArns) {
            this.snsTopicOrSubscriptionArns = snsTopicOrSubscriptionArns;
            return this;
        }
        public Builder snsTopicOrSubscriptionArns(S3AuditSourcePathSnsTopicOrSubscriptionArn... snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(List.of(snsTopicOrSubscriptionArns));
        }
        @CustomType.Setter
        public Builder tagFilters(@Nullable List<S3AuditSourcePathTagFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public Builder tagFilters(S3AuditSourcePathTagFilter... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder useVersionedApi(@Nullable Boolean useVersionedApi) {
            this.useVersionedApi = useVersionedApi;
            return this;
        }
        public S3AuditSourcePath build() {
            final var o = new S3AuditSourcePath();
            o.bucketName = bucketName;
            o.customServices = customServices;
            o.limitToNamespaces = limitToNamespaces;
            o.limitToRegions = limitToRegions;
            o.limitToServices = limitToServices;
            o.pathExpression = pathExpression;
            o.snsTopicOrSubscriptionArns = snsTopicOrSubscriptionArns;
            o.tagFilters = tagFilters;
            o.type = type;
            o.useVersionedApi = useVersionedApi;
            return o;
        }
    }
}
