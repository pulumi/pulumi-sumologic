// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.SourceTemplateSchemaRefArgs;
import com.pulumi.sumologic.inputs.SourceTemplateSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SourceTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceTemplateArgs Empty = new SourceTemplateArgs();

    /**
     * inputJson of source template
     * 
     */
    @Import(name="inputJson", required=true)
    private Output<String> inputJson;

    /**
     * @return inputJson of source template
     * 
     */
    public Output<String> inputJson() {
        return this.inputJson;
    }

    /**
     * schema reference for source template.
     * 
     */
    @Import(name="schemaRef", required=true)
    private Output<SourceTemplateSchemaRefArgs> schemaRef;

    /**
     * @return schema reference for source template.
     * 
     */
    public Output<SourceTemplateSchemaRefArgs> schemaRef() {
        return this.schemaRef;
    }

    /**
     * Agent selector conditions
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<SourceTemplateSelectorArgs>> selectors;

    /**
     * @return Agent selector conditions
     * 
     */
    public Optional<Output<List<SourceTemplateSelectorArgs>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    private SourceTemplateArgs() {}

    private SourceTemplateArgs(SourceTemplateArgs $) {
        this.inputJson = $.inputJson;
        this.schemaRef = $.schemaRef;
        this.selectors = $.selectors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceTemplateArgs $;

        public Builder() {
            $ = new SourceTemplateArgs();
        }

        public Builder(SourceTemplateArgs defaults) {
            $ = new SourceTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inputJson inputJson of source template
         * 
         * @return builder
         * 
         */
        public Builder inputJson(Output<String> inputJson) {
            $.inputJson = inputJson;
            return this;
        }

        /**
         * @param inputJson inputJson of source template
         * 
         * @return builder
         * 
         */
        public Builder inputJson(String inputJson) {
            return inputJson(Output.of(inputJson));
        }

        /**
         * @param schemaRef schema reference for source template.
         * 
         * @return builder
         * 
         */
        public Builder schemaRef(Output<SourceTemplateSchemaRefArgs> schemaRef) {
            $.schemaRef = schemaRef;
            return this;
        }

        /**
         * @param schemaRef schema reference for source template.
         * 
         * @return builder
         * 
         */
        public Builder schemaRef(SourceTemplateSchemaRefArgs schemaRef) {
            return schemaRef(Output.of(schemaRef));
        }

        /**
         * @param selectors Agent selector conditions
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<SourceTemplateSelectorArgs>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Agent selector conditions
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<SourceTemplateSelectorArgs> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Agent selector conditions
         * 
         * @return builder
         * 
         */
        public Builder selectors(SourceTemplateSelectorArgs... selectors) {
            return selectors(List.of(selectors));
        }

        public SourceTemplateArgs build() {
            if ($.inputJson == null) {
                throw new MissingRequiredPropertyException("SourceTemplateArgs", "inputJson");
            }
            if ($.schemaRef == null) {
                throw new MissingRequiredPropertyException("SourceTemplateArgs", "schemaRef");
            }
            return $;
        }
    }

}
