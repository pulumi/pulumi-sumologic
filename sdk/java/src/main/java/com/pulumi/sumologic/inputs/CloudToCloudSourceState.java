// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudToCloudSourceState extends com.pulumi.resources.ResourceArgs {

    public static final CloudToCloudSourceState Empty = new CloudToCloudSourceState();

    @Import(name="collectorId")
    private @Nullable Output<Integer> collectorId;

    public Optional<Output<Integer>> collectorId() {
        return Optional.ofNullable(this.collectorId);
    }

    /**
     * This is a JSON object which contains the configuration parameters for the Source.
     * 
     */
    @Import(name="config")
    private @Nullable Output<String> config;

    /**
     * @return This is a JSON object which contains the configuration parameters for the Source.
     * 
     */
    public Optional<Output<String>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Source schema details.
     * 
     */
    @Import(name="schemaRef")
    private @Nullable Output<Map<String,String>> schemaRef;

    /**
     * @return Source schema details.
     * 
     */
    public Optional<Output<Map<String,String>>> schemaRef() {
        return Optional.ofNullable(this.schemaRef);
    }

    private CloudToCloudSourceState() {}

    private CloudToCloudSourceState(CloudToCloudSourceState $) {
        this.collectorId = $.collectorId;
        this.config = $.config;
        this.schemaRef = $.schemaRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudToCloudSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudToCloudSourceState $;

        public Builder() {
            $ = new CloudToCloudSourceState();
        }

        public Builder(CloudToCloudSourceState defaults) {
            $ = new CloudToCloudSourceState(Objects.requireNonNull(defaults));
        }

        public Builder collectorId(@Nullable Output<Integer> collectorId) {
            $.collectorId = collectorId;
            return this;
        }

        public Builder collectorId(Integer collectorId) {
            return collectorId(Output.of(collectorId));
        }

        /**
         * @param config This is a JSON object which contains the configuration parameters for the Source.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config This is a JSON object which contains the configuration parameters for the Source.
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param schemaRef Source schema details.
         * 
         * @return builder
         * 
         */
        public Builder schemaRef(@Nullable Output<Map<String,String>> schemaRef) {
            $.schemaRef = schemaRef;
            return this;
        }

        /**
         * @param schemaRef Source schema details.
         * 
         * @return builder
         * 
         */
        public Builder schemaRef(Map<String,String> schemaRef) {
            return schemaRef(Output.of(schemaRef));
        }

        public CloudToCloudSourceState build() {
            return $;
        }
    }

}
