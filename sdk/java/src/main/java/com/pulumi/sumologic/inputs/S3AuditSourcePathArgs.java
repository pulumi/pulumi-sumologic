// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.S3AuditSourcePathAzureTagFilterArgs;
import com.pulumi.sumologic.inputs.S3AuditSourcePathCustomServiceArgs;
import com.pulumi.sumologic.inputs.S3AuditSourcePathSnsTopicOrSubscriptionArnArgs;
import com.pulumi.sumologic.inputs.S3AuditSourcePathTagFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3AuditSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3AuditSourcePathArgs Empty = new S3AuditSourcePathArgs();

    @Import(name="azureTagFilters")
    private @Nullable Output<List<S3AuditSourcePathAzureTagFilterArgs>> azureTagFilters;

    public Optional<Output<List<S3AuditSourcePathAzureTagFilterArgs>>> azureTagFilters() {
        return Optional.ofNullable(this.azureTagFilters);
    }

    /**
     * The name of the bucket.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The name of the bucket.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    @Import(name="customServices")
    private @Nullable Output<List<S3AuditSourcePathCustomServiceArgs>> customServices;

    public Optional<Output<List<S3AuditSourcePathCustomServiceArgs>>> customServices() {
        return Optional.ofNullable(this.customServices);
    }

    @Import(name="environment")
    private @Nullable Output<String> environment;

    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="eventHubName")
    private @Nullable Output<String> eventHubName;

    public Optional<Output<String>> eventHubName() {
        return Optional.ofNullable(this.eventHubName);
    }

    @Import(name="limitToNamespaces")
    private @Nullable Output<List<String>> limitToNamespaces;

    public Optional<Output<List<String>>> limitToNamespaces() {
        return Optional.ofNullable(this.limitToNamespaces);
    }

    @Import(name="limitToRegions")
    private @Nullable Output<List<String>> limitToRegions;

    public Optional<Output<List<String>>> limitToRegions() {
        return Optional.ofNullable(this.limitToRegions);
    }

    @Import(name="limitToServices")
    private @Nullable Output<List<String>> limitToServices;

    public Optional<Output<List<String>>> limitToServices() {
        return Optional.ofNullable(this.limitToServices);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The path to the data.
     * 
     */
    @Import(name="pathExpression")
    private @Nullable Output<String> pathExpression;

    /**
     * @return The path to the data.
     * 
     */
    public Optional<Output<String>> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }

    /**
     * Your AWS Bucket region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Your AWS Bucket region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * This is a computed field for SNS topic/subscription ARN.
     * 
     */
    @Import(name="snsTopicOrSubscriptionArns")
    private @Nullable Output<List<S3AuditSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns;

    /**
     * @return This is a computed field for SNS topic/subscription ARN.
     * 
     */
    public Optional<Output<List<S3AuditSourcePathSnsTopicOrSubscriptionArnArgs>>> snsTopicOrSubscriptionArns() {
        return Optional.ofNullable(this.snsTopicOrSubscriptionArns);
    }

    @Import(name="tagFilters")
    private @Nullable Output<List<S3AuditSourcePathTagFilterArgs>> tagFilters;

    public Optional<Output<List<S3AuditSourcePathTagFilterArgs>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    /**
     * type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    @Import(name="useVersionedApi")
    private @Nullable Output<Boolean> useVersionedApi;

    public Optional<Output<Boolean>> useVersionedApi() {
        return Optional.ofNullable(this.useVersionedApi);
    }

    private S3AuditSourcePathArgs() {}

    private S3AuditSourcePathArgs(S3AuditSourcePathArgs $) {
        this.azureTagFilters = $.azureTagFilters;
        this.bucketName = $.bucketName;
        this.consumerGroup = $.consumerGroup;
        this.customServices = $.customServices;
        this.environment = $.environment;
        this.eventHubName = $.eventHubName;
        this.limitToNamespaces = $.limitToNamespaces;
        this.limitToRegions = $.limitToRegions;
        this.limitToServices = $.limitToServices;
        this.namespace = $.namespace;
        this.pathExpression = $.pathExpression;
        this.region = $.region;
        this.snsTopicOrSubscriptionArns = $.snsTopicOrSubscriptionArns;
        this.tagFilters = $.tagFilters;
        this.type = $.type;
        this.useVersionedApi = $.useVersionedApi;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3AuditSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3AuditSourcePathArgs $;

        public Builder() {
            $ = new S3AuditSourcePathArgs();
        }

        public Builder(S3AuditSourcePathArgs defaults) {
            $ = new S3AuditSourcePathArgs(Objects.requireNonNull(defaults));
        }

        public Builder azureTagFilters(@Nullable Output<List<S3AuditSourcePathAzureTagFilterArgs>> azureTagFilters) {
            $.azureTagFilters = azureTagFilters;
            return this;
        }

        public Builder azureTagFilters(List<S3AuditSourcePathAzureTagFilterArgs> azureTagFilters) {
            return azureTagFilters(Output.of(azureTagFilters));
        }

        public Builder azureTagFilters(S3AuditSourcePathAzureTagFilterArgs... azureTagFilters) {
            return azureTagFilters(List.of(azureTagFilters));
        }

        /**
         * @param bucketName The name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        public Builder customServices(@Nullable Output<List<S3AuditSourcePathCustomServiceArgs>> customServices) {
            $.customServices = customServices;
            return this;
        }

        public Builder customServices(List<S3AuditSourcePathCustomServiceArgs> customServices) {
            return customServices(Output.of(customServices));
        }

        public Builder customServices(S3AuditSourcePathCustomServiceArgs... customServices) {
            return customServices(List.of(customServices));
        }

        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        public Builder eventHubName(@Nullable Output<String> eventHubName) {
            $.eventHubName = eventHubName;
            return this;
        }

        public Builder eventHubName(String eventHubName) {
            return eventHubName(Output.of(eventHubName));
        }

        public Builder limitToNamespaces(@Nullable Output<List<String>> limitToNamespaces) {
            $.limitToNamespaces = limitToNamespaces;
            return this;
        }

        public Builder limitToNamespaces(List<String> limitToNamespaces) {
            return limitToNamespaces(Output.of(limitToNamespaces));
        }

        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }

        public Builder limitToRegions(@Nullable Output<List<String>> limitToRegions) {
            $.limitToRegions = limitToRegions;
            return this;
        }

        public Builder limitToRegions(List<String> limitToRegions) {
            return limitToRegions(Output.of(limitToRegions));
        }

        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }

        public Builder limitToServices(@Nullable Output<List<String>> limitToServices) {
            $.limitToServices = limitToServices;
            return this;
        }

        public Builder limitToServices(List<String> limitToServices) {
            return limitToServices(Output.of(limitToServices));
        }

        public Builder limitToServices(String... limitToServices) {
            return limitToServices(List.of(limitToServices));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param pathExpression The path to the data.
         * 
         * @return builder
         * 
         */
        public Builder pathExpression(@Nullable Output<String> pathExpression) {
            $.pathExpression = pathExpression;
            return this;
        }

        /**
         * @param pathExpression The path to the data.
         * 
         * @return builder
         * 
         */
        public Builder pathExpression(String pathExpression) {
            return pathExpression(Output.of(pathExpression));
        }

        /**
         * @param region Your AWS Bucket region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Your AWS Bucket region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param snsTopicOrSubscriptionArns This is a computed field for SNS topic/subscription ARN.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicOrSubscriptionArns(@Nullable Output<List<S3AuditSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns) {
            $.snsTopicOrSubscriptionArns = snsTopicOrSubscriptionArns;
            return this;
        }

        /**
         * @param snsTopicOrSubscriptionArns This is a computed field for SNS topic/subscription ARN.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicOrSubscriptionArns(List<S3AuditSourcePathSnsTopicOrSubscriptionArnArgs> snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(Output.of(snsTopicOrSubscriptionArns));
        }

        /**
         * @param snsTopicOrSubscriptionArns This is a computed field for SNS topic/subscription ARN.
         * 
         * @return builder
         * 
         */
        public Builder snsTopicOrSubscriptionArns(S3AuditSourcePathSnsTopicOrSubscriptionArnArgs... snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(List.of(snsTopicOrSubscriptionArns));
        }

        public Builder tagFilters(@Nullable Output<List<S3AuditSourcePathTagFilterArgs>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        public Builder tagFilters(List<S3AuditSourcePathTagFilterArgs> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        public Builder tagFilters(S3AuditSourcePathTagFilterArgs... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param type type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder useVersionedApi(@Nullable Output<Boolean> useVersionedApi) {
            $.useVersionedApi = useVersionedApi;
            return this;
        }

        public Builder useVersionedApi(Boolean useVersionedApi) {
            return useVersionedApi(Output.of(useVersionedApi));
        }

        public S3AuditSourcePathArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("S3AuditSourcePathArgs", "type");
            }
            return $;
        }
    }

}
