// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ContentPermissionPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentPermissionPermissionArgs Empty = new ContentPermissionPermissionArgs();

    /**
     * Content permission name. Valid values are `View`, `GrantView`,
     * `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
     * [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
     * 
     */
    @Import(name="permissionName", required=true)
    private Output<String> permissionName;

    /**
     * @return Content permission name. Valid values are `View`, `GrantView`,
     * `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
     * [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
     * 
     */
    public Output<String> permissionName() {
        return this.permissionName;
    }

    /**
     * An identifier that belongs to the source type chosen above. For example,
     * if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
     * content with (same goes for role and org source type).
     * 
     */
    @Import(name="sourceId", required=true)
    private Output<String> sourceId;

    /**
     * @return An identifier that belongs to the source type chosen above. For example,
     * if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
     * content with (same goes for role and org source type).
     * 
     */
    public Output<String> sourceId() {
        return this.sourceId;
    }

    /**
     * Type of source for the permission. Valid values are `user`, `role`,
     * and `org`.
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return Type of source for the permission. Valid values are `user`, `role`,
     * and `org`.
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    private ContentPermissionPermissionArgs() {}

    private ContentPermissionPermissionArgs(ContentPermissionPermissionArgs $) {
        this.permissionName = $.permissionName;
        this.sourceId = $.sourceId;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentPermissionPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentPermissionPermissionArgs $;

        public Builder() {
            $ = new ContentPermissionPermissionArgs();
        }

        public Builder(ContentPermissionPermissionArgs defaults) {
            $ = new ContentPermissionPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissionName Content permission name. Valid values are `View`, `GrantView`,
         * `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
         * [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
         * 
         * @return builder
         * 
         */
        public Builder permissionName(Output<String> permissionName) {
            $.permissionName = permissionName;
            return this;
        }

        /**
         * @param permissionName Content permission name. Valid values are `View`, `GrantView`,
         * `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
         * [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
         * 
         * @return builder
         * 
         */
        public Builder permissionName(String permissionName) {
            return permissionName(Output.of(permissionName));
        }

        /**
         * @param sourceId An identifier that belongs to the source type chosen above. For example,
         * if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
         * content with (same goes for role and org source type).
         * 
         * @return builder
         * 
         */
        public Builder sourceId(Output<String> sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceId An identifier that belongs to the source type chosen above. For example,
         * if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
         * content with (same goes for role and org source type).
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            return sourceId(Output.of(sourceId));
        }

        /**
         * @param sourceType Type of source for the permission. Valid values are `user`, `role`,
         * and `org`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Type of source for the permission. Valid values are `user`, `role`,
         * and `org`.
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public ContentPermissionPermissionArgs build() {
            $.permissionName = Objects.requireNonNull($.permissionName, "expected parameter 'permissionName' to be non-null");
            $.sourceId = Objects.requireNonNull($.sourceId, "expected parameter 'sourceId' to be non-null");
            $.sourceType = Objects.requireNonNull($.sourceType, "expected parameter 'sourceType' to be non-null");
            return $;
        }
    }

}
