// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseCustomInsightState extends com.pulumi.resources.ResourceArgs {

    public static final CseCustomInsightState Empty = new CseCustomInsightState();

    /**
     * The description of the generated Insights
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the generated Insights
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the Custom Insight should generate Insights
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the Custom Insight should generate Insights
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The name of the Custom Insight and the generated Insights
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Custom Insight and the generated Insights
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight
     * 
     */
    @Import(name="ordered")
    private @Nullable Output<Boolean> ordered;

    /**
     * @return Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight
     * 
     */
    public Optional<Output<Boolean>> ordered() {
        return Optional.ofNullable(this.ordered);
    }

    /**
     * The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
     * 
     */
    @Import(name="ruleIds")
    private @Nullable Output<List<String>> ruleIds;

    /**
     * @return The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
     * 
     */
    public Optional<Output<List<String>>> ruleIds() {
        return Optional.ofNullable(this.ruleIds);
    }

    /**
     * The severity of the generated Insights (HIGH, MEDIUM, or LOW)
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return The severity of the generated Insights (HIGH, MEDIUM, or LOW)
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
     * 
     */
    @Import(name="signalNames")
    private @Nullable Output<List<String>> signalNames;

    /**
     * @return The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
     * 
     */
    public Optional<Output<List<String>>> signalNames() {
        return Optional.ofNullable(this.signalNames);
    }

    /**
     * The tags of the generated Insights
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags of the generated Insights
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CseCustomInsightState() {}

    private CseCustomInsightState(CseCustomInsightState $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.name = $.name;
        this.ordered = $.ordered;
        this.ruleIds = $.ruleIds;
        this.severity = $.severity;
        this.signalNames = $.signalNames;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseCustomInsightState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseCustomInsightState $;

        public Builder() {
            $ = new CseCustomInsightState();
        }

        public Builder(CseCustomInsightState defaults) {
            $ = new CseCustomInsightState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the Custom Insight should generate Insights
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the Custom Insight should generate Insights
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The name of the Custom Insight and the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Custom Insight and the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ordered Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight
         * 
         * @return builder
         * 
         */
        public Builder ordered(@Nullable Output<Boolean> ordered) {
            $.ordered = ordered;
            return this;
        }

        /**
         * @param ordered Whether the signals matching the rule IDs/signal names must be in the same chronological order as they are listed in the Custom Insight
         * 
         * @return builder
         * 
         */
        public Builder ordered(Boolean ordered) {
            return ordered(Output.of(ordered));
        }

        /**
         * @param ruleIds The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder ruleIds(@Nullable Output<List<String>> ruleIds) {
            $.ruleIds = ruleIds;
            return this;
        }

        /**
         * @param ruleIds The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder ruleIds(List<String> ruleIds) {
            return ruleIds(Output.of(ruleIds));
        }

        /**
         * @param ruleIds The Rule IDs to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder ruleIds(String... ruleIds) {
            return ruleIds(List.of(ruleIds));
        }

        /**
         * @param severity The severity of the generated Insights (HIGH, MEDIUM, or LOW)
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of the generated Insights (HIGH, MEDIUM, or LOW)
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param signalNames The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder signalNames(@Nullable Output<List<String>> signalNames) {
            $.signalNames = signalNames;
            return this;
        }

        /**
         * @param signalNames The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder signalNames(List<String> signalNames) {
            return signalNames(Output.of(signalNames));
        }

        /**
         * @param signalNames The Signal names to match to generate an Insight (exactly one of rule_ids or signal_names must be specified)
         * 
         * @return builder
         * 
         */
        public Builder signalNames(String... signalNames) {
            return signalNames(List.of(signalNames));
        }

        /**
         * @param tags The tags of the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags of the generated Insights
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public CseCustomInsightState build() {
            return $;
        }
    }

}
