// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OtCollectorState extends com.pulumi.resources.ResourceArgs {

    public static final OtCollectorState Empty = new OtCollectorState();

    @Import(name="alive")
    private @Nullable Output<Boolean> alive;

    public Optional<Output<Boolean>> alive() {
        return Optional.ofNullable(this.alive);
    }

    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * Description of the OT Collector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the OT Collector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
     * 
     */
    @Import(name="ephemeral")
    private @Nullable Output<Boolean> ephemeral;

    /**
     * @return When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
     * 
     */
    public Optional<Output<Boolean>> ephemeral() {
        return Optional.ofNullable(this.ephemeral);
    }

    /**
     * Management Status of the OT Collector based on if it is remotely or locally managed.
     * 
     */
    @Import(name="isRemotelyManaged")
    private @Nullable Output<Boolean> isRemotelyManaged;

    /**
     * @return Management Status of the OT Collector based on if it is remotely or locally managed.
     * 
     */
    public Optional<Output<Boolean>> isRemotelyManaged() {
        return Optional.ofNullable(this.isRemotelyManaged);
    }

    @Import(name="modifiedAt")
    private @Nullable Output<String> modifiedAt;

    public Optional<Output<String>> modifiedAt() {
        return Optional.ofNullable(this.modifiedAt);
    }

    @Import(name="modifiedBy")
    private @Nullable Output<String> modifiedBy;

    public Optional<Output<String>> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }

    /**
     * Name of the OT Collector.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the OT Collector.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Map containing [key/value pairs][3].
     * 
     * The following attributes are exported:
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map containing [key/value pairs][3].
     * 
     * The following attributes are exported:
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    /**
     * @return The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     * 
     */
    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private OtCollectorState() {}

    private OtCollectorState(OtCollectorState $) {
        this.alive = $.alive;
        this.category = $.category;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.ephemeral = $.ephemeral;
        this.isRemotelyManaged = $.isRemotelyManaged;
        this.modifiedAt = $.modifiedAt;
        this.modifiedBy = $.modifiedBy;
        this.name = $.name;
        this.tags = $.tags;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OtCollectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OtCollectorState $;

        public Builder() {
            $ = new OtCollectorState();
        }

        public Builder(OtCollectorState defaults) {
            $ = new OtCollectorState(Objects.requireNonNull(defaults));
        }

        public Builder alive(@Nullable Output<Boolean> alive) {
            $.alive = alive;
            return this;
        }

        public Builder alive(Boolean alive) {
            return alive(Output.of(alive));
        }

        /**
         * @param category The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description Description of the OT Collector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the OT Collector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ephemeral When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
         * 
         * @return builder
         * 
         */
        public Builder ephemeral(@Nullable Output<Boolean> ephemeral) {
            $.ephemeral = ephemeral;
            return this;
        }

        /**
         * @param ephemeral When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
         * 
         * @return builder
         * 
         */
        public Builder ephemeral(Boolean ephemeral) {
            return ephemeral(Output.of(ephemeral));
        }

        /**
         * @param isRemotelyManaged Management Status of the OT Collector based on if it is remotely or locally managed.
         * 
         * @return builder
         * 
         */
        public Builder isRemotelyManaged(@Nullable Output<Boolean> isRemotelyManaged) {
            $.isRemotelyManaged = isRemotelyManaged;
            return this;
        }

        /**
         * @param isRemotelyManaged Management Status of the OT Collector based on if it is remotely or locally managed.
         * 
         * @return builder
         * 
         */
        public Builder isRemotelyManaged(Boolean isRemotelyManaged) {
            return isRemotelyManaged(Output.of(isRemotelyManaged));
        }

        public Builder modifiedAt(@Nullable Output<String> modifiedAt) {
            $.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(String modifiedAt) {
            return modifiedAt(Output.of(modifiedAt));
        }

        public Builder modifiedBy(@Nullable Output<String> modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        public Builder modifiedBy(String modifiedBy) {
            return modifiedBy(Output.of(modifiedBy));
        }

        /**
         * @param name Name of the OT Collector.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the OT Collector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tags Map containing [key/value pairs][3].
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map containing [key/value pairs][3].
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeZone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        /**
         * @param timeZone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
         * 
         * @return builder
         * 
         */
        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public OtCollectorState build() {
            return $;
        }
    }

}
