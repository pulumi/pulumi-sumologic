// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.CseThresholdRuleArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.CseThresholdRuleState;
import com.pulumi.sumologic.outputs.CseThresholdRuleEntitySelector;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Sumo Logic CSE [Threshold Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/05_Write_a_Threshold_Rule).
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.CseThresholdRule;
 * import com.pulumi.sumologic.CseThresholdRuleArgs;
 * import com.pulumi.sumologic.inputs.CseThresholdRuleEntitySelectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var thresholdRule = new CseThresholdRule("thresholdRule", CseThresholdRuleArgs.builder()        
 *             .countDistinct(true)
 *             .countField("dstDevice_hostname")
 *             .description("Signal description")
 *             .enabled(true)
 *             .entitySelectors(CseThresholdRuleEntitySelectorArgs.builder()
 *                 .entityType("_ip")
 *                 .expression("srcDevice_ip")
 *                 .build())
 *             .expression("objectType = \"Network\"")
 *             .groupByFields("dstDevice_hostname")
 *             .isPrototype(false)
 *             .limit(1000)
 *             .name("Threshold Rule Example")
 *             .severity(5)
 *             .summaryExpression("Signal summary")
 *             .tags("_mitreAttackTactic:TA0009")
 *             .windowSize("T30M")
 *             .suppressionWindowSize(2100000)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Threshold Rules can be imported using the field id, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/cseThresholdRule:CseThresholdRule threshold_rule id
 * ```
 * 
 */
@ResourceType(type="sumologic:index/cseThresholdRule:CseThresholdRule")
public class CseThresholdRule extends com.pulumi.resources.CustomResource {
    /**
     * Whether to count distinct values of a field, as opposed to just counting the number of records
     * 
     */
    @Export(name="countDistinct", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> countDistinct;

    /**
     * @return Whether to count distinct values of a field, as opposed to just counting the number of records
     * 
     */
    public Output<Optional<Boolean>> countDistinct() {
        return Codegen.optional(this.countDistinct);
    }
    /**
     * The field to count if `count_distinct` is set to true
     * 
     */
    @Export(name="countField", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> countField;

    /**
     * @return The field to count if `count_distinct` is set to true
     * 
     */
    public Output<Optional<String>> countField() {
        return Codegen.optional(this.countField);
    }
    /**
     * The description of the generated Signals
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Whether the rule should generate Signals
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The entities to generate Signals on
     * + `entityType` - (Required) The type of the entity to generate the Signal on.
     * 
     */
    @Export(name="entitySelectors", refs={List.class,CseThresholdRuleEntitySelector.class}, tree="[0,1]")
    private Output<List<CseThresholdRuleEntitySelector>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * + `entityType` - (Required) The type of the entity to generate the Signal on.
     * 
     */
    public Output<List<CseThresholdRuleEntitySelector>> entitySelectors() {
        return this.entitySelectors;
    }
    /**
     * The expression for which records to match on
     * 
     */
    @Export(name="expression", refs={String.class}, tree="[0]")
    private Output<String> expression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }
    /**
     * A list of fields to group records by
     * 
     */
    @Export(name="groupByFields", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Output<Optional<List<String>>> groupByFields() {
        return Codegen.optional(this.groupByFields);
    }
    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Export(name="isPrototype", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Output<Optional<Boolean>> isPrototype() {
        return Codegen.optional(this.isPrototype);
    }
    /**
     * A Signal will be fired when this many records/distinct field values are matched
     * 
     */
    @Export(name="limit", refs={Integer.class}, tree="[0]")
    private Output<Integer> limit;

    /**
     * @return A Signal will be fired when this many records/distinct field values are matched
     * 
     */
    public Output<Integer> limit() {
        return this.limit;
    }
    /**
     * The name of the Rule and the generated Signals
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Rule and the generated Signals
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The severity of the generated Signals
     * 
     */
    @Export(name="severity", refs={Integer.class}, tree="[0]")
    private Output<Integer> severity;

    /**
     * @return The severity of the generated Signals
     * 
     */
    public Output<Integer> severity() {
        return this.severity;
    }
    /**
     * The summary of the generated Signals
     * 
     */
    @Export(name="summaryExpression", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Output<Optional<String>> summaryExpression() {
        return Codegen.optional(this.summaryExpression);
    }
    /**
     * For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    @Export(name="suppressionWindowSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> suppressionWindowSize;

    /**
     * @return For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    public Output<Optional<Integer>> suppressionWindowSize() {
        return Codegen.optional(this.suppressionWindowSize);
    }
    /**
     * The tags of the generated Signals
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, T05D or CUSTOM
     * 
     */
    @Export(name="windowSize", refs={String.class}, tree="[0]")
    private Output<String> windowSize;

    /**
     * @return How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, T05D or CUSTOM
     * 
     */
    public Output<String> windowSize() {
        return this.windowSize;
    }
    @Export(name="windowSizeMillis", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> windowSizeMillis;

    public Output<Optional<String>> windowSizeMillis() {
        return Codegen.optional(this.windowSizeMillis);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CseThresholdRule(String name) {
        this(name, CseThresholdRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CseThresholdRule(String name, CseThresholdRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CseThresholdRule(String name, CseThresholdRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseThresholdRule:CseThresholdRule", name, args == null ? CseThresholdRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CseThresholdRule(String name, Output<String> id, @Nullable CseThresholdRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/cseThresholdRule:CseThresholdRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CseThresholdRule get(String name, Output<String> id, @Nullable CseThresholdRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CseThresholdRule(name, id, state, options);
    }
}
