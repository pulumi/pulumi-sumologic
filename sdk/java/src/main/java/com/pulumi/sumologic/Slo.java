// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.SloArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.SloState;
import com.pulumi.sumologic.outputs.SloCompliance;
import com.pulumi.sumologic.outputs.SloIndicator;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides the ability to create, read, delete, and update SLOs.
 * 
 * ## Example SLO
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.Slo;
 * import com.pulumi.sumologic.SloArgs;
 * import com.pulumi.sumologic.inputs.SloComplianceArgs;
 * import com.pulumi.sumologic.inputs.SloIndicatorArgs;
 * import com.pulumi.sumologic.inputs.SloIndicatorWindowBasedEvaluationArgs;
 * import com.pulumi.sumologic.inputs.SloIndicatorRequestBasedEvaluationArgs;
 * import com.pulumi.sumologic.inputs.SloIndicatorMonitorBasedEvaluationArgs;
 * import com.pulumi.sumologic.inputs.SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sloTfWindowMetricRatio = new Slo(&#34;sloTfWindowMetricRatio&#34;, SloArgs.builder()        
 *             .name(&#34;login error rate&#34;)
 *             .description(&#34;per minute login error rate over rolling 7 days&#34;)
 *             .parentId(&#34;0000000000000001&#34;)
 *             .signalType(&#34;Error&#34;)
 *             .service(&#34;auth&#34;)
 *             .application(&#34;login&#34;)
 *             .tags(Map.ofEntries(
 *                 Map.entry(&#34;team&#34;, &#34;metrics&#34;),
 *                 Map.entry(&#34;application&#34;, &#34;sumologic&#34;)
 *             ))
 *             .compliances(SloComplianceArgs.builder()
 *                 .complianceType(&#34;Rolling&#34;)
 *                 .size(&#34;7d&#34;)
 *                 .target(95)
 *                 .timezone(&#34;Asia/Kolkata&#34;)
 *                 .build())
 *             .indicator(SloIndicatorArgs.builder()
 *                 .windowBasedEvaluation(SloIndicatorWindowBasedEvaluationArgs.builder()
 *                     .op(&#34;LessThan&#34;)
 *                     .queryType(&#34;Metrics&#34;)
 *                     .size(&#34;1m&#34;)
 *                     .threshold(99)
 *                     .queries(                    
 *                         SloIndicatorWindowBasedEvaluationQueryArgs.builder()
 *                             .queryGroupType(&#34;Unsuccessful&#34;)
 *                             .queryGroups(SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs.builder()
 *                                 .rowId(&#34;A&#34;)
 *                                 .query(&#34;service=auth api=login metric=HTTP_5XX_Count&#34;)
 *                                 .useRowCount(false)
 *                                 .build())
 *                             .build(),
 *                         SloIndicatorWindowBasedEvaluationQueryArgs.builder()
 *                             .queryGroupType(&#34;Total&#34;)
 *                             .queryGroups(SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs.builder()
 *                                 .rowId(&#34;A&#34;)
 *                                 .query(&#34;service=auth api=login metric=TotalRequests&#34;)
 *                                 .useRowCount(false)
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var sloTfWindowBased = new Slo(&#34;sloTfWindowBased&#34;, SloArgs.builder()        
 *             .name(&#34;slo-tf-window-based&#34;)
 *             .description(&#34;example SLO created with terraform&#34;)
 *             .parentId(&#34;0000000000000001&#34;)
 *             .signalType(&#34;Latency&#34;)
 *             .service(&#34;auth&#34;)
 *             .application(&#34;login&#34;)
 *             .tags(Map.ofEntries(
 *                 Map.entry(&#34;team&#34;, &#34;metrics&#34;),
 *                 Map.entry(&#34;application&#34;, &#34;sumologic&#34;)
 *             ))
 *             .compliances(SloComplianceArgs.builder()
 *                 .complianceType(&#34;Rolling&#34;)
 *                 .size(&#34;7d&#34;)
 *                 .target(99)
 *                 .timezone(&#34;Asia/Kolkata&#34;)
 *                 .build())
 *             .indicator(SloIndicatorArgs.builder()
 *                 .windowBasedEvaluation(SloIndicatorWindowBasedEvaluationArgs.builder()
 *                     .op(&#34;LessThan&#34;)
 *                     .queryType(&#34;Metrics&#34;)
 *                     .aggregation(&#34;Avg&#34;)
 *                     .size(&#34;1m&#34;)
 *                     .threshold(200)
 *                     .queries(SloIndicatorWindowBasedEvaluationQueryArgs.builder()
 *                         .queryGroupType(&#34;Threshold&#34;)
 *                         .queryGroups(SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs.builder()
 *                             .rowId(&#34;A&#34;)
 *                             .query(&#34;metric=request_time_p90  service=auth api=login&#34;)
 *                             .useRowCount(false)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var sloTfRequestBased = new Slo(&#34;sloTfRequestBased&#34;, SloArgs.builder()        
 *             .name(&#34;slo-tf-request-based&#34;)
 *             .description(&#34;example SLO created with terraform for request based SLI&#34;)
 *             .parentId(tfSloFolder.id())
 *             .signalType(&#34;Latency&#34;)
 *             .service(&#34;auth&#34;)
 *             .application(&#34;login&#34;)
 *             .tags(Map.ofEntries(
 *                 Map.entry(&#34;team&#34;, &#34;metrics&#34;),
 *                 Map.entry(&#34;application&#34;, &#34;sumologic&#34;)
 *             ))
 *             .compliances(SloComplianceArgs.builder()
 *                 .complianceType(&#34;Rolling&#34;)
 *                 .size(&#34;7d&#34;)
 *                 .target(99)
 *                 .timezone(&#34;Asia/Kolkata&#34;)
 *                 .build())
 *             .indicator(SloIndicatorArgs.builder()
 *                 .requestBasedEvaluation(SloIndicatorRequestBasedEvaluationArgs.builder()
 *                     .op(&#34;LessThanOrEqual&#34;)
 *                     .queryType(&#34;Logs&#34;)
 *                     .threshold(1)
 *                     .queries(SloIndicatorRequestBasedEvaluationQueryArgs.builder()
 *                         .queryGroupType(&#34;Threshold&#34;)
 *                         .queryGroups(SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs.builder()
 *                             .rowId(&#34;A&#34;)
 *                             .query(&#34;&#34;&#34;
 *           cluster=sedemostaging namespace=warp004*
 *               | parse &#34;Coffee preparation request time: * ms&#34; as latency nodrop
 *               |  if(isBlank(latency), &#34;false&#34;, &#34;true&#34;) as hasLatency
 *               | where hasLatency = &#34;true&#34;
 *               |  if(isBlank(latency), 0.0, latency) as latency
 *               | latency/ 1000 as latency_sec
 *                             &#34;&#34;&#34;)
 *                             .useRowCount(false)
 *                             .field(&#34;latency_sec&#34;)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var sloTfMonitorBased = new Slo(&#34;sloTfMonitorBased&#34;, SloArgs.builder()        
 *             .name(&#34;slo-tf-monitor-based&#34;)
 *             .description(&#34;example of monitor based SLO created with terraform&#34;)
 *             .parentId(&#34;0000000000000001&#34;)
 *             .signalType(&#34;Error&#34;)
 *             .service(&#34;auth&#34;)
 *             .application(&#34;login&#34;)
 *             .tags(Map.ofEntries(
 *                 Map.entry(&#34;team&#34;, &#34;metrics&#34;),
 *                 Map.entry(&#34;application&#34;, &#34;sumologic&#34;)
 *             ))
 *             .compliances(SloComplianceArgs.builder()
 *                 .complianceType(&#34;Rolling&#34;)
 *                 .size(&#34;7d&#34;)
 *                 .target(99)
 *                 .timezone(&#34;Asia/Kolkata&#34;)
 *                 .build())
 *             .indicator(SloIndicatorArgs.builder()
 *                 .monitorBasedEvaluation(SloIndicatorMonitorBasedEvaluationArgs.builder()
 *                     .monitorTriggers(SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs.builder()
 *                         .monitorId(&#34;0000000000BCB3A4&#34;)
 *                         .triggerTypes(&#34;Critical&#34;)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="sumologic:index/slo:Slo")
public class Slo extends com.pulumi.resources.CustomResource {
    /**
     * Name of the application.
     * 
     */
    @Export(name="application", refs={String.class}, tree="[0]")
    private Output<String> application;

    /**
     * @return Name of the application.
     * 
     */
    public Output<String> application() {
        return this.application;
    }
    /**
     * The compliance settings for the SLO.
     * 
     */
    @Export(name="compliances", refs={List.class,SloCompliance.class}, tree="[0,1]")
    private Output<List<SloCompliance>> compliances;

    /**
     * @return The compliance settings for the SLO.
     * 
     */
    public Output<List<SloCompliance>> compliances() {
        return this.compliances;
    }
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt;
    }
    @Export(name="createdBy", refs={String.class}, tree="[0]")
    private Output<String> createdBy;

    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * The description of the SLO.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the SLO.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The service level indicator on which SLO is to be defined. more details on the difference
     * b/w them can be found on
     * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
     * - window_based_evaluation - Evaluate SLI using successful/total windows.
     * - request_based_evaluation - Evaluate SLI based on occurrence of successful
     *   events / total events over entire compliance period.
     * - monitor_based_evaluation - SLIs for Monitor-based SLOs are calculated at a granularity of 1 minute. A minute is treated as unsuccessful if the Monitor threshold is violated at any point of time within that minute.
     * 
     */
    @Export(name="indicator", refs={SloIndicator.class}, tree="[0]")
    private Output<SloIndicator> indicator;

    /**
     * @return The service level indicator on which SLO is to be defined. more details on the difference
     * b/w them can be found on
     * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
     * - window_based_evaluation - Evaluate SLI using successful/total windows.
     * - request_based_evaluation - Evaluate SLI based on occurrence of successful
     *   events / total events over entire compliance period.
     * - monitor_based_evaluation - SLIs for Monitor-based SLOs are calculated at a granularity of 1 minute. A minute is treated as unsuccessful if the Monitor threshold is violated at any point of time within that minute.
     * 
     */
    public Output<SloIndicator> indicator() {
        return this.indicator;
    }
    @Export(name="isLocked", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> isLocked;

    public Output<Optional<Boolean>> isLocked() {
        return Codegen.optional(this.isLocked);
    }
    @Export(name="isMutable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isMutable;

    public Output<Boolean> isMutable() {
        return this.isMutable;
    }
    @Export(name="isSystem", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSystem;

    public Output<Boolean> isSystem() {
        return this.isSystem;
    }
    @Export(name="modifiedAt", refs={String.class}, tree="[0]")
    private Output<String> modifiedAt;

    public Output<String> modifiedAt() {
        return this.modifiedAt;
    }
    @Export(name="modifiedBy", refs={String.class}, tree="[0]")
    private Output<String> modifiedBy;

    public Output<String> modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * The name of the SLO. The name must be alphanumeric.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the SLO. The name must be alphanumeric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
     * 
     */
    @Export(name="parentId", refs={String.class}, tree="[0]")
    private Output<String> parentId;

    /**
     * @return The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }
    @Export(name="postRequestMap", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> postRequestMap;

    public Output<Optional<Map<String,String>>> postRequestMap() {
        return Codegen.optional(this.postRequestMap);
    }
    /**
     * Name of the service.
     * 
     */
    @Export(name="service", refs={String.class}, tree="[0]")
    private Output<String> service;

    /**
     * @return Name of the service.
     * 
     */
    public Output<String> service() {
        return this.service;
    }
    /**
     * The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
     * , `Other`. Defaults to `Latency`.
     * 
     */
    @Export(name="signalType", refs={String.class}, tree="[0]")
    private Output<String> signalType;

    /**
     * @return The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
     * , `Other`. Defaults to `Latency`.
     * 
     */
    public Output<String> signalType() {
        return this.signalType;
    }
    /**
     * A map defining tag keys and tag values for the SLO.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return A map defining tag keys and tag values for the SLO.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Slo(String name) {
        this(name, SloArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Slo(String name, SloArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Slo(String name, SloArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/slo:Slo", name, args == null ? SloArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Slo(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/slo:Slo", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Slo get(String name, Output<String> id, @Nullable SloState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Slo(name, id, state, options);
    }
}
