// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartitionState extends com.pulumi.resources.ResourceArgs {

    public static final PartitionState Empty = new PartitionState();

    /**
     * The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`
     * 
     */
    @Import(name="analyticsTier")
    private @Nullable Output<String> analyticsTier;

    /**
     * @return The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`
     * 
     */
    public Optional<Output<String>> analyticsTier() {
        return Optional.ofNullable(this.analyticsTier);
    }

    @Import(name="dataForwardingId")
    private @Nullable Output<String> dataForwardingId;

    public Optional<Output<String>> dataForwardingId() {
        return Optional.ofNullable(this.dataForwardingId);
    }

    @Import(name="indexType")
    private @Nullable Output<String> indexType;

    public Optional<Output<String>> indexType() {
        return Optional.ofNullable(this.indexType);
    }

    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.
     * 
     */
    @Import(name="isCompliant")
    private @Nullable Output<Boolean> isCompliant;

    /**
     * @return Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.
     * 
     */
    public Optional<Output<Boolean>> isCompliant() {
        return Optional.ofNullable(this.isCompliant);
    }

    /**
     * The name of the partition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the partition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.
     * 
     */
    @Import(name="reduceRetentionPeriodImmediately")
    private @Nullable Output<Boolean> reduceRetentionPeriodImmediately;

    /**
     * @return This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.
     * 
     */
    public Optional<Output<Boolean>> reduceRetentionPeriodImmediately() {
        return Optional.ofNullable(this.reduceRetentionPeriodImmediately);
    }

    /**
     * The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<Integer> retentionPeriod;

    /**
     * @return The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.
     * 
     */
    public Optional<Output<Integer>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * The query that defines the data to be included in the partition.
     * 
     */
    @Import(name="routingExpression")
    private @Nullable Output<String> routingExpression;

    /**
     * @return The query that defines the data to be included in the partition.
     * 
     */
    public Optional<Output<String>> routingExpression() {
        return Optional.ofNullable(this.routingExpression);
    }

    @Import(name="totalBytes")
    private @Nullable Output<Integer> totalBytes;

    public Optional<Output<Integer>> totalBytes() {
        return Optional.ofNullable(this.totalBytes);
    }

    private PartitionState() {}

    private PartitionState(PartitionState $) {
        this.analyticsTier = $.analyticsTier;
        this.dataForwardingId = $.dataForwardingId;
        this.indexType = $.indexType;
        this.isActive = $.isActive;
        this.isCompliant = $.isCompliant;
        this.name = $.name;
        this.reduceRetentionPeriodImmediately = $.reduceRetentionPeriodImmediately;
        this.retentionPeriod = $.retentionPeriod;
        this.routingExpression = $.routingExpression;
        this.totalBytes = $.totalBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartitionState $;

        public Builder() {
            $ = new PartitionState();
        }

        public Builder(PartitionState defaults) {
            $ = new PartitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyticsTier The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`
         * 
         * @return builder
         * 
         */
        public Builder analyticsTier(@Nullable Output<String> analyticsTier) {
            $.analyticsTier = analyticsTier;
            return this;
        }

        /**
         * @param analyticsTier The Cloud Flex analytics tier for your data; only relevant if your account has basic analytics enabled. Possible values are: `continuous`, `frequent`, `infrequent`
         * 
         * @return builder
         * 
         */
        public Builder analyticsTier(String analyticsTier) {
            return analyticsTier(Output.of(analyticsTier));
        }

        public Builder dataForwardingId(@Nullable Output<String> dataForwardingId) {
            $.dataForwardingId = dataForwardingId;
            return this;
        }

        public Builder dataForwardingId(String dataForwardingId) {
            return dataForwardingId(Output.of(dataForwardingId));
        }

        public Builder indexType(@Nullable Output<String> indexType) {
            $.indexType = indexType;
            return this;
        }

        public Builder indexType(String indexType) {
            return indexType(Output.of(indexType));
        }

        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param isCompliant Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(@Nullable Output<Boolean> isCompliant) {
            $.isCompliant = isCompliant;
            return this;
        }

        /**
         * @param isCompliant Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(Boolean isCompliant) {
            return isCompliant(Output.of(isCompliant));
        }

        /**
         * @param name The name of the partition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the partition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param reduceRetentionPeriodImmediately This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.
         * 
         * @return builder
         * 
         */
        public Builder reduceRetentionPeriodImmediately(@Nullable Output<Boolean> reduceRetentionPeriodImmediately) {
            $.reduceRetentionPeriodImmediately = reduceRetentionPeriodImmediately;
            return this;
        }

        /**
         * @param reduceRetentionPeriodImmediately This is required on update if the newly specified retention period is less than the existing retention period. In such a situation, a value of true says that data between the existing retention period and the new retention period should be deleted immediately; if false, such data will be deleted after seven days. This property is optional and ignored if the specified retentionPeriod is greater than or equal to the current retention period.
         * 
         * @return builder
         * 
         */
        public Builder reduceRetentionPeriodImmediately(Boolean reduceRetentionPeriodImmediately) {
            return reduceRetentionPeriodImmediately(Output.of(reduceRetentionPeriodImmediately));
        }

        /**
         * @param retentionPeriod The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<Integer> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod The number of days to retain data in the partition, or -1 to use the default value for your account. Only relevant if your account has variable retention enabled.
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(Integer retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        /**
         * @param routingExpression The query that defines the data to be included in the partition.
         * 
         * @return builder
         * 
         */
        public Builder routingExpression(@Nullable Output<String> routingExpression) {
            $.routingExpression = routingExpression;
            return this;
        }

        /**
         * @param routingExpression The query that defines the data to be included in the partition.
         * 
         * @return builder
         * 
         */
        public Builder routingExpression(String routingExpression) {
            return routingExpression(Output.of(routingExpression));
        }

        public Builder totalBytes(@Nullable Output<Integer> totalBytes) {
            $.totalBytes = totalBytes;
            return this;
        }

        public Builder totalBytes(Integer totalBytes) {
            return totalBytes(Output.of(totalBytes));
        }

        public PartitionState build() {
            return $;
        }
    }

}
