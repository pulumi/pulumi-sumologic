// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.MetricsSearchV2QueryArgs;
import com.pulumi.sumologic.inputs.MetricsSearchV2TimeRangeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricsSearchV2Args extends com.pulumi.resources.ResourceArgs {

    public static final MetricsSearchV2Args Empty = new MetricsSearchV2Args();

    /**
     * Description of the search.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the search.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The identifier of the folder to create the metrics search in.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return The identifier of the folder to create the metrics search in.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
     * 
     */
    @Import(name="queries", required=true)
    private Output<List<MetricsSearchV2QueryArgs>> queries;

    /**
     * @return Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
     * 
     */
    public Output<List<MetricsSearchV2QueryArgs>> queries() {
        return this.queries;
    }

    /**
     * Time range of the metrics search. See time range schema
     * 
     */
    @Import(name="timeRange", required=true)
    private Output<MetricsSearchV2TimeRangeArgs> timeRange;

    /**
     * @return Time range of the metrics search. See time range schema
     * 
     */
    public Output<MetricsSearchV2TimeRangeArgs> timeRange() {
        return this.timeRange;
    }

    /**
     * Title of the search.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return Title of the search.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    @Import(name="visualSettings")
    private @Nullable Output<String> visualSettings;

    public Optional<Output<String>> visualSettings() {
        return Optional.ofNullable(this.visualSettings);
    }

    private MetricsSearchV2Args() {}

    private MetricsSearchV2Args(MetricsSearchV2Args $) {
        this.description = $.description;
        this.folderId = $.folderId;
        this.queries = $.queries;
        this.timeRange = $.timeRange;
        this.title = $.title;
        this.visualSettings = $.visualSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricsSearchV2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricsSearchV2Args $;

        public Builder() {
            $ = new MetricsSearchV2Args();
        }

        public Builder(MetricsSearchV2Args defaults) {
            $ = new MetricsSearchV2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderId The identifier of the folder to create the metrics search in.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The identifier of the folder to create the metrics search in.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param queries Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder queries(Output<List<MetricsSearchV2QueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        /**
         * @param queries Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder queries(List<MetricsSearchV2QueryArgs> queries) {
            return queries(Output.of(queries));
        }

        /**
         * @param queries Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
         * 
         * @return builder
         * 
         */
        public Builder queries(MetricsSearchV2QueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param timeRange Time range of the metrics search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Output<MetricsSearchV2TimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range of the metrics search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(MetricsSearchV2TimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param title Title of the search.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the search.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder visualSettings(@Nullable Output<String> visualSettings) {
            $.visualSettings = visualSettings;
            return this;
        }

        public Builder visualSettings(String visualSettings) {
            return visualSettings(Output.of(visualSettings));
        }

        public MetricsSearchV2Args build() {
            if ($.queries == null) {
                throw new MissingRequiredPropertyException("MetricsSearchV2Args", "queries");
            }
            if ($.timeRange == null) {
                throw new MissingRequiredPropertyException("MetricsSearchV2Args", "timeRange");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("MetricsSearchV2Args", "title");
            }
            return $;
        }
    }

}
