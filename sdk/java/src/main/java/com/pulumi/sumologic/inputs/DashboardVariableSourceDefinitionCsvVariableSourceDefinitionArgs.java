// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs Empty = new DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs();

    @Import(name="values", required=true)
    private Output<String> values;

    public Output<String> values() {
        return this.values;
    }

    private DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs() {}

    private DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs(DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs $) {
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs $;

        public Builder() {
            $ = new DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs();
        }

        public Builder(DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs defaults) {
            $ = new DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder values(Output<String> values) {
            $.values = values;
            return this;
        }

        public Builder values(String values) {
            return values(Output.of(values));
        }

        public DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs build() {
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
