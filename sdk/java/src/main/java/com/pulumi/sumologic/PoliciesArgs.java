// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.PoliciesUserConcurrentSessionsLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class PoliciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoliciesArgs Empty = new PoliciesArgs();

    /**
     * Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
     * 
     */
    @Import(name="audit", required=true)
    private Output<Boolean> audit;

    /**
     * @return Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
     * 
     */
    public Output<Boolean> audit() {
        return this.audit;
    }

    /**
     * Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
     * 
     */
    @Import(name="dataAccessLevel", required=true)
    private Output<Boolean> dataAccessLevel;

    /**
     * @return Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
     * 
     */
    public Output<Boolean> dataAccessLevel() {
        return this.dataAccessLevel;
    }

    /**
     * The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
     * 
     */
    @Import(name="maxUserSessionTimeout", required=true)
    private Output<String> maxUserSessionTimeout;

    /**
     * @return The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
     * 
     */
    public Output<String> maxUserSessionTimeout() {
        return this.maxUserSessionTimeout;
    }

    /**
     * Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
     * 
     */
    @Import(name="searchAudit", required=true)
    private Output<Boolean> searchAudit;

    /**
     * @return Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
     * 
     */
    public Output<Boolean> searchAudit() {
        return this.searchAudit;
    }

    /**
     * Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
     * 
     */
    @Import(name="shareDashboardsOutsideOrganization", required=true)
    private Output<Boolean> shareDashboardsOutsideOrganization;

    /**
     * @return Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
     * 
     */
    public Output<Boolean> shareDashboardsOutsideOrganization() {
        return this.shareDashboardsOutsideOrganization;
    }

    /**
     * The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
     * 
     */
    @Import(name="userConcurrentSessionsLimit", required=true)
    private Output<PoliciesUserConcurrentSessionsLimitArgs> userConcurrentSessionsLimit;

    /**
     * @return The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
     * 
     */
    public Output<PoliciesUserConcurrentSessionsLimitArgs> userConcurrentSessionsLimit() {
        return this.userConcurrentSessionsLimit;
    }

    private PoliciesArgs() {}

    private PoliciesArgs(PoliciesArgs $) {
        this.audit = $.audit;
        this.dataAccessLevel = $.dataAccessLevel;
        this.maxUserSessionTimeout = $.maxUserSessionTimeout;
        this.searchAudit = $.searchAudit;
        this.shareDashboardsOutsideOrganization = $.shareDashboardsOutsideOrganization;
        this.userConcurrentSessionsLimit = $.userConcurrentSessionsLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoliciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoliciesArgs $;

        public Builder() {
            $ = new PoliciesArgs();
        }

        public Builder(PoliciesArgs defaults) {
            $ = new PoliciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audit Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder audit(Output<Boolean> audit) {
            $.audit = audit;
            return this;
        }

        /**
         * @param audit Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder audit(Boolean audit) {
            return audit(Output.of(audit));
        }

        /**
         * @param dataAccessLevel Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLevel(Output<Boolean> dataAccessLevel) {
            $.dataAccessLevel = dataAccessLevel;
            return this;
        }

        /**
         * @param dataAccessLevel Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLevel(Boolean dataAccessLevel) {
            return dataAccessLevel(Output.of(dataAccessLevel));
        }

        /**
         * @param maxUserSessionTimeout The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
         * 
         * @return builder
         * 
         */
        public Builder maxUserSessionTimeout(Output<String> maxUserSessionTimeout) {
            $.maxUserSessionTimeout = maxUserSessionTimeout;
            return this;
        }

        /**
         * @param maxUserSessionTimeout The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
         * 
         * @return builder
         * 
         */
        public Builder maxUserSessionTimeout(String maxUserSessionTimeout) {
            return maxUserSessionTimeout(Output.of(maxUserSessionTimeout));
        }

        /**
         * @param searchAudit Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder searchAudit(Output<Boolean> searchAudit) {
            $.searchAudit = searchAudit;
            return this;
        }

        /**
         * @param searchAudit Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder searchAudit(Boolean searchAudit) {
            return searchAudit(Output.of(searchAudit));
        }

        /**
         * @param shareDashboardsOutsideOrganization Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder shareDashboardsOutsideOrganization(Output<Boolean> shareDashboardsOutsideOrganization) {
            $.shareDashboardsOutsideOrganization = shareDashboardsOutsideOrganization;
            return this;
        }

        /**
         * @param shareDashboardsOutsideOrganization Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder shareDashboardsOutsideOrganization(Boolean shareDashboardsOutsideOrganization) {
            return shareDashboardsOutsideOrganization(Output.of(shareDashboardsOutsideOrganization));
        }

        /**
         * @param userConcurrentSessionsLimit The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
         * 
         * @return builder
         * 
         */
        public Builder userConcurrentSessionsLimit(Output<PoliciesUserConcurrentSessionsLimitArgs> userConcurrentSessionsLimit) {
            $.userConcurrentSessionsLimit = userConcurrentSessionsLimit;
            return this;
        }

        /**
         * @param userConcurrentSessionsLimit The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
         * 
         * @return builder
         * 
         */
        public Builder userConcurrentSessionsLimit(PoliciesUserConcurrentSessionsLimitArgs userConcurrentSessionsLimit) {
            return userConcurrentSessionsLimit(Output.of(userConcurrentSessionsLimit));
        }

        public PoliciesArgs build() {
            $.audit = Objects.requireNonNull($.audit, "expected parameter 'audit' to be non-null");
            $.dataAccessLevel = Objects.requireNonNull($.dataAccessLevel, "expected parameter 'dataAccessLevel' to be non-null");
            $.maxUserSessionTimeout = Objects.requireNonNull($.maxUserSessionTimeout, "expected parameter 'maxUserSessionTimeout' to be non-null");
            $.searchAudit = Objects.requireNonNull($.searchAudit, "expected parameter 'searchAudit' to be non-null");
            $.shareDashboardsOutsideOrganization = Objects.requireNonNull($.shareDashboardsOutsideOrganization, "expected parameter 'shareDashboardsOutsideOrganization' to be non-null");
            $.userConcurrentSessionsLimit = Objects.requireNonNull($.userConcurrentSessionsLimit, "expected parameter 'userConcurrentSessionsLimit' to be non-null");
            return $;
        }
    }

}
