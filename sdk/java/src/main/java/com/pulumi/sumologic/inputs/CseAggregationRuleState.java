// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.CseAggregationRuleAggregationFunctionArgs;
import com.pulumi.sumologic.inputs.CseAggregationRuleEntitySelectorArgs;
import com.pulumi.sumologic.inputs.CseAggregationRuleSeverityMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseAggregationRuleState extends com.pulumi.resources.ResourceArgs {

    public static final CseAggregationRuleState Empty = new CseAggregationRuleState();

    /**
     * One or more named aggregation functions
     * 
     */
    @Import(name="aggregationFunctions")
    private @Nullable Output<List<CseAggregationRuleAggregationFunctionArgs>> aggregationFunctions;

    /**
     * @return One or more named aggregation functions
     * 
     */
    public Optional<Output<List<CseAggregationRuleAggregationFunctionArgs>>> aggregationFunctions() {
        return Optional.ofNullable(this.aggregationFunctions);
    }

    /**
     * The description of the generated Signals
     * 
     */
    @Import(name="descriptionExpression")
    private @Nullable Output<String> descriptionExpression;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Optional<Output<String>> descriptionExpression() {
        return Optional.ofNullable(this.descriptionExpression);
    }

    /**
     * Whether the rule should generate Signals
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The entities to generate Signals on
     * 
     */
    @Import(name="entitySelectors")
    private @Nullable Output<List<CseAggregationRuleEntitySelectorArgs>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * 
     */
    public Optional<Output<List<CseAggregationRuleEntitySelectorArgs>>> entitySelectors() {
        return Optional.ofNullable(this.entitySelectors);
    }

    /**
     * Whether to group records by the specified entity fields
     * 
     */
    @Import(name="groupByEntity")
    private @Nullable Output<Boolean> groupByEntity;

    /**
     * @return Whether to group records by the specified entity fields
     * 
     */
    public Optional<Output<Boolean>> groupByEntity() {
        return Optional.ofNullable(this.groupByEntity);
    }

    /**
     * A list of fields to group records by
     * 
     */
    @Import(name="groupByFields")
    private @Nullable Output<List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Optional<Output<List<String>>> groupByFields() {
        return Optional.ofNullable(this.groupByFields);
    }

    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Import(name="isPrototype")
    private @Nullable Output<Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Optional<Output<Boolean>> isPrototype() {
        return Optional.ofNullable(this.isPrototype);
    }

    /**
     * The expression for which records to match on
     * 
     */
    @Import(name="matchExpression")
    private @Nullable Output<String> matchExpression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Optional<Output<String>> matchExpression() {
        return Optional.ofNullable(this.matchExpression);
    }

    /**
     * The name of the Rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the generated Signals
     * 
     */
    @Import(name="nameExpression")
    private @Nullable Output<String> nameExpression;

    /**
     * @return The name of the generated Signals
     * 
     */
    public Optional<Output<String>> nameExpression() {
        return Optional.ofNullable(this.nameExpression);
    }

    /**
     * The configuration of how the severity of the Signals should be mapped from the Records
     * 
     */
    @Import(name="severityMapping")
    private @Nullable Output<CseAggregationRuleSeverityMappingArgs> severityMapping;

    /**
     * @return The configuration of how the severity of the Signals should be mapped from the Records
     * 
     */
    public Optional<Output<CseAggregationRuleSeverityMappingArgs>> severityMapping() {
        return Optional.ofNullable(this.severityMapping);
    }

    /**
     * The summary of the generated Signals
     * 
     */
    @Import(name="summaryExpression")
    private @Nullable Output<String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Optional<Output<String>> summaryExpression() {
        return Optional.ofNullable(this.summaryExpression);
    }

    /**
     * The tags of the generated Signals
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The expression to determine whether a Signal should be created based on the aggregation results
     * 
     */
    @Import(name="triggerExpression")
    private @Nullable Output<String> triggerExpression;

    /**
     * @return The expression to determine whether a Signal should be created based on the aggregation results
     * 
     */
    public Optional<Output<String>> triggerExpression() {
        return Optional.ofNullable(this.triggerExpression);
    }

    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<String> windowSize;

    /**
     * @return How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     * 
     */
    public Optional<Output<String>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private CseAggregationRuleState() {}

    private CseAggregationRuleState(CseAggregationRuleState $) {
        this.aggregationFunctions = $.aggregationFunctions;
        this.descriptionExpression = $.descriptionExpression;
        this.enabled = $.enabled;
        this.entitySelectors = $.entitySelectors;
        this.groupByEntity = $.groupByEntity;
        this.groupByFields = $.groupByFields;
        this.isPrototype = $.isPrototype;
        this.matchExpression = $.matchExpression;
        this.name = $.name;
        this.nameExpression = $.nameExpression;
        this.severityMapping = $.severityMapping;
        this.summaryExpression = $.summaryExpression;
        this.tags = $.tags;
        this.triggerExpression = $.triggerExpression;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseAggregationRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseAggregationRuleState $;

        public Builder() {
            $ = new CseAggregationRuleState();
        }

        public Builder(CseAggregationRuleState defaults) {
            $ = new CseAggregationRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aggregationFunctions One or more named aggregation functions
         * 
         * @return builder
         * 
         */
        public Builder aggregationFunctions(@Nullable Output<List<CseAggregationRuleAggregationFunctionArgs>> aggregationFunctions) {
            $.aggregationFunctions = aggregationFunctions;
            return this;
        }

        /**
         * @param aggregationFunctions One or more named aggregation functions
         * 
         * @return builder
         * 
         */
        public Builder aggregationFunctions(List<CseAggregationRuleAggregationFunctionArgs> aggregationFunctions) {
            return aggregationFunctions(Output.of(aggregationFunctions));
        }

        /**
         * @param aggregationFunctions One or more named aggregation functions
         * 
         * @return builder
         * 
         */
        public Builder aggregationFunctions(CseAggregationRuleAggregationFunctionArgs... aggregationFunctions) {
            return aggregationFunctions(List.of(aggregationFunctions));
        }

        /**
         * @param descriptionExpression The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder descriptionExpression(@Nullable Output<String> descriptionExpression) {
            $.descriptionExpression = descriptionExpression;
            return this;
        }

        /**
         * @param descriptionExpression The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder descriptionExpression(String descriptionExpression) {
            return descriptionExpression(Output.of(descriptionExpression));
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(@Nullable Output<List<CseAggregationRuleEntitySelectorArgs>> entitySelectors) {
            $.entitySelectors = entitySelectors;
            return this;
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(List<CseAggregationRuleEntitySelectorArgs> entitySelectors) {
            return entitySelectors(Output.of(entitySelectors));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(CseAggregationRuleEntitySelectorArgs... entitySelectors) {
            return entitySelectors(List.of(entitySelectors));
        }

        /**
         * @param groupByEntity Whether to group records by the specified entity fields
         * 
         * @return builder
         * 
         */
        public Builder groupByEntity(@Nullable Output<Boolean> groupByEntity) {
            $.groupByEntity = groupByEntity;
            return this;
        }

        /**
         * @param groupByEntity Whether to group records by the specified entity fields
         * 
         * @return builder
         * 
         */
        public Builder groupByEntity(Boolean groupByEntity) {
            return groupByEntity(Output.of(groupByEntity));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(@Nullable Output<List<String>> groupByFields) {
            $.groupByFields = groupByFields;
            return this;
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(List<String> groupByFields) {
            return groupByFields(Output.of(groupByFields));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(String... groupByFields) {
            return groupByFields(List.of(groupByFields));
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(@Nullable Output<Boolean> isPrototype) {
            $.isPrototype = isPrototype;
            return this;
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(Boolean isPrototype) {
            return isPrototype(Output.of(isPrototype));
        }

        /**
         * @param matchExpression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder matchExpression(@Nullable Output<String> matchExpression) {
            $.matchExpression = matchExpression;
            return this;
        }

        /**
         * @param matchExpression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder matchExpression(String matchExpression) {
            return matchExpression(Output.of(matchExpression));
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameExpression The name of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder nameExpression(@Nullable Output<String> nameExpression) {
            $.nameExpression = nameExpression;
            return this;
        }

        /**
         * @param nameExpression The name of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder nameExpression(String nameExpression) {
            return nameExpression(Output.of(nameExpression));
        }

        /**
         * @param severityMapping The configuration of how the severity of the Signals should be mapped from the Records
         * 
         * @return builder
         * 
         */
        public Builder severityMapping(@Nullable Output<CseAggregationRuleSeverityMappingArgs> severityMapping) {
            $.severityMapping = severityMapping;
            return this;
        }

        /**
         * @param severityMapping The configuration of how the severity of the Signals should be mapped from the Records
         * 
         * @return builder
         * 
         */
        public Builder severityMapping(CseAggregationRuleSeverityMappingArgs severityMapping) {
            return severityMapping(Output.of(severityMapping));
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(@Nullable Output<String> summaryExpression) {
            $.summaryExpression = summaryExpression;
            return this;
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(String summaryExpression) {
            return summaryExpression(Output.of(summaryExpression));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param triggerExpression The expression to determine whether a Signal should be created based on the aggregation results
         * 
         * @return builder
         * 
         */
        public Builder triggerExpression(@Nullable Output<String> triggerExpression) {
            $.triggerExpression = triggerExpression;
            return this;
        }

        /**
         * @param triggerExpression The expression to determine whether a Signal should be created based on the aggregation results
         * 
         * @return builder
         * 
         */
        public Builder triggerExpression(String triggerExpression) {
            return triggerExpression(Output.of(triggerExpression));
        }

        /**
         * @param windowSize How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public CseAggregationRuleState build() {
            return $;
        }
    }

}
