// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.PoliciesUserConcurrentSessionsLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoliciesState extends com.pulumi.resources.ResourceArgs {

    public static final PoliciesState Empty = new PoliciesState();

    /**
     * Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
     * 
     */
    @Import(name="audit")
    private @Nullable Output<Boolean> audit;

    /**
     * @return Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
     * 
     */
    public Optional<Output<Boolean>> audit() {
        return Optional.ofNullable(this.audit);
    }

    /**
     * Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
     * 
     */
    @Import(name="dataAccessLevel")
    private @Nullable Output<Boolean> dataAccessLevel;

    /**
     * @return Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
     * 
     */
    public Optional<Output<Boolean>> dataAccessLevel() {
        return Optional.ofNullable(this.dataAccessLevel);
    }

    /**
     * The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
     * 
     */
    @Import(name="maxUserSessionTimeout")
    private @Nullable Output<String> maxUserSessionTimeout;

    /**
     * @return The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
     * 
     */
    public Optional<Output<String>> maxUserSessionTimeout() {
        return Optional.ofNullable(this.maxUserSessionTimeout);
    }

    /**
     * Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
     * 
     */
    @Import(name="searchAudit")
    private @Nullable Output<Boolean> searchAudit;

    /**
     * @return Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
     * 
     */
    public Optional<Output<Boolean>> searchAudit() {
        return Optional.ofNullable(this.searchAudit);
    }

    /**
     * Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
     * 
     */
    @Import(name="shareDashboardsOutsideOrganization")
    private @Nullable Output<Boolean> shareDashboardsOutsideOrganization;

    /**
     * @return Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
     * 
     */
    public Optional<Output<Boolean>> shareDashboardsOutsideOrganization() {
        return Optional.ofNullable(this.shareDashboardsOutsideOrganization);
    }

    /**
     * The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
     * 
     */
    @Import(name="userConcurrentSessionsLimit")
    private @Nullable Output<PoliciesUserConcurrentSessionsLimitArgs> userConcurrentSessionsLimit;

    /**
     * @return The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
     * 
     */
    public Optional<Output<PoliciesUserConcurrentSessionsLimitArgs>> userConcurrentSessionsLimit() {
        return Optional.ofNullable(this.userConcurrentSessionsLimit);
    }

    private PoliciesState() {}

    private PoliciesState(PoliciesState $) {
        this.audit = $.audit;
        this.dataAccessLevel = $.dataAccessLevel;
        this.maxUserSessionTimeout = $.maxUserSessionTimeout;
        this.searchAudit = $.searchAudit;
        this.shareDashboardsOutsideOrganization = $.shareDashboardsOutsideOrganization;
        this.userConcurrentSessionsLimit = $.userConcurrentSessionsLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoliciesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoliciesState $;

        public Builder() {
            $ = new PoliciesState();
        }

        public Builder(PoliciesState defaults) {
            $ = new PoliciesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param audit Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder audit(@Nullable Output<Boolean> audit) {
            $.audit = audit;
            return this;
        }

        /**
         * @param audit Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder audit(Boolean audit) {
            return audit(Output.of(audit));
        }

        /**
         * @param dataAccessLevel Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLevel(@Nullable Output<Boolean> dataAccessLevel) {
            $.dataAccessLevel = dataAccessLevel;
            return this;
        }

        /**
         * @param dataAccessLevel Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder dataAccessLevel(Boolean dataAccessLevel) {
            return dataAccessLevel(Output.of(dataAccessLevel));
        }

        /**
         * @param maxUserSessionTimeout The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
         * 
         * @return builder
         * 
         */
        public Builder maxUserSessionTimeout(@Nullable Output<String> maxUserSessionTimeout) {
            $.maxUserSessionTimeout = maxUserSessionTimeout;
            return this;
        }

        /**
         * @param maxUserSessionTimeout The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
         * 
         * @return builder
         * 
         */
        public Builder maxUserSessionTimeout(String maxUserSessionTimeout) {
            return maxUserSessionTimeout(Output.of(maxUserSessionTimeout));
        }

        /**
         * @param searchAudit Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder searchAudit(@Nullable Output<Boolean> searchAudit) {
            $.searchAudit = searchAudit;
            return this;
        }

        /**
         * @param searchAudit Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder searchAudit(Boolean searchAudit) {
            return searchAudit(Output.of(searchAudit));
        }

        /**
         * @param shareDashboardsOutsideOrganization Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder shareDashboardsOutsideOrganization(@Nullable Output<Boolean> shareDashboardsOutsideOrganization) {
            $.shareDashboardsOutsideOrganization = shareDashboardsOutsideOrganization;
            return this;
        }

        /**
         * @param shareDashboardsOutsideOrganization Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
         * 
         * @return builder
         * 
         */
        public Builder shareDashboardsOutsideOrganization(Boolean shareDashboardsOutsideOrganization) {
            return shareDashboardsOutsideOrganization(Output.of(shareDashboardsOutsideOrganization));
        }

        /**
         * @param userConcurrentSessionsLimit The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
         * 
         * @return builder
         * 
         */
        public Builder userConcurrentSessionsLimit(@Nullable Output<PoliciesUserConcurrentSessionsLimitArgs> userConcurrentSessionsLimit) {
            $.userConcurrentSessionsLimit = userConcurrentSessionsLimit;
            return this;
        }

        /**
         * @param userConcurrentSessionsLimit The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
         * 
         * @return builder
         * 
         */
        public Builder userConcurrentSessionsLimit(PoliciesUserConcurrentSessionsLimitArgs userConcurrentSessionsLimit) {
            return userConcurrentSessionsLimit(Output.of(userConcurrentSessionsLimit));
        }

        public PoliciesState build() {
            return $;
        }
    }

}
