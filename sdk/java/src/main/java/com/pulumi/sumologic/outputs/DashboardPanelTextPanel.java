// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardPanelTextPanel {
    private final @Nullable String id;
    private final @Nullable Boolean keepVisualSettingsConsistentWithParent;
    private final String key;
    private final @Nullable String text;
    /**
     * @return Title of the dashboard.
     * 
     */
    private final @Nullable String title;
    private final @Nullable String visualSettings;

    @CustomType.Constructor
    private DashboardPanelTextPanel(
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("keepVisualSettingsConsistentWithParent") @Nullable Boolean keepVisualSettingsConsistentWithParent,
        @CustomType.Parameter("key") String key,
        @CustomType.Parameter("text") @Nullable String text,
        @CustomType.Parameter("title") @Nullable String title,
        @CustomType.Parameter("visualSettings") @Nullable String visualSettings) {
        this.id = id;
        this.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
        this.key = key;
        this.text = text;
        this.title = title;
        this.visualSettings = visualSettings;
    }

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Boolean> keepVisualSettingsConsistentWithParent() {
        return Optional.ofNullable(this.keepVisualSettingsConsistentWithParent);
    }
    public String key() {
        return this.key;
    }
    public Optional<String> text() {
        return Optional.ofNullable(this.text);
    }
    /**
     * @return Title of the dashboard.
     * 
     */
    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }
    public Optional<String> visualSettings() {
        return Optional.ofNullable(this.visualSettings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardPanelTextPanel defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String id;
        private @Nullable Boolean keepVisualSettingsConsistentWithParent;
        private String key;
        private @Nullable String text;
        private @Nullable String title;
        private @Nullable String visualSettings;

        public Builder() {
    	      // Empty
        }

        public Builder(DashboardPanelTextPanel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.keepVisualSettingsConsistentWithParent = defaults.keepVisualSettingsConsistentWithParent;
    	      this.key = defaults.key;
    	      this.text = defaults.text;
    	      this.title = defaults.title;
    	      this.visualSettings = defaults.visualSettings;
        }

        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder keepVisualSettingsConsistentWithParent(@Nullable Boolean keepVisualSettingsConsistentWithParent) {
            this.keepVisualSettingsConsistentWithParent = keepVisualSettingsConsistentWithParent;
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder text(@Nullable String text) {
            this.text = text;
            return this;
        }
        public Builder title(@Nullable String title) {
            this.title = title;
            return this;
        }
        public Builder visualSettings(@Nullable String visualSettings) {
            this.visualSettings = visualSettings;
            return this;
        }        public DashboardPanelTextPanel build() {
            return new DashboardPanelTextPanel(id, keepVisualSettingsConsistentWithParent, key, text, title, visualSettings);
        }
    }
}
