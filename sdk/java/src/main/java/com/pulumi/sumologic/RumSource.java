// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.RumSourceArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.RumSourceState;
import com.pulumi.sumologic.outputs.RumSourceDefaultDateFormat;
import com.pulumi.sumologic.outputs.RumSourceFilter;
import com.pulumi.sumologic.outputs.RumSourcePath;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Sumologic Rum Source.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.Collector;
 * import com.pulumi.sumologic.CollectorArgs;
 * import com.pulumi.sumologic.RumSource;
 * import com.pulumi.sumologic.RumSourceArgs;
 * import com.pulumi.sumologic.inputs.RumSourcePathArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var collector = new Collector("collector", CollectorArgs.builder()
 *             .name("test-collector")
 *             .category("macos/test")
 *             .build());
 * 
 *         var testRumSource = new RumSource("testRumSource", RumSourceArgs.builder()
 *             .name("rum_source_test")
 *             .description("Rum source created via terraform")
 *             .category("source/category")
 *             .collectorId(collector.id())
 *             .path(RumSourcePathArgs.builder()
 *                 .applicationName("test_application")
 *                 .serviceName("test_service")
 *                 .deploymentEnvironment("test_environment")
 *                 .samplingRate(0.5)
 *                 .ignoreUrls(                
 *                     "/^https:\\/\\/www.tracker.com\\/.*}&#47;{@code ",
 *                     "/^https:\\/\\/api.mydomain.com\\/log\\/.*}&#47;{@code ")
 *                 .customTags(Map.of("test_tag", "test_value"))
 *                 .propagateTraceHeaderCorsUrls(                
 *                     "/^https:\\/\\/api.mydomain.com\\/apiv3\\/.*}&#47;{@code ",
 *                     "/^https:\\/\\/www.3rdparty.com\\/.*}&#47;{@code ")
 *                 .selectedCountry("Poland")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;``
 * 
 * ## Import
 * 
 * Rum sources can be imported using the collector and source IDs, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/rumSource:RumSource test 123/456
 * ```
 * 
 * Rum sources can also be imported using the collector name and source name, e.g.:
 * 
 * hcl
 * 
 * ```sh
 * $ pulumi import sumologic:index/rumSource:RumSource test my-test-collector/my-test-source
 * ```
 * 
 */
@ResourceType(type="sumologic:index/rumSource:RumSource")
public class RumSource extends com.pulumi.resources.CustomResource {
    @Export(name="automaticDateParsing", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> automaticDateParsing;

    public Output<Optional<Boolean>> automaticDateParsing() {
        return Codegen.optional(this.automaticDateParsing);
    }
    @Export(name="category", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> category;

    public Output<Optional<String>> category() {
        return Codegen.optional(this.category);
    }
    @Export(name="collectorId", refs={Integer.class}, tree="[0]")
    private Output<Integer> collectorId;

    public Output<Integer> collectorId() {
        return this.collectorId;
    }
    @Export(name="contentType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contentType;

    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="cutoffRelativeTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cutoffRelativeTime;

    public Output<Optional<String>> cutoffRelativeTime() {
        return Codegen.optional(this.cutoffRelativeTime);
    }
    @Export(name="cutoffTimestamp", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> cutoffTimestamp;

    public Output<Optional<Integer>> cutoffTimestamp() {
        return Codegen.optional(this.cutoffTimestamp);
    }
    @Export(name="defaultDateFormats", refs={List.class,RumSourceDefaultDateFormat.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RumSourceDefaultDateFormat>> defaultDateFormats;

    public Output<Optional<List<RumSourceDefaultDateFormat>>> defaultDateFormats() {
        return Codegen.optional(this.defaultDateFormats);
    }
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    @Export(name="fields", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> fields;

    public Output<Optional<Map<String,String>>> fields() {
        return Codegen.optional(this.fields);
    }
    @Export(name="filters", refs={List.class,RumSourceFilter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RumSourceFilter>> filters;

    public Output<Optional<List<RumSourceFilter>>> filters() {
        return Codegen.optional(this.filters);
    }
    @Export(name="forceTimezone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceTimezone;

    public Output<Optional<Boolean>> forceTimezone() {
        return Codegen.optional(this.forceTimezone);
    }
    @Export(name="hashAlgorithm", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hashAlgorithm;

    public Output<Optional<String>> hashAlgorithm() {
        return Codegen.optional(this.hashAlgorithm);
    }
    @Export(name="hostName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostName;

    public Output<Optional<String>> hostName() {
        return Codegen.optional(this.hostName);
    }
    @Export(name="manualPrefixRegexp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> manualPrefixRegexp;

    public Output<Optional<String>> manualPrefixRegexp() {
        return Codegen.optional(this.manualPrefixRegexp);
    }
    @Export(name="multilineProcessingEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> multilineProcessingEnabled;

    public Output<Optional<Boolean>> multilineProcessingEnabled() {
        return Codegen.optional(this.multilineProcessingEnabled);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    @Export(name="path", refs={RumSourcePath.class}, tree="[0]")
    private Output</* @Nullable */ RumSourcePath> path;

    public Output<Optional<RumSourcePath>> path() {
        return Codegen.optional(this.path);
    }
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    @Export(name="useAutolineMatching", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> useAutolineMatching;

    public Output<Optional<Boolean>> useAutolineMatching() {
        return Codegen.optional(this.useAutolineMatching);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RumSource(java.lang.String name) {
        this(name, RumSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RumSource(java.lang.String name, RumSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RumSource(java.lang.String name, RumSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/rumSource:RumSource", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RumSource(java.lang.String name, Output<java.lang.String> id, @Nullable RumSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/rumSource:RumSource", name, state, makeResourceOptions(options, id), false);
    }

    private static RumSourceArgs makeArgs(RumSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RumSourceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RumSource get(java.lang.String name, Output<java.lang.String> id, @Nullable RumSourceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RumSource(name, id, state, options);
    }
}
