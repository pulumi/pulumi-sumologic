// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogSearchQueryParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogSearchQueryParameterArgs Empty = new LogSearchQueryParameterArgs();

    /**
     * The data type of the parameter. Supported values are:
     * 1. `NUMBER`
     * 2. `STRING`
     * 3. `ANY`
     * 4. `KEYWORD`
     * 
     */
    @Import(name="dataType", required=true)
    private Output<String> dataType;

    /**
     * @return The data type of the parameter. Supported values are:
     * 1. `NUMBER`
     * 2. `STRING`
     * 3. `ANY`
     * 4. `KEYWORD`
     * 
     */
    public Output<String> dataType() {
        return this.dataType;
    }

    /**
     * Description of the search.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the search.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the search.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the search.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Default value of scheduled search parameter.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return Default value of scheduled search parameter.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private LogSearchQueryParameterArgs() {}

    private LogSearchQueryParameterArgs(LogSearchQueryParameterArgs $) {
        this.dataType = $.dataType;
        this.description = $.description;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSearchQueryParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSearchQueryParameterArgs $;

        public Builder() {
            $ = new LogSearchQueryParameterArgs();
        }

        public Builder(LogSearchQueryParameterArgs defaults) {
            $ = new LogSearchQueryParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataType The data type of the parameter. Supported values are:
         * 1. `NUMBER`
         * 2. `STRING`
         * 3. `ANY`
         * 4. `KEYWORD`
         * 
         * @return builder
         * 
         */
        public Builder dataType(Output<String> dataType) {
            $.dataType = dataType;
            return this;
        }

        /**
         * @param dataType The data type of the parameter. Supported values are:
         * 1. `NUMBER`
         * 2. `STRING`
         * 3. `ANY`
         * 4. `KEYWORD`
         * 
         * @return builder
         * 
         */
        public Builder dataType(String dataType) {
            return dataType(Output.of(dataType));
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the search.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the search.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param value Default value of scheduled search parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Default value of scheduled search parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public LogSearchQueryParameterArgs build() {
            $.dataType = Objects.requireNonNull($.dataType, "expected parameter 'dataType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
