// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.ScanBudgetScopeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScanBudgetState extends com.pulumi.resources.ResourceArgs {

    public static final ScanBudgetState Empty = new ScanBudgetState();

    /**
     * Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
     * 
     */
    @Import(name="applicableOn")
    private @Nullable Output<String> applicableOn;

    /**
     * @return Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
     * 
     */
    public Optional<Output<String>> applicableOn() {
        return Optional.ofNullable(this.applicableOn);
    }

    /**
     * Type of the budget. Supported values are: `ScanBudget`.
     * 
     */
    @Import(name="budgetType")
    private @Nullable Output<String> budgetType;

    /**
     * @return Type of the budget. Supported values are: `ScanBudget`.
     * 
     */
    public Optional<Output<String>> budgetType() {
        return Optional.ofNullable(this.budgetType);
    }

    /**
     * Capacity of the scan budget. Only whole numbers are supported.
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Integer> capacity;

    /**
     * @return Capacity of the scan budget. Only whole numbers are supported.
     * 
     */
    public Optional<Output<Integer>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * Grouping Entity of the budget. Supported values are: `User`.
     * 
     */
    @Import(name="groupBy")
    private @Nullable Output<String> groupBy;

    /**
     * @return Grouping Entity of the budget. Supported values are: `User`.
     * 
     */
    public Optional<Output<String>> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    /**
     * Display name of the scan budget. This must be unique across all the scan budgets.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of the scan budget. This must be unique across all the scan budgets.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Scope of the budget.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<ScanBudgetScopeArgs> scope;

    /**
     * @return Scope of the budget.
     * 
     */
    public Optional<Output<ScanBudgetScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Signifies the state of the budget. Supported values are: `active` and `inactive`.
     * 
     * The following attributes are exported:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Signifies the state of the budget. Supported values are: `active` and `inactive`.
     * 
     * The following attributes are exported:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
     * 
     */
    @Import(name="unit")
    private @Nullable Output<String> unit;

    /**
     * @return Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
     * 
     */
    public Optional<Output<String>> unit() {
        return Optional.ofNullable(this.unit);
    }

    /**
     * Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
     * 
     */
    @Import(name="window")
    private @Nullable Output<String> window;

    /**
     * @return Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
     * 
     */
    public Optional<Output<String>> window() {
        return Optional.ofNullable(this.window);
    }

    private ScanBudgetState() {}

    private ScanBudgetState(ScanBudgetState $) {
        this.action = $.action;
        this.applicableOn = $.applicableOn;
        this.budgetType = $.budgetType;
        this.capacity = $.capacity;
        this.groupBy = $.groupBy;
        this.name = $.name;
        this.scope = $.scope;
        this.status = $.status;
        this.unit = $.unit;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScanBudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScanBudgetState $;

        public Builder() {
            $ = new ScanBudgetState();
        }

        public Builder(ScanBudgetState defaults) {
            $ = new ScanBudgetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param applicableOn Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
         * 
         * @return builder
         * 
         */
        public Builder applicableOn(@Nullable Output<String> applicableOn) {
            $.applicableOn = applicableOn;
            return this;
        }

        /**
         * @param applicableOn Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
         * 
         * @return builder
         * 
         */
        public Builder applicableOn(String applicableOn) {
            return applicableOn(Output.of(applicableOn));
        }

        /**
         * @param budgetType Type of the budget. Supported values are: `ScanBudget`.
         * 
         * @return builder
         * 
         */
        public Builder budgetType(@Nullable Output<String> budgetType) {
            $.budgetType = budgetType;
            return this;
        }

        /**
         * @param budgetType Type of the budget. Supported values are: `ScanBudget`.
         * 
         * @return builder
         * 
         */
        public Builder budgetType(String budgetType) {
            return budgetType(Output.of(budgetType));
        }

        /**
         * @param capacity Capacity of the scan budget. Only whole numbers are supported.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity Capacity of the scan budget. Only whole numbers are supported.
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param groupBy Grouping Entity of the budget. Supported values are: `User`.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(@Nullable Output<String> groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        /**
         * @param groupBy Grouping Entity of the budget. Supported values are: `User`.
         * 
         * @return builder
         * 
         */
        public Builder groupBy(String groupBy) {
            return groupBy(Output.of(groupBy));
        }

        /**
         * @param name Display name of the scan budget. This must be unique across all the scan budgets.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of the scan budget. This must be unique across all the scan budgets.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scope Scope of the budget.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<ScanBudgetScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of the budget.
         * 
         * @return builder
         * 
         */
        public Builder scope(ScanBudgetScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param status Signifies the state of the budget. Supported values are: `active` and `inactive`.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Signifies the state of the budget. Supported values are: `active` and `inactive`.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param unit Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        /**
         * @param window Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Output<String> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
         * 
         * @return builder
         * 
         */
        public Builder window(String window) {
            return window(Output.of(window));
        }

        public ScanBudgetState build() {
            return $;
        }
    }

}
