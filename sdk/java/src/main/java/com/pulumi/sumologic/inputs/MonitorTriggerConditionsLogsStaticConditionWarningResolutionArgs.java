// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs Empty = new MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs();

    /**
     * The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
     * 
     */
    @Import(name="resolutionWindow")
    private @Nullable Output<String> resolutionWindow;

    /**
     * @return The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
     * 
     */
    public Optional<Output<String>> resolutionWindow() {
        return Optional.ofNullable(this.resolutionWindow);
    }

    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    @Import(name="thresholdType")
    private @Nullable Output<String> thresholdType;

    public Optional<Output<String>> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }

    private MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs() {}

    private MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs(MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs $) {
        this.resolutionWindow = $.resolutionWindow;
        this.threshold = $.threshold;
        this.thresholdType = $.thresholdType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs $;

        public Builder() {
            $ = new MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs();
        }

        public Builder(MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs defaults) {
            $ = new MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param resolutionWindow The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
         * 
         * @return builder
         * 
         */
        public Builder resolutionWindow(@Nullable Output<String> resolutionWindow) {
            $.resolutionWindow = resolutionWindow;
            return this;
        }

        /**
         * @param resolutionWindow The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
         * 
         * @return builder
         * 
         */
        public Builder resolutionWindow(String resolutionWindow) {
            return resolutionWindow(Output.of(resolutionWindow));
        }

        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdType(@Nullable Output<String> thresholdType) {
            $.thresholdType = thresholdType;
            return this;
        }

        public Builder thresholdType(String thresholdType) {
            return thresholdType(Output.of(thresholdType));
        }

        public MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs build() {
            return $;
        }
    }

}
