// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.CseLogMappingFieldLookupArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseLogMappingFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseLogMappingFieldArgs Empty = new CseLogMappingFieldArgs();

    @Import(name="alternateValues")
    private @Nullable Output<List<String>> alternateValues;

    public Optional<Output<List<String>>> alternateValues() {
        return Optional.ofNullable(this.alternateValues);
    }

    @Import(name="caseInsensitive")
    private @Nullable Output<Boolean> caseInsensitive;

    public Optional<Output<Boolean>> caseInsensitive() {
        return Optional.ofNullable(this.caseInsensitive);
    }

    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    @Import(name="fieldJoins")
    private @Nullable Output<List<String>> fieldJoins;

    public Optional<Output<List<String>>> fieldJoins() {
        return Optional.ofNullable(this.fieldJoins);
    }

    @Import(name="format")
    private @Nullable Output<String> format;

    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    @Import(name="formatParameters")
    private @Nullable Output<List<String>> formatParameters;

    public Optional<Output<List<String>>> formatParameters() {
        return Optional.ofNullable(this.formatParameters);
    }

    @Import(name="joinDelimiter")
    private @Nullable Output<String> joinDelimiter;

    public Optional<Output<String>> joinDelimiter() {
        return Optional.ofNullable(this.joinDelimiter);
    }

    @Import(name="lookups")
    private @Nullable Output<List<CseLogMappingFieldLookupArgs>> lookups;

    public Optional<Output<List<CseLogMappingFieldLookupArgs>>> lookups() {
        return Optional.ofNullable(this.lookups);
    }

    /**
     * The name of the log mapping.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the log mapping.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List of skipped values.
     * 
     */
    @Import(name="skippedValues")
    private @Nullable Output<List<String>> skippedValues;

    /**
     * @return List of skipped values.
     * 
     */
    public Optional<Output<List<String>>> skippedValues() {
        return Optional.ofNullable(this.skippedValues);
    }

    @Import(name="splitDelimiter")
    private @Nullable Output<String> splitDelimiter;

    public Optional<Output<String>> splitDelimiter() {
        return Optional.ofNullable(this.splitDelimiter);
    }

    @Import(name="splitIndex")
    private @Nullable Output<Integer> splitIndex;

    public Optional<Output<Integer>> splitIndex() {
        return Optional.ofNullable(this.splitIndex);
    }

    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="valueType")
    private @Nullable Output<String> valueType;

    public Optional<Output<String>> valueType() {
        return Optional.ofNullable(this.valueType);
    }

    private CseLogMappingFieldArgs() {}

    private CseLogMappingFieldArgs(CseLogMappingFieldArgs $) {
        this.alternateValues = $.alternateValues;
        this.caseInsensitive = $.caseInsensitive;
        this.defaultValue = $.defaultValue;
        this.fieldJoins = $.fieldJoins;
        this.format = $.format;
        this.formatParameters = $.formatParameters;
        this.joinDelimiter = $.joinDelimiter;
        this.lookups = $.lookups;
        this.name = $.name;
        this.skippedValues = $.skippedValues;
        this.splitDelimiter = $.splitDelimiter;
        this.splitIndex = $.splitIndex;
        this.timeZone = $.timeZone;
        this.value = $.value;
        this.valueType = $.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseLogMappingFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseLogMappingFieldArgs $;

        public Builder() {
            $ = new CseLogMappingFieldArgs();
        }

        public Builder(CseLogMappingFieldArgs defaults) {
            $ = new CseLogMappingFieldArgs(Objects.requireNonNull(defaults));
        }

        public Builder alternateValues(@Nullable Output<List<String>> alternateValues) {
            $.alternateValues = alternateValues;
            return this;
        }

        public Builder alternateValues(List<String> alternateValues) {
            return alternateValues(Output.of(alternateValues));
        }

        public Builder alternateValues(String... alternateValues) {
            return alternateValues(List.of(alternateValues));
        }

        public Builder caseInsensitive(@Nullable Output<Boolean> caseInsensitive) {
            $.caseInsensitive = caseInsensitive;
            return this;
        }

        public Builder caseInsensitive(Boolean caseInsensitive) {
            return caseInsensitive(Output.of(caseInsensitive));
        }

        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        public Builder fieldJoins(@Nullable Output<List<String>> fieldJoins) {
            $.fieldJoins = fieldJoins;
            return this;
        }

        public Builder fieldJoins(List<String> fieldJoins) {
            return fieldJoins(Output.of(fieldJoins));
        }

        public Builder fieldJoins(String... fieldJoins) {
            return fieldJoins(List.of(fieldJoins));
        }

        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        public Builder format(String format) {
            return format(Output.of(format));
        }

        public Builder formatParameters(@Nullable Output<List<String>> formatParameters) {
            $.formatParameters = formatParameters;
            return this;
        }

        public Builder formatParameters(List<String> formatParameters) {
            return formatParameters(Output.of(formatParameters));
        }

        public Builder formatParameters(String... formatParameters) {
            return formatParameters(List.of(formatParameters));
        }

        public Builder joinDelimiter(@Nullable Output<String> joinDelimiter) {
            $.joinDelimiter = joinDelimiter;
            return this;
        }

        public Builder joinDelimiter(String joinDelimiter) {
            return joinDelimiter(Output.of(joinDelimiter));
        }

        public Builder lookups(@Nullable Output<List<CseLogMappingFieldLookupArgs>> lookups) {
            $.lookups = lookups;
            return this;
        }

        public Builder lookups(List<CseLogMappingFieldLookupArgs> lookups) {
            return lookups(Output.of(lookups));
        }

        public Builder lookups(CseLogMappingFieldLookupArgs... lookups) {
            return lookups(List.of(lookups));
        }

        /**
         * @param name The name of the log mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the log mapping.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param skippedValues List of skipped values.
         * 
         * @return builder
         * 
         */
        public Builder skippedValues(@Nullable Output<List<String>> skippedValues) {
            $.skippedValues = skippedValues;
            return this;
        }

        /**
         * @param skippedValues List of skipped values.
         * 
         * @return builder
         * 
         */
        public Builder skippedValues(List<String> skippedValues) {
            return skippedValues(Output.of(skippedValues));
        }

        /**
         * @param skippedValues List of skipped values.
         * 
         * @return builder
         * 
         */
        public Builder skippedValues(String... skippedValues) {
            return skippedValues(List.of(skippedValues));
        }

        public Builder splitDelimiter(@Nullable Output<String> splitDelimiter) {
            $.splitDelimiter = splitDelimiter;
            return this;
        }

        public Builder splitDelimiter(String splitDelimiter) {
            return splitDelimiter(Output.of(splitDelimiter));
        }

        public Builder splitIndex(@Nullable Output<Integer> splitIndex) {
            $.splitIndex = splitIndex;
            return this;
        }

        public Builder splitIndex(Integer splitIndex) {
            return splitIndex(Output.of(splitIndex));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder valueType(@Nullable Output<String> valueType) {
            $.valueType = valueType;
            return this;
        }

        public Builder valueType(String valueType) {
            return valueType(Output.of(valueType));
        }

        public CseLogMappingFieldArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CseLogMappingFieldArgs", "name");
            }
            return $;
        }
    }

}
