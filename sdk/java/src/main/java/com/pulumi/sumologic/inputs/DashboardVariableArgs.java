// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.DashboardVariableSourceDefinitionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardVariableArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardVariableArgs Empty = new DashboardVariableArgs();

    @Import(name="allowMultiSelect")
    private @Nullable Output<Boolean> allowMultiSelect;

    public Optional<Output<Boolean>> allowMultiSelect() {
        return Optional.ofNullable(this.allowMultiSelect);
    }

    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    @Import(name="hideFromUi")
    private @Nullable Output<Boolean> hideFromUi;

    public Optional<Output<Boolean>> hideFromUi() {
        return Optional.ofNullable(this.hideFromUi);
    }

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    @Import(name="includeAllOption")
    private @Nullable Output<Boolean> includeAllOption;

    public Optional<Output<Boolean>> includeAllOption() {
        return Optional.ofNullable(this.includeAllOption);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="sourceDefinition", required=true)
    private Output<DashboardVariableSourceDefinitionArgs> sourceDefinition;

    public Output<DashboardVariableSourceDefinitionArgs> sourceDefinition() {
        return this.sourceDefinition;
    }

    private DashboardVariableArgs() {}

    private DashboardVariableArgs(DashboardVariableArgs $) {
        this.allowMultiSelect = $.allowMultiSelect;
        this.defaultValue = $.defaultValue;
        this.displayName = $.displayName;
        this.hideFromUi = $.hideFromUi;
        this.id = $.id;
        this.includeAllOption = $.includeAllOption;
        this.name = $.name;
        this.sourceDefinition = $.sourceDefinition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardVariableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardVariableArgs $;

        public Builder() {
            $ = new DashboardVariableArgs();
        }

        public Builder(DashboardVariableArgs defaults) {
            $ = new DashboardVariableArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowMultiSelect(@Nullable Output<Boolean> allowMultiSelect) {
            $.allowMultiSelect = allowMultiSelect;
            return this;
        }

        public Builder allowMultiSelect(Boolean allowMultiSelect) {
            return allowMultiSelect(Output.of(allowMultiSelect));
        }

        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder hideFromUi(@Nullable Output<Boolean> hideFromUi) {
            $.hideFromUi = hideFromUi;
            return this;
        }

        public Builder hideFromUi(Boolean hideFromUi) {
            return hideFromUi(Output.of(hideFromUi));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder includeAllOption(@Nullable Output<Boolean> includeAllOption) {
            $.includeAllOption = includeAllOption;
            return this;
        }

        public Builder includeAllOption(Boolean includeAllOption) {
            return includeAllOption(Output.of(includeAllOption));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sourceDefinition(Output<DashboardVariableSourceDefinitionArgs> sourceDefinition) {
            $.sourceDefinition = sourceDefinition;
            return this;
        }

        public Builder sourceDefinition(DashboardVariableSourceDefinitionArgs sourceDefinition) {
            return sourceDefinition(Output.of(sourceDefinition));
        }

        public DashboardVariableArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sourceDefinition = Objects.requireNonNull($.sourceDefinition, "expected parameter 'sourceDefinition' to be non-null");
            return $;
        }
    }

}
