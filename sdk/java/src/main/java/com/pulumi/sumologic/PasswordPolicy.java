// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.PasswordPolicyArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.PasswordPolicyState;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,
 * please ensure that only a single instance of such resource is defined.
 * The behavior for defining more than one password policy resources is undefined.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.PasswordPolicy;
 * import com.pulumi.sumologic.PasswordPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var examplePasswordPolicy = new PasswordPolicy(&#34;examplePasswordPolicy&#34;, PasswordPolicyArgs.builder()        
 *             .accountLockoutDurationInMins(30)
 *             .accountLockoutThreshold(6)
 *             .failedLoginResetDurationInMins(10)
 *             .maxLength(128)
 *             .maxPasswordAgeInDays(365)
 *             .minLength(8)
 *             .minUniquePasswords(10)
 *             .mustContainDigits(true)
 *             .mustContainLowercase(true)
 *             .mustContainSpecialChars(true)
 *             .mustContainUppercase(true)
 *             .rememberMfa(true)
 *             .requireMfa(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="sumologic:index/passwordPolicy:PasswordPolicy")
public class PasswordPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     * 
     */
    @Export(name="accountLockoutDurationInMins", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> accountLockoutDurationInMins;

    /**
     * @return The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     * 
     */
    public Output<Optional<Integer>> accountLockoutDurationInMins() {
        return Codegen.optional(this.accountLockoutDurationInMins);
    }
    /**
     * Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     * 
     */
    @Export(name="accountLockoutThreshold", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> accountLockoutThreshold;

    /**
     * @return Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     * 
     */
    public Output<Optional<Integer>> accountLockoutThreshold() {
        return Codegen.optional(this.accountLockoutThreshold);
    }
    /**
     * The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     * 
     */
    @Export(name="failedLoginResetDurationInMins", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> failedLoginResetDurationInMins;

    /**
     * @return The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     * 
     */
    public Output<Optional<Integer>> failedLoginResetDurationInMins() {
        return Codegen.optional(this.failedLoginResetDurationInMins);
    }
    /**
     * The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     * 
     */
    @Export(name="maxLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxLength;

    /**
     * @return The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     * 
     */
    public Output<Optional<Integer>> maxLength() {
        return Codegen.optional(this.maxLength);
    }
    /**
     * Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     * 
     */
    @Export(name="maxPasswordAgeInDays", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> maxPasswordAgeInDays;

    /**
     * @return Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     * 
     */
    public Output<Optional<Integer>> maxPasswordAgeInDays() {
        return Codegen.optional(this.maxPasswordAgeInDays);
    }
    /**
     * The minimum length of the password. Defaults to 8.
     * 
     */
    @Export(name="minLength", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minLength;

    /**
     * @return The minimum length of the password. Defaults to 8.
     * 
     */
    public Output<Optional<Integer>> minLength() {
        return Codegen.optional(this.minLength);
    }
    /**
     * The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     * 
     */
    @Export(name="minUniquePasswords", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> minUniquePasswords;

    /**
     * @return The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     * 
     */
    public Output<Optional<Integer>> minUniquePasswords() {
        return Codegen.optional(this.minUniquePasswords);
    }
    /**
     * If the password must contain digits. Defaults to true.
     * 
     */
    @Export(name="mustContainDigits", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mustContainDigits;

    /**
     * @return If the password must contain digits. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> mustContainDigits() {
        return Codegen.optional(this.mustContainDigits);
    }
    /**
     * If the password must contain lower case characters. Defaults to true.
     * 
     */
    @Export(name="mustContainLowercase", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mustContainLowercase;

    /**
     * @return If the password must contain lower case characters. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> mustContainLowercase() {
        return Codegen.optional(this.mustContainLowercase);
    }
    /**
     * If the password must contain special characters. Defaults to true.
     * 
     */
    @Export(name="mustContainSpecialChars", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mustContainSpecialChars;

    /**
     * @return If the password must contain special characters. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> mustContainSpecialChars() {
        return Codegen.optional(this.mustContainSpecialChars);
    }
    /**
     * If the password must contain upper case characters. Defaults to true.
     * 
     */
    @Export(name="mustContainUppercase", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> mustContainUppercase;

    /**
     * @return If the password must contain upper case characters. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> mustContainUppercase() {
        return Codegen.optional(this.mustContainUppercase);
    }
    /**
     * If MFA should be remembered on the browser. Defaults to true.
     * 
     */
    @Export(name="rememberMfa", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> rememberMfa;

    /**
     * @return If MFA should be remembered on the browser. Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> rememberMfa() {
        return Codegen.optional(this.rememberMfa);
    }
    /**
     * If MFA should be required to log in. Defaults to false.
     * 
     */
    @Export(name="requireMfa", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> requireMfa;

    /**
     * @return If MFA should be required to log in. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> requireMfa() {
        return Codegen.optional(this.requireMfa);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PasswordPolicy(String name) {
        this(name, PasswordPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PasswordPolicy(String name, @Nullable PasswordPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PasswordPolicy(String name, @Nullable PasswordPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/passwordPolicy:PasswordPolicy", name, args == null ? PasswordPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PasswordPolicy(String name, Output<String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/passwordPolicy:PasswordPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PasswordPolicy get(String name, Output<String> id, @Nullable PasswordPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PasswordPolicy(name, id, state, options);
    }
}
