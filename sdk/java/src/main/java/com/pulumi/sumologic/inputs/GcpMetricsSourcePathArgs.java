// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.GcpMetricsSourcePathCustomServiceArgs;
import com.pulumi.sumologic.inputs.GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs;
import com.pulumi.sumologic.inputs.GcpMetricsSourcePathTagFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GcpMetricsSourcePathArgs extends com.pulumi.resources.ResourceArgs {

    public static final GcpMetricsSourcePathArgs Empty = new GcpMetricsSourcePathArgs();

    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
     * 
     */
    @Import(name="customServices")
    private @Nullable Output<List<GcpMetricsSourcePathCustomServiceArgs>> customServices;

    /**
     * @return Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
     * 
     */
    public Optional<Output<List<GcpMetricsSourcePathCustomServiceArgs>>> customServices() {
        return Optional.ofNullable(this.customServices);
    }

    @Import(name="limitToNamespaces")
    private @Nullable Output<List<String>> limitToNamespaces;

    public Optional<Output<List<String>>> limitToNamespaces() {
        return Optional.ofNullable(this.limitToNamespaces);
    }

    /**
     * List of regions for which metrics would be collected (Empty to collect from all regions)
     * 
     */
    @Import(name="limitToRegions")
    private @Nullable Output<List<String>> limitToRegions;

    /**
     * @return List of regions for which metrics would be collected (Empty to collect from all regions)
     * 
     */
    public Optional<Output<List<String>>> limitToRegions() {
        return Optional.ofNullable(this.limitToRegions);
    }

    /**
     * List of services from which metrics would be collected
     * 
     */
    @Import(name="limitToServices")
    private @Nullable Output<List<String>> limitToServices;

    /**
     * @return List of services from which metrics would be collected
     * 
     */
    public Optional<Output<List<String>>> limitToServices() {
        return Optional.ofNullable(this.limitToServices);
    }

    @Import(name="pathExpression")
    private @Nullable Output<String> pathExpression;

    public Optional<Output<String>> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }

    @Import(name="snsTopicOrSubscriptionArns")
    private @Nullable Output<List<GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns;

    public Optional<Output<List<GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs>>> snsTopicOrSubscriptionArns() {
        return Optional.ofNullable(this.snsTopicOrSubscriptionArns);
    }

    @Import(name="tagFilters")
    private @Nullable Output<List<GcpMetricsSourcePathTagFilterArgs>> tagFilters;

    public Optional<Output<List<GcpMetricsSourcePathTagFilterArgs>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    /**
     * Type of polling source. This has to be `GcpMetricsPath`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of polling source. This has to be `GcpMetricsPath`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    @Import(name="useVersionedApi")
    private @Nullable Output<Boolean> useVersionedApi;

    public Optional<Output<Boolean>> useVersionedApi() {
        return Optional.ofNullable(this.useVersionedApi);
    }

    private GcpMetricsSourcePathArgs() {}

    private GcpMetricsSourcePathArgs(GcpMetricsSourcePathArgs $) {
        this.bucketName = $.bucketName;
        this.customServices = $.customServices;
        this.limitToNamespaces = $.limitToNamespaces;
        this.limitToRegions = $.limitToRegions;
        this.limitToServices = $.limitToServices;
        this.pathExpression = $.pathExpression;
        this.snsTopicOrSubscriptionArns = $.snsTopicOrSubscriptionArns;
        this.tagFilters = $.tagFilters;
        this.type = $.type;
        this.useVersionedApi = $.useVersionedApi;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GcpMetricsSourcePathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GcpMetricsSourcePathArgs $;

        public Builder() {
            $ = new GcpMetricsSourcePathArgs();
        }

        public Builder(GcpMetricsSourcePathArgs defaults) {
            $ = new GcpMetricsSourcePathArgs(Objects.requireNonNull(defaults));
        }

        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param customServices Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
         * 
         * @return builder
         * 
         */
        public Builder customServices(@Nullable Output<List<GcpMetricsSourcePathCustomServiceArgs>> customServices) {
            $.customServices = customServices;
            return this;
        }

        /**
         * @param customServices Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
         * 
         * @return builder
         * 
         */
        public Builder customServices(List<GcpMetricsSourcePathCustomServiceArgs> customServices) {
            return customServices(Output.of(customServices));
        }

        /**
         * @param customServices Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
         * 
         * @return builder
         * 
         */
        public Builder customServices(GcpMetricsSourcePathCustomServiceArgs... customServices) {
            return customServices(List.of(customServices));
        }

        public Builder limitToNamespaces(@Nullable Output<List<String>> limitToNamespaces) {
            $.limitToNamespaces = limitToNamespaces;
            return this;
        }

        public Builder limitToNamespaces(List<String> limitToNamespaces) {
            return limitToNamespaces(Output.of(limitToNamespaces));
        }

        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }

        /**
         * @param limitToRegions List of regions for which metrics would be collected (Empty to collect from all regions)
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(@Nullable Output<List<String>> limitToRegions) {
            $.limitToRegions = limitToRegions;
            return this;
        }

        /**
         * @param limitToRegions List of regions for which metrics would be collected (Empty to collect from all regions)
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(List<String> limitToRegions) {
            return limitToRegions(Output.of(limitToRegions));
        }

        /**
         * @param limitToRegions List of regions for which metrics would be collected (Empty to collect from all regions)
         * 
         * @return builder
         * 
         */
        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }

        /**
         * @param limitToServices List of services from which metrics would be collected
         * 
         * @return builder
         * 
         */
        public Builder limitToServices(@Nullable Output<List<String>> limitToServices) {
            $.limitToServices = limitToServices;
            return this;
        }

        /**
         * @param limitToServices List of services from which metrics would be collected
         * 
         * @return builder
         * 
         */
        public Builder limitToServices(List<String> limitToServices) {
            return limitToServices(Output.of(limitToServices));
        }

        /**
         * @param limitToServices List of services from which metrics would be collected
         * 
         * @return builder
         * 
         */
        public Builder limitToServices(String... limitToServices) {
            return limitToServices(List.of(limitToServices));
        }

        public Builder pathExpression(@Nullable Output<String> pathExpression) {
            $.pathExpression = pathExpression;
            return this;
        }

        public Builder pathExpression(String pathExpression) {
            return pathExpression(Output.of(pathExpression));
        }

        public Builder snsTopicOrSubscriptionArns(@Nullable Output<List<GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs>> snsTopicOrSubscriptionArns) {
            $.snsTopicOrSubscriptionArns = snsTopicOrSubscriptionArns;
            return this;
        }

        public Builder snsTopicOrSubscriptionArns(List<GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs> snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(Output.of(snsTopicOrSubscriptionArns));
        }

        public Builder snsTopicOrSubscriptionArns(GcpMetricsSourcePathSnsTopicOrSubscriptionArnArgs... snsTopicOrSubscriptionArns) {
            return snsTopicOrSubscriptionArns(List.of(snsTopicOrSubscriptionArns));
        }

        public Builder tagFilters(@Nullable Output<List<GcpMetricsSourcePathTagFilterArgs>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        public Builder tagFilters(List<GcpMetricsSourcePathTagFilterArgs> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        public Builder tagFilters(GcpMetricsSourcePathTagFilterArgs... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        /**
         * @param type Type of polling source. This has to be `GcpMetricsPath`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of polling source. This has to be `GcpMetricsPath`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder useVersionedApi(@Nullable Output<Boolean> useVersionedApi) {
            $.useVersionedApi = useVersionedApi;
            return this;
        }

        public Builder useVersionedApi(Boolean useVersionedApi) {
            return useVersionedApi(Output.of(useVersionedApi));
        }

        public GcpMetricsSourcePathArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
