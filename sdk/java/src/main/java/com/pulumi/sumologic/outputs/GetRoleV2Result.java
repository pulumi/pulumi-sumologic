// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.outputs.GetRoleV2SelectedView;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRoleV2Result {
    private String auditDataFilter;
    private List<String> capabilities;
    private String description;
    private String id;
    private String logAnalyticsFilter;
    private String name;
    private String securityDataFilter;
    private List<GetRoleV2SelectedView> selectedViews;
    private String selectionType;

    private GetRoleV2Result() {}
    public String auditDataFilter() {
        return this.auditDataFilter;
    }
    public List<String> capabilities() {
        return this.capabilities;
    }
    public String description() {
        return this.description;
    }
    public String id() {
        return this.id;
    }
    public String logAnalyticsFilter() {
        return this.logAnalyticsFilter;
    }
    public String name() {
        return this.name;
    }
    public String securityDataFilter() {
        return this.securityDataFilter;
    }
    public List<GetRoleV2SelectedView> selectedViews() {
        return this.selectedViews;
    }
    public String selectionType() {
        return this.selectionType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String auditDataFilter;
        private List<String> capabilities;
        private String description;
        private String id;
        private String logAnalyticsFilter;
        private String name;
        private String securityDataFilter;
        private List<GetRoleV2SelectedView> selectedViews;
        private String selectionType;
        public Builder() {}
        public Builder(GetRoleV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.auditDataFilter = defaults.auditDataFilter;
    	      this.capabilities = defaults.capabilities;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.logAnalyticsFilter = defaults.logAnalyticsFilter;
    	      this.name = defaults.name;
    	      this.securityDataFilter = defaults.securityDataFilter;
    	      this.selectedViews = defaults.selectedViews;
    	      this.selectionType = defaults.selectionType;
        }

        @CustomType.Setter
        public Builder auditDataFilter(String auditDataFilter) {
            if (auditDataFilter == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "auditDataFilter");
            }
            this.auditDataFilter = auditDataFilter;
            return this;
        }
        @CustomType.Setter
        public Builder capabilities(List<String> capabilities) {
            if (capabilities == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "capabilities");
            }
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsFilter(String logAnalyticsFilter) {
            if (logAnalyticsFilter == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "logAnalyticsFilter");
            }
            this.logAnalyticsFilter = logAnalyticsFilter;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder securityDataFilter(String securityDataFilter) {
            if (securityDataFilter == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "securityDataFilter");
            }
            this.securityDataFilter = securityDataFilter;
            return this;
        }
        @CustomType.Setter
        public Builder selectedViews(List<GetRoleV2SelectedView> selectedViews) {
            if (selectedViews == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "selectedViews");
            }
            this.selectedViews = selectedViews;
            return this;
        }
        public Builder selectedViews(GetRoleV2SelectedView... selectedViews) {
            return selectedViews(List.of(selectedViews));
        }
        @CustomType.Setter
        public Builder selectionType(String selectionType) {
            if (selectionType == null) {
              throw new MissingRequiredPropertyException("GetRoleV2Result", "selectionType");
            }
            this.selectionType = selectionType;
            return this;
        }
        public GetRoleV2Result build() {
            final var _resultValue = new GetRoleV2Result();
            _resultValue.auditDataFilter = auditDataFilter;
            _resultValue.capabilities = capabilities;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.logAnalyticsFilter = logAnalyticsFilter;
            _resultValue.name = name;
            _resultValue.securityDataFilter = securityDataFilter;
            _resultValue.selectedViews = selectedViews;
            _resultValue.selectionType = selectionType;
            return _resultValue;
        }
    }
}
