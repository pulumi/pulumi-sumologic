// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.DashboardColoringRuleArgs;
import com.pulumi.sumologic.inputs.DashboardLayoutArgs;
import com.pulumi.sumologic.inputs.DashboardPanelArgs;
import com.pulumi.sumologic.inputs.DashboardTimeRangeArgs;
import com.pulumi.sumologic.inputs.DashboardTopologyLabelMapArgs;
import com.pulumi.sumologic.inputs.DashboardVariableArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardState extends com.pulumi.resources.ResourceArgs {

    public static final DashboardState Empty = new DashboardState();

    @Import(name="coloringRules")
    private @Nullable Output<List<DashboardColoringRuleArgs>> coloringRules;

    public Optional<Output<List<DashboardColoringRuleArgs>>> coloringRules() {
        return Optional.ofNullable(this.coloringRules);
    }

    /**
     * Description of the dashboard.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the dashboard.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The identifier of the folder to save the dashboard in. By default it is saved in your
     * personal folder.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return The identifier of the folder to save the dashboard in. By default it is saved in your
     * personal folder.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * Layout of the dashboard. See layout schema for details.
     * 
     */
    @Import(name="layout")
    private @Nullable Output<DashboardLayoutArgs> layout;

    /**
     * @return Layout of the dashboard. See layout schema for details.
     * 
     */
    public Optional<Output<DashboardLayoutArgs>> layout() {
        return Optional.ofNullable(this.layout);
    }

    /**
     * A list of panels in the dashboard. See panel schema for details.
     * 
     */
    @Import(name="panels")
    private @Nullable Output<List<DashboardPanelArgs>> panels;

    /**
     * @return A list of panels in the dashboard. See panel schema for details.
     * 
     */
    public Optional<Output<List<DashboardPanelArgs>>> panels() {
        return Optional.ofNullable(this.panels);
    }

    /**
     * Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
     * 
     */
    @Import(name="refreshInterval")
    private @Nullable Output<Integer> refreshInterval;

    /**
     * @return Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
     * 
     */
    public Optional<Output<Integer>> refreshInterval() {
        return Optional.ofNullable(this.refreshInterval);
    }

    /**
     * Theme of the dashboard.
     * 
     */
    @Import(name="theme")
    private @Nullable Output<String> theme;

    /**
     * @return Theme of the dashboard.
     * 
     */
    public Optional<Output<String>> theme() {
        return Optional.ofNullable(this.theme);
    }

    /**
     * Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<DashboardTimeRangeArgs> timeRange;

    /**
     * @return Time range of the dashboard. See time range schema
     * for details.
     * 
     */
    public Optional<Output<DashboardTimeRangeArgs>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    /**
     * Title of the dashboard.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Title of the dashboard.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Topology labels for the dashboard. See
     * topology label map schema
     * for details.
     * 
     */
    @Import(name="topologyLabelMap")
    private @Nullable Output<DashboardTopologyLabelMapArgs> topologyLabelMap;

    /**
     * @return Topology labels for the dashboard. See
     * topology label map schema
     * for details.
     * 
     */
    public Optional<Output<DashboardTopologyLabelMapArgs>> topologyLabelMap() {
        return Optional.ofNullable(this.topologyLabelMap);
    }

    /**
     * A list of variables for the dashboard. See variable schema
     * for details.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<List<DashboardVariableArgs>> variables;

    /**
     * @return A list of variables for the dashboard. See variable schema
     * for details.
     * 
     */
    public Optional<Output<List<DashboardVariableArgs>>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private DashboardState() {}

    private DashboardState(DashboardState $) {
        this.coloringRules = $.coloringRules;
        this.description = $.description;
        this.domain = $.domain;
        this.folderId = $.folderId;
        this.layout = $.layout;
        this.panels = $.panels;
        this.refreshInterval = $.refreshInterval;
        this.theme = $.theme;
        this.timeRange = $.timeRange;
        this.title = $.title;
        this.topologyLabelMap = $.topologyLabelMap;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardState $;

        public Builder() {
            $ = new DashboardState();
        }

        public Builder(DashboardState defaults) {
            $ = new DashboardState(Objects.requireNonNull(defaults));
        }

        public Builder coloringRules(@Nullable Output<List<DashboardColoringRuleArgs>> coloringRules) {
            $.coloringRules = coloringRules;
            return this;
        }

        public Builder coloringRules(List<DashboardColoringRuleArgs> coloringRules) {
            return coloringRules(Output.of(coloringRules));
        }

        public Builder coloringRules(DashboardColoringRuleArgs... coloringRules) {
            return coloringRules(List.of(coloringRules));
        }

        /**
         * @param description Description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param folderId The identifier of the folder to save the dashboard in. By default it is saved in your
         * personal folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId The identifier of the folder to save the dashboard in. By default it is saved in your
         * personal folder.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param layout Layout of the dashboard. See layout schema for details.
         * 
         * @return builder
         * 
         */
        public Builder layout(@Nullable Output<DashboardLayoutArgs> layout) {
            $.layout = layout;
            return this;
        }

        /**
         * @param layout Layout of the dashboard. See layout schema for details.
         * 
         * @return builder
         * 
         */
        public Builder layout(DashboardLayoutArgs layout) {
            return layout(Output.of(layout));
        }

        /**
         * @param panels A list of panels in the dashboard. See panel schema for details.
         * 
         * @return builder
         * 
         */
        public Builder panels(@Nullable Output<List<DashboardPanelArgs>> panels) {
            $.panels = panels;
            return this;
        }

        /**
         * @param panels A list of panels in the dashboard. See panel schema for details.
         * 
         * @return builder
         * 
         */
        public Builder panels(List<DashboardPanelArgs> panels) {
            return panels(Output.of(panels));
        }

        /**
         * @param panels A list of panels in the dashboard. See panel schema for details.
         * 
         * @return builder
         * 
         */
        public Builder panels(DashboardPanelArgs... panels) {
            return panels(List.of(panels));
        }

        /**
         * @param refreshInterval Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(@Nullable Output<Integer> refreshInterval) {
            $.refreshInterval = refreshInterval;
            return this;
        }

        /**
         * @param refreshInterval Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
         * 
         * @return builder
         * 
         */
        public Builder refreshInterval(Integer refreshInterval) {
            return refreshInterval(Output.of(refreshInterval));
        }

        /**
         * @param theme Theme of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder theme(@Nullable Output<String> theme) {
            $.theme = theme;
            return this;
        }

        /**
         * @param theme Theme of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder theme(String theme) {
            return theme(Output.of(theme));
        }

        /**
         * @param timeRange Time range of the dashboard. See time range schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<DashboardTimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range of the dashboard. See time range schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(DashboardTimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Title of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param topologyLabelMap Topology labels for the dashboard. See
         * topology label map schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder topologyLabelMap(@Nullable Output<DashboardTopologyLabelMapArgs> topologyLabelMap) {
            $.topologyLabelMap = topologyLabelMap;
            return this;
        }

        /**
         * @param topologyLabelMap Topology labels for the dashboard. See
         * topology label map schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder topologyLabelMap(DashboardTopologyLabelMapArgs topologyLabelMap) {
            return topologyLabelMap(Output.of(topologyLabelMap));
        }

        /**
         * @param variables A list of variables for the dashboard. See variable schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<List<DashboardVariableArgs>> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables A list of variables for the dashboard. See variable schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder variables(List<DashboardVariableArgs> variables) {
            return variables(Output.of(variables));
        }

        /**
         * @param variables A list of variables for the dashboard. See variable schema
         * for details.
         * 
         * @return builder
         * 
         */
        public Builder variables(DashboardVariableArgs... variables) {
            return variables(List.of(variables));
        }

        public DashboardState build() {
            return $;
        }
    }

}
