// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.LogSearchQueryParameterArgs;
import com.pulumi.sumologic.inputs.LogSearchScheduleArgs;
import com.pulumi.sumologic.inputs.LogSearchTimeRangeArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogSearchArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogSearchArgs Empty = new LogSearchArgs();

    /**
     * Description of the search.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the search.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the search.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the search.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The identifier of the folder to create the log search in.
     * 
     */
    @Import(name="parentId", required=true)
    private Output<String> parentId;

    /**
     * @return The identifier of the folder to create the log search in.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }

    /**
     * Define the parsing mode to scan the JSON format log messages. Possible values are:
     * `AutoParse` and  `Manual`. Default value is `Manual`.
     * 
     * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
     * the `Manual` mode, no fields are parsed out automatically. For more information see
     * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
     * 
     */
    @Import(name="parsingMode")
    private @Nullable Output<String> parsingMode;

    /**
     * @return Define the parsing mode to scan the JSON format log messages. Possible values are:
     * `AutoParse` and  `Manual`. Default value is `Manual`.
     * 
     * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
     * the `Manual` mode, no fields are parsed out automatically. For more information see
     * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
     * 
     */
    public Optional<Output<String>> parsingMode() {
        return Optional.ofNullable(this.parsingMode);
    }

    @Import(name="queryParameters")
    private @Nullable Output<List<LogSearchQueryParameterArgs>> queryParameters;

    public Optional<Output<List<LogSearchQueryParameterArgs>>> queryParameters() {
        return Optional.ofNullable(this.queryParameters);
    }

    /**
     * Log query to perform.
     * 
     */
    @Import(name="queryString", required=true)
    private Output<String> queryString;

    /**
     * @return Log query to perform.
     * 
     */
    public Output<String> queryString() {
        return this.queryString;
    }

    /**
     * This has the value `true` if the search is to be run by receipt time and
     * `false` if it is to be run by message time. Default value is `false`.
     * 
     */
    @Import(name="runByReceiptTime")
    private @Nullable Output<Boolean> runByReceiptTime;

    /**
     * @return This has the value `true` if the search is to be run by receipt time and
     * `false` if it is to be run by message time. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> runByReceiptTime() {
        return Optional.ofNullable(this.runByReceiptTime);
    }

    /**
     * Schedule of the log search. See schedule schema
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<LogSearchScheduleArgs> schedule;

    /**
     * @return Schedule of the log search. See schedule schema
     * 
     */
    public Optional<Output<LogSearchScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * Time range of the log search. See time range schema
     * 
     */
    @Import(name="timeRange", required=true)
    private Output<LogSearchTimeRangeArgs> timeRange;

    /**
     * @return Time range of the log search. See time range schema
     * 
     */
    public Output<LogSearchTimeRangeArgs> timeRange() {
        return this.timeRange;
    }

    private LogSearchArgs() {}

    private LogSearchArgs(LogSearchArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.parentId = $.parentId;
        this.parsingMode = $.parsingMode;
        this.queryParameters = $.queryParameters;
        this.queryString = $.queryString;
        this.runByReceiptTime = $.runByReceiptTime;
        this.schedule = $.schedule;
        this.timeRange = $.timeRange;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSearchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSearchArgs $;

        public Builder() {
            $ = new LogSearchArgs();
        }

        public Builder(LogSearchArgs defaults) {
            $ = new LogSearchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the search.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the search.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the search.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The identifier of the folder to create the log search in.
         * 
         * @return builder
         * 
         */
        public Builder parentId(Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The identifier of the folder to create the log search in.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param parsingMode Define the parsing mode to scan the JSON format log messages. Possible values are:
         * `AutoParse` and  `Manual`. Default value is `Manual`.
         * 
         * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
         * the `Manual` mode, no fields are parsed out automatically. For more information see
         * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
         * 
         * @return builder
         * 
         */
        public Builder parsingMode(@Nullable Output<String> parsingMode) {
            $.parsingMode = parsingMode;
            return this;
        }

        /**
         * @param parsingMode Define the parsing mode to scan the JSON format log messages. Possible values are:
         * `AutoParse` and  `Manual`. Default value is `Manual`.
         * 
         * In `AutoParse` mode, the system automatically figures out fields to parse based on the search query. While in
         * the `Manual` mode, no fields are parsed out automatically. For more information see
         * [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
         * 
         * @return builder
         * 
         */
        public Builder parsingMode(String parsingMode) {
            return parsingMode(Output.of(parsingMode));
        }

        public Builder queryParameters(@Nullable Output<List<LogSearchQueryParameterArgs>> queryParameters) {
            $.queryParameters = queryParameters;
            return this;
        }

        public Builder queryParameters(List<LogSearchQueryParameterArgs> queryParameters) {
            return queryParameters(Output.of(queryParameters));
        }

        public Builder queryParameters(LogSearchQueryParameterArgs... queryParameters) {
            return queryParameters(List.of(queryParameters));
        }

        /**
         * @param queryString Log query to perform.
         * 
         * @return builder
         * 
         */
        public Builder queryString(Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        /**
         * @param queryString Log query to perform.
         * 
         * @return builder
         * 
         */
        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        /**
         * @param runByReceiptTime This has the value `true` if the search is to be run by receipt time and
         * `false` if it is to be run by message time. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder runByReceiptTime(@Nullable Output<Boolean> runByReceiptTime) {
            $.runByReceiptTime = runByReceiptTime;
            return this;
        }

        /**
         * @param runByReceiptTime This has the value `true` if the search is to be run by receipt time and
         * `false` if it is to be run by message time. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder runByReceiptTime(Boolean runByReceiptTime) {
            return runByReceiptTime(Output.of(runByReceiptTime));
        }

        /**
         * @param schedule Schedule of the log search. See schedule schema
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<LogSearchScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Schedule of the log search. See schedule schema
         * 
         * @return builder
         * 
         */
        public Builder schedule(LogSearchScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param timeRange Time range of the log search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(Output<LogSearchTimeRangeArgs> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range of the log search. See time range schema
         * 
         * @return builder
         * 
         */
        public Builder timeRange(LogSearchTimeRangeArgs timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public LogSearchArgs build() {
            $.parentId = Objects.requireNonNull($.parentId, "expected parameter 'parentId' to be non-null");
            $.queryString = Objects.requireNonNull($.queryString, "expected parameter 'queryString' to be non-null");
            $.timeRange = Objects.requireNonNull($.timeRange, "expected parameter 'timeRange' to be non-null");
            return $;
        }
    }

}
