// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MonitorTrigger {
    private @Nullable String detectionMethod;
    private @Nullable Integer minDataPoints;
    private @Nullable String occurrenceType;
    private @Nullable String resolutionWindow;
    private @Nullable Double threshold;
    private @Nullable String thresholdType;
    private @Nullable String timeRange;
    private @Nullable String triggerSource;
    private @Nullable String triggerType;

    private MonitorTrigger() {}
    public Optional<String> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }
    public Optional<Integer> minDataPoints() {
        return Optional.ofNullable(this.minDataPoints);
    }
    public Optional<String> occurrenceType() {
        return Optional.ofNullable(this.occurrenceType);
    }
    public Optional<String> resolutionWindow() {
        return Optional.ofNullable(this.resolutionWindow);
    }
    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    public Optional<String> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }
    public Optional<String> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }
    public Optional<String> triggerSource() {
        return Optional.ofNullable(this.triggerSource);
    }
    public Optional<String> triggerType() {
        return Optional.ofNullable(this.triggerType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MonitorTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String detectionMethod;
        private @Nullable Integer minDataPoints;
        private @Nullable String occurrenceType;
        private @Nullable String resolutionWindow;
        private @Nullable Double threshold;
        private @Nullable String thresholdType;
        private @Nullable String timeRange;
        private @Nullable String triggerSource;
        private @Nullable String triggerType;
        public Builder() {}
        public Builder(MonitorTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.detectionMethod = defaults.detectionMethod;
    	      this.minDataPoints = defaults.minDataPoints;
    	      this.occurrenceType = defaults.occurrenceType;
    	      this.resolutionWindow = defaults.resolutionWindow;
    	      this.threshold = defaults.threshold;
    	      this.thresholdType = defaults.thresholdType;
    	      this.timeRange = defaults.timeRange;
    	      this.triggerSource = defaults.triggerSource;
    	      this.triggerType = defaults.triggerType;
        }

        @CustomType.Setter
        public Builder detectionMethod(@Nullable String detectionMethod) {

            this.detectionMethod = detectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder minDataPoints(@Nullable Integer minDataPoints) {

            this.minDataPoints = minDataPoints;
            return this;
        }
        @CustomType.Setter
        public Builder occurrenceType(@Nullable String occurrenceType) {

            this.occurrenceType = occurrenceType;
            return this;
        }
        @CustomType.Setter
        public Builder resolutionWindow(@Nullable String resolutionWindow) {

            this.resolutionWindow = resolutionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Double threshold) {

            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdType(@Nullable String thresholdType) {

            this.thresholdType = thresholdType;
            return this;
        }
        @CustomType.Setter
        public Builder timeRange(@Nullable String timeRange) {

            this.timeRange = timeRange;
            return this;
        }
        @CustomType.Setter
        public Builder triggerSource(@Nullable String triggerSource) {

            this.triggerSource = triggerSource;
            return this;
        }
        @CustomType.Setter
        public Builder triggerType(@Nullable String triggerType) {

            this.triggerType = triggerType;
            return this;
        }
        public MonitorTrigger build() {
            final var _resultValue = new MonitorTrigger();
            _resultValue.detectionMethod = detectionMethod;
            _resultValue.minDataPoints = minDataPoints;
            _resultValue.occurrenceType = occurrenceType;
            _resultValue.resolutionWindow = resolutionWindow;
            _resultValue.threshold = threshold;
            _resultValue.thresholdType = thresholdType;
            _resultValue.timeRange = timeRange;
            _resultValue.triggerSource = triggerSource;
            _resultValue.triggerType = triggerType;
            return _resultValue;
        }
    }
}
