// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
     * 
     */
    @Import(name="connectionSubtype")
    private @Nullable Output<String> connectionSubtype;

    /**
     * @return The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
     * 
     */
    public Optional<Output<String>> connectionSubtype() {
        return Optional.ofNullable(this.connectionSubtype);
    }

    /**
     * Map of custom webhook headers
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<Map<String,String>> customHeaders;

    /**
     * @return Map of custom webhook headers
     * 
     */
    public Optional<Output<Map<String,String>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * Default payload of the webhook.
     * 
     */
    @Import(name="defaultPayload", required=true)
    private Output<String> defaultPayload;

    /**
     * @return Default payload of the webhook.
     * 
     */
    public Output<String> defaultPayload() {
        return this.defaultPayload;
    }

    /**
     * Description of the connection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the connection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Map of access authorization headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<Map<String,String>> headers;

    /**
     * @return Map of access authorization headers.
     * 
     */
    public Optional<Output<Map<String,String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Name of connection. Name should be a valid alphanumeric value.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of connection. Name should be a valid alphanumeric value.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of connection. Only `WebhookConnection` is implemented right now.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of connection. Only `WebhookConnection` is implemented right now.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * URL for the webhook connection.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return URL for the webhook connection.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
     * 
     */
    @Import(name="webhookType")
    private @Nullable Output<String> webhookType;

    /**
     * @return Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
     * 
     */
    public Optional<Output<String>> webhookType() {
        return Optional.ofNullable(this.webhookType);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.connectionSubtype = $.connectionSubtype;
        this.customHeaders = $.customHeaders;
        this.defaultPayload = $.defaultPayload;
        this.description = $.description;
        this.headers = $.headers;
        this.name = $.name;
        this.type = $.type;
        this.url = $.url;
        this.webhookType = $.webhookType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionSubtype The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
         * 
         * @return builder
         * 
         */
        public Builder connectionSubtype(@Nullable Output<String> connectionSubtype) {
            $.connectionSubtype = connectionSubtype;
            return this;
        }

        /**
         * @param connectionSubtype The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
         * 
         * @return builder
         * 
         */
        public Builder connectionSubtype(String connectionSubtype) {
            return connectionSubtype(Output.of(connectionSubtype));
        }

        /**
         * @param customHeaders Map of custom webhook headers
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(@Nullable Output<Map<String,String>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        /**
         * @param customHeaders Map of custom webhook headers
         * 
         * @return builder
         * 
         */
        public Builder customHeaders(Map<String,String> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        /**
         * @param defaultPayload Default payload of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder defaultPayload(Output<String> defaultPayload) {
            $.defaultPayload = defaultPayload;
            return this;
        }

        /**
         * @param defaultPayload Default payload of the webhook.
         * 
         * @return builder
         * 
         */
        public Builder defaultPayload(String defaultPayload) {
            return defaultPayload(Output.of(defaultPayload));
        }

        /**
         * @param description Description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the connection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param headers Map of access authorization headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Map of access authorization headers.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param name Name of connection. Name should be a valid alphanumeric value.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of connection. Name should be a valid alphanumeric value.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of connection. Only `WebhookConnection` is implemented right now.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of connection. Only `WebhookConnection` is implemented right now.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param url URL for the webhook connection.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL for the webhook connection.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param webhookType Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
         * 
         * @return builder
         * 
         */
        public Builder webhookType(@Nullable Output<String> webhookType) {
            $.webhookType = webhookType;
            return this;
        }

        /**
         * @param webhookType Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
         * 
         * @return builder
         * 
         */
        public Builder webhookType(String webhookType) {
            return webhookType(Output.of(webhookType));
        }

        public ConnectionArgs build() {
            $.defaultPayload = Objects.requireNonNull($.defaultPayload, "expected parameter 'defaultPayload' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
