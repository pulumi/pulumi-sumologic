// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class CseCustomInsightDynamicSeverityArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseCustomInsightDynamicSeverityArgs Empty = new CseCustomInsightDynamicSeverityArgs();

    /**
     * The severity of the generated Insight (CRITICAL, HIGH, MEDIUM, or LOW)
     * 
     */
    @Import(name="insightSeverity", required=true)
    private Output<String> insightSeverity;

    /**
     * @return The severity of the generated Insight (CRITICAL, HIGH, MEDIUM, or LOW)
     * 
     */
    public Output<String> insightSeverity() {
        return this.insightSeverity;
    }

    /**
     * minimum Signal severity as the threshold for an Insight severity level
     * 
     */
    @Import(name="minimumSignalSeverity", required=true)
    private Output<Integer> minimumSignalSeverity;

    /**
     * @return minimum Signal severity as the threshold for an Insight severity level
     * 
     */
    public Output<Integer> minimumSignalSeverity() {
        return this.minimumSignalSeverity;
    }

    private CseCustomInsightDynamicSeverityArgs() {}

    private CseCustomInsightDynamicSeverityArgs(CseCustomInsightDynamicSeverityArgs $) {
        this.insightSeverity = $.insightSeverity;
        this.minimumSignalSeverity = $.minimumSignalSeverity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseCustomInsightDynamicSeverityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseCustomInsightDynamicSeverityArgs $;

        public Builder() {
            $ = new CseCustomInsightDynamicSeverityArgs();
        }

        public Builder(CseCustomInsightDynamicSeverityArgs defaults) {
            $ = new CseCustomInsightDynamicSeverityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param insightSeverity The severity of the generated Insight (CRITICAL, HIGH, MEDIUM, or LOW)
         * 
         * @return builder
         * 
         */
        public Builder insightSeverity(Output<String> insightSeverity) {
            $.insightSeverity = insightSeverity;
            return this;
        }

        /**
         * @param insightSeverity The severity of the generated Insight (CRITICAL, HIGH, MEDIUM, or LOW)
         * 
         * @return builder
         * 
         */
        public Builder insightSeverity(String insightSeverity) {
            return insightSeverity(Output.of(insightSeverity));
        }

        /**
         * @param minimumSignalSeverity minimum Signal severity as the threshold for an Insight severity level
         * 
         * @return builder
         * 
         */
        public Builder minimumSignalSeverity(Output<Integer> minimumSignalSeverity) {
            $.minimumSignalSeverity = minimumSignalSeverity;
            return this;
        }

        /**
         * @param minimumSignalSeverity minimum Signal severity as the threshold for an Insight severity level
         * 
         * @return builder
         * 
         */
        public Builder minimumSignalSeverity(Integer minimumSignalSeverity) {
            return minimumSignalSeverity(Output.of(minimumSignalSeverity));
        }

        public CseCustomInsightDynamicSeverityArgs build() {
            if ($.insightSeverity == null) {
                throw new MissingRequiredPropertyException("CseCustomInsightDynamicSeverityArgs", "insightSeverity");
            }
            if ($.minimumSignalSeverity == null) {
                throw new MissingRequiredPropertyException("CseCustomInsightDynamicSeverityArgs", "minimumSignalSeverity");
            }
            return $;
        }
    }

}
