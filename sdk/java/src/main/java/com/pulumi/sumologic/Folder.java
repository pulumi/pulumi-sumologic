// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.FolderArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.FolderState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides the ability to create, read, delete, update, and manage of folders.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.Folder;
 * import com.pulumi.sumologic.FolderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var folder = new Folder(&#34;folder&#34;, FolderArgs.builder()        
 *             .description(&#34;A test folder&#34;)
 *             .parentId(&#34;&lt;personal folder id&gt;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ### Timeouts `sumologic_folder` provides the following [Timeouts](/docs/configuration/resources.html#timeouts) configuration options- `delete` - (Default `1 minute`) Used for waiting for the deletion job to be successful Additional data provided in state - `created_at` - (Computed) When the folder was created. - `created_by` - (Computed) Who created the folder. - `modified_at` - (Computed) When was the folder last modified. - `modified_by` - (Computed) The ID of the user who modified the folder last. - `item_type` - (Computed) What the type of the content item is (will obviously be &#34;Folder&#34;). - `permissions` - (Computed) List of permissions the user has on the content item. - `children` - (Computed) A list of all the content items in the created folder (can be folders or other content items).
 * 
 */
@ResourceType(type="sumologic:index/folder:Folder")
public class Folder extends com.pulumi.resources.CustomResource {
    /**
     * The description of the folder.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description of the folder.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * The name of the folder. This is required, and has to be unique.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the folder. This is required, and has to be unique.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the folder in which you want to create the new folder.
     * 
     */
    @Export(name="parentId", type=String.class, parameters={})
    private Output<String> parentId;

    /**
     * @return The ID of the folder in which you want to create the new folder.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Folder(String name) {
        this(name, FolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Folder(String name, FolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Folder(String name, FolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/folder:Folder", name, args == null ? FolderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Folder(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/folder:Folder", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Folder get(String name, Output<String> id, @Nullable FolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Folder(name, id, state, options);
    }
}
