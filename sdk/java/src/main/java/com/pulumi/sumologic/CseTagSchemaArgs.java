// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.CseTagSchemaValueOptionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseTagSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final CseTagSchemaArgs Empty = new CseTagSchemaArgs();

    /**
     * Applicable content types. Valid values: &#34;customInsight&#34;, &#34;entity&#34;, &#34;rule&#34;, &#34;threatIntelligence&#34;.
     * 
     */
    @Import(name="contentTypes")
    private @Nullable Output<List<String>> contentTypes;

    /**
     * @return Applicable content types. Valid values: &#34;customInsight&#34;, &#34;entity&#34;, &#34;rule&#34;, &#34;threatIntelligence&#34;.
     * 
     */
    public Optional<Output<List<String>>> contentTypes() {
        return Optional.ofNullable(this.contentTypes);
    }

    /**
     * Whether the tag schema accepts free form custom values.
     * 
     */
    @Import(name="freeForm", required=true)
    private Output<Boolean> freeForm;

    /**
     * @return Whether the tag schema accepts free form custom values.
     * 
     */
    public Output<Boolean> freeForm() {
        return this.freeForm;
    }

    /**
     * Tag Schema key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Tag Schema key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Value option label.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Value option label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    @Import(name="valueOptions")
    private @Nullable Output<List<CseTagSchemaValueOptionArgs>> valueOptions;

    public Optional<Output<List<CseTagSchemaValueOptionArgs>>> valueOptions() {
        return Optional.ofNullable(this.valueOptions);
    }

    private CseTagSchemaArgs() {}

    private CseTagSchemaArgs(CseTagSchemaArgs $) {
        this.contentTypes = $.contentTypes;
        this.freeForm = $.freeForm;
        this.key = $.key;
        this.label = $.label;
        this.valueOptions = $.valueOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseTagSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseTagSchemaArgs $;

        public Builder() {
            $ = new CseTagSchemaArgs();
        }

        public Builder(CseTagSchemaArgs defaults) {
            $ = new CseTagSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentTypes Applicable content types. Valid values: &#34;customInsight&#34;, &#34;entity&#34;, &#34;rule&#34;, &#34;threatIntelligence&#34;.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(@Nullable Output<List<String>> contentTypes) {
            $.contentTypes = contentTypes;
            return this;
        }

        /**
         * @param contentTypes Applicable content types. Valid values: &#34;customInsight&#34;, &#34;entity&#34;, &#34;rule&#34;, &#34;threatIntelligence&#34;.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(List<String> contentTypes) {
            return contentTypes(Output.of(contentTypes));
        }

        /**
         * @param contentTypes Applicable content types. Valid values: &#34;customInsight&#34;, &#34;entity&#34;, &#34;rule&#34;, &#34;threatIntelligence&#34;.
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }

        /**
         * @param freeForm Whether the tag schema accepts free form custom values.
         * 
         * @return builder
         * 
         */
        public Builder freeForm(Output<Boolean> freeForm) {
            $.freeForm = freeForm;
            return this;
        }

        /**
         * @param freeForm Whether the tag schema accepts free form custom values.
         * 
         * @return builder
         * 
         */
        public Builder freeForm(Boolean freeForm) {
            return freeForm(Output.of(freeForm));
        }

        /**
         * @param key Tag Schema key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Tag Schema key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param label Value option label.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Value option label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder valueOptions(@Nullable Output<List<CseTagSchemaValueOptionArgs>> valueOptions) {
            $.valueOptions = valueOptions;
            return this;
        }

        public Builder valueOptions(List<CseTagSchemaValueOptionArgs> valueOptions) {
            return valueOptions(Output.of(valueOptions));
        }

        public Builder valueOptions(CseTagSchemaValueOptionArgs... valueOptions) {
            return valueOptions(List.of(valueOptions));
        }

        public CseTagSchemaArgs build() {
            $.freeForm = Objects.requireNonNull($.freeForm, "expected parameter 'freeForm' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            return $;
        }
    }

}
