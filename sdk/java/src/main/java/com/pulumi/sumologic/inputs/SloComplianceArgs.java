// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloComplianceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloComplianceArgs Empty = new SloComplianceArgs();

    /**
     * The type of compliance to use. Valid values are `Rolling` or `Calendar`.
     * 
     */
    @Import(name="complianceType", required=true)
    private Output<String> complianceType;

    /**
     * @return The type of compliance to use. Valid values are `Rolling` or `Calendar`.
     * 
     */
    public Output<String> complianceType() {
        return this.complianceType;
    }

    /**
     * The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
     * based evaluation.
     * 
     */
    @Import(name="size", required=true)
    private Output<String> size;

    /**
     * @return The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
     * based evaluation.
     * 
     */
    public Output<String> size() {
        return this.size;
    }

    /**
     * Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
     * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
     * For `Month` it&#39;s not required and is set to first day of the month.
     * 
     */
    @Import(name="startFrom")
    private @Nullable Output<String> startFrom;

    /**
     * @return Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
     * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
     * For `Month` it&#39;s not required and is set to first day of the month.
     * 
     */
    public Optional<Output<String>> startFrom() {
        return Optional.ofNullable(this.startFrom);
    }

    /**
     * The target value to use, must be a number between 0 and 100.
     * 
     */
    @Import(name="target", required=true)
    private Output<Double> target;

    /**
     * @return The target value to use, must be a number between 0 and 100.
     * 
     */
    public Output<Double> target() {
        return this.target;
    }

    /**
     * Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
     * 
     */
    @Import(name="timezone", required=true)
    private Output<String> timezone;

    /**
     * @return Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
     * 
     */
    public Output<String> timezone() {
        return this.timezone;
    }

    private SloComplianceArgs() {}

    private SloComplianceArgs(SloComplianceArgs $) {
        this.complianceType = $.complianceType;
        this.size = $.size;
        this.startFrom = $.startFrom;
        this.target = $.target;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloComplianceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloComplianceArgs $;

        public Builder() {
            $ = new SloComplianceArgs();
        }

        public Builder(SloComplianceArgs defaults) {
            $ = new SloComplianceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param complianceType The type of compliance to use. Valid values are `Rolling` or `Calendar`.
         * 
         * @return builder
         * 
         */
        public Builder complianceType(Output<String> complianceType) {
            $.complianceType = complianceType;
            return this;
        }

        /**
         * @param complianceType The type of compliance to use. Valid values are `Rolling` or `Calendar`.
         * 
         * @return builder
         * 
         */
        public Builder complianceType(String complianceType) {
            return complianceType(Output.of(complianceType));
        }

        /**
         * @param size The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
         * based evaluation.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
         * based evaluation.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param startFrom Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
         * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
         * For `Month` it&#39;s not required and is set to first day of the month.
         * 
         * @return builder
         * 
         */
        public Builder startFrom(@Nullable Output<String> startFrom) {
            $.startFrom = startFrom;
            return this;
        }

        /**
         * @param startFrom Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
         * Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
         * For `Month` it&#39;s not required and is set to first day of the month.
         * 
         * @return builder
         * 
         */
        public Builder startFrom(String startFrom) {
            return startFrom(Output.of(startFrom));
        }

        /**
         * @param target The target value to use, must be a number between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<Double> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The target value to use, must be a number between 0 and 100.
         * 
         * @return builder
         * 
         */
        public Builder target(Double target) {
            return target(Output.of(target));
        }

        /**
         * @param timezone Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
         * 
         * @return builder
         * 
         */
        public Builder timezone(Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public SloComplianceArgs build() {
            $.complianceType = Objects.requireNonNull($.complianceType, "expected parameter 'complianceType' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.target = Objects.requireNonNull($.target, "expected parameter 'target' to be non-null");
            $.timezone = Objects.requireNonNull($.timezone, "expected parameter 'timezone' to be non-null");
            return $;
        }
    }

}
