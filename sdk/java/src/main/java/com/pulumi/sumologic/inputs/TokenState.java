// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenState extends com.pulumi.resources.ResourceArgs {

    public static final TokenState Empty = new TokenState();

    /**
     * The description of the token.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the token.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encoded token for collector registration.
     * 
     */
    @Import(name="encodedTokenAndUrl")
    private @Nullable Output<String> encodedTokenAndUrl;

    /**
     * @return The encoded token for collector registration.
     * 
     */
    public Optional<Output<String>> encodedTokenAndUrl() {
        return Optional.ofNullable(this.encodedTokenAndUrl);
    }

    /**
     * Display name of the token. This must be unique across all of the tokens.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Display name of the token. This must be unique across all of the tokens.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status of the token. Valid values:
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the token. Valid values:
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Type of the token. Valid value:
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the token. Valid value:
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="version")
    private @Nullable Output<Integer> version;

    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private TokenState() {}

    private TokenState(TokenState $) {
        this.description = $.description;
        this.encodedTokenAndUrl = $.encodedTokenAndUrl;
        this.name = $.name;
        this.status = $.status;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenState $;

        public Builder() {
            $ = new TokenState();
        }

        public Builder(TokenState defaults) {
            $ = new TokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the token.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encodedTokenAndUrl The encoded token for collector registration.
         * 
         * @return builder
         * 
         */
        public Builder encodedTokenAndUrl(@Nullable Output<String> encodedTokenAndUrl) {
            $.encodedTokenAndUrl = encodedTokenAndUrl;
            return this;
        }

        /**
         * @param encodedTokenAndUrl The encoded token for collector registration.
         * 
         * @return builder
         * 
         */
        public Builder encodedTokenAndUrl(String encodedTokenAndUrl) {
            return encodedTokenAndUrl(Output.of(encodedTokenAndUrl));
        }

        /**
         * @param name Display name of the token. This must be unique across all of the tokens.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Display name of the token. This must be unique across all of the tokens.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Status of the token. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the token. Valid values:
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Type of the token. Valid value:
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the token. Valid value:
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public TokenState build() {
            return $;
        }
    }

}
