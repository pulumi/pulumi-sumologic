// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.sumologic.outputs.PollingSourcePathTagFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PollingSourcePath {
    /**
     * @return The name of the bucket. This is needed if using type `S3BucketPathExpression`.
     * 
     */
    private final @Nullable String bucketName;
    /**
     * @return List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
     * 
     */
    private final @Nullable List<String> limitToNamespaces;
    /**
     * @return List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
     * 
     */
    private final @Nullable List<String> limitToRegions;
    /**
     * @return The path to the data. This is needed if using type `S3BucketPathExpression`.
     * 
     */
    private final @Nullable String pathExpression;
    /**
     * @return Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
     * 
     */
    private final @Nullable List<PollingSourcePathTagFilter> tagFilters;
    /**
     * @return This value has to be set to `TagFilters`
     * 
     */
    private final String type;

    @CustomType.Constructor
    private PollingSourcePath(
        @CustomType.Parameter("bucketName") @Nullable String bucketName,
        @CustomType.Parameter("limitToNamespaces") @Nullable List<String> limitToNamespaces,
        @CustomType.Parameter("limitToRegions") @Nullable List<String> limitToRegions,
        @CustomType.Parameter("pathExpression") @Nullable String pathExpression,
        @CustomType.Parameter("tagFilters") @Nullable List<PollingSourcePathTagFilter> tagFilters,
        @CustomType.Parameter("type") String type) {
        this.bucketName = bucketName;
        this.limitToNamespaces = limitToNamespaces;
        this.limitToRegions = limitToRegions;
        this.pathExpression = pathExpression;
        this.tagFilters = tagFilters;
        this.type = type;
    }

    /**
     * @return The name of the bucket. This is needed if using type `S3BucketPathExpression`.
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    /**
     * @return List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
     * 
     */
    public List<String> limitToNamespaces() {
        return this.limitToNamespaces == null ? List.of() : this.limitToNamespaces;
    }
    /**
     * @return List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
     * 
     */
    public List<String> limitToRegions() {
        return this.limitToRegions == null ? List.of() : this.limitToRegions;
    }
    /**
     * @return The path to the data. This is needed if using type `S3BucketPathExpression`.
     * 
     */
    public Optional<String> pathExpression() {
        return Optional.ofNullable(this.pathExpression);
    }
    /**
     * @return Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
     * 
     */
    public List<PollingSourcePathTagFilter> tagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }
    /**
     * @return This value has to be set to `TagFilters`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PollingSourcePath defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bucketName;
        private @Nullable List<String> limitToNamespaces;
        private @Nullable List<String> limitToRegions;
        private @Nullable String pathExpression;
        private @Nullable List<PollingSourcePathTagFilter> tagFilters;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(PollingSourcePath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.limitToNamespaces = defaults.limitToNamespaces;
    	      this.limitToRegions = defaults.limitToRegions;
    	      this.pathExpression = defaults.pathExpression;
    	      this.tagFilters = defaults.tagFilters;
    	      this.type = defaults.type;
        }

        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        public Builder limitToNamespaces(@Nullable List<String> limitToNamespaces) {
            this.limitToNamespaces = limitToNamespaces;
            return this;
        }
        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }
        public Builder limitToRegions(@Nullable List<String> limitToRegions) {
            this.limitToRegions = limitToRegions;
            return this;
        }
        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }
        public Builder pathExpression(@Nullable String pathExpression) {
            this.pathExpression = pathExpression;
            return this;
        }
        public Builder tagFilters(@Nullable List<PollingSourcePathTagFilter> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public Builder tagFilters(PollingSourcePathTagFilter... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public PollingSourcePath build() {
            return new PollingSourcePath(bucketName, limitToNamespaces, limitToRegions, pathExpression, tagFilters, type);
        }
    }
}
