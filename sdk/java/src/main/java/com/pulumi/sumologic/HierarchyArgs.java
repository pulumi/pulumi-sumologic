// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.HierarchyFilterArgs;
import com.pulumi.sumologic.inputs.HierarchyLevelArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HierarchyArgs extends com.pulumi.resources.ResourceArgs {

    public static final HierarchyArgs Empty = new HierarchyArgs();

    /**
     * An optional clause that a hierarchy requires to be matched.
     * 
     */
    @Import(name="filter")
    private @Nullable Output<HierarchyFilterArgs> filter;

    /**
     * @return An optional clause that a hierarchy requires to be matched.
     * 
     */
    public Optional<Output<HierarchyFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="levels", required=true)
    private Output<List<HierarchyLevelArgs>> levels;

    public Output<List<HierarchyLevelArgs>> levels() {
        return this.levels;
    }

    /**
     * Name of the hierarchy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the hierarchy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private HierarchyArgs() {}

    private HierarchyArgs(HierarchyArgs $) {
        this.filter = $.filter;
        this.levels = $.levels;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HierarchyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HierarchyArgs $;

        public Builder() {
            $ = new HierarchyArgs();
        }

        public Builder(HierarchyArgs defaults) {
            $ = new HierarchyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter An optional clause that a hierarchy requires to be matched.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<HierarchyFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter An optional clause that a hierarchy requires to be matched.
         * 
         * @return builder
         * 
         */
        public Builder filter(HierarchyFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public Builder levels(Output<List<HierarchyLevelArgs>> levels) {
            $.levels = levels;
            return this;
        }

        public Builder levels(List<HierarchyLevelArgs> levels) {
            return levels(Output.of(levels));
        }

        public Builder levels(HierarchyLevelArgs... levels) {
            return levels(List.of(levels));
        }

        /**
         * @param name Name of the hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the hierarchy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public HierarchyArgs build() {
            $.levels = Objects.requireNonNull($.levels, "expected parameter 'levels' to be non-null");
            return $;
        }
    }

}
