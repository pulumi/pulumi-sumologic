// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class MetadataSourcePath {
    /**
     * @return List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
     * 
     */
    private @Nullable List<String> limitToNamespaces;
    /**
     * @return List of Amazon regions.
     * 
     */
    private @Nullable List<String> limitToRegions;
    /**
     * @return Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
     * 
     */
    private @Nullable List<String> tagFilters;
    /**
     * @return type of polling source. Only allowed value is `AwsMetadataPath`.
     * 
     */
    private String type;

    private MetadataSourcePath() {}
    /**
     * @return List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
     * 
     */
    public List<String> limitToNamespaces() {
        return this.limitToNamespaces == null ? List.of() : this.limitToNamespaces;
    }
    /**
     * @return List of Amazon regions.
     * 
     */
    public List<String> limitToRegions() {
        return this.limitToRegions == null ? List.of() : this.limitToRegions;
    }
    /**
     * @return Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
     * 
     */
    public List<String> tagFilters() {
        return this.tagFilters == null ? List.of() : this.tagFilters;
    }
    /**
     * @return type of polling source. Only allowed value is `AwsMetadataPath`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetadataSourcePath defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> limitToNamespaces;
        private @Nullable List<String> limitToRegions;
        private @Nullable List<String> tagFilters;
        private String type;
        public Builder() {}
        public Builder(MetadataSourcePath defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.limitToNamespaces = defaults.limitToNamespaces;
    	      this.limitToRegions = defaults.limitToRegions;
    	      this.tagFilters = defaults.tagFilters;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder limitToNamespaces(@Nullable List<String> limitToNamespaces) {
            this.limitToNamespaces = limitToNamespaces;
            return this;
        }
        public Builder limitToNamespaces(String... limitToNamespaces) {
            return limitToNamespaces(List.of(limitToNamespaces));
        }
        @CustomType.Setter
        public Builder limitToRegions(@Nullable List<String> limitToRegions) {
            this.limitToRegions = limitToRegions;
            return this;
        }
        public Builder limitToRegions(String... limitToRegions) {
            return limitToRegions(List.of(limitToRegions));
        }
        @CustomType.Setter
        public Builder tagFilters(@Nullable List<String> tagFilters) {
            this.tagFilters = tagFilters;
            return this;
        }
        public Builder tagFilters(String... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public MetadataSourcePath build() {
            final var o = new MetadataSourcePath();
            o.limitToNamespaces = limitToNamespaces;
            o.limitToRegions = limitToRegions;
            o.tagFilters = tagFilters;
            o.type = type;
            return o;
        }
    }
}
