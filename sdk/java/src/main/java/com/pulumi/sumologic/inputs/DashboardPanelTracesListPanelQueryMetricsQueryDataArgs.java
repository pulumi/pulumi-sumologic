// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sumologic.inputs.DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs;
import com.pulumi.sumologic.inputs.DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardPanelTracesListPanelQueryMetricsQueryDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardPanelTracesListPanelQueryMetricsQueryDataArgs Empty = new DashboardPanelTracesListPanelQueryMetricsQueryDataArgs();

    @Import(name="aggregationType")
    private @Nullable Output<String> aggregationType;

    public Optional<Output<String>> aggregationType() {
        return Optional.ofNullable(this.aggregationType);
    }

    @Import(name="filters", required=true)
    private Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs>> filters;

    public Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs>> filters() {
        return this.filters;
    }

    @Import(name="groupBy")
    private @Nullable Output<String> groupBy;

    public Optional<Output<String>> groupBy() {
        return Optional.ofNullable(this.groupBy);
    }

    @Import(name="metric", required=true)
    private Output<String> metric;

    public Output<String> metric() {
        return this.metric;
    }

    @Import(name="operators")
    private @Nullable Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs>> operators;

    public Optional<Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs>>> operators() {
        return Optional.ofNullable(this.operators);
    }

    private DashboardPanelTracesListPanelQueryMetricsQueryDataArgs() {}

    private DashboardPanelTracesListPanelQueryMetricsQueryDataArgs(DashboardPanelTracesListPanelQueryMetricsQueryDataArgs $) {
        this.aggregationType = $.aggregationType;
        this.filters = $.filters;
        this.groupBy = $.groupBy;
        this.metric = $.metric;
        this.operators = $.operators;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardPanelTracesListPanelQueryMetricsQueryDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardPanelTracesListPanelQueryMetricsQueryDataArgs $;

        public Builder() {
            $ = new DashboardPanelTracesListPanelQueryMetricsQueryDataArgs();
        }

        public Builder(DashboardPanelTracesListPanelQueryMetricsQueryDataArgs defaults) {
            $ = new DashboardPanelTracesListPanelQueryMetricsQueryDataArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregationType(@Nullable Output<String> aggregationType) {
            $.aggregationType = aggregationType;
            return this;
        }

        public Builder aggregationType(String aggregationType) {
            return aggregationType(Output.of(aggregationType));
        }

        public Builder filters(Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(DashboardPanelTracesListPanelQueryMetricsQueryDataFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder groupBy(@Nullable Output<String> groupBy) {
            $.groupBy = groupBy;
            return this;
        }

        public Builder groupBy(String groupBy) {
            return groupBy(Output.of(groupBy));
        }

        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        public Builder operators(@Nullable Output<List<DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs>> operators) {
            $.operators = operators;
            return this;
        }

        public Builder operators(List<DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs> operators) {
            return operators(Output.of(operators));
        }

        public Builder operators(DashboardPanelTracesListPanelQueryMetricsQueryDataOperatorArgs... operators) {
            return operators(List.of(operators));
        }

        public DashboardPanelTracesListPanelQueryMetricsQueryDataArgs build() {
            if ($.filters == null) {
                throw new MissingRequiredPropertyException("DashboardPanelTracesListPanelQueryMetricsQueryDataArgs", "filters");
            }
            if ($.metric == null) {
                throw new MissingRequiredPropertyException("DashboardPanelTracesListPanelQueryMetricsQueryDataArgs", "metric");
            }
            return $;
        }
    }

}
