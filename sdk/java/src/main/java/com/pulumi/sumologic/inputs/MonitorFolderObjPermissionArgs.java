// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class MonitorFolderObjPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorFolderObjPermissionArgs Empty = new MonitorFolderObjPermissionArgs();

    /**
     * A Set of Permissions. Valid Permission Values:
     * 
     */
    @Import(name="permissions", required=true)
    private Output<List<String>> permissions;

    /**
     * @return A Set of Permissions. Valid Permission Values:
     * 
     */
    public Output<List<String>> permissions() {
        return this.permissions;
    }

    /**
     * A Role ID or the Org ID of the account
     * 
     */
    @Import(name="subjectId", required=true)
    private Output<String> subjectId;

    /**
     * @return A Role ID or the Org ID of the account
     * 
     */
    public Output<String> subjectId() {
        return this.subjectId;
    }

    /**
     * Valid values:
     * 
     */
    @Import(name="subjectType", required=true)
    private Output<String> subjectType;

    /**
     * @return Valid values:
     * 
     */
    public Output<String> subjectType() {
        return this.subjectType;
    }

    private MonitorFolderObjPermissionArgs() {}

    private MonitorFolderObjPermissionArgs(MonitorFolderObjPermissionArgs $) {
        this.permissions = $.permissions;
        this.subjectId = $.subjectId;
        this.subjectType = $.subjectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorFolderObjPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorFolderObjPermissionArgs $;

        public Builder() {
            $ = new MonitorFolderObjPermissionArgs();
        }

        public Builder(MonitorFolderObjPermissionArgs defaults) {
            $ = new MonitorFolderObjPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions A Set of Permissions. Valid Permission Values:
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions A Set of Permissions. Valid Permission Values:
         * 
         * @return builder
         * 
         */
        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param permissions A Set of Permissions. Valid Permission Values:
         * 
         * @return builder
         * 
         */
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        /**
         * @param subjectId A Role ID or the Org ID of the account
         * 
         * @return builder
         * 
         */
        public Builder subjectId(Output<String> subjectId) {
            $.subjectId = subjectId;
            return this;
        }

        /**
         * @param subjectId A Role ID or the Org ID of the account
         * 
         * @return builder
         * 
         */
        public Builder subjectId(String subjectId) {
            return subjectId(Output.of(subjectId));
        }

        /**
         * @param subjectType Valid values:
         * 
         * @return builder
         * 
         */
        public Builder subjectType(Output<String> subjectType) {
            $.subjectType = subjectType;
            return this;
        }

        /**
         * @param subjectType Valid values:
         * 
         * @return builder
         * 
         */
        public Builder subjectType(String subjectType) {
            return subjectType(Output.of(subjectType));
        }

        public MonitorFolderObjPermissionArgs build() {
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.subjectId = Objects.requireNonNull($.subjectId, "expected parameter 'subjectId' to be non-null");
            $.subjectType = Objects.requireNonNull($.subjectType, "expected parameter 'subjectType' to be non-null");
            return $;
        }
    }

}
