// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SloIndicatorMonitorBasedEvaluationMonitorTriggers {
    /**
     * @return ID of the monitor. Ex: `0000000000BCB3A4`
     * 
     */
    private String monitorId;
    /**
     * @return Type of monitor trigger which will attribute towards a successful or unsuccessful SLO
     * window. Valid values are `Critical`, `Warning`, `MissingData`. Only one trigger type is supported.
     * 
     */
    private String triggerTypes;

    private SloIndicatorMonitorBasedEvaluationMonitorTriggers() {}
    /**
     * @return ID of the monitor. Ex: `0000000000BCB3A4`
     * 
     */
    public String monitorId() {
        return this.monitorId;
    }
    /**
     * @return Type of monitor trigger which will attribute towards a successful or unsuccessful SLO
     * window. Valid values are `Critical`, `Warning`, `MissingData`. Only one trigger type is supported.
     * 
     */
    public String triggerTypes() {
        return this.triggerTypes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloIndicatorMonitorBasedEvaluationMonitorTriggers defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String monitorId;
        private String triggerTypes;
        public Builder() {}
        public Builder(SloIndicatorMonitorBasedEvaluationMonitorTriggers defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.monitorId = defaults.monitorId;
    	      this.triggerTypes = defaults.triggerTypes;
        }

        @CustomType.Setter
        public Builder monitorId(String monitorId) {
            if (monitorId == null) {
              throw new MissingRequiredPropertyException("SloIndicatorMonitorBasedEvaluationMonitorTriggers", "monitorId");
            }
            this.monitorId = monitorId;
            return this;
        }
        @CustomType.Setter
        public Builder triggerTypes(String triggerTypes) {
            if (triggerTypes == null) {
              throw new MissingRequiredPropertyException("SloIndicatorMonitorBasedEvaluationMonitorTriggers", "triggerTypes");
            }
            this.triggerTypes = triggerTypes;
            return this;
        }
        public SloIndicatorMonitorBasedEvaluationMonitorTriggers build() {
            final var _resultValue = new SloIndicatorMonitorBasedEvaluationMonitorTriggers();
            _resultValue.monitorId = monitorId;
            _resultValue.triggerTypes = triggerTypes;
            return _resultValue;
        }
    }
}
