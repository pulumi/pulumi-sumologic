// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.CseOutlierRuleAggregationFunctionsArgs;
import com.pulumi.sumologic.inputs.CseOutlierRuleEntitySelectorArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CseOutlierRuleState extends com.pulumi.resources.ResourceArgs {

    public static final CseOutlierRuleState Empty = new CseOutlierRuleState();

    @Import(name="aggregationFunctions")
    private @Nullable Output<CseOutlierRuleAggregationFunctionsArgs> aggregationFunctions;

    public Optional<Output<CseOutlierRuleAggregationFunctionsArgs>> aggregationFunctions() {
        return Optional.ofNullable(this.aggregationFunctions);
    }

    /**
     * The baseline window size in milliseconds
     * 
     */
    @Import(name="baselineWindowSize")
    private @Nullable Output<String> baselineWindowSize;

    /**
     * @return The baseline window size in milliseconds
     * 
     */
    public Optional<Output<String>> baselineWindowSize() {
        return Optional.ofNullable(this.baselineWindowSize);
    }

    /**
     * The description of the generated Signals
     * 
     */
    @Import(name="descriptionExpression")
    private @Nullable Output<String> descriptionExpression;

    /**
     * @return The description of the generated Signals
     * 
     */
    public Optional<Output<String>> descriptionExpression() {
        return Optional.ofNullable(this.descriptionExpression);
    }

    /**
     * The deviation threshold used to calculate the threshold to trigger signals
     * 
     */
    @Import(name="deviationThreshold")
    private @Nullable Output<Integer> deviationThreshold;

    /**
     * @return The deviation threshold used to calculate the threshold to trigger signals
     * 
     */
    public Optional<Output<Integer>> deviationThreshold() {
        return Optional.ofNullable(this.deviationThreshold);
    }

    /**
     * Whether the rule should generate Signals
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should generate Signals
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The entities to generate Signals on
     * + `entityType` - (Required) The type of the entity to generate the Signal on
     * 
     */
    @Import(name="entitySelectors")
    private @Nullable Output<List<CseOutlierRuleEntitySelectorArgs>> entitySelectors;

    /**
     * @return The entities to generate Signals on
     * + `entityType` - (Required) The type of the entity to generate the Signal on
     * 
     */
    public Optional<Output<List<CseOutlierRuleEntitySelectorArgs>>> entitySelectors() {
        return Optional.ofNullable(this.entitySelectors);
    }

    /**
     * The minimum threshold to trigger signals
     * 
     */
    @Import(name="floorValue")
    private @Nullable Output<Integer> floorValue;

    /**
     * @return The minimum threshold to trigger signals
     * 
     */
    public Optional<Output<Integer>> floorValue() {
        return Optional.ofNullable(this.floorValue);
    }

    /**
     * A list of fields to group records by
     * 
     */
    @Import(name="groupByFields")
    private @Nullable Output<List<String>> groupByFields;

    /**
     * @return A list of fields to group records by
     * 
     */
    public Optional<Output<List<String>>> groupByFields() {
        return Optional.ofNullable(this.groupByFields);
    }

    /**
     * Whether the generated Signals should be prototype Signals
     * 
     */
    @Import(name="isPrototype")
    private @Nullable Output<Boolean> isPrototype;

    /**
     * @return Whether the generated Signals should be prototype Signals
     * 
     */
    public Optional<Output<Boolean>> isPrototype() {
        return Optional.ofNullable(this.isPrototype);
    }

    /**
     * The expression for which records to match on
     * 
     */
    @Import(name="matchExpression")
    private @Nullable Output<String> matchExpression;

    /**
     * @return The expression for which records to match on
     * 
     */
    public Optional<Output<String>> matchExpression() {
        return Optional.ofNullable(this.matchExpression);
    }

    /**
     * The name of the Rule
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Rule
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the generated Signals
     * 
     */
    @Import(name="nameExpression")
    private @Nullable Output<String> nameExpression;

    /**
     * @return The name of the generated Signals
     * 
     */
    public Optional<Output<String>> nameExpression() {
        return Optional.ofNullable(this.nameExpression);
    }

    /**
     * The retention window size in milliseconds
     * 
     */
    @Import(name="retentionWindowSize")
    private @Nullable Output<String> retentionWindowSize;

    /**
     * @return The retention window size in milliseconds
     * 
     */
    public Optional<Output<String>> retentionWindowSize() {
        return Optional.ofNullable(this.retentionWindowSize);
    }

    /**
     * The severity of the generated Signals
     * 
     */
    @Import(name="severity")
    private @Nullable Output<Integer> severity;

    /**
     * @return The severity of the generated Signals
     * 
     */
    public Optional<Output<Integer>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * The summary of the generated Signals
     * 
     */
    @Import(name="summaryExpression")
    private @Nullable Output<String> summaryExpression;

    /**
     * @return The summary of the generated Signals
     * 
     */
    public Optional<Output<String>> summaryExpression() {
        return Optional.ofNullable(this.summaryExpression);
    }

    /**
     * For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    @Import(name="suppressionWindowSize")
    private @Nullable Output<Integer> suppressionWindowSize;

    /**
     * @return For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
     * 
     * The following attributes are exported:
     * 
     */
    public Optional<Output<Integer>> suppressionWindowSize() {
        return Optional.ofNullable(this.suppressionWindowSize);
    }

    /**
     * The tags of the generated Signals
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return The tags of the generated Signals
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<String> windowSize;

    /**
     * @return The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
     * 
     */
    public Optional<Output<String>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private CseOutlierRuleState() {}

    private CseOutlierRuleState(CseOutlierRuleState $) {
        this.aggregationFunctions = $.aggregationFunctions;
        this.baselineWindowSize = $.baselineWindowSize;
        this.descriptionExpression = $.descriptionExpression;
        this.deviationThreshold = $.deviationThreshold;
        this.enabled = $.enabled;
        this.entitySelectors = $.entitySelectors;
        this.floorValue = $.floorValue;
        this.groupByFields = $.groupByFields;
        this.isPrototype = $.isPrototype;
        this.matchExpression = $.matchExpression;
        this.name = $.name;
        this.nameExpression = $.nameExpression;
        this.retentionWindowSize = $.retentionWindowSize;
        this.severity = $.severity;
        this.summaryExpression = $.summaryExpression;
        this.suppressionWindowSize = $.suppressionWindowSize;
        this.tags = $.tags;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CseOutlierRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CseOutlierRuleState $;

        public Builder() {
            $ = new CseOutlierRuleState();
        }

        public Builder(CseOutlierRuleState defaults) {
            $ = new CseOutlierRuleState(Objects.requireNonNull(defaults));
        }

        public Builder aggregationFunctions(@Nullable Output<CseOutlierRuleAggregationFunctionsArgs> aggregationFunctions) {
            $.aggregationFunctions = aggregationFunctions;
            return this;
        }

        public Builder aggregationFunctions(CseOutlierRuleAggregationFunctionsArgs aggregationFunctions) {
            return aggregationFunctions(Output.of(aggregationFunctions));
        }

        /**
         * @param baselineWindowSize The baseline window size in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder baselineWindowSize(@Nullable Output<String> baselineWindowSize) {
            $.baselineWindowSize = baselineWindowSize;
            return this;
        }

        /**
         * @param baselineWindowSize The baseline window size in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder baselineWindowSize(String baselineWindowSize) {
            return baselineWindowSize(Output.of(baselineWindowSize));
        }

        /**
         * @param descriptionExpression The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder descriptionExpression(@Nullable Output<String> descriptionExpression) {
            $.descriptionExpression = descriptionExpression;
            return this;
        }

        /**
         * @param descriptionExpression The description of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder descriptionExpression(String descriptionExpression) {
            return descriptionExpression(Output.of(descriptionExpression));
        }

        /**
         * @param deviationThreshold The deviation threshold used to calculate the threshold to trigger signals
         * 
         * @return builder
         * 
         */
        public Builder deviationThreshold(@Nullable Output<Integer> deviationThreshold) {
            $.deviationThreshold = deviationThreshold;
            return this;
        }

        /**
         * @param deviationThreshold The deviation threshold used to calculate the threshold to trigger signals
         * 
         * @return builder
         * 
         */
        public Builder deviationThreshold(Integer deviationThreshold) {
            return deviationThreshold(Output.of(deviationThreshold));
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should generate Signals
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * + `entityType` - (Required) The type of the entity to generate the Signal on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(@Nullable Output<List<CseOutlierRuleEntitySelectorArgs>> entitySelectors) {
            $.entitySelectors = entitySelectors;
            return this;
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * + `entityType` - (Required) The type of the entity to generate the Signal on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(List<CseOutlierRuleEntitySelectorArgs> entitySelectors) {
            return entitySelectors(Output.of(entitySelectors));
        }

        /**
         * @param entitySelectors The entities to generate Signals on
         * + `entityType` - (Required) The type of the entity to generate the Signal on
         * 
         * @return builder
         * 
         */
        public Builder entitySelectors(CseOutlierRuleEntitySelectorArgs... entitySelectors) {
            return entitySelectors(List.of(entitySelectors));
        }

        /**
         * @param floorValue The minimum threshold to trigger signals
         * 
         * @return builder
         * 
         */
        public Builder floorValue(@Nullable Output<Integer> floorValue) {
            $.floorValue = floorValue;
            return this;
        }

        /**
         * @param floorValue The minimum threshold to trigger signals
         * 
         * @return builder
         * 
         */
        public Builder floorValue(Integer floorValue) {
            return floorValue(Output.of(floorValue));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(@Nullable Output<List<String>> groupByFields) {
            $.groupByFields = groupByFields;
            return this;
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(List<String> groupByFields) {
            return groupByFields(Output.of(groupByFields));
        }

        /**
         * @param groupByFields A list of fields to group records by
         * 
         * @return builder
         * 
         */
        public Builder groupByFields(String... groupByFields) {
            return groupByFields(List.of(groupByFields));
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(@Nullable Output<Boolean> isPrototype) {
            $.isPrototype = isPrototype;
            return this;
        }

        /**
         * @param isPrototype Whether the generated Signals should be prototype Signals
         * 
         * @return builder
         * 
         */
        public Builder isPrototype(Boolean isPrototype) {
            return isPrototype(Output.of(isPrototype));
        }

        /**
         * @param matchExpression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder matchExpression(@Nullable Output<String> matchExpression) {
            $.matchExpression = matchExpression;
            return this;
        }

        /**
         * @param matchExpression The expression for which records to match on
         * 
         * @return builder
         * 
         */
        public Builder matchExpression(String matchExpression) {
            return matchExpression(Output.of(matchExpression));
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameExpression The name of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder nameExpression(@Nullable Output<String> nameExpression) {
            $.nameExpression = nameExpression;
            return this;
        }

        /**
         * @param nameExpression The name of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder nameExpression(String nameExpression) {
            return nameExpression(Output.of(nameExpression));
        }

        /**
         * @param retentionWindowSize The retention window size in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowSize(@Nullable Output<String> retentionWindowSize) {
            $.retentionWindowSize = retentionWindowSize;
            return this;
        }

        /**
         * @param retentionWindowSize The retention window size in milliseconds
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowSize(String retentionWindowSize) {
            return retentionWindowSize(Output.of(retentionWindowSize));
        }

        /**
         * @param severity The severity of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<Integer> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The severity of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder severity(Integer severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(@Nullable Output<String> summaryExpression) {
            $.summaryExpression = summaryExpression;
            return this;
        }

        /**
         * @param summaryExpression The summary of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder summaryExpression(String summaryExpression) {
            return summaryExpression(Output.of(summaryExpression));
        }

        /**
         * @param suppressionWindowSize For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder suppressionWindowSize(@Nullable Output<Integer> suppressionWindowSize) {
            $.suppressionWindowSize = suppressionWindowSize;
            return this;
        }

        /**
         * @param suppressionWindowSize For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
         * 
         * The following attributes are exported:
         * 
         * @return builder
         * 
         */
        public Builder suppressionWindowSize(Integer suppressionWindowSize) {
            return suppressionWindowSize(Output.of(suppressionWindowSize));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags of the generated Signals
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param windowSize The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public CseOutlierRuleState build() {
            return $;
        }
    }

}
