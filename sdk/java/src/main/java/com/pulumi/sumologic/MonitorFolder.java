// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.MonitorFolderArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.MonitorFolderState;
import com.pulumi.sumologic.outputs.MonitorFolderObjPermission;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides the ability to create, read, delete, and update folders for [Monitors](https://help.sumologic.com/?cid=10020).
 * &gt; If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one&#39;s Sumo Logic account, one can also set those permission details under this monitor folder resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders).
 * 
 * ## Example Monitor Folder
 * 
 * NOTE: Monitor folders are considered a different resource from Library content folders.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.MonitorFolder;
 * import com.pulumi.sumologic.MonitorFolderArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tfMonitorFolder1 = new MonitorFolder(&#34;tfMonitorFolder1&#34;, MonitorFolderArgs.builder()        
 *             .description(&#34;A folder for monitors managed by terraform.&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Monitor folders can be imported using the monitor folder identifier, such ashcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/monitorFolder:MonitorFolder tf_monitor_folder_1 0000000000ABC123
 * ```
 * 
 *  [1]https://help.sumologic.com/?cid=10020 [2]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders
 * 
 */
@ResourceType(type="sumologic:index/monitorFolder:MonitorFolder")
public class MonitorFolder extends com.pulumi.resources.CustomResource {
    @Export(name="contentType", type=String.class, parameters={})
    private Output</* @Nullable */ String> contentType;

    public Output<Optional<String>> contentType() {
        return Codegen.optional(this.contentType);
    }
    @Export(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    public Output<String> createdAt() {
        return this.createdAt;
    }
    @Export(name="createdBy", type=String.class, parameters={})
    private Output<String> createdBy;

    public Output<String> createdBy() {
        return this.createdBy;
    }
    /**
     * The description of the monitor folder.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return The description of the monitor folder.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    @Export(name="isLocked", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isLocked;

    public Output<Optional<Boolean>> isLocked() {
        return Codegen.optional(this.isLocked);
    }
    @Export(name="isMutable", type=Boolean.class, parameters={})
    private Output<Boolean> isMutable;

    public Output<Boolean> isMutable() {
        return this.isMutable;
    }
    @Export(name="isSystem", type=Boolean.class, parameters={})
    private Output<Boolean> isSystem;

    public Output<Boolean> isSystem() {
        return this.isSystem;
    }
    @Export(name="modifiedAt", type=String.class, parameters={})
    private Output<String> modifiedAt;

    public Output<String> modifiedAt() {
        return this.modifiedAt;
    }
    @Export(name="modifiedBy", type=String.class, parameters={})
    private Output<String> modifiedBy;

    public Output<String> modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * The name of the monitor folder. The name must be alphanumeric.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the monitor folder. The name must be alphanumeric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * `obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.
     * 
     */
    @Export(name="objPermissions", type=List.class, parameters={MonitorFolderObjPermission.class})
    private Output</* @Nullable */ List<MonitorFolderObjPermission>> objPermissions;

    /**
     * @return `obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.
     * 
     */
    public Output<Optional<List<MonitorFolderObjPermission>>> objPermissions() {
        return Codegen.optional(this.objPermissions);
    }
    /**
     * The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
     * 
     */
    @Export(name="parentId", type=String.class, parameters={})
    private Output<String> parentId;

    /**
     * @return The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }
    @Export(name="postRequestMap", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> postRequestMap;

    public Output<Optional<Map<String,String>>> postRequestMap() {
        return Codegen.optional(this.postRequestMap);
    }
    /**
     * The type of object model. Valid value:
     * - `MonitorsLibraryFolder`
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return The type of object model. Valid value:
     * - `MonitorsLibraryFolder`
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    @Export(name="version", type=Integer.class, parameters={})
    private Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MonitorFolder(String name) {
        this(name, MonitorFolderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MonitorFolder(String name, MonitorFolderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MonitorFolder(String name, MonitorFolderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/monitorFolder:MonitorFolder", name, args == null ? MonitorFolderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private MonitorFolder(String name, Output<String> id, @Nullable MonitorFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/monitorFolder:MonitorFolder", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MonitorFolder get(String name, Output<String> id, @Nullable MonitorFolderState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MonitorFolder(name, id, state, options);
    }
}
