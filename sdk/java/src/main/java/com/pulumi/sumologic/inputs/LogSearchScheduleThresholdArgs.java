// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class LogSearchScheduleThresholdArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogSearchScheduleThresholdArgs Empty = new LogSearchScheduleThresholdArgs();

    /**
     * Expected result count.
     * 
     */
    @Import(name="count", required=true)
    private Output<Integer> count;

    /**
     * @return Expected result count.
     * 
     */
    public Output<Integer> count() {
        return this.count;
    }

    /**
     * Criterion to be applied when comparing actual result count with expected count. Possible
     * values are: `eq`, `gt`, `ge`, `lt`, and `le`.
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Criterion to be applied when comparing actual result count with expected count. Possible
     * values are: `eq`, `gt`, `ge`, `lt`, and `le`.
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * Threshold type for the scheduled log search. Possible values are: `message` and `group`.
     * Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
     * to `message`.
     * 
     */
    @Import(name="thresholdType", required=true)
    private Output<String> thresholdType;

    /**
     * @return Threshold type for the scheduled log search. Possible values are: `message` and `group`.
     * Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
     * to `message`.
     * 
     */
    public Output<String> thresholdType() {
        return this.thresholdType;
    }

    private LogSearchScheduleThresholdArgs() {}

    private LogSearchScheduleThresholdArgs(LogSearchScheduleThresholdArgs $) {
        this.count = $.count;
        this.operator = $.operator;
        this.thresholdType = $.thresholdType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSearchScheduleThresholdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSearchScheduleThresholdArgs $;

        public Builder() {
            $ = new LogSearchScheduleThresholdArgs();
        }

        public Builder(LogSearchScheduleThresholdArgs defaults) {
            $ = new LogSearchScheduleThresholdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Expected result count.
         * 
         * @return builder
         * 
         */
        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Expected result count.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param operator Criterion to be applied when comparing actual result count with expected count. Possible
         * values are: `eq`, `gt`, `ge`, `lt`, and `le`.
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Criterion to be applied when comparing actual result count with expected count. Possible
         * values are: `eq`, `gt`, `ge`, `lt`, and `le`.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param thresholdType Threshold type for the scheduled log search. Possible values are: `message` and `group`.
         * Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
         * to `message`.
         * 
         * @return builder
         * 
         */
        public Builder thresholdType(Output<String> thresholdType) {
            $.thresholdType = thresholdType;
            return this;
        }

        /**
         * @param thresholdType Threshold type for the scheduled log search. Possible values are: `message` and `group`.
         * Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
         * to `message`.
         * 
         * @return builder
         * 
         */
        public Builder thresholdType(String thresholdType) {
            return thresholdType(Output.of(thresholdType));
        }

        public LogSearchScheduleThresholdArgs build() {
            if ($.count == null) {
                throw new MissingRequiredPropertyException("LogSearchScheduleThresholdArgs", "count");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("LogSearchScheduleThresholdArgs", "operator");
            }
            if ($.thresholdType == null) {
                throw new MissingRequiredPropertyException("LogSearchScheduleThresholdArgs", "thresholdType");
            }
            return $;
        }
    }

}
