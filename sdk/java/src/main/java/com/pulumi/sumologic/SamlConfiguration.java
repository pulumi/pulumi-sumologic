// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sumologic.SamlConfigurationArgs;
import com.pulumi.sumologic.Utilities;
import com.pulumi.sumologic.inputs.SamlConfigurationState;
import com.pulumi.sumologic.outputs.SamlConfigurationOnDemandProvisioningEnabled;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sumologic.SamlConfiguration;
 * import com.pulumi.sumologic.SamlConfigurationArgs;
 * import com.pulumi.sumologic.inputs.SamlConfigurationOnDemandProvisioningEnabledArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleSamlConfiguration = new SamlConfiguration(&#34;exampleSamlConfiguration&#34;, SamlConfigurationArgs.builder()        
 *             .authnRequestUrl(&#34;&#34;)
 *             .configurationName(&#34;SumoLogic&#34;)
 *             .debugMode(false)
 *             .disableRequestedAuthnContext(false)
 *             .emailAttribute(&#34;&#34;)
 *             .isRedirectBinding(false)
 *             .issuer(&#34;http://www.okta.com/abxcseyuiwelflkdjh&#34;)
 *             .logoutEnabled(false)
 *             .logoutUrl(&#34;&#34;)
 *             .onDemandProvisioningEnabled(SamlConfigurationOnDemandProvisioningEnabledArgs.builder()
 *                 .firstNameAttribute(&#34;firstName&#34;)
 *                 .lastNameAttribute(&#34;lastName&#34;)
 *                 .onDemandProvisioningRoles(&#34;Administrator&#34;)
 *                 .build())
 *             .rolesAttribute(&#34;Administrator&#34;)
 *             .signAuthnRequest(false)
 *             .spInitiatedLoginEnabled(false)
 *             .spInitiatedLoginPath(&#34;&#34;)
 *             .x509cert1(&#34;string&#34;)
 *             .x509cert2(&#34;&#34;)
 *             .x509cert3(&#34;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## Attributes reference
 * 
 * The following attributes are exported:
 * 
 * - `id` - Unique identifier for the SAML Configuration.
 * - `certificate` - Authentication Request Signing Certificate for the user.
 * - `assertion_consumer_url` - The URL on Sumo Logic where the IdP will redirect to with its authentication response.
 * - `entity_id` - A unique identifier that is the intended audience of the SAML assertion.
 * 
 * ## Import
 * 
 * SAML Configuration can be imported using the SAML configuration id, e.g.hcl
 * 
 * ```sh
 *  $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979
 * ```
 * 
 *  [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On
 * 
 */
@ResourceType(type="sumologic:index/samlConfiguration:SamlConfiguration")
public class SamlConfiguration extends com.pulumi.resources.CustomResource {
    @Export(name="assertionConsumerUrl", type=String.class, parameters={})
    private Output<String> assertionConsumerUrl;

    public Output<String> assertionConsumerUrl() {
        return this.assertionConsumerUrl;
    }
    /**
     * The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="authnRequestUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> authnRequestUrl;

    /**
     * @return The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> authnRequestUrl() {
        return Codegen.optional(this.authnRequestUrl);
    }
    @Export(name="certificate", type=String.class, parameters={})
    private Output<String> certificate;

    public Output<String> certificate() {
        return this.certificate;
    }
    /**
     * Name of the SSO policy or another name used to describe the policy internally.
     * 
     */
    @Export(name="configurationName", type=String.class, parameters={})
    private Output<String> configurationName;

    /**
     * @return Name of the SSO policy or another name used to describe the policy internally.
     * 
     */
    public Output<String> configurationName() {
        return this.configurationName;
    }
    /**
     * True if additional details are included when a user fails to sign in. Defaults to false.
     * 
     */
    @Export(name="debugMode", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> debugMode;

    /**
     * @return True if additional details are included when a user fails to sign in. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> debugMode() {
        return Codegen.optional(this.debugMode);
    }
    /**
     * True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
     * 
     */
    @Export(name="disableRequestedAuthnContext", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disableRequestedAuthnContext;

    /**
     * @return True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> disableRequestedAuthnContext() {
        return Codegen.optional(this.disableRequestedAuthnContext);
    }
    /**
     * The email address of the new user account. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="emailAttribute", type=String.class, parameters={})
    private Output</* @Nullable */ String> emailAttribute;

    /**
     * @return The email address of the new user account. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> emailAttribute() {
        return Codegen.optional(this.emailAttribute);
    }
    @Export(name="entityId", type=String.class, parameters={})
    private Output<String> entityId;

    public Output<String> entityId() {
        return this.entityId;
    }
    /**
     * True if the SAML binding is of HTTP Redirect type. Defaults to false.
     * 
     */
    @Export(name="isRedirectBinding", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isRedirectBinding;

    /**
     * @return True if the SAML binding is of HTTP Redirect type. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> isRedirectBinding() {
        return Codegen.optional(this.isRedirectBinding);
    }
    /**
     * The unique URL assigned to the organization by the SAML Identity Provider.
     * 
     */
    @Export(name="issuer", type=String.class, parameters={})
    private Output<String> issuer;

    /**
     * @return The unique URL assigned to the organization by the SAML Identity Provider.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }
    /**
     * True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
     * 
     */
    @Export(name="logoutEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> logoutEnabled;

    /**
     * @return True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> logoutEnabled() {
        return Codegen.optional(this.logoutEnabled);
    }
    /**
     * The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="logoutUrl", type=String.class, parameters={})
    private Output</* @Nullable */ String> logoutUrl;

    /**
     * @return The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> logoutUrl() {
        return Codegen.optional(this.logoutUrl);
    }
    /**
     * The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
     * 
     */
    @Export(name="onDemandProvisioningEnabled", type=SamlConfigurationOnDemandProvisioningEnabled.class, parameters={})
    private Output</* @Nullable */ SamlConfigurationOnDemandProvisioningEnabled> onDemandProvisioningEnabled;

    /**
     * @return The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
     * 
     */
    public Output<Optional<SamlConfigurationOnDemandProvisioningEnabled>> onDemandProvisioningEnabled() {
        return Codegen.optional(this.onDemandProvisioningEnabled);
    }
    /**
     * The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="rolesAttribute", type=String.class, parameters={})
    private Output</* @Nullable */ String> rolesAttribute;

    /**
     * @return The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> rolesAttribute() {
        return Codegen.optional(this.rolesAttribute);
    }
    /**
     * True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
     * 
     */
    @Export(name="signAuthnRequest", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> signAuthnRequest;

    /**
     * @return True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> signAuthnRequest() {
        return Codegen.optional(this.signAuthnRequest);
    }
    /**
     * True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
     * 
     */
    @Export(name="spInitiatedLoginEnabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> spInitiatedLoginEnabled;

    /**
     * @return True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> spInitiatedLoginEnabled() {
        return Codegen.optional(this.spInitiatedLoginEnabled);
    }
    /**
     * The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="spInitiatedLoginPath", type=String.class, parameters={})
    private Output</* @Nullable */ String> spInitiatedLoginPath;

    /**
     * @return The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> spInitiatedLoginPath() {
        return Codegen.optional(this.spInitiatedLoginPath);
    }
    /**
     * The certificate is used to verify the signature in SAML assertions.
     * 
     */
    @Export(name="x509cert1", type=String.class, parameters={})
    private Output<String> x509cert1;

    /**
     * @return The certificate is used to verify the signature in SAML assertions.
     * 
     */
    public Output<String> x509cert1() {
        return this.x509cert1;
    }
    /**
     * The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="x509cert2", type=String.class, parameters={})
    private Output</* @Nullable */ String> x509cert2;

    /**
     * @return The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> x509cert2() {
        return Codegen.optional(this.x509cert2);
    }
    /**
     * The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
     * 
     */
    @Export(name="x509cert3", type=String.class, parameters={})
    private Output</* @Nullable */ String> x509cert3;

    /**
     * @return The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
     * 
     */
    public Output<Optional<String>> x509cert3() {
        return Codegen.optional(this.x509cert3);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SamlConfiguration(String name) {
        this(name, SamlConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SamlConfiguration(String name, SamlConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SamlConfiguration(String name, SamlConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/samlConfiguration:SamlConfiguration", name, args == null ? SamlConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SamlConfiguration(String name, Output<String> id, @Nullable SamlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sumologic:index/samlConfiguration:SamlConfiguration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SamlConfiguration get(String name, Output<String> id, @Nullable SamlConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SamlConfiguration(name, id, state, options);
    }
}
