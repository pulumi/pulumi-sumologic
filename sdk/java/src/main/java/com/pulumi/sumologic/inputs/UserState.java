// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Email of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return Email of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * First name of the user.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return First name of the user.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * This has the value true if the user is active and false if they have been deactivated.
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return This has the value true if the user is active and false if they have been deactivated.
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * Last name of the user.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return Last name of the user.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * List of roleIds associated with the user.
     * 
     */
    @Import(name="roleIds")
    private @Nullable Output<List<String>> roleIds;

    /**
     * @return List of roleIds associated with the user.
     * 
     */
    public Optional<Output<List<String>>> roleIds() {
        return Optional.ofNullable(this.roleIds);
    }

    /**
     * UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
     * 
     */
    @Import(name="transferTo")
    private @Nullable Output<String> transferTo;

    /**
     * @return UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
     * 
     */
    public Optional<Output<String>> transferTo() {
        return Optional.ofNullable(this.transferTo);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.email = $.email;
        this.firstName = $.firstName;
        this.isActive = $.isActive;
        this.lastName = $.lastName;
        this.roleIds = $.roleIds;
        this.transferTo = $.transferTo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First name of the user.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param isActive This has the value true if the user is active and false if they have been deactivated.
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive This has the value true if the user is active and false if they have been deactivated.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last name of the user.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(@Nullable Output<List<String>> roleIds) {
            $.roleIds = roleIds;
            return this;
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(List<String> roleIds) {
            return roleIds(Output.of(roleIds));
        }

        /**
         * @param roleIds List of roleIds associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roleIds(String... roleIds) {
            return roleIds(List.of(roleIds));
        }

        /**
         * @param transferTo UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
         * 
         * @return builder
         * 
         */
        public Builder transferTo(@Nullable Output<String> transferTo) {
            $.transferTo = transferTo;
            return this;
        }

        /**
         * @param transferTo UserId of user to transfer this user&#39;s content to on deletion, can be empty. Must be applied prior to deletion to take effect.
         * 
         * @return builder
         * 
         */
        public Builder transferTo(String transferTo) {
            return transferTo(Output.of(transferTo));
        }

        public UserState build() {
            return $;
        }
    }

}
