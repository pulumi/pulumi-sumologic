// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CollectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final CollectorArgs Empty = new CollectorArgs();

    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The description of the collector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the collector.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Map containing [key/value pairs][3].
     * 
     */
    @Import(name="fields")
    private @Nullable Output<Map<String,String>> fields;

    /**
     * @return Map containing [key/value pairs][3].
     * 
     */
    public Optional<Output<Map<String,String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private CollectorArgs() {}

    private CollectorArgs(CollectorArgs $) {
        this.category = $.category;
        this.description = $.description;
        this.fields = $.fields;
        this.name = $.name;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CollectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CollectorArgs $;

        public Builder() {
            $ = new CollectorArgs();
        }

        public Builder(CollectorArgs defaults) {
            $ = new CollectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param description The description of the collector.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the collector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fields Map containing [key/value pairs][3].
         * 
         * @return builder
         * 
         */
        public Builder fields(@Nullable Output<Map<String,String>> fields) {
            $.fields = fields;
            return this;
        }

        /**
         * @param fields Map containing [key/value pairs][3].
         * 
         * @return builder
         * 
         */
        public Builder fields(Map<String,String> fields) {
            return fields(Output.of(fields));
        }

        /**
         * @param name The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param timezone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public CollectorArgs build() {
            return $;
        }
    }

}
