// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.SloIndicatorRequestBasedEvaluationQueryArgs;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloIndicatorRequestBasedEvaluationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SloIndicatorRequestBasedEvaluationArgs Empty = new SloIndicatorRequestBasedEvaluationArgs();

    /**
     * Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
     * , `GreaterThanOrEqual`.
     * 
     */
    @Import(name="op")
    private @Nullable Output<String> op;

    /**
     * @return Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
     * , `GreaterThanOrEqual`.
     * 
     */
    public Optional<Output<String>> op() {
        return Optional.ofNullable(this.op);
    }

    /**
     * The queries to use.
     * 
     */
    @Import(name="queries", required=true)
    private Output<List<SloIndicatorRequestBasedEvaluationQueryArgs>> queries;

    /**
     * @return The queries to use.
     * 
     */
    public Output<List<SloIndicatorRequestBasedEvaluationQueryArgs>> queries() {
        return this.queries;
    }

    /**
     * The type of query to use. Valid values are `Metrics` or `Logs`.
     * 
     */
    @Import(name="queryType", required=true)
    private Output<String> queryType;

    /**
     * @return The type of query to use. Valid values are `Metrics` or `Logs`.
     * 
     */
    public Output<String> queryType() {
        return this.queryType;
    }

    /**
     * Compared against threshold query&#39;s raw data points to determine success criteria.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return Compared against threshold query&#39;s raw data points to determine success criteria.
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private SloIndicatorRequestBasedEvaluationArgs() {}

    private SloIndicatorRequestBasedEvaluationArgs(SloIndicatorRequestBasedEvaluationArgs $) {
        this.op = $.op;
        this.queries = $.queries;
        this.queryType = $.queryType;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloIndicatorRequestBasedEvaluationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloIndicatorRequestBasedEvaluationArgs $;

        public Builder() {
            $ = new SloIndicatorRequestBasedEvaluationArgs();
        }

        public Builder(SloIndicatorRequestBasedEvaluationArgs defaults) {
            $ = new SloIndicatorRequestBasedEvaluationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param op Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
         * , `GreaterThanOrEqual`.
         * 
         * @return builder
         * 
         */
        public Builder op(@Nullable Output<String> op) {
            $.op = op;
            return this;
        }

        /**
         * @param op Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
         * , `GreaterThanOrEqual`.
         * 
         * @return builder
         * 
         */
        public Builder op(String op) {
            return op(Output.of(op));
        }

        /**
         * @param queries The queries to use.
         * 
         * @return builder
         * 
         */
        public Builder queries(Output<List<SloIndicatorRequestBasedEvaluationQueryArgs>> queries) {
            $.queries = queries;
            return this;
        }

        /**
         * @param queries The queries to use.
         * 
         * @return builder
         * 
         */
        public Builder queries(List<SloIndicatorRequestBasedEvaluationQueryArgs> queries) {
            return queries(Output.of(queries));
        }

        /**
         * @param queries The queries to use.
         * 
         * @return builder
         * 
         */
        public Builder queries(SloIndicatorRequestBasedEvaluationQueryArgs... queries) {
            return queries(List.of(queries));
        }

        /**
         * @param queryType The type of query to use. Valid values are `Metrics` or `Logs`.
         * 
         * @return builder
         * 
         */
        public Builder queryType(Output<String> queryType) {
            $.queryType = queryType;
            return this;
        }

        /**
         * @param queryType The type of query to use. Valid values are `Metrics` or `Logs`.
         * 
         * @return builder
         * 
         */
        public Builder queryType(String queryType) {
            return queryType(Output.of(queryType));
        }

        /**
         * @param threshold Compared against threshold query&#39;s raw data points to determine success criteria.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Compared against threshold query&#39;s raw data points to determine success criteria.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public SloIndicatorRequestBasedEvaluationArgs build() {
            $.queries = Objects.requireNonNull($.queries, "expected parameter 'queries' to be non-null");
            $.queryType = Objects.requireNonNull($.queryType, "expected parameter 'queryType' to be non-null");
            return $;
        }
    }

}
