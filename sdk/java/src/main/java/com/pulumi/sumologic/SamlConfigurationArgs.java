// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.SamlConfigurationOnDemandProvisioningEnabledArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SamlConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamlConfigurationArgs Empty = new SamlConfigurationArgs();

    /**
     * The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="authnRequestUrl")
    private @Nullable Output<String> authnRequestUrl;

    /**
     * @return The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> authnRequestUrl() {
        return Optional.ofNullable(this.authnRequestUrl);
    }

    /**
     * Name of the SSO policy or another name used to describe the policy internally.
     * 
     */
    @Import(name="configurationName", required=true)
    private Output<String> configurationName;

    /**
     * @return Name of the SSO policy or another name used to describe the policy internally.
     * 
     */
    public Output<String> configurationName() {
        return this.configurationName;
    }

    /**
     * True if additional details are included when a user fails to sign in. Defaults to false.
     * 
     */
    @Import(name="debugMode")
    private @Nullable Output<Boolean> debugMode;

    /**
     * @return True if additional details are included when a user fails to sign in. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> debugMode() {
        return Optional.ofNullable(this.debugMode);
    }

    /**
     * True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
     * 
     */
    @Import(name="disableRequestedAuthnContext")
    private @Nullable Output<Boolean> disableRequestedAuthnContext;

    /**
     * @return True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> disableRequestedAuthnContext() {
        return Optional.ofNullable(this.disableRequestedAuthnContext);
    }

    /**
     * The email address of the new user account. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="emailAttribute")
    private @Nullable Output<String> emailAttribute;

    /**
     * @return The email address of the new user account. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> emailAttribute() {
        return Optional.ofNullable(this.emailAttribute);
    }

    /**
     * True if the SAML binding is of HTTP Redirect type. Defaults to false.
     * 
     */
    @Import(name="isRedirectBinding")
    private @Nullable Output<Boolean> isRedirectBinding;

    /**
     * @return True if the SAML binding is of HTTP Redirect type. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> isRedirectBinding() {
        return Optional.ofNullable(this.isRedirectBinding);
    }

    /**
     * The unique URL assigned to the organization by the SAML Identity Provider.
     * 
     */
    @Import(name="issuer", required=true)
    private Output<String> issuer;

    /**
     * @return The unique URL assigned to the organization by the SAML Identity Provider.
     * 
     */
    public Output<String> issuer() {
        return this.issuer;
    }

    /**
     * True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
     * 
     */
    @Import(name="logoutEnabled")
    private @Nullable Output<Boolean> logoutEnabled;

    /**
     * @return True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> logoutEnabled() {
        return Optional.ofNullable(this.logoutEnabled);
    }

    /**
     * The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="logoutUrl")
    private @Nullable Output<String> logoutUrl;

    /**
     * @return The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> logoutUrl() {
        return Optional.ofNullable(this.logoutUrl);
    }

    /**
     * The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
     * 
     */
    @Import(name="onDemandProvisioningEnabled")
    private @Nullable Output<SamlConfigurationOnDemandProvisioningEnabledArgs> onDemandProvisioningEnabled;

    /**
     * @return The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
     * 
     */
    public Optional<Output<SamlConfigurationOnDemandProvisioningEnabledArgs>> onDemandProvisioningEnabled() {
        return Optional.ofNullable(this.onDemandProvisioningEnabled);
    }

    /**
     * The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="rolesAttribute")
    private @Nullable Output<String> rolesAttribute;

    /**
     * @return The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> rolesAttribute() {
        return Optional.ofNullable(this.rolesAttribute);
    }

    /**
     * True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
     * 
     */
    @Import(name="signAuthnRequest")
    private @Nullable Output<Boolean> signAuthnRequest;

    /**
     * @return True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> signAuthnRequest() {
        return Optional.ofNullable(this.signAuthnRequest);
    }

    /**
     * True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
     * 
     */
    @Import(name="spInitiatedLoginEnabled")
    private @Nullable Output<Boolean> spInitiatedLoginEnabled;

    /**
     * @return True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> spInitiatedLoginEnabled() {
        return Optional.ofNullable(this.spInitiatedLoginEnabled);
    }

    /**
     * The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="spInitiatedLoginPath")
    private @Nullable Output<String> spInitiatedLoginPath;

    /**
     * @return The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> spInitiatedLoginPath() {
        return Optional.ofNullable(this.spInitiatedLoginPath);
    }

    /**
     * The certificate is used to verify the signature in SAML assertions.
     * 
     */
    @Import(name="x509cert1", required=true)
    private Output<String> x509cert1;

    /**
     * @return The certificate is used to verify the signature in SAML assertions.
     * 
     */
    public Output<String> x509cert1() {
        return this.x509cert1;
    }

    /**
     * The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="x509cert2")
    private @Nullable Output<String> x509cert2;

    /**
     * @return The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> x509cert2() {
        return Optional.ofNullable(this.x509cert2);
    }

    /**
     * The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
     * 
     */
    @Import(name="x509cert3")
    private @Nullable Output<String> x509cert3;

    /**
     * @return The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
     * 
     */
    public Optional<Output<String>> x509cert3() {
        return Optional.ofNullable(this.x509cert3);
    }

    private SamlConfigurationArgs() {}

    private SamlConfigurationArgs(SamlConfigurationArgs $) {
        this.authnRequestUrl = $.authnRequestUrl;
        this.configurationName = $.configurationName;
        this.debugMode = $.debugMode;
        this.disableRequestedAuthnContext = $.disableRequestedAuthnContext;
        this.emailAttribute = $.emailAttribute;
        this.isRedirectBinding = $.isRedirectBinding;
        this.issuer = $.issuer;
        this.logoutEnabled = $.logoutEnabled;
        this.logoutUrl = $.logoutUrl;
        this.onDemandProvisioningEnabled = $.onDemandProvisioningEnabled;
        this.rolesAttribute = $.rolesAttribute;
        this.signAuthnRequest = $.signAuthnRequest;
        this.spInitiatedLoginEnabled = $.spInitiatedLoginEnabled;
        this.spInitiatedLoginPath = $.spInitiatedLoginPath;
        this.x509cert1 = $.x509cert1;
        this.x509cert2 = $.x509cert2;
        this.x509cert3 = $.x509cert3;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamlConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamlConfigurationArgs $;

        public Builder() {
            $ = new SamlConfigurationArgs();
        }

        public Builder(SamlConfigurationArgs defaults) {
            $ = new SamlConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authnRequestUrl The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder authnRequestUrl(@Nullable Output<String> authnRequestUrl) {
            $.authnRequestUrl = authnRequestUrl;
            return this;
        }

        /**
         * @param authnRequestUrl The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder authnRequestUrl(String authnRequestUrl) {
            return authnRequestUrl(Output.of(authnRequestUrl));
        }

        /**
         * @param configurationName Name of the SSO policy or another name used to describe the policy internally.
         * 
         * @return builder
         * 
         */
        public Builder configurationName(Output<String> configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        /**
         * @param configurationName Name of the SSO policy or another name used to describe the policy internally.
         * 
         * @return builder
         * 
         */
        public Builder configurationName(String configurationName) {
            return configurationName(Output.of(configurationName));
        }

        /**
         * @param debugMode True if additional details are included when a user fails to sign in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder debugMode(@Nullable Output<Boolean> debugMode) {
            $.debugMode = debugMode;
            return this;
        }

        /**
         * @param debugMode True if additional details are included when a user fails to sign in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder debugMode(Boolean debugMode) {
            return debugMode(Output.of(debugMode));
        }

        /**
         * @param disableRequestedAuthnContext True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRequestedAuthnContext(@Nullable Output<Boolean> disableRequestedAuthnContext) {
            $.disableRequestedAuthnContext = disableRequestedAuthnContext;
            return this;
        }

        /**
         * @param disableRequestedAuthnContext True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder disableRequestedAuthnContext(Boolean disableRequestedAuthnContext) {
            return disableRequestedAuthnContext(Output.of(disableRequestedAuthnContext));
        }

        /**
         * @param emailAttribute The email address of the new user account. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder emailAttribute(@Nullable Output<String> emailAttribute) {
            $.emailAttribute = emailAttribute;
            return this;
        }

        /**
         * @param emailAttribute The email address of the new user account. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder emailAttribute(String emailAttribute) {
            return emailAttribute(Output.of(emailAttribute));
        }

        /**
         * @param isRedirectBinding True if the SAML binding is of HTTP Redirect type. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isRedirectBinding(@Nullable Output<Boolean> isRedirectBinding) {
            $.isRedirectBinding = isRedirectBinding;
            return this;
        }

        /**
         * @param isRedirectBinding True if the SAML binding is of HTTP Redirect type. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder isRedirectBinding(Boolean isRedirectBinding) {
            return isRedirectBinding(Output.of(isRedirectBinding));
        }

        /**
         * @param issuer The unique URL assigned to the organization by the SAML Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder issuer(Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The unique URL assigned to the organization by the SAML Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param logoutEnabled True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder logoutEnabled(@Nullable Output<Boolean> logoutEnabled) {
            $.logoutEnabled = logoutEnabled;
            return this;
        }

        /**
         * @param logoutEnabled True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder logoutEnabled(Boolean logoutEnabled) {
            return logoutEnabled(Output.of(logoutEnabled));
        }

        /**
         * @param logoutUrl The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(@Nullable Output<String> logoutUrl) {
            $.logoutUrl = logoutUrl;
            return this;
        }

        /**
         * @param logoutUrl The URL that users will be redirected to after signing out of Sumo Logic. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder logoutUrl(String logoutUrl) {
            return logoutUrl(Output.of(logoutUrl));
        }

        /**
         * @param onDemandProvisioningEnabled The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
         * 
         * @return builder
         * 
         */
        public Builder onDemandProvisioningEnabled(@Nullable Output<SamlConfigurationOnDemandProvisioningEnabledArgs> onDemandProvisioningEnabled) {
            $.onDemandProvisioningEnabled = onDemandProvisioningEnabled;
            return this;
        }

        /**
         * @param onDemandProvisioningEnabled The configuration for on-demand provisioning. See on_demand_provisioning_enabled schema for details.
         * 
         * @return builder
         * 
         */
        public Builder onDemandProvisioningEnabled(SamlConfigurationOnDemandProvisioningEnabledArgs onDemandProvisioningEnabled) {
            return onDemandProvisioningEnabled(Output.of(onDemandProvisioningEnabled));
        }

        /**
         * @param rolesAttribute The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rolesAttribute(@Nullable Output<String> rolesAttribute) {
            $.rolesAttribute = rolesAttribute;
            return this;
        }

        /**
         * @param rolesAttribute The role that Sumo Logic will assign to users when they sign in. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rolesAttribute(String rolesAttribute) {
            return rolesAttribute(Output.of(rolesAttribute));
        }

        /**
         * @param signAuthnRequest True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder signAuthnRequest(@Nullable Output<Boolean> signAuthnRequest) {
            $.signAuthnRequest = signAuthnRequest;
            return this;
        }

        /**
         * @param signAuthnRequest True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder signAuthnRequest(Boolean signAuthnRequest) {
            return signAuthnRequest(Output.of(signAuthnRequest));
        }

        /**
         * @param spInitiatedLoginEnabled True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder spInitiatedLoginEnabled(@Nullable Output<Boolean> spInitiatedLoginEnabled) {
            $.spInitiatedLoginEnabled = spInitiatedLoginEnabled;
            return this;
        }

        /**
         * @param spInitiatedLoginEnabled True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder spInitiatedLoginEnabled(Boolean spInitiatedLoginEnabled) {
            return spInitiatedLoginEnabled(Output.of(spInitiatedLoginEnabled));
        }

        /**
         * @param spInitiatedLoginPath The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder spInitiatedLoginPath(@Nullable Output<String> spInitiatedLoginPath) {
            $.spInitiatedLoginPath = spInitiatedLoginPath;
            return this;
        }

        /**
         * @param spInitiatedLoginPath The identifier used to generate a unique URL for user login. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder spInitiatedLoginPath(String spInitiatedLoginPath) {
            return spInitiatedLoginPath(Output.of(spInitiatedLoginPath));
        }

        /**
         * @param x509cert1 The certificate is used to verify the signature in SAML assertions.
         * 
         * @return builder
         * 
         */
        public Builder x509cert1(Output<String> x509cert1) {
            $.x509cert1 = x509cert1;
            return this;
        }

        /**
         * @param x509cert1 The certificate is used to verify the signature in SAML assertions.
         * 
         * @return builder
         * 
         */
        public Builder x509cert1(String x509cert1) {
            return x509cert1(Output.of(x509cert1));
        }

        /**
         * @param x509cert2 The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder x509cert2(@Nullable Output<String> x509cert2) {
            $.x509cert2 = x509cert2;
            return this;
        }

        /**
         * @param x509cert2 The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder x509cert2(String x509cert2) {
            return x509cert2(Output.of(x509cert2));
        }

        /**
         * @param x509cert3 The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder x509cert3(@Nullable Output<String> x509cert3) {
            $.x509cert3 = x509cert3;
            return this;
        }

        /**
         * @param x509cert3 The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to &#34;&#34;.
         * 
         * @return builder
         * 
         */
        public Builder x509cert3(String x509cert3) {
            return x509cert3(Output.of(x509cert3));
        }

        public SamlConfigurationArgs build() {
            $.configurationName = Objects.requireNonNull($.configurationName, "expected parameter 'configurationName' to be non-null");
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.x509cert1 = Objects.requireNonNull($.x509cert1, "expected parameter 'x509cert1' to be non-null");
            return $;
        }
    }

}
