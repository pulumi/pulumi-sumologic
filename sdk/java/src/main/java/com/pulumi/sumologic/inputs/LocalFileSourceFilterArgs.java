// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocalFileSourceFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocalFileSourceFilterArgs Empty = new LocalFileSourceFilterArgs();

    @Import(name="filterType", required=true)
    private Output<String> filterType;

    public Output<String> filterType() {
        return this.filterType;
    }

    @Import(name="mask")
    private @Nullable Output<String> mask;

    public Optional<Output<String>> mask() {
        return Optional.ofNullable(this.mask);
    }

    /**
     * The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="regexp", required=true)
    private Output<String> regexp;

    public Output<String> regexp() {
        return this.regexp;
    }

    private LocalFileSourceFilterArgs() {}

    private LocalFileSourceFilterArgs(LocalFileSourceFilterArgs $) {
        this.filterType = $.filterType;
        this.mask = $.mask;
        this.name = $.name;
        this.regexp = $.regexp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocalFileSourceFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocalFileSourceFilterArgs $;

        public Builder() {
            $ = new LocalFileSourceFilterArgs();
        }

        public Builder(LocalFileSourceFilterArgs defaults) {
            $ = new LocalFileSourceFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder filterType(Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        public Builder mask(@Nullable Output<String> mask) {
            $.mask = mask;
            return this;
        }

        public Builder mask(String mask) {
            return mask(Output.of(mask));
        }

        /**
         * @param name The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder regexp(Output<String> regexp) {
            $.regexp = regexp;
            return this;
        }

        public Builder regexp(String regexp) {
            return regexp(Output.of(regexp));
        }

        public LocalFileSourceFilterArgs build() {
            $.filterType = Objects.requireNonNull($.filterType, "expected parameter 'filterType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.regexp = Objects.requireNonNull($.regexp, "expected parameter 'regexp' to be non-null");
            return $;
        }
    }

}
