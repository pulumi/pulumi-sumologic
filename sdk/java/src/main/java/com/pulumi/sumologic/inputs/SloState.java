// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sumologic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sumologic.inputs.SloComplianceArgs;
import com.pulumi.sumologic.inputs.SloIndicatorArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SloState extends com.pulumi.resources.ResourceArgs {

    public static final SloState Empty = new SloState();

    /**
     * Name of the application.
     * Defaults to true.
     * 
     */
    @Import(name="application")
    private @Nullable Output<String> application;

    /**
     * @return Name of the application.
     * Defaults to true.
     * 
     */
    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    /**
     * The compliance settings for the SLO.
     * 
     */
    @Import(name="compliances")
    private @Nullable Output<List<SloComplianceArgs>> compliances;

    /**
     * @return The compliance settings for the SLO.
     * 
     */
    public Optional<Output<List<SloComplianceArgs>>> compliances() {
        return Optional.ofNullable(this.compliances);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The description of the SLO.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the SLO.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The service level indicator on which SLO is to be defined. more details on the difference
     * b/w them can be found on
     * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
     * - window_based_evaluation - Evaluate SLI using successful/total windows.
     * - request_based_evaluation - Evaluate SLI based on occurrence of successful
     *   events / total events over entire compliance period.
     * 
     */
    @Import(name="indicator")
    private @Nullable Output<SloIndicatorArgs> indicator;

    /**
     * @return The service level indicator on which SLO is to be defined. more details on the difference
     * b/w them can be found on
     * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
     * - window_based_evaluation - Evaluate SLI using successful/total windows.
     * - request_based_evaluation - Evaluate SLI based on occurrence of successful
     *   events / total events over entire compliance period.
     * 
     */
    public Optional<Output<SloIndicatorArgs>> indicator() {
        return Optional.ofNullable(this.indicator);
    }

    @Import(name="isLocked")
    private @Nullable Output<Boolean> isLocked;

    public Optional<Output<Boolean>> isLocked() {
        return Optional.ofNullable(this.isLocked);
    }

    @Import(name="isMutable")
    private @Nullable Output<Boolean> isMutable;

    public Optional<Output<Boolean>> isMutable() {
        return Optional.ofNullable(this.isMutable);
    }

    @Import(name="isSystem")
    private @Nullable Output<Boolean> isSystem;

    public Optional<Output<Boolean>> isSystem() {
        return Optional.ofNullable(this.isSystem);
    }

    @Import(name="modifiedAt")
    private @Nullable Output<String> modifiedAt;

    public Optional<Output<String>> modifiedAt() {
        return Optional.ofNullable(this.modifiedAt);
    }

    @Import(name="modifiedBy")
    private @Nullable Output<String> modifiedBy;

    public Optional<Output<String>> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }

    /**
     * The name of the SLO. The name must be alphanumeric.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the SLO. The name must be alphanumeric.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    @Import(name="postRequestMap")
    private @Nullable Output<Map<String,String>> postRequestMap;

    public Optional<Output<Map<String,String>>> postRequestMap() {
        return Optional.ofNullable(this.postRequestMap);
    }

    /**
     * Name of the service.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Name of the service.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
     * , `Other`. Defaults to `Latency`.
     * 
     */
    @Import(name="signalType")
    private @Nullable Output<String> signalType;

    /**
     * @return The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
     * , `Other`. Defaults to `Latency`.
     * 
     */
    public Optional<Output<String>> signalType() {
        return Optional.ofNullable(this.signalType);
    }

    @Import(name="version")
    private @Nullable Output<Integer> version;

    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private SloState() {}

    private SloState(SloState $) {
        this.application = $.application;
        this.compliances = $.compliances;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.indicator = $.indicator;
        this.isLocked = $.isLocked;
        this.isMutable = $.isMutable;
        this.isSystem = $.isSystem;
        this.modifiedAt = $.modifiedAt;
        this.modifiedBy = $.modifiedBy;
        this.name = $.name;
        this.parentId = $.parentId;
        this.postRequestMap = $.postRequestMap;
        this.service = $.service;
        this.signalType = $.signalType;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SloState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SloState $;

        public Builder() {
            $ = new SloState();
        }

        public Builder(SloState defaults) {
            $ = new SloState(Objects.requireNonNull(defaults));
        }

        /**
         * @param application Name of the application.
         * Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application Name of the application.
         * Defaults to true.
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param compliances The compliance settings for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder compliances(@Nullable Output<List<SloComplianceArgs>> compliances) {
            $.compliances = compliances;
            return this;
        }

        /**
         * @param compliances The compliance settings for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder compliances(List<SloComplianceArgs> compliances) {
            return compliances(Output.of(compliances));
        }

        /**
         * @param compliances The compliance settings for the SLO.
         * 
         * @return builder
         * 
         */
        public Builder compliances(SloComplianceArgs... compliances) {
            return compliances(List.of(compliances));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description The description of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the SLO.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param indicator The service level indicator on which SLO is to be defined. more details on the difference
         * b/w them can be found on
         * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
         * - window_based_evaluation - Evaluate SLI using successful/total windows.
         * - request_based_evaluation - Evaluate SLI based on occurrence of successful
         *   events / total events over entire compliance period.
         * 
         * @return builder
         * 
         */
        public Builder indicator(@Nullable Output<SloIndicatorArgs> indicator) {
            $.indicator = indicator;
            return this;
        }

        /**
         * @param indicator The service level indicator on which SLO is to be defined. more details on the difference
         * b/w them can be found on
         * the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
         * - window_based_evaluation - Evaluate SLI using successful/total windows.
         * - request_based_evaluation - Evaluate SLI based on occurrence of successful
         *   events / total events over entire compliance period.
         * 
         * @return builder
         * 
         */
        public Builder indicator(SloIndicatorArgs indicator) {
            return indicator(Output.of(indicator));
        }

        public Builder isLocked(@Nullable Output<Boolean> isLocked) {
            $.isLocked = isLocked;
            return this;
        }

        public Builder isLocked(Boolean isLocked) {
            return isLocked(Output.of(isLocked));
        }

        public Builder isMutable(@Nullable Output<Boolean> isMutable) {
            $.isMutable = isMutable;
            return this;
        }

        public Builder isMutable(Boolean isMutable) {
            return isMutable(Output.of(isMutable));
        }

        public Builder isSystem(@Nullable Output<Boolean> isSystem) {
            $.isSystem = isSystem;
            return this;
        }

        public Builder isSystem(Boolean isSystem) {
            return isSystem(Output.of(isSystem));
        }

        public Builder modifiedAt(@Nullable Output<String> modifiedAt) {
            $.modifiedAt = modifiedAt;
            return this;
        }

        public Builder modifiedAt(String modifiedAt) {
            return modifiedAt(Output.of(modifiedAt));
        }

        public Builder modifiedBy(@Nullable Output<String> modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        public Builder modifiedBy(String modifiedBy) {
            return modifiedBy(Output.of(modifiedBy));
        }

        /**
         * @param name The name of the SLO. The name must be alphanumeric.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the SLO. The name must be alphanumeric.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        public Builder postRequestMap(@Nullable Output<Map<String,String>> postRequestMap) {
            $.postRequestMap = postRequestMap;
            return this;
        }

        public Builder postRequestMap(Map<String,String> postRequestMap) {
            return postRequestMap(Output.of(postRequestMap));
        }

        /**
         * @param service Name of the service.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Name of the service.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param signalType The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
         * , `Other`. Defaults to `Latency`.
         * 
         * @return builder
         * 
         */
        public Builder signalType(@Nullable Output<String> signalType) {
            $.signalType = signalType;
            return this;
        }

        /**
         * @param signalType The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
         * , `Other`. Defaults to `Latency`.
         * 
         * @return builder
         * 
         */
        public Builder signalType(String signalType) {
            return signalType(Output.of(signalType));
        }

        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public SloState build() {
            return $;
        }
    }

}
