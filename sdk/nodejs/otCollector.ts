// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleOtCollector = new sumologic.OtCollector("example_ot_collector", {
 *     description: "Testing OT collector using terraform",
 *     timeZone: "UTC",
 *     category: "apache",
 *     isRemotelyManaged: true,
 *     ephemeral: false,
 *     name: "test OT Collector",
 * });
 * ```
 *
 * ## Import
 *
 * OT Collectors can be imported using the collector id, e.g.:
 *
 * hcl
 *
 * ```sh
 * $ pulumi import sumologic:index/otCollector:OtCollector test 00005AF3107A4007
 * ```
 *
 * [1]: https://help.sumologic.com/docs/send-data/opentelemetry-collector
 *
 * [2]: https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral
 *
 * [3]: https://help.sumologic.com/Manage/Fields
 *
 * [4]: https://en.wikipedia.org/wiki/Tz_database
 */
export class OtCollector extends pulumi.CustomResource {
    /**
     * Get an existing OtCollector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OtCollectorState, opts?: pulumi.CustomResourceOptions): OtCollector {
        return new OtCollector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/otCollector:OtCollector';

    /**
     * Returns true if the given object is an instance of OtCollector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OtCollector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OtCollector.__pulumiType;
    }

    public /*out*/ readonly alive!: pulumi.Output<boolean>;
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Description of the OT Collector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
     */
    public readonly ephemeral!: pulumi.Output<boolean | undefined>;
    /**
     * Management Status of the OT Collector based on if it is remotely or locally managed.
     */
    public readonly isRemotelyManaged!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * Name of the OT Collector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Map containing [key/value pairs][3].
     *
     * The following attributes are exported:
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;

    /**
     * Create a OtCollector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OtCollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OtCollectorArgs | OtCollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OtCollectorState | undefined;
            resourceInputs["alive"] = state ? state.alive : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ephemeral"] = state ? state.ephemeral : undefined;
            resourceInputs["isRemotelyManaged"] = state ? state.isRemotelyManaged : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as OtCollectorArgs | undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ephemeral"] = args ? args.ephemeral : undefined;
            resourceInputs["isRemotelyManaged"] = args ? args.isRemotelyManaged : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["alive"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OtCollector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OtCollector resources.
 */
export interface OtCollectorState {
    alive?: pulumi.Input<boolean>;
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    /**
     * Description of the OT Collector.
     */
    description?: pulumi.Input<string>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
     */
    ephemeral?: pulumi.Input<boolean>;
    /**
     * Management Status of the OT Collector based on if it is remotely or locally managed.
     */
    isRemotelyManaged?: pulumi.Input<boolean>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    /**
     * Name of the OT Collector.
     */
    name?: pulumi.Input<string>;
    /**
     * Map containing [key/value pairs][3].
     *
     * The following attributes are exported:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OtCollector resource.
 */
export interface OtCollectorArgs {
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    /**
     * Description of the OT Collector.
     */
    description?: pulumi.Input<string>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
     */
    ephemeral?: pulumi.Input<boolean>;
    /**
     * Management Status of the OT Collector based on if it is remotely or locally managed.
     */
    isRemotelyManaged?: pulumi.Input<boolean>;
    /**
     * Name of the OT Collector.
     */
    name?: pulumi.Input<string>;
    /**
     * Map containing [key/value pairs][3].
     *
     * The following attributes are exported:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timeZone?: pulumi.Input<string>;
}
