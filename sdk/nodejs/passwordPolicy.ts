// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,
 * please ensure that only a single instance of such resource is defined.
 * The behavior for defining more than one password policy resources is undefined.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const examplePasswordPolicy = new sumologic.PasswordPolicy("examplePasswordPolicy", {
 *     accountLockoutDurationInMins: 30,
 *     accountLockoutThreshold: 6,
 *     failedLoginResetDurationInMins: 10,
 *     maxLength: 128,
 *     maxPasswordAgeInDays: 365,
 *     minLength: 8,
 *     minUniquePasswords: 10,
 *     mustContainDigits: true,
 *     mustContainLowercase: true,
 *     mustContainSpecialChars: true,
 *     mustContainUppercase: true,
 *     rememberMfa: true,
 *     requireMfa: false,
 * });
 * ```
 */
export class PasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordPolicyState, opts?: pulumi.CustomResourceOptions): PasswordPolicy {
        return new PasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/passwordPolicy:PasswordPolicy';

    /**
     * Returns true if the given object is an instance of PasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordPolicy.__pulumiType;
    }

    /**
     * The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     */
    public readonly accountLockoutDurationInMins!: pulumi.Output<number | undefined>;
    /**
     * Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     */
    public readonly accountLockoutThreshold!: pulumi.Output<number | undefined>;
    /**
     * The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     */
    public readonly failedLoginResetDurationInMins!: pulumi.Output<number | undefined>;
    /**
     * The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     */
    public readonly maxLength!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     */
    public readonly maxPasswordAgeInDays!: pulumi.Output<number | undefined>;
    /**
     * The minimum length of the password. Defaults to 8.
     */
    public readonly minLength!: pulumi.Output<number | undefined>;
    /**
     * The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     */
    public readonly minUniquePasswords!: pulumi.Output<number | undefined>;
    /**
     * If the password must contain digits. Defaults to true.
     */
    public readonly mustContainDigits!: pulumi.Output<boolean | undefined>;
    /**
     * If the password must contain lower case characters. Defaults to true.
     */
    public readonly mustContainLowercase!: pulumi.Output<boolean | undefined>;
    /**
     * If the password must contain special characters. Defaults to true.
     */
    public readonly mustContainSpecialChars!: pulumi.Output<boolean | undefined>;
    /**
     * If the password must contain upper case characters. Defaults to true.
     */
    public readonly mustContainUppercase!: pulumi.Output<boolean | undefined>;
    /**
     * If MFA should be remembered on the browser. Defaults to true.
     */
    public readonly rememberMfa!: pulumi.Output<boolean | undefined>;
    /**
     * If MFA should be required to log in. Defaults to false.
     */
    public readonly requireMfa!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordPolicyArgs | PasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordPolicyState | undefined;
            resourceInputs["accountLockoutDurationInMins"] = state ? state.accountLockoutDurationInMins : undefined;
            resourceInputs["accountLockoutThreshold"] = state ? state.accountLockoutThreshold : undefined;
            resourceInputs["failedLoginResetDurationInMins"] = state ? state.failedLoginResetDurationInMins : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["maxPasswordAgeInDays"] = state ? state.maxPasswordAgeInDays : undefined;
            resourceInputs["minLength"] = state ? state.minLength : undefined;
            resourceInputs["minUniquePasswords"] = state ? state.minUniquePasswords : undefined;
            resourceInputs["mustContainDigits"] = state ? state.mustContainDigits : undefined;
            resourceInputs["mustContainLowercase"] = state ? state.mustContainLowercase : undefined;
            resourceInputs["mustContainSpecialChars"] = state ? state.mustContainSpecialChars : undefined;
            resourceInputs["mustContainUppercase"] = state ? state.mustContainUppercase : undefined;
            resourceInputs["rememberMfa"] = state ? state.rememberMfa : undefined;
            resourceInputs["requireMfa"] = state ? state.requireMfa : undefined;
        } else {
            const args = argsOrState as PasswordPolicyArgs | undefined;
            resourceInputs["accountLockoutDurationInMins"] = args ? args.accountLockoutDurationInMins : undefined;
            resourceInputs["accountLockoutThreshold"] = args ? args.accountLockoutThreshold : undefined;
            resourceInputs["failedLoginResetDurationInMins"] = args ? args.failedLoginResetDurationInMins : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["maxPasswordAgeInDays"] = args ? args.maxPasswordAgeInDays : undefined;
            resourceInputs["minLength"] = args ? args.minLength : undefined;
            resourceInputs["minUniquePasswords"] = args ? args.minUniquePasswords : undefined;
            resourceInputs["mustContainDigits"] = args ? args.mustContainDigits : undefined;
            resourceInputs["mustContainLowercase"] = args ? args.mustContainLowercase : undefined;
            resourceInputs["mustContainSpecialChars"] = args ? args.mustContainSpecialChars : undefined;
            resourceInputs["mustContainUppercase"] = args ? args.mustContainUppercase : undefined;
            resourceInputs["rememberMfa"] = args ? args.rememberMfa : undefined;
            resourceInputs["requireMfa"] = args ? args.requireMfa : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PasswordPolicy resources.
 */
export interface PasswordPolicyState {
    /**
     * The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     */
    accountLockoutDurationInMins?: pulumi.Input<number>;
    /**
     * Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     */
    accountLockoutThreshold?: pulumi.Input<number>;
    /**
     * The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     */
    failedLoginResetDurationInMins?: pulumi.Input<number>;
    /**
     * The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     */
    maxLength?: pulumi.Input<number>;
    /**
     * Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     */
    maxPasswordAgeInDays?: pulumi.Input<number>;
    /**
     * The minimum length of the password. Defaults to 8.
     */
    minLength?: pulumi.Input<number>;
    /**
     * The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     */
    minUniquePasswords?: pulumi.Input<number>;
    /**
     * If the password must contain digits. Defaults to true.
     */
    mustContainDigits?: pulumi.Input<boolean>;
    /**
     * If the password must contain lower case characters. Defaults to true.
     */
    mustContainLowercase?: pulumi.Input<boolean>;
    /**
     * If the password must contain special characters. Defaults to true.
     */
    mustContainSpecialChars?: pulumi.Input<boolean>;
    /**
     * If the password must contain upper case characters. Defaults to true.
     */
    mustContainUppercase?: pulumi.Input<boolean>;
    /**
     * If MFA should be remembered on the browser. Defaults to true.
     */
    rememberMfa?: pulumi.Input<boolean>;
    /**
     * If MFA should be required to log in. Defaults to false.
     */
    requireMfa?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PasswordPolicy resource.
 */
export interface PasswordPolicyArgs {
    /**
     * The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
     */
    accountLockoutDurationInMins?: pulumi.Input<number>;
    /**
     * Number of failed login attempts allowed before account is locked-out. Defaults to 6.
     */
    accountLockoutThreshold?: pulumi.Input<number>;
    /**
     * The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
     */
    failedLoginResetDurationInMins?: pulumi.Input<number>;
    /**
     * The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
     */
    maxLength?: pulumi.Input<number>;
    /**
     * Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
     */
    maxPasswordAgeInDays?: pulumi.Input<number>;
    /**
     * The minimum length of the password. Defaults to 8.
     */
    minLength?: pulumi.Input<number>;
    /**
     * The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
     */
    minUniquePasswords?: pulumi.Input<number>;
    /**
     * If the password must contain digits. Defaults to true.
     */
    mustContainDigits?: pulumi.Input<boolean>;
    /**
     * If the password must contain lower case characters. Defaults to true.
     */
    mustContainLowercase?: pulumi.Input<boolean>;
    /**
     * If the password must contain special characters. Defaults to true.
     */
    mustContainSpecialChars?: pulumi.Input<boolean>;
    /**
     * If the password must contain upper case characters. Defaults to true.
     */
    mustContainUppercase?: pulumi.Input<boolean>;
    /**
     * If MFA should be remembered on the browser. Defaults to true.
     */
    rememberMfa?: pulumi.Input<boolean>;
    /**
     * If MFA should be required to log in. Defaults to false.
     */
    requireMfa?: pulumi.Input<boolean>;
}
