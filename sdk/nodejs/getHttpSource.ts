// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const this = sumologic.getHttpSource({
 *     collectorId: 121212,
 *     name: "source_name",
 * });
 * ```
 *
 * A HTTP Source can be looked up by using a combination of `collectorId` & `name`.
 * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
 * - `name` - The name of the collector.
 * - `description` - The description of the collector.
 * - `category` - The default source category for any source attached to this collector.
 * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
 * - `multiline` - Multiline processing enabled or not.
 * - `url` - The HTTP endpoint to use for sending data to this source.
 */
export function getHttpSource(args?: GetHttpSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetHttpSourceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sumologic:index/getHttpSource:getHttpSource", {
        "collectorId": args.collectorId,
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getHttpSource.
 */
export interface GetHttpSourceArgs {
    collectorId?: number;
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getHttpSource.
 */
export interface GetHttpSourceResult {
    readonly category: string;
    readonly collectorId?: number;
    readonly description: string;
    readonly id: number;
    readonly multiline: boolean;
    readonly name?: string;
    readonly timezone: string;
    readonly url: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const this = sumologic.getHttpSource({
 *     collectorId: 121212,
 *     name: "source_name",
 * });
 * ```
 *
 * A HTTP Source can be looked up by using a combination of `collectorId` & `name`.
 * If either `id` or `name` are not present, the data source block fails with a panic (at this point).
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
 * - `name` - The name of the collector.
 * - `description` - The description of the collector.
 * - `category` - The default source category for any source attached to this collector.
 * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
 * - `multiline` - Multiline processing enabled or not.
 * - `url` - The HTTP endpoint to use for sending data to this source.
 */
export function getHttpSourceOutput(args?: GetHttpSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHttpSourceResult> {
    return pulumi.output(args).apply((a: any) => getHttpSource(a, opts))
}

/**
 * A collection of arguments for invoking getHttpSource.
 */
export interface GetHttpSourceOutputArgs {
    collectorId?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
