// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides the ability to create, read, delete, update connections.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const connection = new sumologic.Connection("connection", {
 *     type: "WebhookConnection",
 *     description: "My description",
 *     url: "https://connection-endpoint.com",
 *     headers: {
 *         "X-Header": "my-header",
 *     },
 *     customHeaders: {
 *         "X-custom": "my-custom-header",
 *     },
 *     defaultPayload: `{
 *   "client" : "Sumo Logic",
 *   "eventType" : "{{Name}}",
 *   "description" : "{{Description}}",
 *   "search_url" : "{{QueryUrl}}",
 *   "num_records" : "{{NumRawResults}}",
 *   "search_results" : "{{AggregateResultsJson}}"
 * }
 * `,
 *     webhookType: "Webhook",
 * });
 * ```
 *
 * ## Import
 *
 * Connections can be imported using the connection id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/connection:Connection test 1234567890
 * ```
 */
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
     */
    public readonly connectionSubtype!: pulumi.Output<string | undefined>;
    /**
     * Map of custom webhook headers
     */
    public readonly customHeaders!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Default payload of the webhook.
     */
    public readonly defaultPayload!: pulumi.Output<string>;
    /**
     * Description of the connection.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Map of access authorization headers.
     */
    public readonly headers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of connection. Name should be a valid alphanumeric value.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Type of connection. Only `WebhookConnection` is implemented right now.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * URL for the webhook connection.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
     */
    public readonly webhookType!: pulumi.Output<string | undefined>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["connectionSubtype"] = state ? state.connectionSubtype : undefined;
            resourceInputs["customHeaders"] = state ? state.customHeaders : undefined;
            resourceInputs["defaultPayload"] = state ? state.defaultPayload : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["webhookType"] = state ? state.webhookType : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.defaultPayload === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultPayload'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["connectionSubtype"] = args ? args.connectionSubtype : undefined;
            resourceInputs["customHeaders"] = args ? args.customHeaders : undefined;
            resourceInputs["defaultPayload"] = args ? args.defaultPayload : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["webhookType"] = args ? args.webhookType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
     */
    connectionSubtype?: pulumi.Input<string>;
    /**
     * Map of custom webhook headers
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Default payload of the webhook.
     */
    defaultPayload?: pulumi.Input<string>;
    /**
     * Description of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Map of access authorization headers.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of connection. Name should be a valid alphanumeric value.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of connection. Only `WebhookConnection` is implemented right now.
     */
    type?: pulumi.Input<string>;
    /**
     * URL for the webhook connection.
     */
    url?: pulumi.Input<string>;
    /**
     * Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
     */
    webhookType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
     */
    connectionSubtype?: pulumi.Input<string>;
    /**
     * Map of custom webhook headers
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Default payload of the webhook.
     */
    defaultPayload: pulumi.Input<string>;
    /**
     * Description of the connection.
     */
    description?: pulumi.Input<string>;
    /**
     * Map of access authorization headers.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of connection. Name should be a valid alphanumeric value.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of connection. Only `WebhookConnection` is implemented right now.
     */
    type: pulumi.Input<string>;
    /**
     * URL for the webhook connection.
     */
    url: pulumi.Input<string>;
    /**
     * Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
     */
    webhookType?: pulumi.Input<string>;
}
