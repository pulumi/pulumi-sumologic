// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides the ability to create, read, delete, and update folders for [Monitors](https://help.sumologic.com/?cid=10020).
 * > If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor folder resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders).
 *
 * ## Example Monitor Folder
 *
 * NOTE: Monitor folders are considered a different resource from Library content folders.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const tfMonitorFolder1 = new sumologic.MonitorFolder("tfMonitorFolder1", {description: "A folder for monitors managed by terraform."});
 * ```
 *
 * ## Import
 *
 * Monitor folders can be imported using the monitor folder identifier, such ashcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/monitorFolder:MonitorFolder tf_monitor_folder_1 0000000000ABC123
 * ```
 *
 *  [1]https://help.sumologic.com/?cid=10020 [2]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders
 */
export class MonitorFolder extends pulumi.CustomResource {
    /**
     * Get an existing MonitorFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorFolderState, opts?: pulumi.CustomResourceOptions): MonitorFolder {
        return new MonitorFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/monitorFolder:MonitorFolder';

    /**
     * Returns true if the given object is an instance of MonitorFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorFolder.__pulumiType;
    }

    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    /**
     * The description of the monitor folder.
     */
    public readonly description!: pulumi.Output<string>;
    public readonly isLocked!: pulumi.Output<boolean | undefined>;
    public readonly isMutable!: pulumi.Output<boolean>;
    public readonly isSystem!: pulumi.Output<boolean>;
    public readonly modifiedAt!: pulumi.Output<string>;
    public readonly modifiedBy!: pulumi.Output<string>;
    /**
     * The name of the monitor folder. The name must be alphanumeric.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * `objPermission` construct represents a Permission Statement associated with this Folder. A set of `objPermission` constructs can be specified under a single Folder. An `objPermission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Folder and the FGP feature is enabled at the account.
     */
    public readonly objPermissions!: pulumi.Output<outputs.MonitorFolderObjPermission[] | undefined>;
    /**
     * The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
     */
    public readonly parentId!: pulumi.Output<string>;
    public readonly postRequestMap!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The type of object model. Valid value:
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a MonitorFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorFolderArgs | MonitorFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorFolderState | undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isLocked"] = state ? state.isLocked : undefined;
            resourceInputs["isMutable"] = state ? state.isMutable : undefined;
            resourceInputs["isSystem"] = state ? state.isSystem : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objPermissions"] = state ? state.objPermissions : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["postRequestMap"] = state ? state.postRequestMap : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MonitorFolderArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isLocked"] = args ? args.isLocked : undefined;
            resourceInputs["isMutable"] = args ? args.isMutable : undefined;
            resourceInputs["isSystem"] = args ? args.isSystem : undefined;
            resourceInputs["modifiedAt"] = args ? args.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = args ? args.modifiedBy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objPermissions"] = args ? args.objPermissions : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["postRequestMap"] = args ? args.postRequestMap : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorFolder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorFolder resources.
 */
export interface MonitorFolderState {
    contentType?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    /**
     * The description of the monitor folder.
     */
    description?: pulumi.Input<string>;
    isLocked?: pulumi.Input<boolean>;
    isMutable?: pulumi.Input<boolean>;
    isSystem?: pulumi.Input<boolean>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    /**
     * The name of the monitor folder. The name must be alphanumeric.
     */
    name?: pulumi.Input<string>;
    /**
     * `objPermission` construct represents a Permission Statement associated with this Folder. A set of `objPermission` constructs can be specified under a single Folder. An `objPermission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Folder and the FGP feature is enabled at the account.
     */
    objPermissions?: pulumi.Input<pulumi.Input<inputs.MonitorFolderObjPermission>[]>;
    /**
     * The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
     */
    parentId?: pulumi.Input<string>;
    postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of object model. Valid value:
     */
    type?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MonitorFolder resource.
 */
export interface MonitorFolderArgs {
    contentType?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    /**
     * The description of the monitor folder.
     */
    description: pulumi.Input<string>;
    isLocked?: pulumi.Input<boolean>;
    isMutable?: pulumi.Input<boolean>;
    isSystem?: pulumi.Input<boolean>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    /**
     * The name of the monitor folder. The name must be alphanumeric.
     */
    name?: pulumi.Input<string>;
    /**
     * `objPermission` construct represents a Permission Statement associated with this Folder. A set of `objPermission` constructs can be specified under a single Folder. An `objPermission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Folder and the FGP feature is enabled at the account.
     */
    objPermissions?: pulumi.Input<pulumi.Input<inputs.MonitorFolderObjPermission>[]>;
    /**
     * The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
     */
    parentId?: pulumi.Input<string>;
    postRequestMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of object model. Valid value:
     */
    type?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}
