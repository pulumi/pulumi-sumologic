// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const installedCollector = new sumologic.InstalledCollector("installed_collector", {
 *     category: "macos/test",
 *     ephemeral: true,
 *     fields: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Collectors can be imported using the collector id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/installedCollector:InstalledCollector test 1234567890
 * ```
 *
 *  Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/installedCollector:InstalledCollector test my_test_collector
 * ```
 *
 *  [1]https://help.sumologic.com/03Send-Data/Installed-Collectors/01About-Installed-Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields [4]https://www.terraform.io/docs/configuration/resources.html#prevent_destroy [5]:https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral
 */
export class InstalledCollector extends pulumi.CustomResource {
    /**
     * Get an existing InstalledCollector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstalledCollectorState, opts?: pulumi.CustomResourceOptions): InstalledCollector {
        return new InstalledCollector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/installedCollector:InstalledCollector';

    /**
     * Returns true if the given object is an instance of InstalledCollector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstalledCollector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstalledCollector.__pulumiType;
    }

    public /*out*/ readonly alive!: pulumi.Output<boolean>;
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    public /*out*/ readonly collectorVersion!: pulumi.Output<string>;
    public readonly cutoffTimestamp!: pulumi.Output<number | undefined>;
    /**
     * The description of the collector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
     */
    public readonly ephemeral!: pulumi.Output<boolean>;
    /**
     * Map containing [key/value pairs][3].
     */
    public readonly fields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly hostName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastSeenAlive!: pulumi.Output<number>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly sourceSyncMode!: pulumi.Output<string | undefined>;
    public readonly targetCpu!: pulumi.Output<number | undefined>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    public readonly timezone!: pulumi.Output<string | undefined>;

    /**
     * Create a InstalledCollector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstalledCollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstalledCollectorArgs | InstalledCollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstalledCollectorState | undefined;
            resourceInputs["alive"] = state ? state.alive : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["collectorVersion"] = state ? state.collectorVersion : undefined;
            resourceInputs["cutoffTimestamp"] = state ? state.cutoffTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ephemeral"] = state ? state.ephemeral : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["lastSeenAlive"] = state ? state.lastSeenAlive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceSyncMode"] = state ? state.sourceSyncMode : undefined;
            resourceInputs["targetCpu"] = state ? state.targetCpu : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as InstalledCollectorArgs | undefined;
            if ((!args || args.ephemeral === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ephemeral'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["cutoffTimestamp"] = args ? args.cutoffTimestamp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ephemeral"] = args ? args.ephemeral : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceSyncMode"] = args ? args.sourceSyncMode : undefined;
            resourceInputs["targetCpu"] = args ? args.targetCpu : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["alive"] = undefined /*out*/;
            resourceInputs["collectorVersion"] = undefined /*out*/;
            resourceInputs["lastSeenAlive"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstalledCollector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstalledCollector resources.
 */
export interface InstalledCollectorState {
    alive?: pulumi.Input<boolean>;
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    collectorVersion?: pulumi.Input<string>;
    cutoffTimestamp?: pulumi.Input<number>;
    /**
     * The description of the collector.
     */
    description?: pulumi.Input<string>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
     */
    ephemeral?: pulumi.Input<boolean>;
    /**
     * Map containing [key/value pairs][3].
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostName?: pulumi.Input<string>;
    lastSeenAlive?: pulumi.Input<number>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    name?: pulumi.Input<string>;
    sourceSyncMode?: pulumi.Input<string>;
    targetCpu?: pulumi.Input<number>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstalledCollector resource.
 */
export interface InstalledCollectorArgs {
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    cutoffTimestamp?: pulumi.Input<number>;
    /**
     * The description of the collector.
     */
    description?: pulumi.Input<string>;
    /**
     * When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
     */
    ephemeral: pulumi.Input<boolean>;
    /**
     * Map containing [key/value pairs][3].
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hostName?: pulumi.Input<string>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    name?: pulumi.Input<string>;
    sourceSyncMode?: pulumi.Input<string>;
    targetCpu?: pulumi.Input<number>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timezone?: pulumi.Input<string>;
}
