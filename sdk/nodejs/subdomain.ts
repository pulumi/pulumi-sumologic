// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Subdomain](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleSubdomain = new sumologic.Subdomain("exampleSubdomain", {subdomain: "my-company"});
 * ```
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - Unique identifier for the subdomain.
 *
 * [1]: https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization#change-account-subdomain
 */
export class Subdomain extends pulumi.CustomResource {
    /**
     * Get an existing Subdomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubdomainState, opts?: pulumi.CustomResourceOptions): Subdomain {
        return new Subdomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/subdomain:Subdomain';

    /**
     * Returns true if the given object is an instance of Subdomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subdomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subdomain.__pulumiType;
    }

    /**
     * The subdomain.
     */
    public readonly subdomain!: pulumi.Output<string>;

    /**
     * Create a Subdomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubdomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubdomainArgs | SubdomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubdomainState | undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
        } else {
            const args = argsOrState as SubdomainArgs | undefined;
            if ((!args || args.subdomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subdomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subdomain resources.
 */
export interface SubdomainState {
    /**
     * The subdomain.
     */
    subdomain?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subdomain resource.
 */
export interface SubdomainArgs {
    /**
     * The subdomain.
     */
    subdomain: pulumi.Input<string>;
}
