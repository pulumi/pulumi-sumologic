// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provider to manage Sumologic Role v2
 */
export class RoleV2 extends pulumi.CustomResource {
    /**
     * Get an existing RoleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleV2State, opts?: pulumi.CustomResourceOptions): RoleV2 {
        return new RoleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/roleV2:RoleV2';

    /**
     * Returns true if the given object is an instance of RoleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleV2.__pulumiType;
    }

    /**
     * A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/). Applicable with only `All` selectionType
     */
    public readonly auditDataFilter!: pulumi.Output<string | undefined>;
    /**
     * List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
     */
    public readonly capabilities!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the role.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A search filter which would be applied on partitions which belong to Log Analytics product area. Applicable with only `All` selectionType
     */
    public readonly logAnalyticsFilter!: pulumi.Output<string | undefined>;
    /**
     * Name of the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A search filter which would be applied on partitions which belong to Security Data product area. Applicable with only `All` selectionType.
     */
    public readonly securityDataFilter!: pulumi.Output<string | undefined>;
    /**
     * List of views with specific view level filters in accordance to the selectionType chosen.
     */
    public readonly selectedViews!: pulumi.Output<outputs.RoleV2SelectedView[] | undefined>;
    /**
     * Describes the Permission Construct for the list of views in "selectedViews" parameter.
     */
    public readonly selectionType!: pulumi.Output<string | undefined>;

    /**
     * Create a RoleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleV2Args | RoleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleV2State | undefined;
            resourceInputs["auditDataFilter"] = state ? state.auditDataFilter : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logAnalyticsFilter"] = state ? state.logAnalyticsFilter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityDataFilter"] = state ? state.securityDataFilter : undefined;
            resourceInputs["selectedViews"] = state ? state.selectedViews : undefined;
            resourceInputs["selectionType"] = state ? state.selectionType : undefined;
        } else {
            const args = argsOrState as RoleV2Args | undefined;
            resourceInputs["auditDataFilter"] = args ? args.auditDataFilter : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logAnalyticsFilter"] = args ? args.logAnalyticsFilter : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityDataFilter"] = args ? args.securityDataFilter : undefined;
            resourceInputs["selectedViews"] = args ? args.selectedViews : undefined;
            resourceInputs["selectionType"] = args ? args.selectionType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleV2 resources.
 */
export interface RoleV2State {
    /**
     * A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/). Applicable with only `All` selectionType
     */
    auditDataFilter?: pulumi.Input<string>;
    /**
     * List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the role.
     */
    description?: pulumi.Input<string>;
    /**
     * A search filter which would be applied on partitions which belong to Log Analytics product area. Applicable with only `All` selectionType
     */
    logAnalyticsFilter?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * A search filter which would be applied on partitions which belong to Security Data product area. Applicable with only `All` selectionType.
     */
    securityDataFilter?: pulumi.Input<string>;
    /**
     * List of views with specific view level filters in accordance to the selectionType chosen.
     */
    selectedViews?: pulumi.Input<pulumi.Input<inputs.RoleV2SelectedView>[]>;
    /**
     * Describes the Permission Construct for the list of views in "selectedViews" parameter.
     */
    selectionType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleV2 resource.
 */
export interface RoleV2Args {
    /**
     * A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/). Applicable with only `All` selectionType
     */
    auditDataFilter?: pulumi.Input<string>;
    /**
     * List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the role.
     */
    description?: pulumi.Input<string>;
    /**
     * A search filter which would be applied on partitions which belong to Log Analytics product area. Applicable with only `All` selectionType
     */
    logAnalyticsFilter?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * A search filter which would be applied on partitions which belong to Security Data product area. Applicable with only `All` selectionType.
     */
    securityDataFilter?: pulumi.Input<string>;
    /**
     * List of views with specific view level filters in accordance to the selectionType chosen.
     */
    selectedViews?: pulumi.Input<pulumi.Input<inputs.RoleV2SelectedView>[]>;
    /**
     * Describes the Permission Construct for the list of views in "selectedViews" parameter.
     */
    selectionType?: pulumi.Input<string>;
}
