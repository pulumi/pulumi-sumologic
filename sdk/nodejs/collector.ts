// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic (Hosted) Collector][1].
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const collector = new sumologic.Collector("collector", {
 *     description: "Just testing this",
 *     fields: {
 *         environment: "production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Collectors can be imported using the collector id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/collector:Collector test 1234567890
 * ```
 *
 *  Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/collector:Collector test my_test_collector
 * ```
 *
 *  [1]https://help.sumologic.com/Send_Data/Hosted_Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields
 */
export class Collector extends pulumi.CustomResource {
    /**
     * Get an existing Collector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectorState, opts?: pulumi.CustomResourceOptions): Collector {
        return new Collector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/collector:Collector';

    /**
     * Returns true if the given object is an instance of Collector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Collector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Collector.__pulumiType;
    }

    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    /**
     * The description of the collector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Map containing [key/value pairs][3].
     */
    public readonly fields!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    public readonly timezone!: pulumi.Output<string | undefined>;

    /**
     * Create a Collector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectorArgs | CollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectorState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as CollectorArgs | undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Collector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Collector resources.
 */
export interface CollectorState {
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the collector.
     */
    description?: pulumi.Input<string>;
    /**
     * Map containing [key/value pairs][3].
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    name?: pulumi.Input<string>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Collector resource.
 */
export interface CollectorArgs {
    /**
     * The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the collector.
     */
    description?: pulumi.Input<string>;
    /**
     * Map containing [key/value pairs][3].
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
     */
    name?: pulumi.Input<string>;
    /**
     * The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
     */
    timezone?: pulumi.Input<string>;
}
