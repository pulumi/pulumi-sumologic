// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsInventorySourceArgs, AwsInventorySourceState } from "./awsInventorySource";
export type AwsInventorySource = import("./awsInventorySource").AwsInventorySource;
export const AwsInventorySource: typeof import("./awsInventorySource").AwsInventorySource = null as any;
utilities.lazyLoad(exports, ["AwsInventorySource"], () => require("./awsInventorySource"));

export { AwsXraySourceArgs, AwsXraySourceState } from "./awsXraySource";
export type AwsXraySource = import("./awsXraySource").AwsXraySource;
export const AwsXraySource: typeof import("./awsXraySource").AwsXraySource = null as any;
utilities.lazyLoad(exports, ["AwsXraySource"], () => require("./awsXraySource"));

export { CloudSyslogSourceArgs, CloudSyslogSourceState } from "./cloudSyslogSource";
export type CloudSyslogSource = import("./cloudSyslogSource").CloudSyslogSource;
export const CloudSyslogSource: typeof import("./cloudSyslogSource").CloudSyslogSource = null as any;
utilities.lazyLoad(exports, ["CloudSyslogSource"], () => require("./cloudSyslogSource"));

export { CloudToCloudSourceArgs, CloudToCloudSourceState } from "./cloudToCloudSource";
export type CloudToCloudSource = import("./cloudToCloudSource").CloudToCloudSource;
export const CloudToCloudSource: typeof import("./cloudToCloudSource").CloudToCloudSource = null as any;
utilities.lazyLoad(exports, ["CloudToCloudSource"], () => require("./cloudToCloudSource"));

export { CloudfrontSourceArgs, CloudfrontSourceState } from "./cloudfrontSource";
export type CloudfrontSource = import("./cloudfrontSource").CloudfrontSource;
export const CloudfrontSource: typeof import("./cloudfrontSource").CloudfrontSource = null as any;
utilities.lazyLoad(exports, ["CloudfrontSource"], () => require("./cloudfrontSource"));

export { CloudtrailSourceArgs, CloudtrailSourceState } from "./cloudtrailSource";
export type CloudtrailSource = import("./cloudtrailSource").CloudtrailSource;
export const CloudtrailSource: typeof import("./cloudtrailSource").CloudtrailSource = null as any;
utilities.lazyLoad(exports, ["CloudtrailSource"], () => require("./cloudtrailSource"));

export { CloudwatchSourceArgs, CloudwatchSourceState } from "./cloudwatchSource";
export type CloudwatchSource = import("./cloudwatchSource").CloudwatchSource;
export const CloudwatchSource: typeof import("./cloudwatchSource").CloudwatchSource = null as any;
utilities.lazyLoad(exports, ["CloudwatchSource"], () => require("./cloudwatchSource"));

export { CollectorArgs, CollectorState } from "./collector";
export type Collector = import("./collector").Collector;
export const Collector: typeof import("./collector").Collector = null as any;
utilities.lazyLoad(exports, ["Collector"], () => require("./collector"));

export { CollectorIngestBudgetAssignmentArgs, CollectorIngestBudgetAssignmentState } from "./collectorIngestBudgetAssignment";
export type CollectorIngestBudgetAssignment = import("./collectorIngestBudgetAssignment").CollectorIngestBudgetAssignment;
export const CollectorIngestBudgetAssignment: typeof import("./collectorIngestBudgetAssignment").CollectorIngestBudgetAssignment = null as any;
utilities.lazyLoad(exports, ["CollectorIngestBudgetAssignment"], () => require("./collectorIngestBudgetAssignment"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ContentArgs, ContentState } from "./content";
export type Content = import("./content").Content;
export const Content: typeof import("./content").Content = null as any;
utilities.lazyLoad(exports, ["Content"], () => require("./content"));

export { ContentPermissionArgs, ContentPermissionState } from "./contentPermission";
export type ContentPermission = import("./contentPermission").ContentPermission;
export const ContentPermission: typeof import("./contentPermission").ContentPermission = null as any;
utilities.lazyLoad(exports, ["ContentPermission"], () => require("./contentPermission"));

export { CseAggregationRuleArgs, CseAggregationRuleState } from "./cseAggregationRule";
export type CseAggregationRule = import("./cseAggregationRule").CseAggregationRule;
export const CseAggregationRule: typeof import("./cseAggregationRule").CseAggregationRule = null as any;
utilities.lazyLoad(exports, ["CseAggregationRule"], () => require("./cseAggregationRule"));

export { CseChainRuleArgs, CseChainRuleState } from "./cseChainRule";
export type CseChainRule = import("./cseChainRule").CseChainRule;
export const CseChainRule: typeof import("./cseChainRule").CseChainRule = null as any;
utilities.lazyLoad(exports, ["CseChainRule"], () => require("./cseChainRule"));

export { CseCustomEntityTypeArgs, CseCustomEntityTypeState } from "./cseCustomEntityType";
export type CseCustomEntityType = import("./cseCustomEntityType").CseCustomEntityType;
export const CseCustomEntityType: typeof import("./cseCustomEntityType").CseCustomEntityType = null as any;
utilities.lazyLoad(exports, ["CseCustomEntityType"], () => require("./cseCustomEntityType"));

export { CseCustomInsightArgs, CseCustomInsightState } from "./cseCustomInsight";
export type CseCustomInsight = import("./cseCustomInsight").CseCustomInsight;
export const CseCustomInsight: typeof import("./cseCustomInsight").CseCustomInsight = null as any;
utilities.lazyLoad(exports, ["CseCustomInsight"], () => require("./cseCustomInsight"));

export { CseCustomMatchListColumnArgs, CseCustomMatchListColumnState } from "./cseCustomMatchListColumn";
export type CseCustomMatchListColumn = import("./cseCustomMatchListColumn").CseCustomMatchListColumn;
export const CseCustomMatchListColumn: typeof import("./cseCustomMatchListColumn").CseCustomMatchListColumn = null as any;
utilities.lazyLoad(exports, ["CseCustomMatchListColumn"], () => require("./cseCustomMatchListColumn"));

export { CseEntityCriticalityConfigArgs, CseEntityCriticalityConfigState } from "./cseEntityCriticalityConfig";
export type CseEntityCriticalityConfig = import("./cseEntityCriticalityConfig").CseEntityCriticalityConfig;
export const CseEntityCriticalityConfig: typeof import("./cseEntityCriticalityConfig").CseEntityCriticalityConfig = null as any;
utilities.lazyLoad(exports, ["CseEntityCriticalityConfig"], () => require("./cseEntityCriticalityConfig"));

export { CseEntityEntityGroupConfigurationArgs, CseEntityEntityGroupConfigurationState } from "./cseEntityEntityGroupConfiguration";
export type CseEntityEntityGroupConfiguration = import("./cseEntityEntityGroupConfiguration").CseEntityEntityGroupConfiguration;
export const CseEntityEntityGroupConfiguration: typeof import("./cseEntityEntityGroupConfiguration").CseEntityEntityGroupConfiguration = null as any;
utilities.lazyLoad(exports, ["CseEntityEntityGroupConfiguration"], () => require("./cseEntityEntityGroupConfiguration"));

export { CseEntityNormalizationConfigurationArgs, CseEntityNormalizationConfigurationState } from "./cseEntityNormalizationConfiguration";
export type CseEntityNormalizationConfiguration = import("./cseEntityNormalizationConfiguration").CseEntityNormalizationConfiguration;
export const CseEntityNormalizationConfiguration: typeof import("./cseEntityNormalizationConfiguration").CseEntityNormalizationConfiguration = null as any;
utilities.lazyLoad(exports, ["CseEntityNormalizationConfiguration"], () => require("./cseEntityNormalizationConfiguration"));

export { CseInsightsConfigurationArgs, CseInsightsConfigurationState } from "./cseInsightsConfiguration";
export type CseInsightsConfiguration = import("./cseInsightsConfiguration").CseInsightsConfiguration;
export const CseInsightsConfiguration: typeof import("./cseInsightsConfiguration").CseInsightsConfiguration = null as any;
utilities.lazyLoad(exports, ["CseInsightsConfiguration"], () => require("./cseInsightsConfiguration"));

export { CseInsightsResolutionArgs, CseInsightsResolutionState } from "./cseInsightsResolution";
export type CseInsightsResolution = import("./cseInsightsResolution").CseInsightsResolution;
export const CseInsightsResolution: typeof import("./cseInsightsResolution").CseInsightsResolution = null as any;
utilities.lazyLoad(exports, ["CseInsightsResolution"], () => require("./cseInsightsResolution"));

export { CseInsightsStatusArgs, CseInsightsStatusState } from "./cseInsightsStatus";
export type CseInsightsStatus = import("./cseInsightsStatus").CseInsightsStatus;
export const CseInsightsStatus: typeof import("./cseInsightsStatus").CseInsightsStatus = null as any;
utilities.lazyLoad(exports, ["CseInsightsStatus"], () => require("./cseInsightsStatus"));

export { CseInventoryEntityGroupConfigurationArgs, CseInventoryEntityGroupConfigurationState } from "./cseInventoryEntityGroupConfiguration";
export type CseInventoryEntityGroupConfiguration = import("./cseInventoryEntityGroupConfiguration").CseInventoryEntityGroupConfiguration;
export const CseInventoryEntityGroupConfiguration: typeof import("./cseInventoryEntityGroupConfiguration").CseInventoryEntityGroupConfiguration = null as any;
utilities.lazyLoad(exports, ["CseInventoryEntityGroupConfiguration"], () => require("./cseInventoryEntityGroupConfiguration"));

export { CseLogMappingArgs, CseLogMappingState } from "./cseLogMapping";
export type CseLogMapping = import("./cseLogMapping").CseLogMapping;
export const CseLogMapping: typeof import("./cseLogMapping").CseLogMapping = null as any;
utilities.lazyLoad(exports, ["CseLogMapping"], () => require("./cseLogMapping"));

export { CseMatchListArgs, CseMatchListState } from "./cseMatchList";
export type CseMatchList = import("./cseMatchList").CseMatchList;
export const CseMatchList: typeof import("./cseMatchList").CseMatchList = null as any;
utilities.lazyLoad(exports, ["CseMatchList"], () => require("./cseMatchList"));

export { CseMatchRuleArgs, CseMatchRuleState } from "./cseMatchRule";
export type CseMatchRule = import("./cseMatchRule").CseMatchRule;
export const CseMatchRule: typeof import("./cseMatchRule").CseMatchRule = null as any;
utilities.lazyLoad(exports, ["CseMatchRule"], () => require("./cseMatchRule"));

export { CseNetworkBlockArgs, CseNetworkBlockState } from "./cseNetworkBlock";
export type CseNetworkBlock = import("./cseNetworkBlock").CseNetworkBlock;
export const CseNetworkBlock: typeof import("./cseNetworkBlock").CseNetworkBlock = null as any;
utilities.lazyLoad(exports, ["CseNetworkBlock"], () => require("./cseNetworkBlock"));

export { CseRuleTuningExpressionArgs, CseRuleTuningExpressionState } from "./cseRuleTuningExpression";
export type CseRuleTuningExpression = import("./cseRuleTuningExpression").CseRuleTuningExpression;
export const CseRuleTuningExpression: typeof import("./cseRuleTuningExpression").CseRuleTuningExpression = null as any;
utilities.lazyLoad(exports, ["CseRuleTuningExpression"], () => require("./cseRuleTuningExpression"));

export { CseThresholdRuleArgs, CseThresholdRuleState } from "./cseThresholdRule";
export type CseThresholdRule = import("./cseThresholdRule").CseThresholdRule;
export const CseThresholdRule: typeof import("./cseThresholdRule").CseThresholdRule = null as any;
utilities.lazyLoad(exports, ["CseThresholdRule"], () => require("./cseThresholdRule"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { ElbSourceArgs, ElbSourceState } from "./elbSource";
export type ElbSource = import("./elbSource").ElbSource;
export const ElbSource: typeof import("./elbSource").ElbSource = null as any;
utilities.lazyLoad(exports, ["ElbSource"], () => require("./elbSource"));

export { FieldArgs, FieldState } from "./field";
export type Field = import("./field").Field;
export const Field: typeof import("./field").Field = null as any;
utilities.lazyLoad(exports, ["Field"], () => require("./field"));

export { FieldExtractionRuleArgs, FieldExtractionRuleState } from "./fieldExtractionRule";
export type FieldExtractionRule = import("./fieldExtractionRule").FieldExtractionRule;
export const FieldExtractionRule: typeof import("./fieldExtractionRule").FieldExtractionRule = null as any;
utilities.lazyLoad(exports, ["FieldExtractionRule"], () => require("./fieldExtractionRule"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GcpMetricsSourceArgs, GcpMetricsSourceState } from "./gcpMetricsSource";
export type GcpMetricsSource = import("./gcpMetricsSource").GcpMetricsSource;
export const GcpMetricsSource: typeof import("./gcpMetricsSource").GcpMetricsSource = null as any;
utilities.lazyLoad(exports, ["GcpMetricsSource"], () => require("./gcpMetricsSource"));

export { GcpSourceArgs, GcpSourceState } from "./gcpSource";
export type GcpSource = import("./gcpSource").GcpSource;
export const GcpSource: typeof import("./gcpSource").GcpSource = null as any;
utilities.lazyLoad(exports, ["GcpSource"], () => require("./gcpSource"));

export { GetAdminRecommendedFolderArgs, GetAdminRecommendedFolderResult, GetAdminRecommendedFolderOutputArgs } from "./getAdminRecommendedFolder";
export const getAdminRecommendedFolder: typeof import("./getAdminRecommendedFolder").getAdminRecommendedFolder = null as any;
export const getAdminRecommendedFolderOutput: typeof import("./getAdminRecommendedFolder").getAdminRecommendedFolderOutput = null as any;
utilities.lazyLoad(exports, ["getAdminRecommendedFolder","getAdminRecommendedFolderOutput"], () => require("./getAdminRecommendedFolder"));

export { GetCallerIdentityResult } from "./getCallerIdentity";
export const getCallerIdentity: typeof import("./getCallerIdentity").getCallerIdentity = null as any;
utilities.lazyLoad(exports, ["getCallerIdentity"], () => require("./getCallerIdentity"));

export { GetCollectorArgs, GetCollectorResult, GetCollectorOutputArgs } from "./getCollector";
export const getCollector: typeof import("./getCollector").getCollector = null as any;
export const getCollectorOutput: typeof import("./getCollector").getCollectorOutput = null as any;
utilities.lazyLoad(exports, ["getCollector","getCollectorOutput"], () => require("./getCollector"));

export { GetCseLogMappingVendorProductArgs, GetCseLogMappingVendorProductResult, GetCseLogMappingVendorProductOutputArgs } from "./getCseLogMappingVendorProduct";
export const getCseLogMappingVendorProduct: typeof import("./getCseLogMappingVendorProduct").getCseLogMappingVendorProduct = null as any;
export const getCseLogMappingVendorProductOutput: typeof import("./getCseLogMappingVendorProduct").getCseLogMappingVendorProductOutput = null as any;
utilities.lazyLoad(exports, ["getCseLogMappingVendorProduct","getCseLogMappingVendorProductOutput"], () => require("./getCseLogMappingVendorProduct"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetHttpSourceArgs, GetHttpSourceResult, GetHttpSourceOutputArgs } from "./getHttpSource";
export const getHttpSource: typeof import("./getHttpSource").getHttpSource = null as any;
export const getHttpSourceOutput: typeof import("./getHttpSource").getHttpSourceOutput = null as any;
utilities.lazyLoad(exports, ["getHttpSource","getHttpSourceOutput"], () => require("./getHttpSource"));

export { GetMyUserIdArgs, GetMyUserIdResult, GetMyUserIdOutputArgs } from "./getMyUserId";
export const getMyUserId: typeof import("./getMyUserId").getMyUserId = null as any;
export const getMyUserIdOutput: typeof import("./getMyUserId").getMyUserIdOutput = null as any;
utilities.lazyLoad(exports, ["getMyUserId","getMyUserIdOutput"], () => require("./getMyUserId"));

export { GetPersonalFolderArgs, GetPersonalFolderResult, GetPersonalFolderOutputArgs } from "./getPersonalFolder";
export const getPersonalFolder: typeof import("./getPersonalFolder").getPersonalFolder = null as any;
export const getPersonalFolderOutput: typeof import("./getPersonalFolder").getPersonalFolderOutput = null as any;
utilities.lazyLoad(exports, ["getPersonalFolder","getPersonalFolderOutput"], () => require("./getPersonalFolder"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { HierarchyArgs, HierarchyState } from "./hierarchy";
export type Hierarchy = import("./hierarchy").Hierarchy;
export const Hierarchy: typeof import("./hierarchy").Hierarchy = null as any;
utilities.lazyLoad(exports, ["Hierarchy"], () => require("./hierarchy"));

export { HttpSourceArgs, HttpSourceState } from "./httpSource";
export type HttpSource = import("./httpSource").HttpSource;
export const HttpSource: typeof import("./httpSource").HttpSource = null as any;
utilities.lazyLoad(exports, ["HttpSource"], () => require("./httpSource"));

export { IngestBudgetArgs, IngestBudgetState } from "./ingestBudget";
export type IngestBudget = import("./ingestBudget").IngestBudget;
export const IngestBudget: typeof import("./ingestBudget").IngestBudget = null as any;
utilities.lazyLoad(exports, ["IngestBudget"], () => require("./ingestBudget"));

export { IngestBudgetV2Args, IngestBudgetV2State } from "./ingestBudgetV2";
export type IngestBudgetV2 = import("./ingestBudgetV2").IngestBudgetV2;
export const IngestBudgetV2: typeof import("./ingestBudgetV2").IngestBudgetV2 = null as any;
utilities.lazyLoad(exports, ["IngestBudgetV2"], () => require("./ingestBudgetV2"));

export { InstalledCollectorArgs, InstalledCollectorState } from "./installedCollector";
export type InstalledCollector = import("./installedCollector").InstalledCollector;
export const InstalledCollector: typeof import("./installedCollector").InstalledCollector = null as any;
utilities.lazyLoad(exports, ["InstalledCollector"], () => require("./installedCollector"));

export { KineisLogSourceArgs, KineisLogSourceState } from "./kineisLogSource";
export type KineisLogSource = import("./kineisLogSource").KineisLogSource;
export const KineisLogSource: typeof import("./kineisLogSource").KineisLogSource = null as any;
utilities.lazyLoad(exports, ["KineisLogSource"], () => require("./kineisLogSource"));

export { KinesisMetricsSourceArgs, KinesisMetricsSourceState } from "./kinesisMetricsSource";
export type KinesisMetricsSource = import("./kinesisMetricsSource").KinesisMetricsSource;
export const KinesisMetricsSource: typeof import("./kinesisMetricsSource").KinesisMetricsSource = null as any;
utilities.lazyLoad(exports, ["KinesisMetricsSource"], () => require("./kinesisMetricsSource"));

export { LookupTableArgs, LookupTableState } from "./lookupTable";
export type LookupTable = import("./lookupTable").LookupTable;
export const LookupTable: typeof import("./lookupTable").LookupTable = null as any;
utilities.lazyLoad(exports, ["LookupTable"], () => require("./lookupTable"));

export { MetadataSourceArgs, MetadataSourceState } from "./metadataSource";
export type MetadataSource = import("./metadataSource").MetadataSource;
export const MetadataSource: typeof import("./metadataSource").MetadataSource = null as any;
utilities.lazyLoad(exports, ["MetadataSource"], () => require("./metadataSource"));

export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { MonitorFolderArgs, MonitorFolderState } from "./monitorFolder";
export type MonitorFolder = import("./monitorFolder").MonitorFolder;
export const MonitorFolder: typeof import("./monitorFolder").MonitorFolder = null as any;
utilities.lazyLoad(exports, ["MonitorFolder"], () => require("./monitorFolder"));

export { PartitionArgs, PartitionState } from "./partition";
export type Partition = import("./partition").Partition;
export const Partition: typeof import("./partition").Partition = null as any;
utilities.lazyLoad(exports, ["Partition"], () => require("./partition"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PoliciesArgs, PoliciesState } from "./policies";
export type Policies = import("./policies").Policies;
export const Policies: typeof import("./policies").Policies = null as any;
utilities.lazyLoad(exports, ["Policies"], () => require("./policies"));

export { PollingSourceArgs, PollingSourceState } from "./pollingSource";
export type PollingSource = import("./pollingSource").PollingSource;
export const PollingSource: typeof import("./pollingSource").PollingSource = null as any;
utilities.lazyLoad(exports, ["PollingSource"], () => require("./pollingSource"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { S3AuditSourceArgs, S3AuditSourceState } from "./s3auditSource";
export type S3AuditSource = import("./s3auditSource").S3AuditSource;
export const S3AuditSource: typeof import("./s3auditSource").S3AuditSource = null as any;
utilities.lazyLoad(exports, ["S3AuditSource"], () => require("./s3auditSource"));

export { S3SourceArgs, S3SourceState } from "./s3source";
export type S3Source = import("./s3source").S3Source;
export const S3Source: typeof import("./s3source").S3Source = null as any;
utilities.lazyLoad(exports, ["S3Source"], () => require("./s3source"));

export { SamlConfigurationArgs, SamlConfigurationState } from "./samlConfiguration";
export type SamlConfiguration = import("./samlConfiguration").SamlConfiguration;
export const SamlConfiguration: typeof import("./samlConfiguration").SamlConfiguration = null as any;
utilities.lazyLoad(exports, ["SamlConfiguration"], () => require("./samlConfiguration"));

export { ScheduledViewArgs, ScheduledViewState } from "./scheduledView";
export type ScheduledView = import("./scheduledView").ScheduledView;
export const ScheduledView: typeof import("./scheduledView").ScheduledView = null as any;
utilities.lazyLoad(exports, ["ScheduledView"], () => require("./scheduledView"));

export { SloArgs, SloState } from "./slo";
export type Slo = import("./slo").Slo;
export const Slo: typeof import("./slo").Slo = null as any;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));

export { SloFolderArgs, SloFolderState } from "./sloFolder";
export type SloFolder = import("./sloFolder").SloFolder;
export const SloFolder: typeof import("./sloFolder").SloFolder = null as any;
utilities.lazyLoad(exports, ["SloFolder"], () => require("./sloFolder"));

export { SubdomainArgs, SubdomainState } from "./subdomain";
export type Subdomain = import("./subdomain").Subdomain;
export const Subdomain: typeof import("./subdomain").Subdomain = null as any;
utilities.lazyLoad(exports, ["Subdomain"], () => require("./subdomain"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sumologic:index/awsInventorySource:AwsInventorySource":
                return new AwsInventorySource(name, <any>undefined, { urn })
            case "sumologic:index/awsXraySource:AwsXraySource":
                return new AwsXraySource(name, <any>undefined, { urn })
            case "sumologic:index/cloudSyslogSource:CloudSyslogSource":
                return new CloudSyslogSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudToCloudSource:CloudToCloudSource":
                return new CloudToCloudSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudfrontSource:CloudfrontSource":
                return new CloudfrontSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudtrailSource:CloudtrailSource":
                return new CloudtrailSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudwatchSource:CloudwatchSource":
                return new CloudwatchSource(name, <any>undefined, { urn })
            case "sumologic:index/collector:Collector":
                return new Collector(name, <any>undefined, { urn })
            case "sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment":
                return new CollectorIngestBudgetAssignment(name, <any>undefined, { urn })
            case "sumologic:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "sumologic:index/content:Content":
                return new Content(name, <any>undefined, { urn })
            case "sumologic:index/contentPermission:ContentPermission":
                return new ContentPermission(name, <any>undefined, { urn })
            case "sumologic:index/cseAggregationRule:CseAggregationRule":
                return new CseAggregationRule(name, <any>undefined, { urn })
            case "sumologic:index/cseChainRule:CseChainRule":
                return new CseChainRule(name, <any>undefined, { urn })
            case "sumologic:index/cseCustomEntityType:CseCustomEntityType":
                return new CseCustomEntityType(name, <any>undefined, { urn })
            case "sumologic:index/cseCustomInsight:CseCustomInsight":
                return new CseCustomInsight(name, <any>undefined, { urn })
            case "sumologic:index/cseCustomMatchListColumn:CseCustomMatchListColumn":
                return new CseCustomMatchListColumn(name, <any>undefined, { urn })
            case "sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig":
                return new CseEntityCriticalityConfig(name, <any>undefined, { urn })
            case "sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration":
                return new CseEntityEntityGroupConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration":
                return new CseEntityNormalizationConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration":
                return new CseInsightsConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsResolution:CseInsightsResolution":
                return new CseInsightsResolution(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsStatus:CseInsightsStatus":
                return new CseInsightsStatus(name, <any>undefined, { urn })
            case "sumologic:index/cseInventoryEntityGroupConfiguration:CseInventoryEntityGroupConfiguration":
                return new CseInventoryEntityGroupConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/cseLogMapping:CseLogMapping":
                return new CseLogMapping(name, <any>undefined, { urn })
            case "sumologic:index/cseMatchList:CseMatchList":
                return new CseMatchList(name, <any>undefined, { urn })
            case "sumologic:index/cseMatchRule:CseMatchRule":
                return new CseMatchRule(name, <any>undefined, { urn })
            case "sumologic:index/cseNetworkBlock:CseNetworkBlock":
                return new CseNetworkBlock(name, <any>undefined, { urn })
            case "sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression":
                return new CseRuleTuningExpression(name, <any>undefined, { urn })
            case "sumologic:index/cseThresholdRule:CseThresholdRule":
                return new CseThresholdRule(name, <any>undefined, { urn })
            case "sumologic:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "sumologic:index/elbSource:ElbSource":
                return new ElbSource(name, <any>undefined, { urn })
            case "sumologic:index/field:Field":
                return new Field(name, <any>undefined, { urn })
            case "sumologic:index/fieldExtractionRule:FieldExtractionRule":
                return new FieldExtractionRule(name, <any>undefined, { urn })
            case "sumologic:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "sumologic:index/gcpMetricsSource:GcpMetricsSource":
                return new GcpMetricsSource(name, <any>undefined, { urn })
            case "sumologic:index/gcpSource:GcpSource":
                return new GcpSource(name, <any>undefined, { urn })
            case "sumologic:index/hierarchy:Hierarchy":
                return new Hierarchy(name, <any>undefined, { urn })
            case "sumologic:index/httpSource:HttpSource":
                return new HttpSource(name, <any>undefined, { urn })
            case "sumologic:index/ingestBudget:IngestBudget":
                return new IngestBudget(name, <any>undefined, { urn })
            case "sumologic:index/ingestBudgetV2:IngestBudgetV2":
                return new IngestBudgetV2(name, <any>undefined, { urn })
            case "sumologic:index/installedCollector:InstalledCollector":
                return new InstalledCollector(name, <any>undefined, { urn })
            case "sumologic:index/kineisLogSource:KineisLogSource":
                return new KineisLogSource(name, <any>undefined, { urn })
            case "sumologic:index/kinesisMetricsSource:KinesisMetricsSource":
                return new KinesisMetricsSource(name, <any>undefined, { urn })
            case "sumologic:index/lookupTable:LookupTable":
                return new LookupTable(name, <any>undefined, { urn })
            case "sumologic:index/metadataSource:MetadataSource":
                return new MetadataSource(name, <any>undefined, { urn })
            case "sumologic:index/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "sumologic:index/monitorFolder:MonitorFolder":
                return new MonitorFolder(name, <any>undefined, { urn })
            case "sumologic:index/partition:Partition":
                return new Partition(name, <any>undefined, { urn })
            case "sumologic:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "sumologic:index/policies:Policies":
                return new Policies(name, <any>undefined, { urn })
            case "sumologic:index/pollingSource:PollingSource":
                return new PollingSource(name, <any>undefined, { urn })
            case "sumologic:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "sumologic:index/s3AuditSource:S3AuditSource":
                return new S3AuditSource(name, <any>undefined, { urn })
            case "sumologic:index/s3Source:S3Source":
                return new S3Source(name, <any>undefined, { urn })
            case "sumologic:index/samlConfiguration:SamlConfiguration":
                return new SamlConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/scheduledView:ScheduledView":
                return new ScheduledView(name, <any>undefined, { urn })
            case "sumologic:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "sumologic:index/sloFolder:SloFolder":
                return new SloFolder(name, <any>undefined, { urn })
            case "sumologic:index/subdomain:Subdomain":
                return new Subdomain(name, <any>undefined, { urn })
            case "sumologic:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "sumologic:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sumologic", "index/awsInventorySource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/awsXraySource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudSyslogSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudToCloudSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudfrontSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudtrailSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudwatchSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/collector", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/collectorIngestBudgetAssignment", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/connection", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/content", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/contentPermission", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseAggregationRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseChainRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseCustomEntityType", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseCustomInsight", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseCustomMatchListColumn", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseEntityCriticalityConfig", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseEntityEntityGroupConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseEntityNormalizationConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsResolution", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsStatus", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInventoryEntityGroupConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseLogMapping", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseMatchList", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseMatchRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseNetworkBlock", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseRuleTuningExpression", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseThresholdRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/elbSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/field", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/fieldExtractionRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/folder", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/gcpMetricsSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/gcpSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/hierarchy", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/httpSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/ingestBudget", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/ingestBudgetV2", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/installedCollector", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/kineisLogSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/kinesisMetricsSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/lookupTable", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/metadataSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/monitor", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/monitorFolder", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/partition", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/policies", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/pollingSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/role", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/s3AuditSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/s3Source", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/samlConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/scheduledView", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/slo", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/sloFolder", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/subdomain", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/token", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/user", _module)
pulumi.runtime.registerResourcePackage("sumologic", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sumologic") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
