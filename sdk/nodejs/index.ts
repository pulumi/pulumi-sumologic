// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./awsInventorySource";
export * from "./awsXraySource";
export * from "./cloudSyslogSource";
export * from "./cloudToCloudSource";
export * from "./cloudfrontSource";
export * from "./cloudtrailSource";
export * from "./cloudwatchSource";
export * from "./collector";
export * from "./collectorIngestBudgetAssignment";
export * from "./connection";
export * from "./content";
export * from "./contentPermission";
export * from "./cseAggregationRule";
export * from "./cseChainRule";
export * from "./cseCustomEntityType";
export * from "./cseCustomInsight";
export * from "./cseEntityCriticalityConfig";
export * from "./cseInsightsConfiguration";
export * from "./cseInsightsResolution";
export * from "./cseInsightsStatus";
export * from "./cseLogMapping";
export * from "./cseMatchList";
export * from "./cseMatchRule";
export * from "./cseNetworkBlock";
export * from "./cseRuleTuningExpression";
export * from "./cseThresholdRule";
export * from "./dashboard";
export * from "./elbSource";
export * from "./field";
export * from "./fieldExtractionRule";
export * from "./folder";
export * from "./gcpMetricsSource";
export * from "./gcpSource";
export * from "./getAdminRecommendedFolder";
export * from "./getCallerIdentity";
export * from "./getCollector";
export * from "./getCseLogMappingVendorProduct";
export * from "./getHttpSource";
export * from "./getMyUserId";
export * from "./getPersonalFolder";
export * from "./getRole";
export * from "./getUser";
export * from "./hierarchy";
export * from "./httpSource";
export * from "./ingestBudget";
export * from "./ingestBudgetV2";
export * from "./kineisLogSource";
export * from "./kinesisMetricsSource";
export * from "./lookupTable";
export * from "./metadataSource";
export * from "./monitor";
export * from "./monitorFolder";
export * from "./partition";
export * from "./passwordPolicy";
export * from "./policies";
export * from "./pollingSource";
export * from "./provider";
export * from "./role";
export * from "./s3auditSource";
export * from "./s3source";
export * from "./samlConfiguration";
export * from "./scheduledView";
export * from "./subdomain";
export * from "./token";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AwsInventorySource } from "./awsInventorySource";
import { AwsXraySource } from "./awsXraySource";
import { CloudSyslogSource } from "./cloudSyslogSource";
import { CloudToCloudSource } from "./cloudToCloudSource";
import { CloudfrontSource } from "./cloudfrontSource";
import { CloudtrailSource } from "./cloudtrailSource";
import { CloudwatchSource } from "./cloudwatchSource";
import { Collector } from "./collector";
import { CollectorIngestBudgetAssignment } from "./collectorIngestBudgetAssignment";
import { Connection } from "./connection";
import { Content } from "./content";
import { ContentPermission } from "./contentPermission";
import { CseAggregationRule } from "./cseAggregationRule";
import { CseChainRule } from "./cseChainRule";
import { CseCustomEntityType } from "./cseCustomEntityType";
import { CseCustomInsight } from "./cseCustomInsight";
import { CseEntityCriticalityConfig } from "./cseEntityCriticalityConfig";
import { CseInsightsConfiguration } from "./cseInsightsConfiguration";
import { CseInsightsResolution } from "./cseInsightsResolution";
import { CseInsightsStatus } from "./cseInsightsStatus";
import { CseLogMapping } from "./cseLogMapping";
import { CseMatchList } from "./cseMatchList";
import { CseMatchRule } from "./cseMatchRule";
import { CseNetworkBlock } from "./cseNetworkBlock";
import { CseRuleTuningExpression } from "./cseRuleTuningExpression";
import { CseThresholdRule } from "./cseThresholdRule";
import { Dashboard } from "./dashboard";
import { ElbSource } from "./elbSource";
import { Field } from "./field";
import { FieldExtractionRule } from "./fieldExtractionRule";
import { Folder } from "./folder";
import { GcpMetricsSource } from "./gcpMetricsSource";
import { GcpSource } from "./gcpSource";
import { Hierarchy } from "./hierarchy";
import { HttpSource } from "./httpSource";
import { IngestBudget } from "./ingestBudget";
import { IngestBudgetV2 } from "./ingestBudgetV2";
import { KineisLogSource } from "./kineisLogSource";
import { KinesisMetricsSource } from "./kinesisMetricsSource";
import { LookupTable } from "./lookupTable";
import { MetadataSource } from "./metadataSource";
import { Monitor } from "./monitor";
import { MonitorFolder } from "./monitorFolder";
import { Partition } from "./partition";
import { PasswordPolicy } from "./passwordPolicy";
import { Policies } from "./policies";
import { PollingSource } from "./pollingSource";
import { Role } from "./role";
import { S3AuditSource } from "./s3auditSource";
import { S3Source } from "./s3source";
import { SamlConfiguration } from "./samlConfiguration";
import { ScheduledView } from "./scheduledView";
import { Subdomain } from "./subdomain";
import { Token } from "./token";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sumologic:index/awsInventorySource:AwsInventorySource":
                return new AwsInventorySource(name, <any>undefined, { urn })
            case "sumologic:index/awsXraySource:AwsXraySource":
                return new AwsXraySource(name, <any>undefined, { urn })
            case "sumologic:index/cloudSyslogSource:CloudSyslogSource":
                return new CloudSyslogSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudToCloudSource:CloudToCloudSource":
                return new CloudToCloudSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudfrontSource:CloudfrontSource":
                return new CloudfrontSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudtrailSource:CloudtrailSource":
                return new CloudtrailSource(name, <any>undefined, { urn })
            case "sumologic:index/cloudwatchSource:CloudwatchSource":
                return new CloudwatchSource(name, <any>undefined, { urn })
            case "sumologic:index/collector:Collector":
                return new Collector(name, <any>undefined, { urn })
            case "sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment":
                return new CollectorIngestBudgetAssignment(name, <any>undefined, { urn })
            case "sumologic:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "sumologic:index/content:Content":
                return new Content(name, <any>undefined, { urn })
            case "sumologic:index/contentPermission:ContentPermission":
                return new ContentPermission(name, <any>undefined, { urn })
            case "sumologic:index/cseAggregationRule:CseAggregationRule":
                return new CseAggregationRule(name, <any>undefined, { urn })
            case "sumologic:index/cseChainRule:CseChainRule":
                return new CseChainRule(name, <any>undefined, { urn })
            case "sumologic:index/cseCustomEntityType:CseCustomEntityType":
                return new CseCustomEntityType(name, <any>undefined, { urn })
            case "sumologic:index/cseCustomInsight:CseCustomInsight":
                return new CseCustomInsight(name, <any>undefined, { urn })
            case "sumologic:index/cseEntityCriticalityConfig:CseEntityCriticalityConfig":
                return new CseEntityCriticalityConfig(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration":
                return new CseInsightsConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsResolution:CseInsightsResolution":
                return new CseInsightsResolution(name, <any>undefined, { urn })
            case "sumologic:index/cseInsightsStatus:CseInsightsStatus":
                return new CseInsightsStatus(name, <any>undefined, { urn })
            case "sumologic:index/cseLogMapping:CseLogMapping":
                return new CseLogMapping(name, <any>undefined, { urn })
            case "sumologic:index/cseMatchList:CseMatchList":
                return new CseMatchList(name, <any>undefined, { urn })
            case "sumologic:index/cseMatchRule:CseMatchRule":
                return new CseMatchRule(name, <any>undefined, { urn })
            case "sumologic:index/cseNetworkBlock:CseNetworkBlock":
                return new CseNetworkBlock(name, <any>undefined, { urn })
            case "sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression":
                return new CseRuleTuningExpression(name, <any>undefined, { urn })
            case "sumologic:index/cseThresholdRule:CseThresholdRule":
                return new CseThresholdRule(name, <any>undefined, { urn })
            case "sumologic:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "sumologic:index/elbSource:ElbSource":
                return new ElbSource(name, <any>undefined, { urn })
            case "sumologic:index/field:Field":
                return new Field(name, <any>undefined, { urn })
            case "sumologic:index/fieldExtractionRule:FieldExtractionRule":
                return new FieldExtractionRule(name, <any>undefined, { urn })
            case "sumologic:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "sumologic:index/gcpMetricsSource:GcpMetricsSource":
                return new GcpMetricsSource(name, <any>undefined, { urn })
            case "sumologic:index/gcpSource:GcpSource":
                return new GcpSource(name, <any>undefined, { urn })
            case "sumologic:index/hierarchy:Hierarchy":
                return new Hierarchy(name, <any>undefined, { urn })
            case "sumologic:index/httpSource:HttpSource":
                return new HttpSource(name, <any>undefined, { urn })
            case "sumologic:index/ingestBudget:IngestBudget":
                return new IngestBudget(name, <any>undefined, { urn })
            case "sumologic:index/ingestBudgetV2:IngestBudgetV2":
                return new IngestBudgetV2(name, <any>undefined, { urn })
            case "sumologic:index/kineisLogSource:KineisLogSource":
                return new KineisLogSource(name, <any>undefined, { urn })
            case "sumologic:index/kinesisMetricsSource:KinesisMetricsSource":
                return new KinesisMetricsSource(name, <any>undefined, { urn })
            case "sumologic:index/lookupTable:LookupTable":
                return new LookupTable(name, <any>undefined, { urn })
            case "sumologic:index/metadataSource:MetadataSource":
                return new MetadataSource(name, <any>undefined, { urn })
            case "sumologic:index/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "sumologic:index/monitorFolder:MonitorFolder":
                return new MonitorFolder(name, <any>undefined, { urn })
            case "sumologic:index/partition:Partition":
                return new Partition(name, <any>undefined, { urn })
            case "sumologic:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "sumologic:index/policies:Policies":
                return new Policies(name, <any>undefined, { urn })
            case "sumologic:index/pollingSource:PollingSource":
                return new PollingSource(name, <any>undefined, { urn })
            case "sumologic:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "sumologic:index/s3AuditSource:S3AuditSource":
                return new S3AuditSource(name, <any>undefined, { urn })
            case "sumologic:index/s3Source:S3Source":
                return new S3Source(name, <any>undefined, { urn })
            case "sumologic:index/samlConfiguration:SamlConfiguration":
                return new SamlConfiguration(name, <any>undefined, { urn })
            case "sumologic:index/scheduledView:ScheduledView":
                return new ScheduledView(name, <any>undefined, { urn })
            case "sumologic:index/subdomain:Subdomain":
                return new Subdomain(name, <any>undefined, { urn })
            case "sumologic:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "sumologic:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sumologic", "index/awsInventorySource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/awsXraySource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudSyslogSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudToCloudSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudfrontSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudtrailSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cloudwatchSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/collector", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/collectorIngestBudgetAssignment", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/connection", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/content", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/contentPermission", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseAggregationRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseChainRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseCustomEntityType", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseCustomInsight", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseEntityCriticalityConfig", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsResolution", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseInsightsStatus", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseLogMapping", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseMatchList", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseMatchRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseNetworkBlock", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseRuleTuningExpression", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/cseThresholdRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/elbSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/field", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/fieldExtractionRule", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/folder", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/gcpMetricsSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/gcpSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/hierarchy", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/httpSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/ingestBudget", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/ingestBudgetV2", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/kineisLogSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/kinesisMetricsSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/lookupTable", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/metadataSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/monitor", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/monitorFolder", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/partition", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/policies", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/pollingSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/role", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/s3AuditSource", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/s3Source", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/samlConfiguration", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/scheduledView", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/subdomain", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/token", _module)
pulumi.runtime.registerResourceModule("sumologic", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("sumologic", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sumologic") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
