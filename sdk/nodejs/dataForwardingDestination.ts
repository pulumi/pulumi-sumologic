// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provider to manage [Sumologic Data Forwarding Destination](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#configure-an-s3-data-forwarding-destination)
 */
export class DataForwardingDestination extends pulumi.CustomResource {
    /**
     * Get an existing DataForwardingDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataForwardingDestinationState, opts?: pulumi.CustomResourceOptions): DataForwardingDestination {
        return new DataForwardingDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/dataForwardingDestination:DataForwardingDestination';

    /**
     * Returns true if the given object is an instance of DataForwardingDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataForwardingDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataForwardingDestination.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<outputs.DataForwardingDestinationAuthentication>;
    /**
     * The name of the Amazon S3 bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Description of the S3 data forwarding destination.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the S3 data forwarding destination.
     */
    public readonly destinationName!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly s3Region!: pulumi.Output<string | undefined>;
    public readonly s3ServerSideEncryption!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DataForwardingDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataForwardingDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataForwardingDestinationArgs | DataForwardingDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataForwardingDestinationState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["s3Region"] = state ? state.s3Region : undefined;
            resourceInputs["s3ServerSideEncryption"] = state ? state.s3ServerSideEncryption : undefined;
        } else {
            const args = argsOrState as DataForwardingDestinationArgs | undefined;
            if ((!args || args.authentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authentication'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["s3Region"] = args ? args.s3Region : undefined;
            resourceInputs["s3ServerSideEncryption"] = args ? args.s3ServerSideEncryption : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataForwardingDestination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataForwardingDestination resources.
 */
export interface DataForwardingDestinationState {
    authentication?: pulumi.Input<inputs.DataForwardingDestinationAuthentication>;
    /**
     * The name of the Amazon S3 bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Description of the S3 data forwarding destination.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the S3 data forwarding destination.
     */
    destinationName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    s3Region?: pulumi.Input<string>;
    s3ServerSideEncryption?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DataForwardingDestination resource.
 */
export interface DataForwardingDestinationArgs {
    authentication: pulumi.Input<inputs.DataForwardingDestinationAuthentication>;
    /**
     * The name of the Amazon S3 bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Description of the S3 data forwarding destination.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the S3 data forwarding destination.
     */
    destinationName: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    s3Region?: pulumi.Input<string>;
    s3ServerSideEncryption?: pulumi.Input<boolean>;
}
