// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SourceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing SourceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceTemplateState, opts?: pulumi.CustomResourceOptions): SourceTemplate {
        return new SourceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/sourceTemplate:SourceTemplate';

    /**
     * Returns true if the given object is an instance of SourceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceTemplate.__pulumiType;
    }

    public /*out*/ readonly config!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * inputJson of source template
     */
    public readonly inputJson!: pulumi.Output<string>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * schema reference for source template.
     */
    public readonly schemaRef!: pulumi.Output<outputs.SourceTemplateSchemaRef>;
    /**
     * Agent selector conditions
     */
    public readonly selectors!: pulumi.Output<outputs.SourceTemplateSelector[] | undefined>;
    public /*out*/ readonly totalCollectorLinked!: pulumi.Output<number>;

    /**
     * Create a SourceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceTemplateArgs | SourceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceTemplateState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["inputJson"] = state ? state.inputJson : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["schemaRef"] = state ? state.schemaRef : undefined;
            resourceInputs["selectors"] = state ? state.selectors : undefined;
            resourceInputs["totalCollectorLinked"] = state ? state.totalCollectorLinked : undefined;
        } else {
            const args = argsOrState as SourceTemplateArgs | undefined;
            if ((!args || args.inputJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputJson'");
            }
            if ((!args || args.schemaRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaRef'");
            }
            resourceInputs["inputJson"] = args ? args.inputJson : undefined;
            resourceInputs["schemaRef"] = args ? args.schemaRef : undefined;
            resourceInputs["selectors"] = args ? args.selectors : undefined;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["totalCollectorLinked"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SourceTemplate resources.
 */
export interface SourceTemplateState {
    config?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    /**
     * inputJson of source template
     */
    inputJson?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    /**
     * schema reference for source template.
     */
    schemaRef?: pulumi.Input<inputs.SourceTemplateSchemaRef>;
    /**
     * Agent selector conditions
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.SourceTemplateSelector>[]>;
    totalCollectorLinked?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SourceTemplate resource.
 */
export interface SourceTemplateArgs {
    /**
     * inputJson of source template
     */
    inputJson: pulumi.Input<string>;
    /**
     * schema reference for source template.
     */
    schemaRef: pulumi.Input<inputs.SourceTemplateSchemaRef>;
    /**
     * Agent selector conditions
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.SourceTemplateSelector>[]>;
}
