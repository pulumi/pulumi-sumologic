// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Sumo Logic CSE [Threshold Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/05_Write_a_Threshold_Rule).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const thresholdRule = new sumologic.CseThresholdRule("threshold_rule", {
 *     countDistinct: true,
 *     countField: "dstDevice_hostname",
 *     description: "Signal description",
 *     enabled: true,
 *     entitySelectors: [{
 *         entityType: "_ip",
 *         expression: "srcDevice_ip",
 *     }],
 *     expression: "objectType = \"Network\"",
 *     groupByFields: ["dstDevice_hostname"],
 *     isPrototype: false,
 *     limit: 1000,
 *     severity: 5,
 *     summaryExpression: "Signal summary",
 *     tags: ["_mitreAttackTactic:TA0009"],
 *     windowSize: "T30M",
 * });
 * ```
 *
 * ## Import
 *
 * Threshold Rules can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/cseThresholdRule:CseThresholdRule threshold_rule id
 * ```
 */
export class CseThresholdRule extends pulumi.CustomResource {
    /**
     * Get an existing CseThresholdRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CseThresholdRuleState, opts?: pulumi.CustomResourceOptions): CseThresholdRule {
        return new CseThresholdRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/cseThresholdRule:CseThresholdRule';

    /**
     * Returns true if the given object is an instance of CseThresholdRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CseThresholdRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CseThresholdRule.__pulumiType;
    }

    /**
     * Whether to count distinct values of a field, as opposed to just counting the number of records
     */
    public readonly countDistinct!: pulumi.Output<boolean | undefined>;
    /**
     * The field to count if `countDistinct` is set to true
     */
    public readonly countField!: pulumi.Output<string | undefined>;
    /**
     * The description of the generated Signals
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether the rule should generate Signals
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The entities to generate Signals on
     */
    public readonly entitySelectors!: pulumi.Output<outputs.CseThresholdRuleEntitySelector[]>;
    /**
     * The expression for which records to match on
     */
    public readonly expression!: pulumi.Output<string>;
    /**
     * A list of fields to group records by
     */
    public readonly groupByFields!: pulumi.Output<string[] | undefined>;
    /**
     * Whether the generated Signals should be prototype Signals
     */
    public readonly isPrototype!: pulumi.Output<boolean | undefined>;
    /**
     * A Signal will be fired when this many records/distinct field values are matched
     */
    public readonly limit!: pulumi.Output<number>;
    /**
     * The name of the Rule and the generated Signals
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The severity of the generated Signals
     */
    public readonly severity!: pulumi.Output<number>;
    /**
     * The summary of the generated Signals
     */
    public readonly summaryExpression!: pulumi.Output<string | undefined>;
    /**
     * The tags of the generated Signals
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     */
    public readonly windowSize!: pulumi.Output<string>;

    /**
     * Create a CseThresholdRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CseThresholdRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CseThresholdRuleArgs | CseThresholdRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CseThresholdRuleState | undefined;
            resourceInputs["countDistinct"] = state ? state.countDistinct : undefined;
            resourceInputs["countField"] = state ? state.countField : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entitySelectors"] = state ? state.entitySelectors : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["groupByFields"] = state ? state.groupByFields : undefined;
            resourceInputs["isPrototype"] = state ? state.isPrototype : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["summaryExpression"] = state ? state.summaryExpression : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["windowSize"] = state ? state.windowSize : undefined;
        } else {
            const args = argsOrState as CseThresholdRuleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.entitySelectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entitySelectors'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.limit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limit'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.windowSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowSize'");
            }
            resourceInputs["countDistinct"] = args ? args.countDistinct : undefined;
            resourceInputs["countField"] = args ? args.countField : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entitySelectors"] = args ? args.entitySelectors : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["groupByFields"] = args ? args.groupByFields : undefined;
            resourceInputs["isPrototype"] = args ? args.isPrototype : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["summaryExpression"] = args ? args.summaryExpression : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["windowSize"] = args ? args.windowSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CseThresholdRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CseThresholdRule resources.
 */
export interface CseThresholdRuleState {
    /**
     * Whether to count distinct values of a field, as opposed to just counting the number of records
     */
    countDistinct?: pulumi.Input<boolean>;
    /**
     * The field to count if `countDistinct` is set to true
     */
    countField?: pulumi.Input<string>;
    /**
     * The description of the generated Signals
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the rule should generate Signals
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The entities to generate Signals on
     */
    entitySelectors?: pulumi.Input<pulumi.Input<inputs.CseThresholdRuleEntitySelector>[]>;
    /**
     * The expression for which records to match on
     */
    expression?: pulumi.Input<string>;
    /**
     * A list of fields to group records by
     */
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the generated Signals should be prototype Signals
     */
    isPrototype?: pulumi.Input<boolean>;
    /**
     * A Signal will be fired when this many records/distinct field values are matched
     */
    limit?: pulumi.Input<number>;
    /**
     * The name of the Rule and the generated Signals
     */
    name?: pulumi.Input<string>;
    /**
     * The severity of the generated Signals
     */
    severity?: pulumi.Input<number>;
    /**
     * The summary of the generated Signals
     */
    summaryExpression?: pulumi.Input<string>;
    /**
     * The tags of the generated Signals
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     */
    windowSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CseThresholdRule resource.
 */
export interface CseThresholdRuleArgs {
    /**
     * Whether to count distinct values of a field, as opposed to just counting the number of records
     */
    countDistinct?: pulumi.Input<boolean>;
    /**
     * The field to count if `countDistinct` is set to true
     */
    countField?: pulumi.Input<string>;
    /**
     * The description of the generated Signals
     */
    description: pulumi.Input<string>;
    /**
     * Whether the rule should generate Signals
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The entities to generate Signals on
     */
    entitySelectors: pulumi.Input<pulumi.Input<inputs.CseThresholdRuleEntitySelector>[]>;
    /**
     * The expression for which records to match on
     */
    expression: pulumi.Input<string>;
    /**
     * A list of fields to group records by
     */
    groupByFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the generated Signals should be prototype Signals
     */
    isPrototype?: pulumi.Input<boolean>;
    /**
     * A Signal will be fired when this many records/distinct field values are matched
     */
    limit: pulumi.Input<number>;
    /**
     * The name of the Rule and the generated Signals
     */
    name?: pulumi.Input<string>;
    /**
     * The severity of the generated Signals
     */
    severity: pulumi.Input<number>;
    /**
     * The summary of the generated Signals
     */
    summaryExpression?: pulumi.Input<string>;
    /**
     * The tags of the generated Signals
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
     */
    windowSize: pulumi.Input<string>;
}
