// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Hierarchy](https://help.sumologic.com/Visualizations-and-Alerts/Explore).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleHierarchy = new sumologic.Hierarchy("exampleHierarchy", {
 *     filter: {
 *         key: "_origin",
 *         value: "kubernetes",
 *     },
 *     levels: [{
 *         entityType: "cluster",
 *         nextLevel: {
 *             entityType: "node",
 *         },
 *         nextLevelsWithConditions: [{
 *             condition: "testCondition",
 *             level: {
 *                 entityType: "namespace",
 *             },
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Hierarchies can be imported using the id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/hierarchy:Hierarchy test id
 * ```
 *
 *  [1]https://help.sumologic.com/Visualizations-and-Alerts/Explore
 */
export class Hierarchy extends pulumi.CustomResource {
    /**
     * Get an existing Hierarchy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HierarchyState, opts?: pulumi.CustomResourceOptions): Hierarchy {
        return new Hierarchy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/hierarchy:Hierarchy';

    /**
     * Returns true if the given object is an instance of Hierarchy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hierarchy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hierarchy.__pulumiType;
    }

    /**
     * An optional clause that a hierarchy requires to be matched.
     */
    public readonly filter!: pulumi.Output<outputs.HierarchyFilter | undefined>;
    public readonly levels!: pulumi.Output<outputs.HierarchyLevel[]>;
    /**
     * Name of the hierarchy.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Hierarchy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HierarchyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HierarchyArgs | HierarchyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HierarchyState | undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["levels"] = state ? state.levels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as HierarchyArgs | undefined;
            if ((!args || args.levels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'levels'");
            }
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["levels"] = args ? args.levels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hierarchy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hierarchy resources.
 */
export interface HierarchyState {
    /**
     * An optional clause that a hierarchy requires to be matched.
     */
    filter?: pulumi.Input<inputs.HierarchyFilter>;
    levels?: pulumi.Input<pulumi.Input<inputs.HierarchyLevel>[]>;
    /**
     * Name of the hierarchy.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hierarchy resource.
 */
export interface HierarchyArgs {
    /**
     * An optional clause that a hierarchy requires to be matched.
     */
    filter?: pulumi.Input<inputs.HierarchyFilter>;
    levels: pulumi.Input<pulumi.Input<inputs.HierarchyLevel>[]>;
    /**
     * Name of the hierarchy.
     */
    name?: pulumi.Input<string>;
}
