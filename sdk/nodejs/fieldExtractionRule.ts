// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Field Extraction Rule](https://help.sumologic.com/Manage/Field-Extractions).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const fieldExtractionRule = new sumologic.FieldExtractionRule("fieldExtractionRule", {
 *     enabled: true,
 *     parseExpression: "csv _raw extract 1 as f1",
 *     scope: "_sourceHost=127.0.0.1",
 * });
 * ```
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - Unique identifier for the field extraction rule.
 *
 * ## Import
 *
 * Extraction Rules can be imported using the extraction rule id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/fieldExtractionRule:FieldExtractionRule fieldExtractionRule id
 * ```
 *
 *  [1]https://help.sumologic.com/Manage/Field-Extractions
 */
export class FieldExtractionRule extends pulumi.CustomResource {
    /**
     * Get an existing FieldExtractionRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FieldExtractionRuleState, opts?: pulumi.CustomResourceOptions): FieldExtractionRule {
        return new FieldExtractionRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/fieldExtractionRule:FieldExtractionRule';

    /**
     * Returns true if the given object is an instance of FieldExtractionRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FieldExtractionRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FieldExtractionRule.__pulumiType;
    }

    /**
     * Is the field extraction rule enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Name of the field extraction rule. Use a name that makes it easy to identify the rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Describes the fields to be parsed.
     */
    public readonly parseExpression!: pulumi.Output<string>;
    /**
     * Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
     */
    public readonly scope!: pulumi.Output<string>;

    /**
     * Create a FieldExtractionRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FieldExtractionRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FieldExtractionRuleArgs | FieldExtractionRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FieldExtractionRuleState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parseExpression"] = state ? state.parseExpression : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as FieldExtractionRuleArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.parseExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parseExpression'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parseExpression"] = args ? args.parseExpression : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FieldExtractionRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FieldExtractionRule resources.
 */
export interface FieldExtractionRuleState {
    /**
     * Is the field extraction rule enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the field extraction rule. Use a name that makes it easy to identify the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Describes the fields to be parsed.
     */
    parseExpression?: pulumi.Input<string>;
    /**
     * Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
     */
    scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FieldExtractionRule resource.
 */
export interface FieldExtractionRuleArgs {
    /**
     * Is the field extraction rule enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Name of the field extraction rule. Use a name that makes it easy to identify the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Describes the fields to be parsed.
     */
    parseExpression: pulumi.Input<string>;
    /**
     * Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
     */
    scope: pulumi.Input<string>;
}
