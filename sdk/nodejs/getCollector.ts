// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const thisCollector = pulumi.output(sumologic.getCollector({
 *     name: "MyCollector",
 * }));
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const that = pulumi.output(sumologic.getCollector({
 *     id: 1234567890,
 * }));
 * ```
 *
 * A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
 *
 * If both `id` and `name` have been specified, `id` takes precedence.
 * ## Attributes reference
 *
 * The following attributes are exported:
 *
 * - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
 * - `name` - The name of the collector.
 * - `description` - The description of the collector.
 * - `category` - The default source category for any source attached to this collector.
 * - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
 */
export function getCollector(args?: GetCollectorArgs, opts?: pulumi.InvokeOptions): Promise<GetCollectorResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("sumologic:index/getCollector:getCollector", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getCollector.
 */
export interface GetCollectorResult {
    readonly category: string;
    readonly description: string;
    readonly fields: {[key: string]: string};
    readonly id: number;
    readonly name: string;
    readonly timezone: string;
}

export function getCollectorOutput(args?: GetCollectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCollectorResult> {
    return pulumi.output(args).apply(a => getCollector(a, opts))
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
