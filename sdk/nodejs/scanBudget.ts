// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Scan Budget](https://help.sumologic.com/docs/manage/manage-subscription/usage-management/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const budget = new sumologic.ScanBudget("budget", {
 *     name: "TestBudget",
 *     capacity: 10,
 *     unit: "GB",
 *     budgetType: "ScanBudget",
 *     window: "Query",
 *     applicableOn: "PerEntity",
 *     groupBy: "User",
 *     action: "StopScan",
 *     status: "active",
 *     scope: {
 *         includedUsers: ["000000000000011C"],
 *         excludedUsers: [],
 *         includedRoles: [],
 *         excludedRoles: ["0000000000000196"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Scan budgets can be imported using the budget ID, e.g.:
 *
 * hcl
 *
 * ```sh
 * $ pulumi import sumologic:index/scanBudget:ScanBudget budget 00000000000123AB
 * ```
 *
 * [1]: https://help.sumologic.com/docs/manage/manage-subscription/usage-management/
 */
export class ScanBudget extends pulumi.CustomResource {
    /**
     * Get an existing ScanBudget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScanBudgetState, opts?: pulumi.CustomResourceOptions): ScanBudget {
        return new ScanBudget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/scanBudget:ScanBudget';

    /**
     * Returns true if the given object is an instance of ScanBudget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScanBudget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScanBudget.__pulumiType;
    }

    /**
     * Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
     */
    public readonly applicableOn!: pulumi.Output<string>;
    /**
     * Type of the budget. Supported values are: `ScanBudget`.
     */
    public readonly budgetType!: pulumi.Output<string>;
    /**
     * Capacity of the scan budget. Only whole numbers are supported.
     */
    public readonly capacity!: pulumi.Output<number>;
    /**
     * Grouping Entity of the budget. Supported values are: `User`.
     */
    public readonly groupBy!: pulumi.Output<string>;
    /**
     * Display name of the scan budget. This must be unique across all the scan budgets.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Scope of the budget.
     */
    public readonly scope!: pulumi.Output<outputs.ScanBudgetScope>;
    /**
     * Signifies the state of the budget. Supported values are: `active` and `inactive`.
     *
     * The following attributes are exported:
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
     */
    public readonly unit!: pulumi.Output<string>;
    /**
     * Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
     */
    public readonly window!: pulumi.Output<string>;

    /**
     * Create a ScanBudget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScanBudgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScanBudgetArgs | ScanBudgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScanBudgetState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applicableOn"] = state ? state.applicableOn : undefined;
            resourceInputs["budgetType"] = state ? state.budgetType : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["groupBy"] = state ? state.groupBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as ScanBudgetArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.applicableOn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicableOn'");
            }
            if ((!args || args.budgetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'budgetType'");
            }
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.groupBy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupBy'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.unit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unit'");
            }
            if ((!args || args.window === undefined) && !opts.urn) {
                throw new Error("Missing required property 'window'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applicableOn"] = args ? args.applicableOn : undefined;
            resourceInputs["budgetType"] = args ? args.budgetType : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["groupBy"] = args ? args.groupBy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScanBudget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScanBudget resources.
 */
export interface ScanBudgetState {
    /**
     * Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
     */
    action?: pulumi.Input<string>;
    /**
     * Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
     */
    applicableOn?: pulumi.Input<string>;
    /**
     * Type of the budget. Supported values are: `ScanBudget`.
     */
    budgetType?: pulumi.Input<string>;
    /**
     * Capacity of the scan budget. Only whole numbers are supported.
     */
    capacity?: pulumi.Input<number>;
    /**
     * Grouping Entity of the budget. Supported values are: `User`.
     */
    groupBy?: pulumi.Input<string>;
    /**
     * Display name of the scan budget. This must be unique across all the scan budgets.
     */
    name?: pulumi.Input<string>;
    /**
     * Scope of the budget.
     */
    scope?: pulumi.Input<inputs.ScanBudgetScope>;
    /**
     * Signifies the state of the budget. Supported values are: `active` and `inactive`.
     *
     * The following attributes are exported:
     */
    status?: pulumi.Input<string>;
    /**
     * Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
     */
    unit?: pulumi.Input<string>;
    /**
     * Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
     */
    window?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScanBudget resource.
 */
export interface ScanBudgetArgs {
    /**
     * Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
     */
    action: pulumi.Input<string>;
    /**
     * Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
     */
    applicableOn: pulumi.Input<string>;
    /**
     * Type of the budget. Supported values are: `ScanBudget`.
     */
    budgetType: pulumi.Input<string>;
    /**
     * Capacity of the scan budget. Only whole numbers are supported.
     */
    capacity: pulumi.Input<number>;
    /**
     * Grouping Entity of the budget. Supported values are: `User`.
     */
    groupBy: pulumi.Input<string>;
    /**
     * Display name of the scan budget. This must be unique across all the scan budgets.
     */
    name?: pulumi.Input<string>;
    /**
     * Scope of the budget.
     */
    scope: pulumi.Input<inputs.ScanBudgetScope>;
    /**
     * Signifies the state of the budget. Supported values are: `active` and `inactive`.
     *
     * The following attributes are exported:
     */
    status: pulumi.Input<string>;
    /**
     * Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
     */
    unit: pulumi.Input<string>;
    /**
     * Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
     */
    window: pulumi.Input<string>;
}
