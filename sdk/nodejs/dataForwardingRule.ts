// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provider to manage [Sumologic Data Forwarding Rule](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const exampleDataForwardingRule = new sumologic.DataForwardingRule("example_data_forwarding_rule", {
 *     indexId: "00000000024C6155",
 *     destinationId: "00000000000732AA",
 *     enabled: true,
 *     fileFormat: "test/{index}/{day}/{hour}/{minute}",
 *     payloadSchema: "builtInFields",
 *     format: "json",
 * });
 * ```
 */
export class DataForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing DataForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataForwardingRuleState, opts?: pulumi.CustomResourceOptions): DataForwardingRule {
        return new DataForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/dataForwardingRule:DataForwardingRule';

    /**
     * Returns true if the given object is an instance of DataForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataForwardingRule.__pulumiType;
    }

    /**
     * The data forwarding destination id.
     */
    public readonly destinationId!: pulumi.Output<string>;
    /**
     * True when the data forwarding rule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the path prefix to a directory in the S3 bucket and how to format the file name.
     */
    public readonly fileFormat!: pulumi.Output<string | undefined>;
    /**
     * Format of the payload. Default format will be _csv_. 
     * _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * The _id_ of the Partition or Scheduled View the rule applies to.
     */
    public readonly indexId!: pulumi.Output<string>;
    /**
     * Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
     * _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
     */
    public readonly payloadSchema!: pulumi.Output<string | undefined>;

    /**
     * Create a DataForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataForwardingRuleArgs | DataForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataForwardingRuleState | undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fileFormat"] = state ? state.fileFormat : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["payloadSchema"] = state ? state.payloadSchema : undefined;
        } else {
            const args = argsOrState as DataForwardingRuleArgs | undefined;
            if ((!args || args.destinationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationId'");
            }
            if ((!args || args.indexId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexId'");
            }
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fileFormat"] = args ? args.fileFormat : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["indexId"] = args ? args.indexId : undefined;
            resourceInputs["payloadSchema"] = args ? args.payloadSchema : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataForwardingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataForwardingRule resources.
 */
export interface DataForwardingRuleState {
    /**
     * The data forwarding destination id.
     */
    destinationId?: pulumi.Input<string>;
    /**
     * True when the data forwarding rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specify the path prefix to a directory in the S3 bucket and how to format the file name.
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Format of the payload. Default format will be _csv_. 
     * _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
     */
    format?: pulumi.Input<string>;
    /**
     * The _id_ of the Partition or Scheduled View the rule applies to.
     */
    indexId?: pulumi.Input<string>;
    /**
     * Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
     * _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
     */
    payloadSchema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataForwardingRule resource.
 */
export interface DataForwardingRuleArgs {
    /**
     * The data forwarding destination id.
     */
    destinationId: pulumi.Input<string>;
    /**
     * True when the data forwarding rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specify the path prefix to a directory in the S3 bucket and how to format the file name.
     */
    fileFormat?: pulumi.Input<string>;
    /**
     * Format of the payload. Default format will be _csv_. 
     * _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
     */
    format?: pulumi.Input<string>;
    /**
     * The _id_ of the Partition or Scheduled View the rule applies to.
     */
    indexId: pulumi.Input<string>;
    /**
     * Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
     * _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
     */
    payloadSchema?: pulumi.Input<string>;
}
