// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [Sumologic Field](https://help.sumologic.com/Manage/Fields).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sumologic from "@pulumi/sumologic";
 *
 * const field = new sumologic.Field("field", {
 *     dataType: "Int",
 *     fieldName: "int_field_1",
 * });
 * ```
 *
 * ## Import
 *
 * Fields can be imported using the field id, e.g.hcl
 *
 * ```sh
 *  $ pulumi import sumologic:index/field:Field field 000000000ABC1234
 * ```
 *
 *  [1]https://help.sumologic.com/Manage/Fields
 */
export class Field extends pulumi.CustomResource {
    /**
     * Get an existing Field resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FieldState, opts?: pulumi.CustomResourceOptions): Field {
        return new Field(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sumologic:index/field:Field';

    /**
     * Returns true if the given object is an instance of Field.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Field {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Field.__pulumiType;
    }

    /**
     * Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
     */
    public readonly dataType!: pulumi.Output<string | undefined>;
    /**
     * Field identifier.
     */
    public /*out*/ readonly fieldId!: pulumi.Output<string>;
    /**
     * Name of the field.
     */
    public readonly fieldName!: pulumi.Output<string>;
    /**
     * State of the field (either `Enabled` or `Disabled`).
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a Field resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FieldArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FieldArgs | FieldState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FieldState | undefined;
            resourceInputs["dataType"] = state ? state.dataType : undefined;
            resourceInputs["fieldId"] = state ? state.fieldId : undefined;
            resourceInputs["fieldName"] = state ? state.fieldName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as FieldArgs | undefined;
            if ((!args || args.fieldName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fieldName'");
            }
            resourceInputs["dataType"] = args ? args.dataType : undefined;
            resourceInputs["fieldName"] = args ? args.fieldName : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["fieldId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Field.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Field resources.
 */
export interface FieldState {
    /**
     * Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
     */
    dataType?: pulumi.Input<string>;
    /**
     * Field identifier.
     */
    fieldId?: pulumi.Input<string>;
    /**
     * Name of the field.
     */
    fieldName?: pulumi.Input<string>;
    /**
     * State of the field (either `Enabled` or `Disabled`).
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Field resource.
 */
export interface FieldArgs {
    /**
     * Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
     */
    dataType?: pulumi.Input<string>;
    /**
     * Name of the field.
     */
    fieldName: pulumi.Input<string>;
    /**
     * State of the field (either `Enabled` or `Disabled`).
     */
    state?: pulumi.Input<string>;
}
