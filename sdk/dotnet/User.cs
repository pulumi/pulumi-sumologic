// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic User](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleRole = new SumoLogic.Role("exampleRole", new()
    ///     {
    ///         Description = "Testing resource sumologic_role",
    ///     });
    /// 
    ///     var exampleUser1 = new SumoLogic.User("exampleUser1", new()
    ///     {
    ///         FirstName = "Jon",
    ///         LastName = "Doe",
    ///         Email = "jon.doe@gmail.com",
    ///         IsActive = true,
    ///         RoleIds = new[]
    ///         {
    ///             exampleRole.Id,
    ///         },
    ///         TransferTo = "",
    ///     });
    /// 
    ///     var exampleUser2 = new SumoLogic.User("exampleUser2", new()
    ///     {
    ///         FirstName = "Jane",
    ///         LastName = "Smith",
    ///         Email = "jane.smith@gmail.com",
    ///         RoleIds = new[]
    ///         {
    ///             exampleRole.Id,
    ///         },
    ///         TransferTo = exampleUser1.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Users can be imported using the user id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/user:User user 1234567890
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users
    /// </summary>
    [SumoLogicResourceType("sumologic:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Email of the user.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Output("firstName")]
        public Output<string> FirstName { get; private set; } = null!;

        /// <summary>
        /// This has the value true if the user is active and false if they have been deactivated.
        /// </summary>
        [Output("isActive")]
        public Output<bool> IsActive { get; private set; } = null!;

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Output("lastName")]
        public Output<string> LastName { get; private set; } = null!;

        /// <summary>
        /// List of roleIds associated with the user.
        /// </summary>
        [Output("roleIds")]
        public Output<ImmutableArray<string>> RoleIds { get; private set; } = null!;

        /// <summary>
        /// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
        /// </summary>
        [Output("transferTo")]
        public Output<string> TransferTo { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email of the user.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Input("firstName", required: true)]
        public Input<string> FirstName { get; set; } = null!;

        /// <summary>
        /// This has the value true if the user is active and false if they have been deactivated.
        /// </summary>
        [Input("isActive", required: true)]
        public Input<bool> IsActive { get; set; } = null!;

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Input("lastName", required: true)]
        public Input<string> LastName { get; set; } = null!;

        [Input("roleIds", required: true)]
        private InputList<string>? _roleIds;

        /// <summary>
        /// List of roleIds associated with the user.
        /// </summary>
        public InputList<string> RoleIds
        {
            get => _roleIds ?? (_roleIds = new InputList<string>());
            set => _roleIds = value;
        }

        /// <summary>
        /// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
        /// </summary>
        [Input("transferTo", required: true)]
        public Input<string> TransferTo { get; set; } = null!;

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Email of the user.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// First name of the user.
        /// </summary>
        [Input("firstName")]
        public Input<string>? FirstName { get; set; }

        /// <summary>
        /// This has the value true if the user is active and false if they have been deactivated.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Last name of the user.
        /// </summary>
        [Input("lastName")]
        public Input<string>? LastName { get; set; }

        [Input("roleIds")]
        private InputList<string>? _roleIds;

        /// <summary>
        /// List of roleIds associated with the user.
        /// </summary>
        public InputList<string> RoleIds
        {
            get => _roleIds ?? (_roleIds = new InputList<string>());
            set => _roleIds = value;
        }

        /// <summary>
        /// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
        /// </summary>
        [Input("transferTo")]
        public Input<string>? TransferTo { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
