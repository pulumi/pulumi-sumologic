// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    [SumoLogicResourceType("sumologic:index/sourceTemplate:SourceTemplate")]
    public partial class SourceTemplate : global::Pulumi.CustomResource
    {
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// inputJson of source template
        /// </summary>
        [Output("inputJson")]
        public Output<string> InputJson { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// schema reference for source template.
        /// </summary>
        [Output("schemaRef")]
        public Output<Outputs.SourceTemplateSchemaRef> SchemaRef { get; private set; } = null!;

        /// <summary>
        /// Agent selector conditions
        /// </summary>
        [Output("selectors")]
        public Output<ImmutableArray<Outputs.SourceTemplateSelector>> Selectors { get; private set; } = null!;

        [Output("totalCollectorLinked")]
        public Output<int> TotalCollectorLinked { get; private set; } = null!;


        /// <summary>
        /// Create a SourceTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceTemplate(string name, SourceTemplateArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/sourceTemplate:SourceTemplate", name, args ?? new SourceTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceTemplate(string name, Input<string> id, SourceTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/sourceTemplate:SourceTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceTemplate Get(string name, Input<string> id, SourceTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceTemplate(name, id, state, options);
        }
    }

    public sealed class SourceTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// inputJson of source template
        /// </summary>
        [Input("inputJson", required: true)]
        public Input<string> InputJson { get; set; } = null!;

        /// <summary>
        /// schema reference for source template.
        /// </summary>
        [Input("schemaRef", required: true)]
        public Input<Inputs.SourceTemplateSchemaRefArgs> SchemaRef { get; set; } = null!;

        [Input("selectors")]
        private InputList<Inputs.SourceTemplateSelectorArgs>? _selectors;

        /// <summary>
        /// Agent selector conditions
        /// </summary>
        public InputList<Inputs.SourceTemplateSelectorArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.SourceTemplateSelectorArgs>());
            set => _selectors = value;
        }

        public SourceTemplateArgs()
        {
        }
        public static new SourceTemplateArgs Empty => new SourceTemplateArgs();
    }

    public sealed class SourceTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        public Input<string>? Config { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// inputJson of source template
        /// </summary>
        [Input("inputJson")]
        public Input<string>? InputJson { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// schema reference for source template.
        /// </summary>
        [Input("schemaRef")]
        public Input<Inputs.SourceTemplateSchemaRefGetArgs>? SchemaRef { get; set; }

        [Input("selectors")]
        private InputList<Inputs.SourceTemplateSelectorGetArgs>? _selectors;

        /// <summary>
        /// Agent selector conditions
        /// </summary>
        public InputList<Inputs.SourceTemplateSelectorGetArgs> Selectors
        {
            get => _selectors ?? (_selectors = new InputList<Inputs.SourceTemplateSelectorGetArgs>());
            set => _selectors = value;
        }

        [Input("totalCollectorLinked")]
        public Input<int>? TotalCollectorLinked { get; set; }

        public SourceTemplateState()
        {
        }
        public static new SourceTemplateState Empty => new SourceTemplateState();
    }
}
