// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).
    /// If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor).
    /// 
    /// ## Example SLO Monitors
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfSloMonitor1 = new SumoLogic.Monitor("tfSloMonitor1", new()
    ///     {
    ///         ContentType = "Monitor",
    ///         EvaluationDelay = "5m",
    ///         IsDisabled = false,
    ///         MonitorType = "Slo",
    ///         Notifications = new[]
    ///         {
    ///             new SumoLogic.Inputs.MonitorNotificationArgs
    ///             {
    ///                 Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                 {
    ///                     ConnectionType = "Email",
    ///                     MessageBody = "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
    ///                     Recipients = new[]
    ///                     {
    ///                         "abc@example.com",
    ///                     },
    ///                     Subject = "Monitor Alert: {{TriggerType}} on {{Name}}",
    ///                     TimeZone = "PST",
    ///                 },
    ///                 RunForTriggerTypes = new[]
    ///                 {
    ///                     "Critical",
    ///                     "ResolvedCritical",
    ///                 },
    ///             },
    ///         },
    ///         Playbook = "test playbook",
    ///         SloId = "0000000000000009",
    ///         TriggerConditions = new SumoLogic.Inputs.MonitorTriggerConditionsArgs
    ///         {
    ///             SloSliCondition = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionArgs
    ///             {
    ///                 Critical = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionCriticalArgs
    ///                 {
    ///                     SliThreshold = 99.5,
    ///                 },
    ///                 Warning = new SumoLogic.Inputs.MonitorTriggerConditionsSloSliConditionWarningArgs
    ///                 {
    ///                     SliThreshold = 99.9,
    ///                 },
    ///             },
    ///         },
    ///         Type = "MonitorsLibraryMonitor",
    ///     });
    /// 
    ///     var tfSloMonitor2 = new SumoLogic.Monitor("tfSloMonitor2", new()
    ///     {
    ///         ContentType = "Monitor",
    ///         EvaluationDelay = "5m",
    ///         IsDisabled = false,
    ///         MonitorType = "Slo",
    ///         SloId = "0000000000000009",
    ///         TriggerConditions = new SumoLogic.Inputs.MonitorTriggerConditionsArgs
    ///         {
    ///             SloBurnRateCondition = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionArgs
    ///             {
    ///                 Critical = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionCriticalArgs
    ///                 {
    ///                     BurnRateThreshold = 10,
    ///                     TimeRange = "1d",
    ///                 },
    ///                 Warning = new SumoLogic.Inputs.MonitorTriggerConditionsSloBurnRateConditionWarningArgs
    ///                 {
    ///                     BurnRateThreshold = 5,
    ///                     TimeRange = "1d",
    ///                 },
    ///             },
    ///         },
    ///         Type = "MonitorsLibraryMonitor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Monitor Folders
    /// 
    /// &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
    /// NOTE: Monitor folders are considered a different resource from Library content folders.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfMonitorFolder1 = new SumoLogic.MonitorFolder("tfMonitorFolder1", new()
    ///     {
    ///         Description = "a folder for monitors",
    ///     });
    /// 
    /// });
    /// ```
    /// =======
    /// NOTE: Monitor folders are considered a different resource from Library content folders. See [sumologic.MonitorFolder][2] for more details.
    /// &gt; &gt; &gt; &gt; &gt; &gt; &gt; v2.11.0
    /// 
    /// ## The `trigger_conditions` block
    /// 
    /// A `trigger_conditions` block configures conditions for sending notifications.
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// ### Arguments
    /// A `trigger_conditions` block contains one or more subblocks of the following types:
    /// - `logs_static_condition`
    /// - `metrics_static_condition`
    /// - `logs_outlier_condition`
    /// - `metrics_outlier_condition`
    /// - `logs_missing_data_condition`
    /// - `metrics_missing_data_condition`
    /// - `slo_sli_condition`
    /// - `slo_burn_rate_condition`
    /// 
    /// Subblocks should be limited to at most 1 missing data condition and at most 1 static / outlier condition.
    /// 
    /// Here is a summary of arguments for each condition type (fields which are not marked as `Required` are optional):
    /// #### logs_static_condition
    ///   - `field`
    ///   - `critical`
    ///     - `time_range` (Required)
    ///     - `alert` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///     - `resolution` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///   - `warning`
    ///     - `time_range` (Required)
    ///     - `alert` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///     - `resolution` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    /// #### metrics_static_condition
    ///   - `critical`
    ///     - `time_range` (Required)
    ///     - `occurrence_type` (Required)
    ///     - `alert` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///     - `resolution` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///   - `warning`
    ///     - `time_range` (Required)
    ///     - `occurrence_type` (Required)
    ///     - `alert` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    ///     - `resolution` (Required)
    ///       - `threshold`
    ///       - `threshold_type`
    /// #### logs_outlier_condition
    ///   - `field`
    ///   - `direction`
    ///   - `critical`
    ///      - `window`
    ///      - `consecutive`
    ///      - `threshold`
    ///   - `warning`
    ///      - `window`
    ///      - `consecutive`
    ///      - `threshold`
    /// #### metrics_outlier_condition
    ///   - `direction`
    ///   - `critical`
    ///      - `baseline_window`
    ///      - `threshold`
    ///   - `warning`
    ///     - `baseline_window`
    ///     - `threshold`
    /// #### logs_missing_data_condition
    ///   - `time_range` (Required)
    /// #### metrics_missing_data_condition
    ///   - `time_range` (Required)
    ///   - `trigger_source` (Required)
    /// #### slo_sli_condition
    ///   - `critical`
    ///     - `sli_threshold` (Required) : The remaining SLI error budget threshold percentage [0,100).
    ///   - `warning`
    ///     - `sli_threshold` (Required)
    /// 
    /// #### slo_burn_rate_condition
    ///   - `critical`
    ///     - `time_range` (Required) : The relative time range for the burn rate percentage evaluation.
    ///     - `burn_rate_threshold` (Required) : The burn rate percentage threshold.
    ///   - `warning`
    ///     - `time_range` (Required)
    ///     - `burn_rate_threshold` (Required)
    /// 
    /// ## The `triggers` block
    /// 
    /// The `triggers` block is deprecated. Please use `trigger_conditions` to specify notification conditions.
    /// 
    /// Here's an example logs monitor that uses `triggers` to specify trigger conditions:
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfLogsMonitor1 = new SumoLogic.Monitor("tfLogsMonitor1", new()
    ///     {
    ///         ContentType = "Monitor",
    ///         Description = "tf logs monitor",
    ///         IsDisabled = false,
    ///         MonitorType = "Logs",
    ///         Notifications = new[]
    ///         {
    ///             new SumoLogic.Inputs.MonitorNotificationArgs
    ///             {
    ///                 Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                 {
    ///                     ConnectionType = "Email",
    ///                     MessageBody = "Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}",
    ///                     Recipients = new[]
    ///                     {
    ///                         "abc@example.com",
    ///                     },
    ///                     Subject = "Monitor Alert: {{TriggerType}} on {{Name}}",
    ///                     TimeZone = "PST",
    ///                 },
    ///                 RunForTriggerTypes = new[]
    ///                 {
    ///                     "Critical",
    ///                     "ResolvedCritical",
    ///                 },
    ///             },
    ///             new SumoLogic.Inputs.MonitorNotificationArgs
    ///             {
    ///                 Notification = new SumoLogic.Inputs.MonitorNotificationNotificationArgs
    ///                 {
    ///                     ConnectionId = "0000000000ABC123",
    ///                     ConnectionType = "Webhook",
    ///                 },
    ///                 RunForTriggerTypes = new[]
    ///                 {
    ///                     "Critical",
    ///                     "ResolvedCritical",
    ///                 },
    ///             },
    ///         },
    ///         Queries = new[]
    ///         {
    ///             new SumoLogic.Inputs.MonitorQueryArgs
    ///             {
    ///                 Query = "_sourceCategory=event-action info",
    ///                 RowId = "A",
    ///             },
    ///         },
    ///         Triggers = new[]
    ///         {
    ///             new SumoLogic.Inputs.MonitorTriggerArgs
    ///             {
    ///                 DetectionMethod = "StaticCondition",
    ///                 OccurrenceType = "ResultCount",
    ///                 Threshold = 40,
    ///                 ThresholdType = "GreaterThan",
    ///                 TimeRange = "15m",
    ///                 TriggerSource = "AllResults",
    ///                 TriggerType = "Critical",
    ///             },
    ///             new SumoLogic.Inputs.MonitorTriggerArgs
    ///             {
    ///                 DetectionMethod = "StaticCondition",
    ///                 OccurrenceType = "ResultCount",
    ///                 Threshold = 40,
    ///                 ThresholdType = "LessThanOrEqual",
    ///                 TimeRange = "15m",
    ///                 TriggerSource = "AllResults",
    ///                 TriggerType = "ResolvedCritical",
    ///             },
    ///         },
    ///         Type = "MonitorsLibraryMonitor",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Monitors can be imported using the monitor ID, such ashcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/monitor:Monitor test 1234567890
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/?cid=10020 [2]monitor_folder.html.markdown [3]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor
    /// </summary>
    [SumoLogicResourceType("sumologic:index/monitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.
        /// </summary>
        [Output("alertName")]
        public Output<string?> AlertName { get; private set; } = null!;

        /// <summary>
        /// The type of the content object. Valid value:
        /// - `Monitor`
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The description of the monitor.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("evaluationDelay")]
        public Output<string> EvaluationDelay { get; private set; } = null!;

        /// <summary>
        /// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
        /// </summary>
        [Output("groupNotifications")]
        public Output<bool?> GroupNotifications { get; private set; } = null!;

        /// <summary>
        /// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
        /// </summary>
        [Output("isDisabled")]
        public Output<bool?> IsDisabled { get; private set; } = null!;

        [Output("isLocked")]
        public Output<bool> IsLocked { get; private set; } = null!;

        [Output("isMutable")]
        public Output<bool> IsMutable { get; private set; } = null!;

        [Output("isSystem")]
        public Output<bool> IsSystem { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// The type of monitor. Valid values:
        /// - `Logs`: A logs query monitor.
        /// - `Metrics`: A metrics query monitor.
        /// - `Slo`: A SLO based monitor  (beta).
        /// </summary>
        [Output("monitorType")]
        public Output<string> MonitorType { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor. The name must be alphanumeric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.
        /// </summary>
        [Output("notificationGroupFields")]
        public Output<ImmutableArray<string>> NotificationGroupFields { get; private set; } = null!;

        /// <summary>
        /// The notifications the monitor will send when the respective trigger condition is met.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.MonitorNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.
        /// </summary>
        [Output("objPermissions")]
        public Output<ImmutableArray<Outputs.MonitorObjPermission>> ObjPermissions { get; private set; } = null!;

        /// <summary>
        /// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
        /// </summary>
        [Output("playbook")]
        public Output<string?> Playbook { get; private set; } = null!;

        [Output("postRequestMap")]
        public Output<ImmutableDictionary<string, string>?> PostRequestMap { get; private set; } = null!;

        /// <summary>
        /// All queries from the monitor.
        /// </summary>
        [Output("queries")]
        public Output<ImmutableArray<Outputs.MonitorQuery>> Queries { get; private set; } = null!;

        /// <summary>
        /// Identifier of the SLO definition for the monitor. This is only applicable &amp; required for Slo `monitor_type`.
        /// </summary>
        [Output("sloId")]
        public Output<string?> SloId { get; private set; } = null!;

        /// <summary>
        /// The current status for this monitor. Values are:
        /// - `Critical`
        /// - `Warning`
        /// - `MissingData`
        /// - `Normal`
        /// - `Disabled`
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<string>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.
        /// </summary>
        [Output("triggerConditions")]
        public Output<Outputs.MonitorTriggerConditions?> TriggerConditions { get; private set; } = null!;

        /// <summary>
        /// Defines the conditions of when to send notifications.
        /// </summary>
        [Output("triggers")]
        public Output<ImmutableArray<Outputs.MonitorTrigger>> Triggers { get; private set; } = null!;

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryMonitor`
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.
        /// </summary>
        [Input("alertName")]
        public Input<string>? AlertName { get; set; }

        /// <summary>
        /// The type of the content object. Valid value:
        /// - `Monitor`
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the monitor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("evaluationDelay")]
        public Input<string>? EvaluationDelay { get; set; }

        /// <summary>
        /// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
        /// </summary>
        [Input("groupNotifications")]
        public Input<bool>? GroupNotifications { get; set; }

        /// <summary>
        /// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The type of monitor. Valid values:
        /// - `Logs`: A logs query monitor.
        /// - `Metrics`: A metrics query monitor.
        /// - `Slo`: A SLO based monitor  (beta).
        /// </summary>
        [Input("monitorType", required: true)]
        public Input<string> MonitorType { get; set; } = null!;

        /// <summary>
        /// The name of the monitor. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationGroupFields")]
        private InputList<string>? _notificationGroupFields;

        /// <summary>
        /// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.
        /// </summary>
        public InputList<string> NotificationGroupFields
        {
            get => _notificationGroupFields ?? (_notificationGroupFields = new InputList<string>());
            set => _notificationGroupFields = value;
        }

        [Input("notifications")]
        private InputList<Inputs.MonitorNotificationArgs>? _notifications;

        /// <summary>
        /// The notifications the monitor will send when the respective trigger condition is met.
        /// </summary>
        public InputList<Inputs.MonitorNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.MonitorNotificationArgs>());
            set => _notifications = value;
        }

        [Input("objPermissions")]
        private InputList<Inputs.MonitorObjPermissionArgs>? _objPermissions;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.
        /// </summary>
        public InputList<Inputs.MonitorObjPermissionArgs> ObjPermissions
        {
            get => _objPermissions ?? (_objPermissions = new InputList<Inputs.MonitorObjPermissionArgs>());
            set => _objPermissions = value;
        }

        /// <summary>
        /// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
        /// </summary>
        [Input("playbook")]
        public Input<string>? Playbook { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        [Input("queries")]
        private InputList<Inputs.MonitorQueryArgs>? _queries;

        /// <summary>
        /// All queries from the monitor.
        /// </summary>
        public InputList<Inputs.MonitorQueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MonitorQueryArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// Identifier of the SLO definition for the monitor. This is only applicable &amp; required for Slo `monitor_type`.
        /// </summary>
        [Input("sloId")]
        public Input<string>? SloId { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The current status for this monitor. Values are:
        /// - `Critical`
        /// - `Warning`
        /// - `MissingData`
        /// - `Normal`
        /// - `Disabled`
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        /// <summary>
        /// Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.
        /// </summary>
        [Input("triggerConditions")]
        public Input<Inputs.MonitorTriggerConditionsArgs>? TriggerConditions { get; set; }

        [Input("triggers")]
        private InputList<Inputs.MonitorTriggerArgs>? _triggers;

        /// <summary>
        /// Defines the conditions of when to send notifications.
        /// </summary>
        [Obsolete(@"The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `trigger_conditions` instead.")]
        public InputList<Inputs.MonitorTriggerArgs> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<Inputs.MonitorTriggerArgs>());
            set => _triggers = value;
        }

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryMonitor`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }

    public sealed class MonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display name when creating alerts. Monitor name will be used if `alert_name` is not provided. All template variables can be used in `alert_name` except `{{AlertName}}`, `{{AlertResponseURL}}` and `{{ResultsJson}}`.
        /// </summary>
        [Input("alertName")]
        public Input<string>? AlertName { get; set; }

        /// <summary>
        /// The type of the content object. Valid value:
        /// - `Monitor`
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the monitor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("evaluationDelay")]
        public Input<string>? EvaluationDelay { get; set; }

        /// <summary>
        /// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
        /// </summary>
        [Input("groupNotifications")]
        public Input<bool>? GroupNotifications { get; set; }

        /// <summary>
        /// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The type of monitor. Valid values:
        /// - `Logs`: A logs query monitor.
        /// - `Metrics`: A metrics query monitor.
        /// - `Slo`: A SLO based monitor  (beta).
        /// </summary>
        [Input("monitorType")]
        public Input<string>? MonitorType { get; set; }

        /// <summary>
        /// The name of the monitor. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationGroupFields")]
        private InputList<string>? _notificationGroupFields;

        /// <summary>
        /// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true.
        /// </summary>
        public InputList<string> NotificationGroupFields
        {
            get => _notificationGroupFields ?? (_notificationGroupFields = new InputList<string>());
            set => _notificationGroupFields = value;
        }

        [Input("notifications")]
        private InputList<Inputs.MonitorNotificationGetArgs>? _notifications;

        /// <summary>
        /// The notifications the monitor will send when the respective trigger condition is met.
        /// </summary>
        public InputList<Inputs.MonitorNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.MonitorNotificationGetArgs>());
            set => _notifications = value;
        }

        [Input("objPermissions")]
        private InputList<Inputs.MonitorObjPermissionGetArgs>? _objPermissions;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Monitor. A set of `obj_permission` constructs can be specified under a Monitor. An `obj_permission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Monitor and the FGP feature is enabled at the account.
        /// </summary>
        public InputList<Inputs.MonitorObjPermissionGetArgs> ObjPermissions
        {
            get => _objPermissions ?? (_objPermissions = new InputList<Inputs.MonitorObjPermissionGetArgs>());
            set => _objPermissions = value;
        }

        /// <summary>
        /// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
        /// </summary>
        [Input("playbook")]
        public Input<string>? Playbook { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        [Input("queries")]
        private InputList<Inputs.MonitorQueryGetArgs>? _queries;

        /// <summary>
        /// All queries from the monitor.
        /// </summary>
        public InputList<Inputs.MonitorQueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MonitorQueryGetArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// Identifier of the SLO definition for the monitor. This is only applicable &amp; required for Slo `monitor_type`.
        /// </summary>
        [Input("sloId")]
        public Input<string>? SloId { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The current status for this monitor. Values are:
        /// - `Critical`
        /// - `Warning`
        /// - `MissingData`
        /// - `Normal`
        /// - `Disabled`
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        /// <summary>
        /// Defines the conditions of when to send notifications. NOTE: `trigger_conditions` supplants the `triggers` argument.
        /// </summary>
        [Input("triggerConditions")]
        public Input<Inputs.MonitorTriggerConditionsGetArgs>? TriggerConditions { get; set; }

        [Input("triggers")]
        private InputList<Inputs.MonitorTriggerGetArgs>? _triggers;

        /// <summary>
        /// Defines the conditions of when to send notifications.
        /// </summary>
        [Obsolete(@"The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `trigger_conditions` instead.")]
        public InputList<Inputs.MonitorTriggerGetArgs> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<Inputs.MonitorTriggerGetArgs>());
            set => _triggers = value;
        }

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryMonitor`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorState()
        {
        }
        public static new MonitorState Empty => new MonitorState();
    }
}
