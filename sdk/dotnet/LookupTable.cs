// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Lookup Table](https://help.sumologic.com/05Search/Lookup_Tables).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var lookupTable = new SumoLogic.LookupTable("lookupTable", new()
    ///     {
    ///         Description = "some description",
    ///         Fields = new[]
    ///         {
    ///             new SumoLogic.Inputs.LookupTableFieldArgs
    ///             {
    ///                 FieldName = "FieldName1",
    ///                 FieldType = "boolean",
    ///             },
    ///             new SumoLogic.Inputs.LookupTableFieldArgs
    ///             {
    ///                 FieldName = "FieldName2",
    ///                 FieldType = "string",
    ///             },
    ///         },
    ///         ParentFolderId = "&lt;personal folder id&gt;",
    ///         PrimaryKeys = new[]
    ///         {
    ///             "FieldName1",
    ///         },
    ///         SizeLimitAction = "DeleteOldData",
    ///         Ttl = 100,
    ///     });
    /// 
    /// });
    /// ```
    /// ## Attributes reference
    /// 
    /// The following attributes are exported:
    /// 
    /// - `id` - Unique identifier for the partition.
    /// 
    /// ## Import
    /// 
    /// Lookup Tables can be imported using the id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/lookupTable:LookupTable test 1234567890
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/05Search/Lookup_Tables
    /// </summary>
    [SumoLogicResourceType("sumologic:index/lookupTable:LookupTable")]
    public partial class LookupTable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the lookup table.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The list of fields in the lookup table.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.LookupTableField>> Fields { get; private set; } = null!;

        /// <summary>
        /// The name of the lookup table.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent-folder-path identifier of the lookup table in the Library.
        /// </summary>
        [Output("parentFolderId")]
        public Output<string?> ParentFolderId { get; private set; } = null!;

        /// <summary>
        /// The primary key field names.
        /// </summary>
        [Output("primaryKeys")]
        public Output<ImmutableArray<string>> PrimaryKeys { get; private set; } = null!;

        [Output("sizeLimitAction")]
        public Output<string?> SizeLimitAction { get; private set; } = null!;

        /// <summary>
        /// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a LookupTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LookupTable(string name, LookupTableArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/lookupTable:LookupTable", name, args ?? new LookupTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LookupTable(string name, Input<string> id, LookupTableState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/lookupTable:LookupTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LookupTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LookupTable Get(string name, Input<string> id, LookupTableState? state = null, CustomResourceOptions? options = null)
        {
            return new LookupTable(name, id, state, options);
        }
    }

    public sealed class LookupTableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the lookup table.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("fields")]
        private InputList<Inputs.LookupTableFieldArgs>? _fields;

        /// <summary>
        /// The list of fields in the lookup table.
        /// </summary>
        public InputList<Inputs.LookupTableFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.LookupTableFieldArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the lookup table.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent-folder-path identifier of the lookup table in the Library.
        /// </summary>
        [Input("parentFolderId")]
        public Input<string>? ParentFolderId { get; set; }

        [Input("primaryKeys")]
        private InputList<string>? _primaryKeys;

        /// <summary>
        /// The primary key field names.
        /// </summary>
        public InputList<string> PrimaryKeys
        {
            get => _primaryKeys ?? (_primaryKeys = new InputList<string>());
            set => _primaryKeys = value;
        }

        [Input("sizeLimitAction")]
        public Input<string>? SizeLimitAction { get; set; }

        /// <summary>
        /// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public LookupTableArgs()
        {
        }
        public static new LookupTableArgs Empty => new LookupTableArgs();
    }

    public sealed class LookupTableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the lookup table.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputList<Inputs.LookupTableFieldGetArgs>? _fields;

        /// <summary>
        /// The list of fields in the lookup table.
        /// </summary>
        public InputList<Inputs.LookupTableFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.LookupTableFieldGetArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the lookup table.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent-folder-path identifier of the lookup table in the Library.
        /// </summary>
        [Input("parentFolderId")]
        public Input<string>? ParentFolderId { get; set; }

        [Input("primaryKeys")]
        private InputList<string>? _primaryKeys;

        /// <summary>
        /// The primary key field names.
        /// </summary>
        public InputList<string> PrimaryKeys
        {
            get => _primaryKeys ?? (_primaryKeys = new InputList<string>());
            set => _primaryKeys = value;
        }

        [Input("sizeLimitAction")]
        public Input<string>? SizeLimitAction { get; set; }

        /// <summary>
        /// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public LookupTableState()
        {
        }
        public static new LookupTableState Empty => new LookupTableState();
    }
}
