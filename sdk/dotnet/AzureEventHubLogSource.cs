// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Azure Event Hub Log Source](https://help.sumologic.com/docs/send-data/collect-from-other-data-sources/azure-monitoring/ms-azure-event-hubs-source/).
    /// 
    /// __IMPORTANT:__ The Azure Event Hub credentials are stored in plain-text in the state. This is a potential security issue.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Name = "my-collector",
    ///         Description = "Just testing this",
    ///     });
    /// 
    ///     var terraformAzureEventHubLogSource = new SumoLogic.AzureEventHubLogSource("terraform_azure_event_hub_log_source", new()
    ///     {
    ///         Name = "Azure Event Hub Log Source",
    ///         Description = "My description",
    ///         Category = "azure/eventhub",
    ///         ContentType = "AzureEventHubLog",
    ///         CollectorId = collector.Id,
    ///         Authentication = new SumoLogic.Inputs.AzureEventHubLogSourceAuthenticationArgs
    ///         {
    ///             Type = "AzureEventHubAuthentication",
    ///             SharedAccessPolicyName = "%s",
    ///             SharedAccessPolicyKey = "%s",
    ///         },
    ///         Path = new SumoLogic.Inputs.AzureEventHubLogSourcePathArgs
    ///         {
    ///             Type = "AzureEventHubPath",
    ///             Namespace = "%s",
    ///             EventHubName = "%s",
    ///             ConsumerGroup = "%s",
    ///             Region = "%s",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/azureEventHubLogSource:AzureEventHubLogSource")]
    public partial class AzureEventHubLogSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication details for connecting to Azure Event Hub.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.AzureEventHubLogSourceAuthentication> Authentication { get; private set; } = null!;

        [Output("automaticDateParsing")]
        public Output<bool?> AutomaticDateParsing { get; private set; } = null!;

        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        [Output("collectorId")]
        public Output<int> CollectorId { get; private set; } = null!;

        /// <summary>
        /// Must be `AzureEventHubLog`.
        /// </summary>
        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("cutoffRelativeTime")]
        public Output<string?> CutoffRelativeTime { get; private set; } = null!;

        [Output("cutoffTimestamp")]
        public Output<int?> CutoffTimestamp { get; private set; } = null!;

        [Output("defaultDateFormats")]
        public Output<ImmutableArray<Outputs.AzureEventHubLogSourceDefaultDateFormat>> DefaultDateFormats { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableDictionary<string, string>?> Fields { get; private set; } = null!;

        [Output("filters")]
        public Output<ImmutableArray<Outputs.AzureEventHubLogSourceFilter>> Filters { get; private set; } = null!;

        [Output("forceTimezone")]
        public Output<bool?> ForceTimezone { get; private set; } = null!;

        [Output("hashAlgorithm")]
        public Output<string?> HashAlgorithm { get; private set; } = null!;

        [Output("hostName")]
        public Output<string?> HostName { get; private set; } = null!;

        [Output("manualPrefixRegexp")]
        public Output<string?> ManualPrefixRegexp { get; private set; } = null!;

        [Output("multilineProcessingEnabled")]
        public Output<bool?> MultilineProcessingEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Output("path")]
        public Output<Outputs.AzureEventHubLogSourcePath> Path { get; private set; } = null!;

        [Output("paused")]
        public Output<bool?> Paused { get; private set; } = null!;

        [Output("scanInterval")]
        public Output<int?> ScanInterval { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("useAutolineMatching")]
        public Output<bool?> UseAutolineMatching { get; private set; } = null!;


        /// <summary>
        /// Create a AzureEventHubLogSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureEventHubLogSource(string name, AzureEventHubLogSourceArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/azureEventHubLogSource:AzureEventHubLogSource", name, args ?? new AzureEventHubLogSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureEventHubLogSource(string name, Input<string> id, AzureEventHubLogSourceState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/azureEventHubLogSource:AzureEventHubLogSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureEventHubLogSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureEventHubLogSource Get(string name, Input<string> id, AzureEventHubLogSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureEventHubLogSource(name, id, state, options);
        }
    }

    public sealed class AzureEventHubLogSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication details for connecting to Azure Event Hub.
        /// </summary>
        [Input("authentication", required: true)]
        public Input<Inputs.AzureEventHubLogSourceAuthenticationArgs> Authentication { get; set; } = null!;

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId", required: true)]
        public Input<int> CollectorId { get; set; } = null!;

        /// <summary>
        /// Must be `AzureEventHubLog`.
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatArgs>? _defaultDateFormats;
        public InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AzureEventHubLogSourceFilterArgs>? _filters;
        public InputList<Inputs.AzureEventHubLogSourceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AzureEventHubLogSourceFilterArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hashAlgorithm")]
        public Input<string>? HashAlgorithm { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Input("path", required: true)]
        public Input<Inputs.AzureEventHubLogSourcePathArgs> Path { get; set; } = null!;

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AzureEventHubLogSourceArgs()
        {
        }
        public static new AzureEventHubLogSourceArgs Empty => new AzureEventHubLogSourceArgs();
    }

    public sealed class AzureEventHubLogSourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication details for connecting to Azure Event Hub.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.AzureEventHubLogSourceAuthenticationGetArgs>? Authentication { get; set; }

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        /// <summary>
        /// Must be `AzureEventHubLog`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatGetArgs>? _defaultDateFormats;
        public InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatGetArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AzureEventHubLogSourceDefaultDateFormatGetArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AzureEventHubLogSourceFilterGetArgs>? _filters;
        public InputList<Inputs.AzureEventHubLogSourceFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AzureEventHubLogSourceFilterGetArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hashAlgorithm")]
        public Input<string>? HashAlgorithm { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Input("path")]
        public Input<Inputs.AzureEventHubLogSourcePathGetArgs>? Path { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AzureEventHubLogSourceState()
        {
        }
        public static new AzureEventHubLogSourceState Empty => new AzureEventHubLogSourceState();
    }
}
