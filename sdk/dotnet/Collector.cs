// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic (Hosted) Collector][1].
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Description = "Just testing this",
    ///         Fields = 
    ///         {
    ///             { "environment", "production" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Collectors can be imported using the collector id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/collector:Collector test 1234567890
    /// ```
    /// 
    ///  Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/collector:Collector test my_test_collector
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Send_Data/Hosted_Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields
    /// </summary>
    [SumoLogicResourceType("sumologic:index/collector:Collector")]
    public partial class Collector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        /// <summary>
        /// The description of the collector.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// </summary>
        [Output("fields")]
        public Output<ImmutableDictionary<string, string>?> Fields { get; private set; } = null!;

        /// <summary>
        /// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Collector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Collector(string name, CollectorArgs? args = null, CustomResourceOptions? options = null)
            : base("sumologic:index/collector:Collector", name, args ?? new CollectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Collector(string name, Input<string> id, CollectorState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/collector:Collector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Collector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Collector Get(string name, Input<string> id, CollectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Collector(name, id, state, options);
        }
    }

    public sealed class CollectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The description of the collector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// </summary>
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public CollectorArgs()
        {
        }
        public static new CollectorArgs Empty => new CollectorArgs();
    }

    public sealed class CollectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The description of the collector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// </summary>
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public CollectorState()
        {
        }
        public static new CollectorState Empty => new CollectorState();
    }
}
