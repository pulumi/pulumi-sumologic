// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    public static class GetRoleV2
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetRoleV2.Invoke(new()
        ///     {
        ///         Name = "MyRole",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetRoleV2.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// 
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the role. This can be used to create users having that role.
        /// - `name` - The name of the role.
        /// - `description` - The description of the role.
        /// - `capabilities` - The list of capabilities associated with the role.
        /// - `selected_views` - List of views with specific view level filters in accordance to the selectionType chosen.
        /// - `audit_data_filter` - The search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/). Applicable with only `All` selectionType
        /// - `security_data_filter` - The search filter which would be applied on partitions which belong to Security Data product area. Applicable with only `All` selectionType.
        /// - `log_analytics_filter` - The search filter which would be applied on partitions which belong to Log Analytics product area. Applicable with only `All` selectionType
        /// - `selection_type` - Describes the Permission Construct for the list of views in "selectedViews" parameter.
        /// ### Values in selection type are : 
        ///   - `All` selectionType would allow access to all views in the org.
        ///   - `Allow` selectionType would allow access to specific views mentioned in "selectedViews" parameter.
        ///   - `Deny` selectionType would deny access to specific views mentioned in "selectedViews" parameter.
        /// </summary>
        public static Task<GetRoleV2Result> InvokeAsync(GetRoleV2Args? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleV2Result>("sumologic:index/getRoleV2:getRoleV2", args ?? new GetRoleV2Args(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetRoleV2.Invoke(new()
        ///     {
        ///         Name = "MyRole",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetRoleV2.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// 
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the role. This can be used to create users having that role.
        /// - `name` - The name of the role.
        /// - `description` - The description of the role.
        /// - `capabilities` - The list of capabilities associated with the role.
        /// - `selected_views` - List of views with specific view level filters in accordance to the selectionType chosen.
        /// - `audit_data_filter` - The search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/). Applicable with only `All` selectionType
        /// - `security_data_filter` - The search filter which would be applied on partitions which belong to Security Data product area. Applicable with only `All` selectionType.
        /// - `log_analytics_filter` - The search filter which would be applied on partitions which belong to Log Analytics product area. Applicable with only `All` selectionType
        /// - `selection_type` - Describes the Permission Construct for the list of views in "selectedViews" parameter.
        /// ### Values in selection type are : 
        ///   - `All` selectionType would allow access to all views in the org.
        ///   - `Allow` selectionType would allow access to specific views mentioned in "selectedViews" parameter.
        ///   - `Deny` selectionType would deny access to specific views mentioned in "selectedViews" parameter.
        /// </summary>
        public static Output<GetRoleV2Result> Invoke(GetRoleV2InvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleV2Result>("sumologic:index/getRoleV2:getRoleV2", args ?? new GetRoleV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleV2Args : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetRoleV2Args()
        {
        }
        public static new GetRoleV2Args Empty => new GetRoleV2Args();
    }

    public sealed class GetRoleV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetRoleV2InvokeArgs()
        {
        }
        public static new GetRoleV2InvokeArgs Empty => new GetRoleV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleV2Result
    {
        public readonly string AuditDataFilter;
        public readonly ImmutableArray<string> Capabilities;
        public readonly string Description;
        public readonly string Id;
        public readonly string LogAnalyticsFilter;
        public readonly string Name;
        public readonly string SecurityDataFilter;
        public readonly ImmutableArray<Outputs.GetRoleV2SelectedViewResult> SelectedViews;
        public readonly string SelectionType;

        [OutputConstructor]
        private GetRoleV2Result(
            string auditDataFilter,

            ImmutableArray<string> capabilities,

            string description,

            string id,

            string logAnalyticsFilter,

            string name,

            string securityDataFilter,

            ImmutableArray<Outputs.GetRoleV2SelectedViewResult> selectedViews,

            string selectionType)
        {
            AuditDataFilter = auditDataFilter;
            Capabilities = capabilities;
            Description = description;
            Id = id;
            LogAnalyticsFilter = logAnalyticsFilter;
            Name = name;
            SecurityDataFilter = securityDataFilter;
            SelectedViews = selectedViews;
            SelectionType = selectionType;
        }
    }
}
