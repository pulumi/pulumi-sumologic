// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Cloud-to-Cloud source][1].
    /// 
    /// ## Supported Integrations
    /// 
    /// List of available integrations along with their corresponding `JSON` templates is present [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations)
    /// 
    /// __IMPORTANT:__ The API credentials are stored in plain-text in the state. This is a potential security issue.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Description = "Just testing this",
    ///     });
    /// 
    ///     var oktaSource = new SumoLogic.CloudToCloudSource("oktaSource", new()
    ///     {
    ///         CollectorId = collector.Id,
    ///         SchemaRef = 
    ///         {
    ///             { "type", "Okta" },
    ///         },
    ///         Config = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["name"] = "okta source",
    ///             ["domain"] = "dev-xxx-admin.okta.com",
    ///             ["collectAll"] = true,
    ///             ["apiKey"] = "xxx",
    ///             ["fields"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["_siemForward"] = false,
    ///             },
    ///             ["pollingInterval"] = 30,
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cloud-to-Cloud sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test 100000001/100000001
    /// ```
    /// 
    ///  Cloud-to-Cloud sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cloudToCloudSource:CloudToCloudSource test my-test-collector/my-test-source
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-to-Cloud_Integration_Framework#Integrations
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cloudToCloudSource:CloudToCloudSource")]
    public partial class CloudToCloudSource : global::Pulumi.CustomResource
    {
        [Output("collectorId")]
        public Output<int> CollectorId { get; private set; } = null!;

        /// <summary>
        /// This is a JSON object which contains the configuration parameters for the Source.
        /// </summary>
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        /// <summary>
        /// Source schema details.
        /// </summary>
        [Output("schemaRef")]
        public Output<ImmutableDictionary<string, string>> SchemaRef { get; private set; } = null!;


        /// <summary>
        /// Create a CloudToCloudSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudToCloudSource(string name, CloudToCloudSourceArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cloudToCloudSource:CloudToCloudSource", name, args ?? new CloudToCloudSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudToCloudSource(string name, Input<string> id, CloudToCloudSourceState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cloudToCloudSource:CloudToCloudSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudToCloudSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudToCloudSource Get(string name, Input<string> id, CloudToCloudSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudToCloudSource(name, id, state, options);
        }
    }

    public sealed class CloudToCloudSourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("collectorId", required: true)]
        public Input<int> CollectorId { get; set; } = null!;

        /// <summary>
        /// This is a JSON object which contains the configuration parameters for the Source.
        /// </summary>
        [Input("config", required: true)]
        public Input<string> Config { get; set; } = null!;

        [Input("schemaRef", required: true)]
        private InputMap<string>? _schemaRef;

        /// <summary>
        /// Source schema details.
        /// </summary>
        public InputMap<string> SchemaRef
        {
            get => _schemaRef ?? (_schemaRef = new InputMap<string>());
            set => _schemaRef = value;
        }

        public CloudToCloudSourceArgs()
        {
        }
        public static new CloudToCloudSourceArgs Empty => new CloudToCloudSourceArgs();
    }

    public sealed class CloudToCloudSourceState : global::Pulumi.ResourceArgs
    {
        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        /// <summary>
        /// This is a JSON object which contains the configuration parameters for the Source.
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        [Input("schemaRef")]
        private InputMap<string>? _schemaRef;

        /// <summary>
        /// Source schema details.
        /// </summary>
        public InputMap<string> SchemaRef
        {
            get => _schemaRef ?? (_schemaRef = new InputMap<string>());
            set => _schemaRef = value;
        }

        public CloudToCloudSourceState()
        {
        }
        public static new CloudToCloudSourceState Empty => new CloudToCloudSourceState();
    }
}
