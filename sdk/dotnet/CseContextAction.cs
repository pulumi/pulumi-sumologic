// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumologic CSE Context Action.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contextAction = new SumoLogic.CseContextAction("contextAction", new()
    ///     {
    ///         AllRecordFields = false,
    ///         Enabled = true,
    ///         EntityTypes = new[]
    ///         {
    ///             "_hostname",
    ///         },
    ///         IocTypes = new[]
    ///         {
    ///             "IP_ADDRESS",
    ///         },
    ///         RecordFields = new[]
    ///         {
    ///             "request_url",
    ///         },
    ///         Template = "https://bar.com/?q={{value}}",
    ///         Type = "URL",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Context Action can be imported using the field id, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/cseContextAction:CseContextAction context_action id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseContextAction:CseContextAction")]
    public partial class CseContextAction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Use all record fields.
        /// </summary>
        [Output("allRecordFields")]
        public Output<bool?> AllRecordFields { get; private set; } = null!;

        /// <summary>
        /// Whether the context action is enabled.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Applicable to given entity types.
        /// </summary>
        [Output("entityTypes")]
        public Output<ImmutableArray<string>> EntityTypes { get; private set; } = null!;

        /// <summary>
        /// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
        /// </summary>
        [Output("iocTypes")]
        public Output<ImmutableArray<string>> IocTypes { get; private set; } = null!;

        /// <summary>
        /// Context Action name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specific record fields.
        /// </summary>
        [Output("recordFields")]
        public Output<ImmutableArray<string>> RecordFields { get; private set; } = null!;

        /// <summary>
        /// The URL/QUERY template.
        /// </summary>
        [Output("template")]
        public Output<string?> Template { get; private set; } = null!;

        /// <summary>
        /// Context Action type. Valid values: "URL", "QUERY".
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CseContextAction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseContextAction(string name, CseContextActionArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseContextAction:CseContextAction", name, args ?? new CseContextActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseContextAction(string name, Input<string> id, CseContextActionState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseContextAction:CseContextAction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseContextAction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseContextAction Get(string name, Input<string> id, CseContextActionState? state = null, CustomResourceOptions? options = null)
        {
            return new CseContextAction(name, id, state, options);
        }
    }

    public sealed class CseContextActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use all record fields.
        /// </summary>
        [Input("allRecordFields")]
        public Input<bool>? AllRecordFields { get; set; }

        /// <summary>
        /// Whether the context action is enabled.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entityTypes")]
        private InputList<string>? _entityTypes;

        /// <summary>
        /// Applicable to given entity types.
        /// </summary>
        public InputList<string> EntityTypes
        {
            get => _entityTypes ?? (_entityTypes = new InputList<string>());
            set => _entityTypes = value;
        }

        [Input("iocTypes", required: true)]
        private InputList<string>? _iocTypes;

        /// <summary>
        /// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
        /// </summary>
        public InputList<string> IocTypes
        {
            get => _iocTypes ?? (_iocTypes = new InputList<string>());
            set => _iocTypes = value;
        }

        /// <summary>
        /// Context Action name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recordFields")]
        private InputList<string>? _recordFields;

        /// <summary>
        /// Specific record fields.
        /// </summary>
        public InputList<string> RecordFields
        {
            get => _recordFields ?? (_recordFields = new InputList<string>());
            set => _recordFields = value;
        }

        /// <summary>
        /// The URL/QUERY template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// Context Action type. Valid values: "URL", "QUERY".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CseContextActionArgs()
        {
        }
        public static new CseContextActionArgs Empty => new CseContextActionArgs();
    }

    public sealed class CseContextActionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Use all record fields.
        /// </summary>
        [Input("allRecordFields")]
        public Input<bool>? AllRecordFields { get; set; }

        /// <summary>
        /// Whether the context action is enabled.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entityTypes")]
        private InputList<string>? _entityTypes;

        /// <summary>
        /// Applicable to given entity types.
        /// </summary>
        public InputList<string> EntityTypes
        {
            get => _entityTypes ?? (_entityTypes = new InputList<string>());
            set => _entityTypes = value;
        }

        [Input("iocTypes")]
        private InputList<string>? _iocTypes;

        /// <summary>
        /// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
        /// </summary>
        public InputList<string> IocTypes
        {
            get => _iocTypes ?? (_iocTypes = new InputList<string>());
            set => _iocTypes = value;
        }

        /// <summary>
        /// Context Action name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("recordFields")]
        private InputList<string>? _recordFields;

        /// <summary>
        /// Specific record fields.
        /// </summary>
        public InputList<string> RecordFields
        {
            get => _recordFields ?? (_recordFields = new InputList<string>());
            set => _recordFields = value;
        }

        /// <summary>
        /// The URL/QUERY template.
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        /// <summary>
        /// Context Action type. Valid values: "URL", "QUERY".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CseContextActionState()
        {
        }
        public static new CseContextActionState Empty => new CseContextActionState();
    }
}
