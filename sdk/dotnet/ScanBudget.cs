// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Scan Budget](https://help.sumologic.com/docs/manage/manage-subscription/usage-management/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var budget = new SumoLogic.ScanBudget("budget", new()
    ///     {
    ///         Name = "TestBudget",
    ///         Capacity = 10,
    ///         Unit = "GB",
    ///         BudgetType = "ScanBudget",
    ///         Window = "Query",
    ///         ApplicableOn = "PerEntity",
    ///         GroupBy = "User",
    ///         Action = "StopScan",
    ///         Status = "active",
    ///         Scope = new SumoLogic.Inputs.ScanBudgetScopeArgs
    ///         {
    ///             IncludedUsers = new[]
    ///             {
    ///                 "000000000000011C",
    ///             },
    ///             ExcludedUsers = new() { },
    ///             IncludedRoles = new() { },
    ///             ExcludedRoles = new[]
    ///             {
    ///                 "0000000000000196",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Scan budgets can be imported using the budget ID, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/scanBudget:ScanBudget budget 00000000000123AB
    /// ```
    /// 
    /// [1]: https://help.sumologic.com/docs/manage/manage-subscription/usage-management/
    /// </summary>
    [SumoLogicResourceType("sumologic:index/scanBudget:ScanBudget")]
    public partial class ScanBudget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        /// </summary>
        [Output("applicableOn")]
        public Output<string> ApplicableOn { get; private set; } = null!;

        /// <summary>
        /// Type of the budget. Supported values are: `ScanBudget`.
        /// </summary>
        [Output("budgetType")]
        public Output<string> BudgetType { get; private set; } = null!;

        /// <summary>
        /// Capacity of the scan budget. Only whole numbers are supported.
        /// </summary>
        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// Grouping Entity of the budget. Supported values are: `User`.
        /// </summary>
        [Output("groupBy")]
        public Output<string> GroupBy { get; private set; } = null!;

        /// <summary>
        /// Display name of the scan budget. This must be unique across all the scan budgets.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Scope of the budget.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.ScanBudgetScope> Scope { get; private set; } = null!;

        /// <summary>
        /// Signifies the state of the budget. Supported values are: `active` and `inactive`.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        /// </summary>
        [Output("unit")]
        public Output<string> Unit { get; private set; } = null!;

        /// <summary>
        /// Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        /// </summary>
        [Output("window")]
        public Output<string> Window { get; private set; } = null!;


        /// <summary>
        /// Create a ScanBudget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScanBudget(string name, ScanBudgetArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/scanBudget:ScanBudget", name, args ?? new ScanBudgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScanBudget(string name, Input<string> id, ScanBudgetState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/scanBudget:ScanBudget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScanBudget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScanBudget Get(string name, Input<string> id, ScanBudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new ScanBudget(name, id, state, options);
        }
    }

    public sealed class ScanBudgetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        /// </summary>
        [Input("applicableOn", required: true)]
        public Input<string> ApplicableOn { get; set; } = null!;

        /// <summary>
        /// Type of the budget. Supported values are: `ScanBudget`.
        /// </summary>
        [Input("budgetType", required: true)]
        public Input<string> BudgetType { get; set; } = null!;

        /// <summary>
        /// Capacity of the scan budget. Only whole numbers are supported.
        /// </summary>
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        /// <summary>
        /// Grouping Entity of the budget. Supported values are: `User`.
        /// </summary>
        [Input("groupBy", required: true)]
        public Input<string> GroupBy { get; set; } = null!;

        /// <summary>
        /// Display name of the scan budget. This must be unique across all the scan budgets.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scope of the budget.
        /// </summary>
        [Input("scope", required: true)]
        public Input<Inputs.ScanBudgetScopeArgs> Scope { get; set; } = null!;

        /// <summary>
        /// Signifies the state of the budget. Supported values are: `active` and `inactive`.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        /// </summary>
        [Input("unit", required: true)]
        public Input<string> Unit { get; set; } = null!;

        /// <summary>
        /// Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        /// </summary>
        [Input("window", required: true)]
        public Input<string> Window { get; set; } = null!;

        public ScanBudgetArgs()
        {
        }
        public static new ScanBudgetArgs Empty => new ScanBudgetArgs();
    }

    public sealed class ScanBudgetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        /// </summary>
        [Input("applicableOn")]
        public Input<string>? ApplicableOn { get; set; }

        /// <summary>
        /// Type of the budget. Supported values are: `ScanBudget`.
        /// </summary>
        [Input("budgetType")]
        public Input<string>? BudgetType { get; set; }

        /// <summary>
        /// Capacity of the scan budget. Only whole numbers are supported.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Grouping Entity of the budget. Supported values are: `User`.
        /// </summary>
        [Input("groupBy")]
        public Input<string>? GroupBy { get; set; }

        /// <summary>
        /// Display name of the scan budget. This must be unique across all the scan budgets.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scope of the budget.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.ScanBudgetScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// Signifies the state of the budget. Supported values are: `active` and `inactive`.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        /// <summary>
        /// Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        /// </summary>
        [Input("window")]
        public Input<string>? Window { get; set; }

        public ScanBudgetState()
        {
        }
        public static new ScanBudgetState Empty => new ScanBudgetState();
    }
}
