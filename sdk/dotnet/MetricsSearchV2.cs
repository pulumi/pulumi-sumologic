// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Metrics Search V2][1].
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var personalFolder = SumoLogic.GetPersonalFolder.Invoke();
    /// 
    ///     var exampleMetricsSearch = new SumoLogic.MetricsSearchV2("example_metrics_search", new()
    ///     {
    ///         Title = "Demo Metrics Search",
    ///         Description = "Demo search description",
    ///         FolderId = personalFolder.Apply(getPersonalFolderResult =&gt; getPersonalFolderResult.Id),
    ///         Queries = new[]
    ///         {
    ///             new SumoLogic.Inputs.MetricsSearchV2QueryArgs
    ///             {
    ///                 QueryKey = "A",
    ///                 QueryString = "metric=cpu_idle | avg",
    ///                 QueryType = "Metrics",
    ///                 MetricsQueryMode = "Advanced",
    ///             },
    ///         },
    ///         TimeRange = new SumoLogic.Inputs.MetricsSearchV2TimeRangeArgs
    ///         {
    ///             BeginBoundedTimeRange = new SumoLogic.Inputs.MetricsSearchV2TimeRangeBeginBoundedTimeRangeArgs
    ///             {
    ///                 From = new SumoLogic.Inputs.MetricsSearchV2TimeRangeBeginBoundedTimeRangeFromArgs
    ///                 {
    ///                     RelativeTimeRange = new SumoLogic.Inputs.MetricsSearchV2TimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs
    ///                     {
    ///                         RelativeTime = "-30m",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Attributes reference
    /// 
    /// In addition to all arguments above, the following attributes are exported:
    /// 
    /// - `id` - The ID of the metrics search.
    /// 
    /// ## Import
    /// 
    /// A metrics search can be imported using it's identifier, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/metricsSearchV2:MetricsSearchV2 example_search 0000000007FFD79D
    /// ```
    /// 
    /// [1]: https://help.sumologic.com/docs/metrics/metrics-queries/metrics-explorer/
    /// </summary>
    [SumoLogicResourceType("sumologic:index/metricsSearchV2:MetricsSearchV2")]
    public partial class MetricsSearchV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the search.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The identifier of the folder to create the metrics search in.
        /// </summary>
        [Output("folderId")]
        public Output<string?> FolderId { get; private set; } = null!;

        /// <summary>
        /// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        /// </summary>
        [Output("queries")]
        public Output<ImmutableArray<Outputs.MetricsSearchV2Query>> Queries { get; private set; } = null!;

        /// <summary>
        /// Time range of the metrics search. See time range schema
        /// </summary>
        [Output("timeRange")]
        public Output<Outputs.MetricsSearchV2TimeRange> TimeRange { get; private set; } = null!;

        /// <summary>
        /// Title of the search.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        [Output("visualSettings")]
        public Output<string?> VisualSettings { get; private set; } = null!;


        /// <summary>
        /// Create a MetricsSearchV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricsSearchV2(string name, MetricsSearchV2Args args, CustomResourceOptions? options = null)
            : base("sumologic:index/metricsSearchV2:MetricsSearchV2", name, args ?? new MetricsSearchV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private MetricsSearchV2(string name, Input<string> id, MetricsSearchV2State? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/metricsSearchV2:MetricsSearchV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricsSearchV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricsSearchV2 Get(string name, Input<string> id, MetricsSearchV2State? state = null, CustomResourceOptions? options = null)
        {
            return new MetricsSearchV2(name, id, state, options);
        }
    }

    public sealed class MetricsSearchV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the search.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The identifier of the folder to create the metrics search in.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("queries", required: true)]
        private InputList<Inputs.MetricsSearchV2QueryArgs>? _queries;

        /// <summary>
        /// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        /// </summary>
        public InputList<Inputs.MetricsSearchV2QueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MetricsSearchV2QueryArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// Time range of the metrics search. See time range schema
        /// </summary>
        [Input("timeRange", required: true)]
        public Input<Inputs.MetricsSearchV2TimeRangeArgs> TimeRange { get; set; } = null!;

        /// <summary>
        /// Title of the search.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("visualSettings")]
        public Input<string>? VisualSettings { get; set; }

        public MetricsSearchV2Args()
        {
        }
        public static new MetricsSearchV2Args Empty => new MetricsSearchV2Args();
    }

    public sealed class MetricsSearchV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the search.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The identifier of the folder to create the metrics search in.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("queries")]
        private InputList<Inputs.MetricsSearchV2QueryGetArgs>? _queries;

        /// <summary>
        /// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        /// </summary>
        public InputList<Inputs.MetricsSearchV2QueryGetArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MetricsSearchV2QueryGetArgs>());
            set => _queries = value;
        }

        /// <summary>
        /// Time range of the metrics search. See time range schema
        /// </summary>
        [Input("timeRange")]
        public Input<Inputs.MetricsSearchV2TimeRangeGetArgs>? TimeRange { get; set; }

        /// <summary>
        /// Title of the search.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("visualSettings")]
        public Input<string>? VisualSettings { get; set; }

        public MetricsSearchV2State()
        {
        }
        public static new MetricsSearchV2State Empty => new MetricsSearchV2State();
    }
}
