// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides the ability to create, read, delete, and update [MutingSchedule](https://help.sumologic.com/docs/alerts/monitors/muting-schedules/).
    /// 
    /// ## Example One-Time Muting Schedule From 12AM to 1AM on 2023-08-05 for All Monitors
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mutingSchedule = new SumoLogic.MutingSchedule("muting_schedule", new()
    ///     {
    ///         Name = "One-Time Schedule for All Monitors",
    ///         Type = "MutingSchedulesLibraryMutingSchedule",
    ///         ContentType = "MutingSchedule",
    ///         Monitor = new SumoLogic.Inputs.MutingScheduleMonitorArgs
    ///         {
    ///             All = true,
    ///         },
    ///         Schedule = new SumoLogic.Inputs.MutingScheduleScheduleArgs
    ///         {
    ///             Timezone = "America/Los_Angeles",
    ///             StartDate = "2023-08-05",
    ///             StartTime = "00:00",
    ///             Duration = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example Daily Muting Schedule From 9AM to 10AM and 5PM to 6PM Starting On 2023-08-05 for a Monitor or Folder
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mutingSchedule = new SumoLogic.MutingSchedule("muting_schedule", new()
    ///     {
    ///         Name = "Daily schedule at 9am and 5pm for 30 minutes for all monitors",
    ///         Type = "MutingSchedulesLibraryMutingSchedule",
    ///         ContentType = "MutingSchedule",
    ///         Monitor = new SumoLogic.Inputs.MutingScheduleMonitorArgs
    ///         {
    ///             Ids = new[]
    ///             {
    ///                 "0000000000000002",
    ///             },
    ///         },
    ///         Schedule = new SumoLogic.Inputs.MutingScheduleScheduleArgs
    ///         {
    ///             Timezone = "America/Los_Angeles",
    ///             StartDate = "2023-08-05",
    ///             StartTime = "00:00",
    ///             Duration = 60,
    ///             Rrule = "FREQ=DAILY;INTERVAL=1;BYHOUR=9,17",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Example Muting Schedule for an Alert Group on All Monitors Every 3rd Saturday from 12AM to 1AM
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mutingSchedule = new SumoLogic.MutingSchedule("muting_schedule", new()
    ///     {
    ///         Name = "Muting alerts from us-east-1 every 3rd saturday from 12AM to 1AM",
    ///         Type = "MutingSchedulesLibraryMutingSchedule",
    ///         ContentType = "MutingSchedule",
    ///         Monitor = new SumoLogic.Inputs.MutingScheduleMonitorArgs
    ///         {
    ///             All = true,
    ///         },
    ///         NotificationGroups = new[]
    ///         {
    ///             new SumoLogic.Inputs.MutingScheduleNotificationGroupArgs
    ///             {
    ///                 GroupKey = "region",
    ///                 GroupValues = new[]
    ///                 {
    ///                     "us-east-1",
    ///                 },
    ///             },
    ///         },
    ///         Schedule = new SumoLogic.Inputs.MutingScheduleScheduleArgs
    ///         {
    ///             Timezone = "America/Los_Angeles",
    ///             StartDate = "2023-08-05",
    ///             StartTime = "00:00",
    ///             Duration = 60,
    ///             Rrule = "FREQ=MONTHLY;INTERVAL=1;BYDAY=+3SA",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/mutingSchedule:MutingSchedule")]
    public partial class MutingSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of the content object. Valid value: `MutingSchedule`
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of the muting schedule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("isMutable")]
        public Output<bool> IsMutable { get; private set; } = null!;

        [Output("isSystem")]
        public Output<bool> IsSystem { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// Monitor scope that the schedule applies to. See `Monitor Scope` for more details.
        /// </summary>
        [Output("monitor")]
        public Output<Outputs.MutingScheduleMonitor?> Monitor { get; private set; } = null!;

        /// <summary>
        /// Name of the muting schedule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Alert group scope that the schedule applies to. See `Group Scope` for more details.
        /// </summary>
        [Output("notificationGroups")]
        public Output<ImmutableArray<Outputs.MutingScheduleNotificationGroup>> NotificationGroups { get; private set; } = null!;

        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// Schedule definition. See `Schedule Definition` for more details.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.MutingScheduleSchedule> Schedule { get; private set; } = null!;

        /// <summary>
        /// The type of object model. Valid value: `MutingSchedulesLibraryMutingSchedule`
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a MutingSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MutingSchedule(string name, MutingScheduleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/mutingSchedule:MutingSchedule", name, args ?? new MutingScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MutingSchedule(string name, Input<string> id, MutingScheduleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/mutingSchedule:MutingSchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MutingSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MutingSchedule Get(string name, Input<string> id, MutingScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new MutingSchedule(name, id, state, options);
        }
    }

    public sealed class MutingScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the content object. Valid value: `MutingSchedule`
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the muting schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// Monitor scope that the schedule applies to. See `Monitor Scope` for more details.
        /// </summary>
        [Input("monitor")]
        public Input<Inputs.MutingScheduleMonitorArgs>? Monitor { get; set; }

        /// <summary>
        /// Name of the muting schedule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationGroups")]
        private InputList<Inputs.MutingScheduleNotificationGroupArgs>? _notificationGroups;

        /// <summary>
        /// Alert group scope that the schedule applies to. See `Group Scope` for more details.
        /// </summary>
        public InputList<Inputs.MutingScheduleNotificationGroupArgs> NotificationGroups
        {
            get => _notificationGroups ?? (_notificationGroups = new InputList<Inputs.MutingScheduleNotificationGroupArgs>());
            set => _notificationGroups = value;
        }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Schedule definition. See `Schedule Definition` for more details.
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.MutingScheduleScheduleArgs> Schedule { get; set; } = null!;

        /// <summary>
        /// The type of object model. Valid value: `MutingSchedulesLibraryMutingSchedule`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MutingScheduleArgs()
        {
        }
        public static new MutingScheduleArgs Empty => new MutingScheduleArgs();
    }

    public sealed class MutingScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of the content object. Valid value: `MutingSchedule`
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the muting schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// Monitor scope that the schedule applies to. See `Monitor Scope` for more details.
        /// </summary>
        [Input("monitor")]
        public Input<Inputs.MutingScheduleMonitorGetArgs>? Monitor { get; set; }

        /// <summary>
        /// Name of the muting schedule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationGroups")]
        private InputList<Inputs.MutingScheduleNotificationGroupGetArgs>? _notificationGroups;

        /// <summary>
        /// Alert group scope that the schedule applies to. See `Group Scope` for more details.
        /// </summary>
        public InputList<Inputs.MutingScheduleNotificationGroupGetArgs> NotificationGroups
        {
            get => _notificationGroups ?? (_notificationGroups = new InputList<Inputs.MutingScheduleNotificationGroupGetArgs>());
            set => _notificationGroups = value;
        }

        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Schedule definition. See `Schedule Definition` for more details.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.MutingScheduleScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// The type of object model. Valid value: `MutingSchedulesLibraryMutingSchedule`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MutingScheduleState()
        {
        }
        public static new MutingScheduleState Empty => new MutingScheduleState();
    }
}
