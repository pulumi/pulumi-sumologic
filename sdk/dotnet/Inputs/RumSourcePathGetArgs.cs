// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic.Inputs
{

    public sealed class RumSourcePathGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a "default" application.
        /// </summary>
        [Input("applicationName")]
        public Input<string>? ApplicationName { get; set; }

        [Input("customTags")]
        private InputMap<string>? _customTags;

        /// <summary>
        /// Defines custom tags attached to the spans. For example: "internal.version = 0.1.21"
        /// </summary>
        public InputMap<string> CustomTags
        {
            get => _customTags ?? (_customTags = new InputMap<string>());
            set => _customTags = value;
        }

        /// <summary>
        /// Your production, staging, or development environment name.
        /// </summary>
        [Input("deploymentEnvironment")]
        public Input<string>? DeploymentEnvironment { get; set; }

        [Input("ignoreUrls")]
        private InputList<string>? _ignoreUrls;

        /// <summary>
        /// Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: "/^https:\/\/www.tracker.com\/.*/, /^https:\/\/api.mydomain.com\/log\/.*/"
        /// </summary>
        public InputList<string> IgnoreUrls
        {
            get => _ignoreUrls ?? (_ignoreUrls = new InputList<string>());
            set => _ignoreUrls = value;
        }

        [Input("propagateTraceHeaderCorsUrls")]
        private InputList<string>? _propagateTraceHeaderCorsUrls;

        /// <summary>
        /// (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are "/^https:\/\/api.mydomain.com\/apiv3\/.*/" and "/^https:\/\/www.3rdparty.com\/.*/".
        /// </summary>
        public InputList<string> PropagateTraceHeaderCorsUrls
        {
            get => _propagateTraceHeaderCorsUrls ?? (_propagateTraceHeaderCorsUrls = new InputList<string>());
            set => _propagateTraceHeaderCorsUrls = value;
        }

        /// <summary>
        /// Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
        /// </summary>
        [Input("samplingRate")]
        public Input<double>? SamplingRate { get; set; }

        /// <summary>
        /// Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
        /// </summary>
        [Input("selectedCountry")]
        public Input<string>? SelectedCountry { get; set; }

        /// <summary>
        /// Add a Service Name of a text string to show for the service name in spans (for example, "bookings-web-app").
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public RumSourcePathGetArgs()
        {
        }
        public static new RumSourcePathGetArgs Empty => new RumSourcePathGetArgs();
    }
}
