// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic HTTP source](https://help.sumologic.com/docs/send-data/hosted-collectors/http-source/logs-metrics), [Sumologic HTTP Traces source](https://help.sumologic.com/docs/apm/traces/get-started-transaction-tracing/http-traces-source/), [Sumologic Kinesis Log source](https://help.sumologic.com/docs/send-data/hosted-collectors/amazon-aws/aws-kinesis-firehose-logs-source/), [Sumologic HTTP_OTLP_source][4] and [Sumologic RUM source](https://help.sumologic.com/docs/apm/real-user-monitoring/#step-1-create-a-rum-http-traces-source). To start using Traces contact your Sumo account representative to activate.
    /// 
    /// __IMPORTANT:__ The endpoint is stored in plain-text in the state. This is a potential security issue.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Description = "Just testing this",
    ///     });
    /// 
    ///     var httpSource = new SumoLogic.HttpSource("httpSource", new()
    ///     {
    ///         Category = "my/source/category",
    ///         CollectorId = collector.Id,
    ///         Description = "My description",
    ///         Filters = new[]
    ///         {
    ///             new SumoLogic.Inputs.HttpSourceFilterArgs
    ///             {
    ///                 FilterType = "Exclude",
    ///                 Name = "Test Exclude Debug",
    ///                 Regexp = ".*DEBUG.*",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var httpTracesSource = new SumoLogic.HttpSource("httpTracesSource", new()
    ///     {
    ///         Category = "my/source/category",
    ///         CollectorId = collector.Id,
    ///         ContentType = "Zipkin",
    ///         Description = "My description",
    ///     });
    /// 
    ///     var kinesisLog = new SumoLogic.HttpSource("kinesisLog", new()
    ///     {
    ///         Category = "demo-category",
    ///         CollectorId = sumologic_collector.Test.Id,
    ///         ContentType = "KinesisLog",
    ///         Description = "demo-desc",
    ///     });
    /// 
    ///     var httpOtlpSource = new SumoLogic.HttpSource("httpOtlpSource", new()
    ///     {
    ///         Category = "my/source/category",
    ///         CollectorId = sumologic_collector.Test.Id,
    ///         ContentType = "Otlp",
    ///         Description = "My description",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// HTTP sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/httpSource:HttpSource test 123/456
    /// ```
    /// 
    ///  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/httpSource:HttpSource test my-test-collector/my-test-source
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/docs/send-data/hosted-collectors/http-source/logs-metrics [2]https://help.sumologic.com/docs/apm/traces/get-started-transaction-tracing/http-traces-source/ [3]https://help.sumologic.com/docs/send-data/hosted-collectors/amazon-aws/aws-kinesis-firehose-logs-source/ [4]https://help.sumologic.com/docs/send-data/hosted-collectors/http-source/otlp/ [5]https://help.sumologic.com/docs/apm/real-user-monitoring/#step-1-create-a-rum-http-traces-source
    /// </summary>
    [SumoLogicResourceType("sumologic:index/httpSource:HttpSource")]
    public partial class HttpSource : global::Pulumi.CustomResource
    {
        [Output("automaticDateParsing")]
        public Output<bool?> AutomaticDateParsing { get; private set; } = null!;

        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        [Output("collectorId")]
        public Output<int> CollectorId { get; private set; } = null!;

        /// <summary>
        /// This should only be used when creating a Traces, Kinesis Log, HTTP OTLP or a RUM source.
        /// - When configuring a HTTP Traces Source, set this property to `Zipkin`.
        /// - When configuring a Kinesis Logs Source, set this property to `KinesisLog`.
        /// - When configuring a HTTP OTLP Source, set this property to `Otlp`.
        /// - When configuring a RUM Source, set this property to `Rum`.
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("cutoffRelativeTime")]
        public Output<string?> CutoffRelativeTime { get; private set; } = null!;

        [Output("cutoffTimestamp")]
        public Output<int?> CutoffTimestamp { get; private set; } = null!;

        [Output("defaultDateFormats")]
        public Output<ImmutableArray<Outputs.HttpSourceDefaultDateFormat>> DefaultDateFormats { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableDictionary<string, string>?> Fields { get; private set; } = null!;

        [Output("filters")]
        public Output<ImmutableArray<Outputs.HttpSourceFilter>> Filters { get; private set; } = null!;

        [Output("forceTimezone")]
        public Output<bool?> ForceTimezone { get; private set; } = null!;

        [Output("hostName")]
        public Output<string?> HostName { get; private set; } = null!;

        [Output("manualPrefixRegexp")]
        public Output<string?> ManualPrefixRegexp { get; private set; } = null!;

        /// <summary>
        /// When set to `true`, will create one log message per HTTP request.
        /// </summary>
        [Output("messagePerRequest")]
        public Output<bool?> MessagePerRequest { get; private set; } = null!;

        [Output("multilineProcessingEnabled")]
        public Output<bool?> MultilineProcessingEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The HTTP endpoint to use for sending data to this source.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("useAutolineMatching")]
        public Output<bool?> UseAutolineMatching { get; private set; } = null!;


        /// <summary>
        /// Create a HttpSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HttpSource(string name, HttpSourceArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/httpSource:HttpSource", name, args ?? new HttpSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HttpSource(string name, Input<string> id, HttpSourceState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/httpSource:HttpSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HttpSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HttpSource Get(string name, Input<string> id, HttpSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new HttpSource(name, id, state, options);
        }
    }

    public sealed class HttpSourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId", required: true)]
        public Input<int> CollectorId { get; set; } = null!;

        /// <summary>
        /// This should only be used when creating a Traces, Kinesis Log, HTTP OTLP or a RUM source.
        /// - When configuring a HTTP Traces Source, set this property to `Zipkin`.
        /// - When configuring a Kinesis Logs Source, set this property to `KinesisLog`.
        /// - When configuring a HTTP OTLP Source, set this property to `Otlp`.
        /// - When configuring a RUM Source, set this property to `Rum`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.HttpSourceDefaultDateFormatArgs>? _defaultDateFormats;
        public InputList<Inputs.HttpSourceDefaultDateFormatArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.HttpSourceDefaultDateFormatArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.HttpSourceFilterArgs>? _filters;
        public InputList<Inputs.HttpSourceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.HttpSourceFilterArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        /// <summary>
        /// When set to `true`, will create one log message per HTTP request.
        /// </summary>
        [Input("messagePerRequest")]
        public Input<bool>? MessagePerRequest { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public HttpSourceArgs()
        {
        }
        public static new HttpSourceArgs Empty => new HttpSourceArgs();
    }

    public sealed class HttpSourceState : global::Pulumi.ResourceArgs
    {
        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        /// <summary>
        /// This should only be used when creating a Traces, Kinesis Log, HTTP OTLP or a RUM source.
        /// - When configuring a HTTP Traces Source, set this property to `Zipkin`.
        /// - When configuring a Kinesis Logs Source, set this property to `KinesisLog`.
        /// - When configuring a HTTP OTLP Source, set this property to `Otlp`.
        /// - When configuring a RUM Source, set this property to `Rum`.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.HttpSourceDefaultDateFormatGetArgs>? _defaultDateFormats;
        public InputList<Inputs.HttpSourceDefaultDateFormatGetArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.HttpSourceDefaultDateFormatGetArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.HttpSourceFilterGetArgs>? _filters;
        public InputList<Inputs.HttpSourceFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.HttpSourceFilterGetArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        /// <summary>
        /// When set to `true`, will create one log message per HTTP request.
        /// </summary>
        [Input("messagePerRequest")]
        public Input<bool>? MessagePerRequest { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The HTTP endpoint to use for sending data to this source.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public HttpSourceState()
        {
        }
        public static new HttpSourceState Empty => new HttpSourceState();
    }
}
