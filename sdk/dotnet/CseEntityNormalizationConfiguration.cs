// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides the Sumologic CSE Entity Normalization Configuration for the whole organization. There can be only one configuration per organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var entityNormalizationConfiguration = new SumoLogic.CseEntityNormalizationConfiguration("entityNormalizationConfiguration", new()
    ///     {
    ///         AwsNormalizationEnabled = true,
    ///         DefaultNormalizedDomain = "domain.com",
    ///         DomainMappings = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseEntityNormalizationConfigurationDomainMappingArgs
    ///             {
    ///                 NormalizedDomain = "normalized.domain",
    ///                 RawDomain = "raw.domain",
    ///             },
    ///         },
    ///         FqdnNormalizationEnabled = true,
    ///         NormalizeHostnames = true,
    ///         NormalizeUsernames = true,
    ///         WindowsNormalizationEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Entity Normalization Configuration can be imported using the id `cse-entity-normalization-configuration`hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration entity_normalization_configuration cse-entity-normalization-configuration
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration")]
    public partial class CseEntityNormalizationConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Normalize AWS ARN and Usernames.
        /// </summary>
        [Output("awsNormalizationEnabled")]
        public Output<bool> AwsNormalizationEnabled { get; private set; } = null!;

        /// <summary>
        /// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
        /// </summary>
        [Output("defaultNormalizedDomain")]
        public Output<string?> DefaultNormalizedDomain { get; private set; } = null!;

        /// <summary>
        /// Secondary domains.
        /// </summary>
        [Output("domainMappings")]
        public Output<ImmutableArray<Outputs.CseEntityNormalizationConfigurationDomainMapping>> DomainMappings { get; private set; } = null!;

        /// <summary>
        /// Normalize names in the form user@somedomain.net or hostname.somedomain.net
        /// </summary>
        [Output("fqdnNormalizationEnabled")]
        public Output<bool> FqdnNormalizationEnabled { get; private set; } = null!;

        /// <summary>
        /// If hostname normalization is enabled.
        /// </summary>
        [Output("normalizeHostnames")]
        public Output<bool> NormalizeHostnames { get; private set; } = null!;

        /// <summary>
        /// If username normalization is enabled.
        /// </summary>
        [Output("normalizeUsernames")]
        public Output<bool> NormalizeUsernames { get; private set; } = null!;

        /// <summary>
        /// Normalize active directory domains username and hostname formats.
        /// </summary>
        [Output("windowsNormalizationEnabled")]
        public Output<bool> WindowsNormalizationEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a CseEntityNormalizationConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseEntityNormalizationConfiguration(string name, CseEntityNormalizationConfigurationArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration", name, args ?? new CseEntityNormalizationConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseEntityNormalizationConfiguration(string name, Input<string> id, CseEntityNormalizationConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseEntityNormalizationConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseEntityNormalizationConfiguration Get(string name, Input<string> id, CseEntityNormalizationConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new CseEntityNormalizationConfiguration(name, id, state, options);
        }
    }

    public sealed class CseEntityNormalizationConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Normalize AWS ARN and Usernames.
        /// </summary>
        [Input("awsNormalizationEnabled", required: true)]
        public Input<bool> AwsNormalizationEnabled { get; set; } = null!;

        /// <summary>
        /// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
        /// </summary>
        [Input("defaultNormalizedDomain")]
        public Input<string>? DefaultNormalizedDomain { get; set; }

        [Input("domainMappings", required: true)]
        private InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingArgs>? _domainMappings;

        /// <summary>
        /// Secondary domains.
        /// </summary>
        public InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingArgs> DomainMappings
        {
            get => _domainMappings ?? (_domainMappings = new InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingArgs>());
            set => _domainMappings = value;
        }

        /// <summary>
        /// Normalize names in the form user@somedomain.net or hostname.somedomain.net
        /// </summary>
        [Input("fqdnNormalizationEnabled", required: true)]
        public Input<bool> FqdnNormalizationEnabled { get; set; } = null!;

        /// <summary>
        /// If hostname normalization is enabled.
        /// </summary>
        [Input("normalizeHostnames", required: true)]
        public Input<bool> NormalizeHostnames { get; set; } = null!;

        /// <summary>
        /// If username normalization is enabled.
        /// </summary>
        [Input("normalizeUsernames", required: true)]
        public Input<bool> NormalizeUsernames { get; set; } = null!;

        /// <summary>
        /// Normalize active directory domains username and hostname formats.
        /// </summary>
        [Input("windowsNormalizationEnabled", required: true)]
        public Input<bool> WindowsNormalizationEnabled { get; set; } = null!;

        public CseEntityNormalizationConfigurationArgs()
        {
        }
        public static new CseEntityNormalizationConfigurationArgs Empty => new CseEntityNormalizationConfigurationArgs();
    }

    public sealed class CseEntityNormalizationConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Normalize AWS ARN and Usernames.
        /// </summary>
        [Input("awsNormalizationEnabled")]
        public Input<bool>? AwsNormalizationEnabled { get; set; }

        /// <summary>
        /// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
        /// </summary>
        [Input("defaultNormalizedDomain")]
        public Input<string>? DefaultNormalizedDomain { get; set; }

        [Input("domainMappings")]
        private InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingGetArgs>? _domainMappings;

        /// <summary>
        /// Secondary domains.
        /// </summary>
        public InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingGetArgs> DomainMappings
        {
            get => _domainMappings ?? (_domainMappings = new InputList<Inputs.CseEntityNormalizationConfigurationDomainMappingGetArgs>());
            set => _domainMappings = value;
        }

        /// <summary>
        /// Normalize names in the form user@somedomain.net or hostname.somedomain.net
        /// </summary>
        [Input("fqdnNormalizationEnabled")]
        public Input<bool>? FqdnNormalizationEnabled { get; set; }

        /// <summary>
        /// If hostname normalization is enabled.
        /// </summary>
        [Input("normalizeHostnames")]
        public Input<bool>? NormalizeHostnames { get; set; }

        /// <summary>
        /// If username normalization is enabled.
        /// </summary>
        [Input("normalizeUsernames")]
        public Input<bool>? NormalizeUsernames { get; set; }

        /// <summary>
        /// Normalize active directory domains username and hostname formats.
        /// </summary>
        [Input("windowsNormalizationEnabled")]
        public Input<bool>? WindowsNormalizationEnabled { get; set; }

        public CseEntityNormalizationConfigurationState()
        {
        }
        public static new CseEntityNormalizationConfigurationState Empty => new CseEntityNormalizationConfigurationState();
    }
}
