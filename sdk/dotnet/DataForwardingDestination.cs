// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provider to manage [Sumologic Data Forwarding Destination](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#configure-an-s3-data-forwarding-destination)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDataForwardingDestination = new SumoLogic.DataForwardingDestination("example_data_forwarding_destination", new()
    ///     {
    ///         DestinationName = "df-destination",
    ///         Description = "some description",
    ///         BucketName = "df-bucket",
    ///         S3Region = "us-east-1",
    ///         Authentication = new SumoLogic.Inputs.DataForwardingDestinationAuthenticationArgs
    ///         {
    ///             Type = "RoleBased",
    ///             RoleArn = "arn:aws:iam::your_arn",
    ///         },
    ///         S3ServerSideEncryption = false,
    ///         Enabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/dataForwardingDestination:DataForwardingDestination")]
    public partial class DataForwardingDestination : global::Pulumi.CustomResource
    {
        [Output("authentication")]
        public Output<Outputs.DataForwardingDestinationAuthentication> Authentication { get; private set; } = null!;

        /// <summary>
        /// The name of the Amazon S3 bucket.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// Description of the S3 data forwarding destination.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the S3 data forwarding destination.
        /// </summary>
        [Output("destinationName")]
        public Output<string> DestinationName { get; private set; } = null!;

        /// <summary>
        /// True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The region where the S3 bucket is located.
        /// </summary>
        [Output("s3Region")]
        public Output<string?> S3Region { get; private set; } = null!;

        /// <summary>
        /// Enable S3 server-side encryption.
        /// </summary>
        [Output("s3ServerSideEncryption")]
        public Output<bool?> S3ServerSideEncryption { get; private set; } = null!;


        /// <summary>
        /// Create a DataForwardingDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataForwardingDestination(string name, DataForwardingDestinationArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, args ?? new DataForwardingDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataForwardingDestination(string name, Input<string> id, DataForwardingDestinationState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataForwardingDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataForwardingDestination Get(string name, Input<string> id, DataForwardingDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new DataForwardingDestination(name, id, state, options);
        }
    }

    public sealed class DataForwardingDestinationArgs : global::Pulumi.ResourceArgs
    {
        [Input("authentication", required: true)]
        public Input<Inputs.DataForwardingDestinationAuthenticationArgs> Authentication { get; set; } = null!;

        /// <summary>
        /// The name of the Amazon S3 bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Description of the S3 data forwarding destination.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the S3 data forwarding destination.
        /// </summary>
        [Input("destinationName", required: true)]
        public Input<string> DestinationName { get; set; } = null!;

        /// <summary>
        /// True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The region where the S3 bucket is located.
        /// </summary>
        [Input("s3Region")]
        public Input<string>? S3Region { get; set; }

        /// <summary>
        /// Enable S3 server-side encryption.
        /// </summary>
        [Input("s3ServerSideEncryption")]
        public Input<bool>? S3ServerSideEncryption { get; set; }

        public DataForwardingDestinationArgs()
        {
        }
        public static new DataForwardingDestinationArgs Empty => new DataForwardingDestinationArgs();
    }

    public sealed class DataForwardingDestinationState : global::Pulumi.ResourceArgs
    {
        [Input("authentication")]
        public Input<Inputs.DataForwardingDestinationAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// The name of the Amazon S3 bucket.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Description of the S3 data forwarding destination.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the S3 data forwarding destination.
        /// </summary>
        [Input("destinationName")]
        public Input<string>? DestinationName { get; set; }

        /// <summary>
        /// True when the data forwarding destination is enabled. Will be treated as _false_ if left blank.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The region where the S3 bucket is located.
        /// </summary>
        [Input("s3Region")]
        public Input<string>? S3Region { get; set; }

        /// <summary>
        /// Enable S3 server-side encryption.
        /// </summary>
        [Input("s3ServerSideEncryption")]
        public Input<bool>? S3ServerSideEncryption { get; set; }

        public DataForwardingDestinationState()
        {
        }
        public static new DataForwardingDestinationState Empty => new DataForwardingDestinationState();
    }
}
