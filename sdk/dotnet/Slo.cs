// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// layout: 'sumologic' page_title: 'SumoLogic: sumologic_slo' description: |- Provides the ability to create, read, delete,
    /// and update [SLOs](https://help.sumologic.com/docs/observability/reliability-management-slo/).
    /// &lt;!-- yaml: did not find expected key --&gt;
    /// 
    /// # sumologic.Slo
    /// 
    /// Provides the ability to create, read, delete, and update SLOs.
    /// 
    /// ## Example SLO
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sloTfWindowMetricRatio = new SumoLogic.Slo("slo_tf_window_metric_ratio", new()
    ///     {
    ///         Name = "login error rate",
    ///         Description = "per minute login error rate over rolling 7 days",
    ///         ParentId = "0000000000000001",
    ///         SignalType = "Error",
    ///         Service = "auth",
    ///         Application = "login",
    ///         Tags = 
    ///         {
    ///             { "team", "metrics" },
    ///             { "application", "sumologic" },
    ///         },
    ///         Compliances = new[]
    ///         {
    ///             new SumoLogic.Inputs.SloComplianceArgs
    ///             {
    ///                 ComplianceType = "Rolling",
    ///                 Size = "7d",
    ///                 Target = 95,
    ///                 Timezone = "Asia/Kolkata",
    ///             },
    ///         },
    ///         Indicator = new SumoLogic.Inputs.SloIndicatorArgs
    ///         {
    ///             WindowBasedEvaluation = new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationArgs
    ///             {
    ///                 Op = "LessThan",
    ///                 QueryType = "Metrics",
    ///                 Size = "1m",
    ///                 Threshold = 99,
    ///                 Queries = new[]
    ///                 {
    ///                     new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryArgs
    ///                     {
    ///                         QueryGroupType = "Unsuccessful",
    ///                         QueryGroups = new[]
    ///                         {
    ///                             new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs
    ///                             {
    ///                                 RowId = "A",
    ///                                 Query = "service=auth api=login metric=HTTP_5XX_Count",
    ///                                 UseRowCount = false,
    ///                             },
    ///                         },
    ///                     },
    ///                     new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryArgs
    ///                     {
    ///                         QueryGroupType = "Total",
    ///                         QueryGroups = new[]
    ///                         {
    ///                             new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs
    ///                             {
    ///                                 RowId = "A",
    ///                                 Query = "service=auth api=login metric=TotalRequests",
    ///                                 UseRowCount = false,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sloTfWindowBased = new SumoLogic.Slo("slo_tf_window_based", new()
    ///     {
    ///         Name = "slo-tf-window-based",
    ///         Description = "example SLO created with terraform",
    ///         ParentId = "0000000000000001",
    ///         SignalType = "Latency",
    ///         Service = "auth",
    ///         Application = "login",
    ///         Tags = 
    ///         {
    ///             { "team", "metrics" },
    ///             { "application", "sumologic" },
    ///         },
    ///         Compliances = new[]
    ///         {
    ///             new SumoLogic.Inputs.SloComplianceArgs
    ///             {
    ///                 ComplianceType = "Rolling",
    ///                 Size = "7d",
    ///                 Target = 99,
    ///                 Timezone = "Asia/Kolkata",
    ///             },
    ///         },
    ///         Indicator = new SumoLogic.Inputs.SloIndicatorArgs
    ///         {
    ///             WindowBasedEvaluation = new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationArgs
    ///             {
    ///                 Op = "LessThan",
    ///                 QueryType = "Metrics",
    ///                 Aggregation = "Avg",
    ///                 Size = "1m",
    ///                 Threshold = 200,
    ///                 Queries = new[]
    ///                 {
    ///                     new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryArgs
    ///                     {
    ///                         QueryGroupType = "Threshold",
    ///                         QueryGroups = new[]
    ///                         {
    ///                             new SumoLogic.Inputs.SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs
    ///                             {
    ///                                 RowId = "A",
    ///                                 Query = "metric=request_time_p90  service=auth api=login",
    ///                                 UseRowCount = false,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sloTfRequestBased = new SumoLogic.Slo("slo_tf_request_based", new()
    ///     {
    ///         Name = "slo-tf-request-based",
    ///         Description = "example SLO created with terraform for request based SLI",
    ///         ParentId = tfSloFolder.Id,
    ///         SignalType = "Latency",
    ///         Service = "auth",
    ///         Application = "login",
    ///         Tags = 
    ///         {
    ///             { "team", "metrics" },
    ///             { "application", "sumologic" },
    ///         },
    ///         Compliances = new[]
    ///         {
    ///             new SumoLogic.Inputs.SloComplianceArgs
    ///             {
    ///                 ComplianceType = "Rolling",
    ///                 Size = "7d",
    ///                 Target = 99,
    ///                 Timezone = "Asia/Kolkata",
    ///             },
    ///         },
    ///         Indicator = new SumoLogic.Inputs.SloIndicatorArgs
    ///         {
    ///             RequestBasedEvaluation = new SumoLogic.Inputs.SloIndicatorRequestBasedEvaluationArgs
    ///             {
    ///                 Op = "LessThanOrEqual",
    ///                 QueryType = "Logs",
    ///                 Threshold = 1,
    ///                 Queries = new[]
    ///                 {
    ///                     new SumoLogic.Inputs.SloIndicatorRequestBasedEvaluationQueryArgs
    ///                     {
    ///                         QueryGroupType = "Threshold",
    ///                         QueryGroups = new[]
    ///                         {
    ///                             new SumoLogic.Inputs.SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs
    ///                             {
    ///                                 RowId = "A",
    ///                                 Query = @"          cluster=sedemostaging namespace=warp004*
    ///               | parse ""Coffee preparation request time: * ms"" as latency nodrop
    ///               |  if(isBlank(latency), ""false"", ""true"") as hasLatency
    ///               | where hasLatency = ""true""
    ///               |  if(isBlank(latency), 0.0, latency) as latency
    ///               | latency/ 1000 as latency_sec
    /// ",
    ///                                 UseRowCount = false,
    ///                                 Field = "latency_sec",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var sloTfMonitorBased = new SumoLogic.Slo("slo_tf_monitor_based", new()
    ///     {
    ///         Name = "slo-tf-monitor-based",
    ///         Description = "example of monitor based SLO created with terraform",
    ///         ParentId = "0000000000000001",
    ///         SignalType = "Error",
    ///         Service = "auth",
    ///         Application = "login",
    ///         Tags = 
    ///         {
    ///             { "team", "metrics" },
    ///             { "application", "sumologic" },
    ///         },
    ///         Compliances = new[]
    ///         {
    ///             new SumoLogic.Inputs.SloComplianceArgs
    ///             {
    ///                 ComplianceType = "Rolling",
    ///                 Size = "7d",
    ///                 Target = 99,
    ///                 Timezone = "Asia/Kolkata",
    ///             },
    ///         },
    ///         Indicator = new SumoLogic.Inputs.SloIndicatorArgs
    ///         {
    ///             MonitorBasedEvaluation = new SumoLogic.Inputs.SloIndicatorMonitorBasedEvaluationArgs
    ///             {
    ///                 MonitorTriggers = new SumoLogic.Inputs.SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs
    ///                 {
    ///                     MonitorId = "0000000000BCB3A4",
    ///                     TriggerTypes = "Critical",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/slo:Slo")]
    public partial class Slo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the application.
        /// </summary>
        [Output("application")]
        public Output<string> Application { get; private set; } = null!;

        /// <summary>
        /// The compliance settings for the SLO.
        /// </summary>
        [Output("compliances")]
        public Output<ImmutableArray<Outputs.SloCompliance>> Compliances { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The description of the SLO.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The service level indicator on which SLO is to be defined. more details on the difference
        /// b/w them can be found on
        /// the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
        /// - window_based_evaluation - Evaluate SLI using successful/total windows.
        /// - request_based_evaluation - Evaluate SLI based on occurrence of successful
        /// events / total events over entire compliance period.
        /// - monitor_based_evaluation - SLIs for Monitor-based SLOs are calculated at a granularity of 1 minute. A minute is treated as unsuccessful if the Monitor threshold is violated at any point of time within that minute.
        /// </summary>
        [Output("indicator")]
        public Output<Outputs.SloIndicator> Indicator { get; private set; } = null!;

        [Output("isLocked")]
        public Output<bool?> IsLocked { get; private set; } = null!;

        [Output("isMutable")]
        public Output<bool> IsMutable { get; private set; } = null!;

        [Output("isSystem")]
        public Output<bool> IsSystem { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// The name of the SLO. The name must be alphanumeric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        [Output("postRequestMap")]
        public Output<ImmutableDictionary<string, string>?> PostRequestMap { get; private set; } = null!;

        /// <summary>
        /// Name of the service.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
        /// , `Other`. Defaults to `Latency`.
        /// </summary>
        [Output("signalType")]
        public Output<string> SignalType { get; private set; } = null!;

        /// <summary>
        /// A map defining tag keys and tag values for the SLO.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Slo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slo(string name, SloArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/slo:Slo", name, args ?? new SloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slo(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/slo:Slo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slo Get(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
        {
            return new Slo(name, id, state, options);
        }
    }

    public sealed class SloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the application.
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        [Input("compliances", required: true)]
        private InputList<Inputs.SloComplianceArgs>? _compliances;

        /// <summary>
        /// The compliance settings for the SLO.
        /// </summary>
        public InputList<Inputs.SloComplianceArgs> Compliances
        {
            get => _compliances ?? (_compliances = new InputList<Inputs.SloComplianceArgs>());
            set => _compliances = value;
        }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The service level indicator on which SLO is to be defined. more details on the difference
        /// b/w them can be found on
        /// the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
        /// - window_based_evaluation - Evaluate SLI using successful/total windows.
        /// - request_based_evaluation - Evaluate SLI based on occurrence of successful
        /// events / total events over entire compliance period.
        /// - monitor_based_evaluation - SLIs for Monitor-based SLOs are calculated at a granularity of 1 minute. A minute is treated as unsuccessful if the Monitor threshold is violated at any point of time within that minute.
        /// </summary>
        [Input("indicator", required: true)]
        public Input<Inputs.SloIndicatorArgs> Indicator { get; set; } = null!;

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The name of the SLO. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        /// <summary>
        /// Name of the service.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
        /// , `Other`. Defaults to `Latency`.
        /// </summary>
        [Input("signalType", required: true)]
        public Input<string> SignalType { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map defining tag keys and tag values for the SLO.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public SloArgs()
        {
        }
        public static new SloArgs Empty => new SloArgs();
    }

    public sealed class SloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the application.
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        [Input("compliances")]
        private InputList<Inputs.SloComplianceGetArgs>? _compliances;

        /// <summary>
        /// The compliance settings for the SLO.
        /// </summary>
        public InputList<Inputs.SloComplianceGetArgs> Compliances
        {
            get => _compliances ?? (_compliances = new InputList<Inputs.SloComplianceGetArgs>());
            set => _compliances = value;
        }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The service level indicator on which SLO is to be defined. more details on the difference
        /// b/w them can be found on
        /// the [slo help page](https://help.sumologic.com/Beta/SLO_Reliability_Management/Access_and_Create_SLOs)
        /// - window_based_evaluation - Evaluate SLI using successful/total windows.
        /// - request_based_evaluation - Evaluate SLI based on occurrence of successful
        /// events / total events over entire compliance period.
        /// - monitor_based_evaluation - SLIs for Monitor-based SLOs are calculated at a granularity of 1 minute. A minute is treated as unsuccessful if the Monitor threshold is violated at any point of time within that minute.
        /// </summary>
        [Input("indicator")]
        public Input<Inputs.SloIndicatorGetArgs>? Indicator { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The name of the SLO. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the SLO Folder that contains this SLO. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        /// <summary>
        /// Name of the service.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// The type of SLO. Valid values are `Latency`, `Error`, `Throughput`, `Availability`
        /// , `Other`. Defaults to `Latency`.
        /// </summary>
        [Input("signalType")]
        public Input<string>? SignalType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map defining tag keys and tag values for the SLO.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public SloState()
        {
        }
        public static new SloState Empty => new SloState();
    }
}
