// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    public static class GetCollector
    {
        /// <summary>
        /// Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetCollector.Invoke(new()
        ///     {
        ///         Name = "MyCollector",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetCollector.Invoke(new()
        ///     {
        ///         Id = 1234567890,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
        /// - `name` - The name of the collector.
        /// - `description` - The description of the collector.
        /// - `category` - The default source category for any source attached to this collector.
        /// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
        /// </summary>
        public static Task<GetCollectorResult> InvokeAsync(GetCollectorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCollectorResult>("sumologic:index/getCollector:getCollector", args ?? new GetCollectorArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetCollector.Invoke(new()
        ///     {
        ///         Name = "MyCollector",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetCollector.Invoke(new()
        ///     {
        ///         Id = 1234567890,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
        /// - `name` - The name of the collector.
        /// - `description` - The description of the collector.
        /// - `category` - The default source category for any source attached to this collector.
        /// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
        /// </summary>
        public static Output<GetCollectorResult> Invoke(GetCollectorInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCollectorResult>("sumologic:index/getCollector:getCollector", args ?? new GetCollectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCollectorArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetCollectorArgs()
        {
        }
        public static new GetCollectorArgs Empty => new GetCollectorArgs();
    }

    public sealed class GetCollectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<int>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCollectorInvokeArgs()
        {
        }
        public static new GetCollectorInvokeArgs Empty => new GetCollectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetCollectorResult
    {
        public readonly string Category;
        public readonly string Description;
        public readonly ImmutableDictionary<string, string> Fields;
        public readonly int Id;
        public readonly string Name;
        public readonly string Timezone;

        [OutputConstructor]
        private GetCollectorResult(
            string category,

            string description,

            ImmutableDictionary<string, string> fields,

            int id,

            string name,

            string timezone)
        {
            Category = category;
            Description = description;
            Fields = fields;
            Id = id;
            Name = name;
            Timezone = timezone;
        }
    }
}
