// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,
    /// please ensure that only a single instance of such resource is defined.
    /// The behavior for defining more than one password policy resources is undefined.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePasswordPolicy = new SumoLogic.PasswordPolicy("examplePasswordPolicy", new()
    ///     {
    ///         AccountLockoutDurationInMins = 30,
    ///         AccountLockoutThreshold = 6,
    ///         FailedLoginResetDurationInMins = 10,
    ///         MaxLength = 128,
    ///         MaxPasswordAgeInDays = 365,
    ///         MinLength = 8,
    ///         MinUniquePasswords = 10,
    ///         MustContainDigits = true,
    ///         MustContainLowercase = true,
    ///         MustContainSpecialChars = true,
    ///         MustContainUppercase = true,
    ///         RememberMfa = true,
    ///         RequireMfa = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/passwordPolicy:PasswordPolicy")]
    public partial class PasswordPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
        /// </summary>
        [Output("accountLockoutDurationInMins")]
        public Output<int?> AccountLockoutDurationInMins { get; private set; } = null!;

        /// <summary>
        /// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
        /// </summary>
        [Output("accountLockoutThreshold")]
        public Output<int?> AccountLockoutThreshold { get; private set; } = null!;

        /// <summary>
        /// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
        /// </summary>
        [Output("failedLoginResetDurationInMins")]
        public Output<int?> FailedLoginResetDurationInMins { get; private set; } = null!;

        /// <summary>
        /// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
        /// </summary>
        [Output("maxLength")]
        public Output<int?> MaxLength { get; private set; } = null!;

        /// <summary>
        /// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
        /// </summary>
        [Output("maxPasswordAgeInDays")]
        public Output<int?> MaxPasswordAgeInDays { get; private set; } = null!;

        /// <summary>
        /// The minimum length of the password. Defaults to 8.
        /// </summary>
        [Output("minLength")]
        public Output<int?> MinLength { get; private set; } = null!;

        /// <summary>
        /// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
        /// </summary>
        [Output("minUniquePasswords")]
        public Output<int?> MinUniquePasswords { get; private set; } = null!;

        /// <summary>
        /// If the password must contain digits. Defaults to true.
        /// </summary>
        [Output("mustContainDigits")]
        public Output<bool?> MustContainDigits { get; private set; } = null!;

        /// <summary>
        /// If the password must contain lower case characters. Defaults to true.
        /// </summary>
        [Output("mustContainLowercase")]
        public Output<bool?> MustContainLowercase { get; private set; } = null!;

        /// <summary>
        /// If the password must contain special characters. Defaults to true.
        /// </summary>
        [Output("mustContainSpecialChars")]
        public Output<bool?> MustContainSpecialChars { get; private set; } = null!;

        /// <summary>
        /// If the password must contain upper case characters. Defaults to true.
        /// </summary>
        [Output("mustContainUppercase")]
        public Output<bool?> MustContainUppercase { get; private set; } = null!;

        /// <summary>
        /// If MFA should be remembered on the browser. Defaults to true.
        /// </summary>
        [Output("rememberMfa")]
        public Output<bool?> RememberMfa { get; private set; } = null!;

        /// <summary>
        /// If MFA should be required to log in. Defaults to false.
        /// </summary>
        [Output("requireMfa")]
        public Output<bool?> RequireMfa { get; private set; } = null!;


        /// <summary>
        /// Create a PasswordPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PasswordPolicy(string name, PasswordPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("sumologic:index/passwordPolicy:PasswordPolicy", name, args ?? new PasswordPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PasswordPolicy(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/passwordPolicy:PasswordPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PasswordPolicy Get(string name, Input<string> id, PasswordPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new PasswordPolicy(name, id, state, options);
        }
    }

    public sealed class PasswordPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
        /// </summary>
        [Input("accountLockoutDurationInMins")]
        public Input<int>? AccountLockoutDurationInMins { get; set; }

        /// <summary>
        /// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
        /// </summary>
        [Input("accountLockoutThreshold")]
        public Input<int>? AccountLockoutThreshold { get; set; }

        /// <summary>
        /// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
        /// </summary>
        [Input("failedLoginResetDurationInMins")]
        public Input<int>? FailedLoginResetDurationInMins { get; set; }

        /// <summary>
        /// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
        /// </summary>
        [Input("maxPasswordAgeInDays")]
        public Input<int>? MaxPasswordAgeInDays { get; set; }

        /// <summary>
        /// The minimum length of the password. Defaults to 8.
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        /// <summary>
        /// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
        /// </summary>
        [Input("minUniquePasswords")]
        public Input<int>? MinUniquePasswords { get; set; }

        /// <summary>
        /// If the password must contain digits. Defaults to true.
        /// </summary>
        [Input("mustContainDigits")]
        public Input<bool>? MustContainDigits { get; set; }

        /// <summary>
        /// If the password must contain lower case characters. Defaults to true.
        /// </summary>
        [Input("mustContainLowercase")]
        public Input<bool>? MustContainLowercase { get; set; }

        /// <summary>
        /// If the password must contain special characters. Defaults to true.
        /// </summary>
        [Input("mustContainSpecialChars")]
        public Input<bool>? MustContainSpecialChars { get; set; }

        /// <summary>
        /// If the password must contain upper case characters. Defaults to true.
        /// </summary>
        [Input("mustContainUppercase")]
        public Input<bool>? MustContainUppercase { get; set; }

        /// <summary>
        /// If MFA should be remembered on the browser. Defaults to true.
        /// </summary>
        [Input("rememberMfa")]
        public Input<bool>? RememberMfa { get; set; }

        /// <summary>
        /// If MFA should be required to log in. Defaults to false.
        /// </summary>
        [Input("requireMfa")]
        public Input<bool>? RequireMfa { get; set; }

        public PasswordPolicyArgs()
        {
        }
        public static new PasswordPolicyArgs Empty => new PasswordPolicyArgs();
    }

    public sealed class PasswordPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
        /// </summary>
        [Input("accountLockoutDurationInMins")]
        public Input<int>? AccountLockoutDurationInMins { get; set; }

        /// <summary>
        /// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
        /// </summary>
        [Input("accountLockoutThreshold")]
        public Input<int>? AccountLockoutThreshold { get; set; }

        /// <summary>
        /// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
        /// </summary>
        [Input("failedLoginResetDurationInMins")]
        public Input<int>? FailedLoginResetDurationInMins { get; set; }

        /// <summary>
        /// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
        /// </summary>
        [Input("maxLength")]
        public Input<int>? MaxLength { get; set; }

        /// <summary>
        /// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
        /// </summary>
        [Input("maxPasswordAgeInDays")]
        public Input<int>? MaxPasswordAgeInDays { get; set; }

        /// <summary>
        /// The minimum length of the password. Defaults to 8.
        /// </summary>
        [Input("minLength")]
        public Input<int>? MinLength { get; set; }

        /// <summary>
        /// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
        /// </summary>
        [Input("minUniquePasswords")]
        public Input<int>? MinUniquePasswords { get; set; }

        /// <summary>
        /// If the password must contain digits. Defaults to true.
        /// </summary>
        [Input("mustContainDigits")]
        public Input<bool>? MustContainDigits { get; set; }

        /// <summary>
        /// If the password must contain lower case characters. Defaults to true.
        /// </summary>
        [Input("mustContainLowercase")]
        public Input<bool>? MustContainLowercase { get; set; }

        /// <summary>
        /// If the password must contain special characters. Defaults to true.
        /// </summary>
        [Input("mustContainSpecialChars")]
        public Input<bool>? MustContainSpecialChars { get; set; }

        /// <summary>
        /// If the password must contain upper case characters. Defaults to true.
        /// </summary>
        [Input("mustContainUppercase")]
        public Input<bool>? MustContainUppercase { get; set; }

        /// <summary>
        /// If MFA should be remembered on the browser. Defaults to true.
        /// </summary>
        [Input("rememberMfa")]
        public Input<bool>? RememberMfa { get; set; }

        /// <summary>
        /// If MFA should be required to log in. Defaults to false.
        /// </summary>
        [Input("requireMfa")]
        public Input<bool>? RequireMfa { get; set; }

        public PasswordPolicyState()
        {
        }
        public static new PasswordPolicyState Empty => new PasswordPolicyState();
    }
}
