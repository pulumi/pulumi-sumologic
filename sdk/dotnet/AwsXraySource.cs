// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumologic AWS XRay source to collect metrics derived from XRay traces.
    /// 
    /// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Description = "Just testing this",
    ///     });
    /// 
    ///     var awsXraySource = new SumoLogic.AwsXraySource("awsXraySource", new()
    ///     {
    ///         Authentication = new SumoLogic.Inputs.AwsXraySourceAuthenticationArgs
    ///         {
    ///             RoleArn = "arn:aws:iam::01234567890:role/sumo-role",
    ///             Type = "AWSRoleBasedAuthentication",
    ///         },
    ///         Category = "aws/xray",
    ///         CollectorId = collector.Id,
    ///         ContentType = "AwsXRay",
    ///         Description = "My description",
    ///         Path = new SumoLogic.Inputs.AwsXraySourcePathArgs
    ///         {
    ///             LimitToRegions = new[]
    ///             {
    ///                 "us-west-2",
    ///             },
    ///             Type = "AwsXRayPath",
    ///         },
    ///         Paused = false,
    ///         ScanInterval = 300000,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AWS XRay sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/awsXraySource:AwsXraySource test 123/456
    /// ```
    /// 
    ///  AWS XRay sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/awsXraySource:AwsXraySource test my-test-collector/my-test-source
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/awsXraySource:AwsXraySource")]
    public partial class AwsXraySource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authentication details for making `xray:Get*` calls.
        /// </summary>
        [Output("authentication")]
        public Output<Outputs.AwsXraySourceAuthentication> Authentication { get; private set; } = null!;

        [Output("automaticDateParsing")]
        public Output<bool?> AutomaticDateParsing { get; private set; } = null!;

        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        [Output("collectorId")]
        public Output<int> CollectorId { get; private set; } = null!;

        /// <summary>
        /// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
        /// </summary>
        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("cutoffRelativeTime")]
        public Output<string?> CutoffRelativeTime { get; private set; } = null!;

        [Output("cutoffTimestamp")]
        public Output<int?> CutoffTimestamp { get; private set; } = null!;

        [Output("defaultDateFormats")]
        public Output<ImmutableArray<Outputs.AwsXraySourceDefaultDateFormat>> DefaultDateFormats { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableDictionary<string, string>?> Fields { get; private set; } = null!;

        [Output("filters")]
        public Output<ImmutableArray<Outputs.AwsXraySourceFilter>> Filters { get; private set; } = null!;

        [Output("forceTimezone")]
        public Output<bool?> ForceTimezone { get; private set; } = null!;

        [Output("hostName")]
        public Output<string?> HostName { get; private set; } = null!;

        [Output("manualPrefixRegexp")]
        public Output<string?> ManualPrefixRegexp { get; private set; } = null!;

        [Output("multilineProcessingEnabled")]
        public Output<bool?> MultilineProcessingEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Output("path")]
        public Output<Outputs.AwsXraySourcePath> Path { get; private set; } = null!;

        /// <summary>
        /// When set to true, the scanner is paused. To disable, set to false.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
        /// </summary>
        [Output("scanInterval")]
        public Output<int> ScanInterval { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("useAutolineMatching")]
        public Output<bool?> UseAutolineMatching { get; private set; } = null!;


        /// <summary>
        /// Create a AwsXraySource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AwsXraySource(string name, AwsXraySourceArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/awsXraySource:AwsXraySource", name, args ?? new AwsXraySourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AwsXraySource(string name, Input<string> id, AwsXraySourceState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/awsXraySource:AwsXraySource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AwsXraySource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AwsXraySource Get(string name, Input<string> id, AwsXraySourceState? state = null, CustomResourceOptions? options = null)
        {
            return new AwsXraySource(name, id, state, options);
        }
    }

    public sealed class AwsXraySourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication details for making `xray:Get*` calls.
        /// </summary>
        [Input("authentication", required: true)]
        public Input<Inputs.AwsXraySourceAuthenticationArgs> Authentication { get; set; } = null!;

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId", required: true)]
        public Input<int> CollectorId { get; set; } = null!;

        /// <summary>
        /// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AwsXraySourceDefaultDateFormatArgs>? _defaultDateFormats;
        public InputList<Inputs.AwsXraySourceDefaultDateFormatArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AwsXraySourceDefaultDateFormatArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AwsXraySourceFilterArgs>? _filters;
        public InputList<Inputs.AwsXraySourceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AwsXraySourceFilterArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Input("path", required: true)]
        public Input<Inputs.AwsXraySourcePathArgs> Path { get; set; } = null!;

        /// <summary>
        /// When set to true, the scanner is paused. To disable, set to false.
        /// </summary>
        [Input("paused", required: true)]
        public Input<bool> Paused { get; set; } = null!;

        /// <summary>
        /// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
        /// </summary>
        [Input("scanInterval", required: true)]
        public Input<int> ScanInterval { get; set; } = null!;

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AwsXraySourceArgs()
        {
        }
        public static new AwsXraySourceArgs Empty => new AwsXraySourceArgs();
    }

    public sealed class AwsXraySourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Authentication details for making `xray:Get*` calls.
        /// </summary>
        [Input("authentication")]
        public Input<Inputs.AwsXraySourceAuthenticationGetArgs>? Authentication { get; set; }

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        /// <summary>
        /// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AwsXraySourceDefaultDateFormatGetArgs>? _defaultDateFormats;
        public InputList<Inputs.AwsXraySourceDefaultDateFormatGetArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AwsXraySourceDefaultDateFormatGetArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AwsXraySourceFilterGetArgs>? _filters;
        public InputList<Inputs.AwsXraySourceFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AwsXraySourceFilterGetArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The location to scan for new data.
        /// </summary>
        [Input("path")]
        public Input<Inputs.AwsXraySourcePathGetArgs>? Path { get; set; }

        /// <summary>
        /// When set to true, the scanner is paused. To disable, set to false.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
        /// </summary>
        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AwsXraySourceState()
        {
        }
        public static new AwsXraySourceState Empty => new AwsXraySourceState();
    }
}
