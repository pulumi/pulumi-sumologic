// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    public static class GetRole
    {
        /// <summary>
        /// Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetRole.Invoke(new()
        ///     {
        ///         Name = "MyRole",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetRole.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the role. This can be used to create users having that role.
        /// - `name` - The name of the role.
        /// - `description` - The description of the role.
        /// - `filter_predicate` - The search filter to restrict access to specific logs.
        /// - `capabilities` - The list of capabilities associated with the role.
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("sumologic:index/getRole:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a way to retrieve Sumo Logic role details (id, names, etc) for a role.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetRole.Invoke(new()
        ///     {
        ///         Name = "MyRole",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var that = SumoLogic.GetRole.Invoke(new()
        ///     {
        ///         Id = "1234567890",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A role can be looked up by either `id` or `name`. One of those attributes needs to be specified.
        /// 
        /// If both `id` and `name` have been specified, `id` takes precedence.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the role. This can be used to create users having that role.
        /// - `name` - The name of the role.
        /// - `description` - The description of the role.
        /// - `filter_predicate` - The search filter to restrict access to specific logs.
        /// - `capabilities` - The list of capabilities associated with the role.
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("sumologic:index/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        public readonly ImmutableArray<string> Capabilities;
        public readonly string Description;
        public readonly string FilterPredicate;
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetRoleResult(
            ImmutableArray<string> capabilities,

            string description,

            string filterPredicate,

            string id,

            string name)
        {
            Capabilities = capabilities;
            Description = description;
            FilterPredicate = filterPredicate;
            Id = id;
            Name = name;
        }
    }
}
