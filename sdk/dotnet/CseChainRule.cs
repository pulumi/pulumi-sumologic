// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumo Logic CSE [Chain Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/07_Write_a_Chain_Rule).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var chainRule = new SumoLogic.CseChainRule("chainRule", new()
    ///     {
    ///         Description = "Signal description",
    ///         Enabled = true,
    ///         EntitySelectors = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseChainRuleEntitySelectorArgs
    ///             {
    ///                 EntityType = "_username",
    ///                 Expression = "user_username",
    ///             },
    ///         },
    ///         ExpressionsAndLimits = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseChainRuleExpressionsAndLimitArgs
    ///             {
    ///                 Expression = "success = false",
    ///                 Limit = 5,
    ///             },
    ///             new SumoLogic.Inputs.CseChainRuleExpressionsAndLimitArgs
    ///             {
    ///                 Expression = "success = true",
    ///                 Limit = 1,
    ///             },
    ///         },
    ///         GroupByFields = new[] {},
    ///         IsPrototype = false,
    ///         Ordered = true,
    ///         Severity = 5,
    ///         SummaryExpression = "Signal summary",
    ///         Tags = new[]
    ///         {
    ///             "_mitreAttackTactic:TA0009",
    ///         },
    ///         WindowSize = "T30M",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Chain Rules can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseChainRule:CseChainRule chain_rule id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseChainRule:CseChainRule")]
    public partial class CseChainRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        [Output("entitySelectors")]
        public Output<ImmutableArray<Outputs.CseChainRuleEntitySelector>> EntitySelectors { get; private set; } = null!;

        /// <summary>
        /// The list of expressions and associated limits to make up the conditions of the chain rule
        /// </summary>
        [Output("expressionsAndLimits")]
        public Output<ImmutableArray<Outputs.CseChainRuleExpressionsAndLimit>> ExpressionsAndLimits { get; private set; } = null!;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        [Output("groupByFields")]
        public Output<ImmutableArray<string>> GroupByFields { get; private set; } = null!;

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Output("isPrototype")]
        public Output<bool?> IsPrototype { get; private set; } = null!;

        /// <summary>
        /// The name of the Rule and the generated SignalS
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule
        /// </summary>
        [Output("ordered")]
        public Output<bool?> Ordered { get; private set; } = null!;

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Output("severity")]
        public Output<int> Severity { get; private set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Output("summaryExpression")]
        public Output<string?> SummaryExpression { get; private set; } = null!;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a CseChainRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseChainRule(string name, CseChainRuleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseChainRule:CseChainRule", name, args ?? new CseChainRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseChainRule(string name, Input<string> id, CseChainRuleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseChainRule:CseChainRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseChainRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseChainRule Get(string name, Input<string> id, CseChainRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CseChainRule(name, id, state, options);
        }
    }

    public sealed class CseChainRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("entitySelectors", required: true)]
        private InputList<Inputs.CseChainRuleEntitySelectorArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        public InputList<Inputs.CseChainRuleEntitySelectorArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseChainRuleEntitySelectorArgs>());
            set => _entitySelectors = value;
        }

        [Input("expressionsAndLimits", required: true)]
        private InputList<Inputs.CseChainRuleExpressionsAndLimitArgs>? _expressionsAndLimits;

        /// <summary>
        /// The list of expressions and associated limits to make up the conditions of the chain rule
        /// </summary>
        public InputList<Inputs.CseChainRuleExpressionsAndLimitArgs> ExpressionsAndLimits
        {
            get => _expressionsAndLimits ?? (_expressionsAndLimits = new InputList<Inputs.CseChainRuleExpressionsAndLimitArgs>());
            set => _expressionsAndLimits = value;
        }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The name of the Rule and the generated SignalS
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule
        /// </summary>
        [Input("ordered")]
        public Input<bool>? Ordered { get; set; }

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Input("severity", required: true)]
        public Input<int> Severity { get; set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public CseChainRuleArgs()
        {
        }
        public static new CseChainRuleArgs Empty => new CseChainRuleArgs();
    }

    public sealed class CseChainRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitySelectors")]
        private InputList<Inputs.CseChainRuleEntitySelectorGetArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        public InputList<Inputs.CseChainRuleEntitySelectorGetArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseChainRuleEntitySelectorGetArgs>());
            set => _entitySelectors = value;
        }

        [Input("expressionsAndLimits")]
        private InputList<Inputs.CseChainRuleExpressionsAndLimitGetArgs>? _expressionsAndLimits;

        /// <summary>
        /// The list of expressions and associated limits to make up the conditions of the chain rule
        /// </summary>
        public InputList<Inputs.CseChainRuleExpressionsAndLimitGetArgs> ExpressionsAndLimits
        {
            get => _expressionsAndLimits ?? (_expressionsAndLimits = new InputList<Inputs.CseChainRuleExpressionsAndLimitGetArgs>());
            set => _expressionsAndLimits = value;
        }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The name of the Rule and the generated SignalS
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the records matching the expressions must be in the same chronological order as the expressions are listed in the rule
        /// </summary>
        [Input("ordered")]
        public Input<bool>? Ordered { get; set; }

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public CseChainRuleState()
        {
        }
        public static new CseChainRuleState Empty => new CseChainRuleState();
    }
}
