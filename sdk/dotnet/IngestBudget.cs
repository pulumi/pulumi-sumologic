// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Ingest Budget](https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets). To assign an Ingest Budget to the Collector use the field `_budget` with the Field Value of the Ingest Budget to assign.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var budget = new SumoLogic.IngestBudget("budget", new()
    ///     {
    ///         Name = "testBudget",
    ///         FieldValue = "test",
    ///         CapacityBytes = 30000000000,
    ///         Description = "For testing purposes",
    ///     });
    /// 
    ///     var collector = new SumoLogic.Collector("collector", new()
    ///     {
    ///         Name = "testCollector",
    ///         Fields = 
    ///         {
    ///             { "_budget", budget.FieldValue },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Ingest budgets can be imported using the name, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/ingestBudget:IngestBudget budget budgetName
    /// ```
    /// 
    /// [1]: https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets
    /// 
    /// [2]: https://en.wikipedia.org/wiki/Tz_database
    /// </summary>
    [SumoLogicResourceType("sumologic:index/ingestBudget:IngestBudget")]
    public partial class IngestBudget : global::Pulumi.CustomResource
    {
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        [Output("capacityBytes")]
        public Output<int> CapacityBytes { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("fieldValue")]
        public Output<string> FieldValue { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("resetTime")]
        public Output<string?> ResetTime { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a IngestBudget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IngestBudget(string name, IngestBudgetArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/ingestBudget:IngestBudget", name, args ?? new IngestBudgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IngestBudget(string name, Input<string> id, IngestBudgetState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/ingestBudget:IngestBudget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IngestBudget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IngestBudget Get(string name, Input<string> id, IngestBudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new IngestBudget(name, id, state, options);
        }
    }

    public sealed class IngestBudgetArgs : global::Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("capacityBytes", required: true)]
        public Input<int> CapacityBytes { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fieldValue", required: true)]
        public Input<string> FieldValue { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resetTime")]
        public Input<string>? ResetTime { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public IngestBudgetArgs()
        {
        }
        public static new IngestBudgetArgs Empty => new IngestBudgetArgs();
    }

    public sealed class IngestBudgetState : global::Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("capacityBytes")]
        public Input<int>? CapacityBytes { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fieldValue")]
        public Input<string>? FieldValue { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resetTime")]
        public Input<string>? ResetTime { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public IngestBudgetState()
        {
        }
        public static new IngestBudgetState Empty => new IngestBudgetState();
    }
}
