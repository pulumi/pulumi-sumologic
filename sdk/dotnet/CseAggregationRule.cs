// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumo Logic CSE [Aggregation Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/09_Write_an_Aggregation_Rule).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aggregationRule = new SumoLogic.CseAggregationRule("aggregationRule", new()
    ///     {
    ///         AggregationFunctions = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseAggregationRuleAggregationFunctionArgs
    ///             {
    ///                 Arguments = new[]
    ///                 {
    ///                     "metadata_deviceEventId",
    ///                 },
    ///                 Function = "count_distinct",
    ///                 Name = "distinct_eventid_count",
    ///             },
    ///         },
    ///         DescriptionExpression = "Signal description",
    ///         Enabled = true,
    ///         EntitySelectors = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseAggregationRuleEntitySelectorArgs
    ///             {
    ///                 EntityType = "_ip",
    ///                 Expression = "srcDevice_ip",
    ///             },
    ///         },
    ///         GroupByEntity = true,
    ///         GroupByFields = new[]
    ///         {
    ///             "dstDevice_hostname",
    ///         },
    ///         IsPrototype = false,
    ///         MatchExpression = "objectType = \"Network\"",
    ///         NameExpression = "Signal name",
    ///         SeverityMapping = new SumoLogic.Inputs.CseAggregationRuleSeverityMappingArgs
    ///         {
    ///             Default = 5,
    ///             Type = "constant",
    ///         },
    ///         SummaryExpression = "Signal summary",
    ///         Tags = new[]
    ///         {
    ///             "_mitreAttackTactic:TA0009",
    ///         },
    ///         TriggerExpression = "distinct_eventid_count &gt; 5",
    ///         WindowSize = "T30M",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Aggregation Rules can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseAggregationRule:CseAggregationRule aggregation_rule id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseAggregationRule:CseAggregationRule")]
    public partial class CseAggregationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more named aggregation functions
        /// </summary>
        [Output("aggregationFunctions")]
        public Output<ImmutableArray<Outputs.CseAggregationRuleAggregationFunction>> AggregationFunctions { get; private set; } = null!;

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Output("descriptionExpression")]
        public Output<string> DescriptionExpression { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        [Output("entitySelectors")]
        public Output<ImmutableArray<Outputs.CseAggregationRuleEntitySelector>> EntitySelectors { get; private set; } = null!;

        /// <summary>
        /// Whether to group records by the specified entity fields
        /// </summary>
        [Output("groupByEntity")]
        public Output<bool?> GroupByEntity { get; private set; } = null!;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        [Output("groupByFields")]
        public Output<ImmutableArray<string>> GroupByFields { get; private set; } = null!;

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Output("isPrototype")]
        public Output<bool?> IsPrototype { get; private set; } = null!;

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Output("matchExpression")]
        public Output<string> MatchExpression { get; private set; } = null!;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Output("nameExpression")]
        public Output<string> NameExpression { get; private set; } = null!;

        /// <summary>
        /// The configuration of how the severity of the Signals should be mapped from the Records
        /// </summary>
        [Output("severityMapping")]
        public Output<Outputs.CseAggregationRuleSeverityMapping> SeverityMapping { get; private set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Output("summaryExpression")]
        public Output<string?> SummaryExpression { get; private set; } = null!;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The expression to determine whether a Signal should be created based on the aggregation results
        /// </summary>
        [Output("triggerExpression")]
        public Output<string> TriggerExpression { get; private set; } = null!;

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a CseAggregationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseAggregationRule(string name, CseAggregationRuleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseAggregationRule:CseAggregationRule", name, args ?? new CseAggregationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseAggregationRule(string name, Input<string> id, CseAggregationRuleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseAggregationRule:CseAggregationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseAggregationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseAggregationRule Get(string name, Input<string> id, CseAggregationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CseAggregationRule(name, id, state, options);
        }
    }

    public sealed class CseAggregationRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("aggregationFunctions", required: true)]
        private InputList<Inputs.CseAggregationRuleAggregationFunctionArgs>? _aggregationFunctions;

        /// <summary>
        /// One or more named aggregation functions
        /// </summary>
        public InputList<Inputs.CseAggregationRuleAggregationFunctionArgs> AggregationFunctions
        {
            get => _aggregationFunctions ?? (_aggregationFunctions = new InputList<Inputs.CseAggregationRuleAggregationFunctionArgs>());
            set => _aggregationFunctions = value;
        }

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("descriptionExpression", required: true)]
        public Input<string> DescriptionExpression { get; set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("entitySelectors", required: true)]
        private InputList<Inputs.CseAggregationRuleEntitySelectorArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        public InputList<Inputs.CseAggregationRuleEntitySelectorArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseAggregationRuleEntitySelectorArgs>());
            set => _entitySelectors = value;
        }

        /// <summary>
        /// Whether to group records by the specified entity fields
        /// </summary>
        [Input("groupByEntity")]
        public Input<bool>? GroupByEntity { get; set; }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Input("matchExpression", required: true)]
        public Input<string> MatchExpression { get; set; } = null!;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Input("nameExpression", required: true)]
        public Input<string> NameExpression { get; set; } = null!;

        /// <summary>
        /// The configuration of how the severity of the Signals should be mapped from the Records
        /// </summary>
        [Input("severityMapping", required: true)]
        public Input<Inputs.CseAggregationRuleSeverityMappingArgs> SeverityMapping { get; set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The expression to determine whether a Signal should be created based on the aggregation results
        /// </summary>
        [Input("triggerExpression", required: true)]
        public Input<string> TriggerExpression { get; set; } = null!;

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public CseAggregationRuleArgs()
        {
        }
        public static new CseAggregationRuleArgs Empty => new CseAggregationRuleArgs();
    }

    public sealed class CseAggregationRuleState : global::Pulumi.ResourceArgs
    {
        [Input("aggregationFunctions")]
        private InputList<Inputs.CseAggregationRuleAggregationFunctionGetArgs>? _aggregationFunctions;

        /// <summary>
        /// One or more named aggregation functions
        /// </summary>
        public InputList<Inputs.CseAggregationRuleAggregationFunctionGetArgs> AggregationFunctions
        {
            get => _aggregationFunctions ?? (_aggregationFunctions = new InputList<Inputs.CseAggregationRuleAggregationFunctionGetArgs>());
            set => _aggregationFunctions = value;
        }

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("descriptionExpression")]
        public Input<string>? DescriptionExpression { get; set; }

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitySelectors")]
        private InputList<Inputs.CseAggregationRuleEntitySelectorGetArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// </summary>
        public InputList<Inputs.CseAggregationRuleEntitySelectorGetArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseAggregationRuleEntitySelectorGetArgs>());
            set => _entitySelectors = value;
        }

        /// <summary>
        /// Whether to group records by the specified entity fields
        /// </summary>
        [Input("groupByEntity")]
        public Input<bool>? GroupByEntity { get; set; }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Input("matchExpression")]
        public Input<string>? MatchExpression { get; set; }

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Input("nameExpression")]
        public Input<string>? NameExpression { get; set; }

        /// <summary>
        /// The configuration of how the severity of the Signals should be mapped from the Records
        /// </summary>
        [Input("severityMapping")]
        public Input<Inputs.CseAggregationRuleSeverityMappingGetArgs>? SeverityMapping { get; set; }

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The expression to determine whether a Signal should be created based on the aggregation results
        /// </summary>
        [Input("triggerExpression")]
        public Input<string>? TriggerExpression { get; set; }

        /// <summary>
        /// How long of a window to aggregate records for. Current acceptable values are T05M, T10M, T30M, T60M, T24H, T12H, or T05D.
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public CseAggregationRuleState()
        {
        }
        public static new CseAggregationRuleState Empty => new CseAggregationRuleState();
    }
}
