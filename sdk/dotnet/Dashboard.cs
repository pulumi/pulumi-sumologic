// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a [Sumologic Dashboard (New)][1].
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var personalFolder = SumoLogic.GetPersonalFolder.Invoke();
    /// 
    ///     var api_dashboard = new SumoLogic.Dashboard("api-dashboard", new()
    ///     {
    ///         Title = "Api Health Dashboard",
    ///         Description = "Demo dashboard description",
    ///         FolderId = personalFolder.Apply(getPersonalFolderResult =&gt; getPersonalFolderResult.Id),
    ///         RefreshInterval = 120,
    ///         Theme = "Dark",
    ///         TimeRange = new SumoLogic.Inputs.DashboardTimeRangeArgs
    ///         {
    ///             BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeArgs
    ///             {
    ///                 From = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromArgs
    ///                 {
    ///                     LiteralTimeRange = new SumoLogic.Inputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs
    ///                     {
    ///                         RangeName = "today",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         TopologyLabelMap = new SumoLogic.Inputs.DashboardTopologyLabelMapArgs
    ///         {
    ///             Datas = new[]
    ///             {
    ///                 new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs
    ///                 {
    ///                     Label = "cluster",
    ///                     Values = new[]
    ///                     {
    ///                         "api-prod",
    ///                     },
    ///                 },
    ///                 new SumoLogic.Inputs.DashboardTopologyLabelMapDataArgs
    ///                 {
    ///                     Label = "namespace",
    ///                     Values = new[]
    ///                     {
    ///                         "default",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Domain = "app",
    ///         Panels = new[]
    ///         {
    ///             new SumoLogic.Inputs.DashboardPanelArgs
    ///             {
    ///                 TextPanel = new SumoLogic.Inputs.DashboardPanelTextPanelArgs
    ///                 {
    ///                     Key = "text-panel-01",
    ///                     Title = "Api Health",
    ///                     VisualSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["text"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["verticalAlignment"] = "top",
    ///                             ["horizontalAlignment"] = "left",
    ///                             ["fontSize"] = 12,
    ///                         },
    ///                     }),
    ///                     KeepVisualSettingsConsistentWithParent = true,
    ///                     Text = @"## Api Health Monitoring
    /// 
    /// Use this dashboard to monitor API service health. It contains following panels:
    /// 
    /// 1. API errors: Errors in last 12 hours
    /// 3. API 5xx: Count of 5xx response
    /// 3. CPU utilization: CPU utilization in last 60 mins
    /// ",
    ///                 },
    ///             },
    ///             new SumoLogic.Inputs.DashboardPanelArgs
    ///             {
    ///                 SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs
    ///                 {
    ///                     Key = "search-panel-01",
    ///                     Title = "Api Errors by Host",
    ///                     Description = "Errors in api service since last 12 hours",
    ///                     VisualSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["general"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["mode"] = "timeSeries",
    ///                             ["type"] = "area",
    ///                             ["displayType"] = "stacked",
    ///                             ["markerSize"] = 5,
    ///                             ["lineDashType"] = "solid",
    ///                             ["markerType"] = "square",
    ///                             ["lineThickness"] = 1,
    ///                         },
    ///                         ["title"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["fontSize"] = 14,
    ///                         },
    ///                         ["legend"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["enabled"] = true,
    ///                             ["verticalAlign"] = "bottom",
    ///                             ["fontSize"] = 12,
    ///                             ["maxHeight"] = 50,
    ///                             ["showAsTable"] = false,
    ///                             ["wrap"] = true,
    ///                         },
    ///                     }),
    ///                     KeepVisualSettingsConsistentWithParent = true,
    ///                     Queries = new[]
    ///                     {
    ///                         new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs
    ///                         {
    ///                             QueryString = "_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost",
    ///                             QueryType = "Logs",
    ///                             QueryKey = "A",
    ///                         },
    ///                     },
    ///                     TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs
    ///                     {
    ///                         BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs
    ///                         {
    ///                             From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs
    ///                             {
    ///                                 RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs
    ///                                 {
    ///                                     RelativeTime = "-12h",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new SumoLogic.Inputs.DashboardPanelArgs
    ///             {
    ///                 SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs
    ///                 {
    ///                     Key = "metrics-panel-01",
    ///                     Title = "Api 5xx Response Count",
    ///                     Description = "Count of 5xx response from api service",
    ///                     VisualSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["general"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["mode"] = "distribution",
    ///                             ["type"] = "pie",
    ///                             ["displayType"] = "default",
    ///                             ["fillOpacity"] = 1,
    ///                             ["startAngle"] = 270,
    ///                             ["innerRadius"] = "40%",
    ///                             ["maxNumOfSlices"] = 10,
    ///                             ["aggregationType"] = "sum",
    ///                         },
    ///                         ["title"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["fontSize"] = 14,
    ///                         },
    ///                     }),
    ///                     KeepVisualSettingsConsistentWithParent = true,
    ///                     Queries = new[]
    ///                     {
    ///                         new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs
    ///                         {
    ///                             QueryString = "_sourceCategory=api metric=Api-5xx",
    ///                             QueryType = "Metrics",
    ///                             QueryKey = "A",
    ///                             MetricsQueryMode = "Advanced",
    ///                         },
    ///                     },
    ///                     TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs
    ///                     {
    ///                         BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs
    ///                         {
    ///                             From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs
    ///                             {
    ///                                 LiteralTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs
    ///                                 {
    ///                                     RangeName = "today",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new SumoLogic.Inputs.DashboardPanelArgs
    ///             {
    ///                 SumoSearchPanel = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelArgs
    ///                 {
    ///                     Key = "metrics-panel-02",
    ///                     Title = "CPU Utilization",
    ///                     Description = "CPU utilization in api service",
    ///                     VisualSettings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["general"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["mode"] = "timeSeries",
    ///                             ["type"] = "line",
    ///                             ["displayType"] = "smooth",
    ///                             ["markerSize"] = 5,
    ///                             ["lineDashType"] = "dashDot",
    ///                             ["markerType"] = "none",
    ///                             ["lineThickness"] = 1,
    ///                         },
    ///                         ["title"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["fontSize"] = 14,
    ///                         },
    ///                     }),
    ///                     KeepVisualSettingsConsistentWithParent = true,
    ///                     Queries = new[]
    ///                     {
    ///                         new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs
    ///                         {
    ///                             QueryString = "metric=Proc_CPU nite-api-1",
    ///                             QueryType = "Metrics",
    ///                             QueryKey = "A",
    ///                             MetricsQueryMode = "Basic",
    ///                             MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs
    ///                             {
    ///                                 Metric = "Proc_CPU",
    ///                                 Filters = new[]
    ///                                 {
    ///                                     new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs
    ///                                     {
    ///                                         Key = "_sourcehost",
    ///                                         Negation = false,
    ///                                         Value = "nite-api-1",
    ///                                     },
    ///                                 },
    ///                                 AggregationType = "None",
    ///                             },
    ///                         },
    ///                         new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryArgs
    ///                         {
    ///                             QueryString = "metric=Proc_CPU nite-api-2",
    ///                             QueryType = "Metrics",
    ///                             QueryKey = "B",
    ///                             MetricsQueryMode = "Basic",
    ///                             MetricsQueryData = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs
    ///                             {
    ///                                 Metric = "Proc_CPU",
    ///                                 Filters = new[]
    ///                                 {
    ///                                     new SumoLogic.Inputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs
    ///                                     {
    ///                                         Key = "_sourcehost",
    ///                                         Negation = false,
    ///                                         Value = "nite-api-2",
    ///                                     },
    ///                                 },
    ///                                 AggregationType = "None",
    ///                             },
    ///                         },
    ///                     },
    ///                     TimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeArgs
    ///                     {
    ///                         BeginBoundedTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs
    ///                         {
    ///                             From = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs
    ///                             {
    ///                                 RelativeTimeRange = new SumoLogic.Inputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs
    ///                                 {
    ///                                     RelativeTime = "-1h",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Layout = new SumoLogic.Inputs.DashboardLayoutArgs
    ///         {
    ///             Grid = new SumoLogic.Inputs.DashboardLayoutGridArgs
    ///             {
    ///                 LayoutStructures = new[]
    ///                 {
    ///                     new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs
    ///                     {
    ///                         Key = "text-panel-01",
    ///                         Structure = "{\"height\":5,\"width\":24,\"x\":0,\"y\":0}",
    ///                     },
    ///                     new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs
    ///                     {
    ///                         Key = "search-panel-01",
    ///                         Structure = "{\"height\":10,\"width\":12,\"x\":0,\"y\":5}",
    ///                     },
    ///                     new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs
    ///                     {
    ///                         Key = "metrics-panel-01",
    ///                         Structure = "{\"height\":10,\"width\":12,\"x\":12,\"y\":5}",
    ///                     },
    ///                     new SumoLogic.Inputs.DashboardLayoutGridLayoutStructureArgs
    ///                     {
    ///                         Key = "metrics-panel-02",
    ///                         Structure = "{\"height\":10,\"width\":24,\"x\":0,\"y\":25}",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Variables = new[]
    ///         {
    ///             new SumoLogic.Inputs.DashboardVariableArgs
    ///             {
    ///                 Name = "_sourceHost",
    ///                 DisplayName = "Source Host",
    ///                 DefaultValue = "nite-api-1",
    ///                 SourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionArgs
    ///                 {
    ///                     CsvVariableSourceDefinition = new SumoLogic.Inputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs
    ///                     {
    ///                         Values = "nite-api-1,nite-api-2",
    ///                     },
    ///                 },
    ///                 AllowMultiSelect = true,
    ///                 IncludeAllOption = true,
    ///                 HideFromUi = false,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## Attributes reference
    /// 
    /// In addition to all arguments above, the following attributes are exported:
    /// 
    /// - `id` - The ID of the dashboard.
    /// 
    /// ### Schema for `topology_label_map`
    /// - `data` - (Block List, Required) A list of blocks containing label and it's values.
    ///   - - `label` - (Required) The name of the topology label.
    ///   - - `values` - (Required) The values for the topology label.
    /// 
    /// ### Schema for `time_range`
    /// - `complete_literal_time_range` - (Block List, Max: 1, Optional) Literal time range. See
    ///   complete_literal_time_range schema for details.
    /// - `begin_bounded_time_range` - (Block List, Max: 1, Optional) Bounded time range. See
    ///   begin_bounded_time_range schema schema for details.
    ///   schema for details.
    /// 
    /// ### Schema for `complete_literal_time_range`
    /// - `range_name` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previous_week`, `previous_month`.
    /// 
    /// ### Schema for `begin_bounded_time_range`
    /// - `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See
    ///   time_range_boundary schema for details.
    /// - `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See
    ///   time_range_boundary schema for details.
    /// 
    /// ### Schema for `time_range_boundary`
    /// - `epoch_time_range` - (Block List, Optional) Time since the epoch.
    ///     - `epoch_millis` - (Required) Time as a number of milliseconds since the epoch.
    /// 
    /// - `iso8601_time_range` - (Block List, Optional) Time in ISO 8601 format.
    ///     - `iso8601_time` - (Required) Time as a string in ISO 8601 format.
    /// 
    /// - `relative_time_range` - (Block List, Optional) Time in relative format.
    ///     - `relative_time` - (Required) Relative time as a string consisting of following elements:
    ///       1. `-` (optional): minus sign indicates time in the past,
    ///       2. `&lt;number&gt;`: number of time units,
    ///       3. `&lt;time_unit&gt;`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
    ///       
    ///       Multiple pairs of `&lt;number&gt;&lt;time_unit&gt;` may be provided, and they may be in any order. For example,
    /// `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
    /// 
    /// - `literal_time_range` - (Block List, Optional) Time in literal format.
    ///     - `range_name` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
    /// 
    /// ### Schema for `panel`
    /// - `text_panel` - (Block List, Max: 1, Optional) A text panel. See text_panel schema for details.
    /// - `sumo_search_panel` - (Block List, Max: 1, Optional) A search panel. See sumo_search_panel schema
    ///   for details.
    /// 
    /// ### Schema for `text_panel`
    /// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
    ///   of the panel in the dashboard.
    /// - `title` - (Optional) Title of the panel.
    /// - `visual_settings` - (Optional) Visual settings of the panel.
    /// - `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent
    ///   with the settings of the parent panel.
    /// - `text` - (Required) Text to display in the panel.
    /// 
    /// ### Schema for `sumo_search_panel`
    /// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
    ///   of the panel in the dashboard.
    /// - `title` - (Optional) Title of the panel.
    /// - `visual_settings` - (Optional) Visual settings of the panel.
    /// - `keep_visual_settings_consistent_with_parent` - (Optional) Keeps the visual settings, like series colors, consistent
    ///   with the settings of the parent panel.
    /// - `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See
    ///   query schema for details.
    /// - `description` - (Optional) Description of the panel.
    /// - `time_range` - (Block List, Max: 1, Optional) Time range of the panel. See time_range schema
    ///   for details.
    /// - `linked_dashboard` - (Block List, Optional) A list of linked dashboards. See
    ///   linked_dashboard schema for details.
    /// 
    /// ### Schema for `query`
    /// - `query_string` - (Required) The metrics or logs query.
    /// - `query_type` - (Required) The type of the query. One of `Metrics` or `Logs`.
    /// - `query_key` - (Required) The key for metric or log query. Used as an identifier for queries.
    /// - `metric_query_mode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.
    ///   One of `Basic` or `Advanced`.
    /// - `metric_query_data` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See
    ///   metric_query_data schema for details.
    /// 
    /// ### Schema for `metric_query_data`
    /// - `metric` - (Required) The metric of the query.
    /// - `aggregation_type` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.
    /// - `group_by` - The field to group the results by.
    /// - `filter` - (Block List, Required) A list of filters for the metrics query.
    ///     - `key` - (Required) The key of the metrics filter.
    ///     - `value` - (Required) The value of the metrics filter.
    ///     - `negation` - (Optional) Whether or not the metrics filter is negated.
    /// - `operator` - (Block List, Optional) A list of operator data for the metrics query.
    /// 
    /// ### Schema for `operator`
    /// - `operator_name` - (Required) The name of the metrics operator.
    /// - `parameter` - (Block List, Required) A list of operator parameters for the operator data.
    ///     - `key` - (Required) The key of the operator parameter.
    ///     - `value` - (Required) The value of the operator parameter.
    /// 
    /// ### Schema for `linked_dashboard`
    /// - `id` - (Required) Identifier of the linked dashboard.
    /// - `relative_path` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.
    /// - `include_time_range` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.
    /// - `include_variables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.
    /// 
    /// ### Schema for `layout`
    /// - `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.
    /// 
    /// ### Schema for `grid`
    /// - `layout_structure` - (Block List, Required) Layout structure for the panels in the dashboard.
    ///     - `key` - (Required) The identifier of the panel that this structure applies to. It's same as `panel.key`.
    ///     - `structure` - (Required) The structure of the panel.
    /// 
    /// ### Schema for `variable`
    /// - `name` - (Required) Name of the variable. The variable name is case-insensitive.
    /// - `display_name` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.
    /// - `default_value` - (Optional) Default value of the variable.
    /// - `source_definition` - (Required) Source definition for variable values. See
    ///   source_definition schema for details.
    /// - `allow_multi_select` - (Optional) Allow multiple selections in the values dropdown.
    /// - `include_all_option` - (Optional) Include an "All" option at the top of the variable's values dropdown. _Defaults to true._
    /// - `hide_from_ui` - (Optional) Hide the variable in the dashboard UI.
    /// 
    /// ### Schema for `source_definition`
    /// - `log_query_variable_source_definition` - (Optional) Variable values from a log query.
    ///     - `query` - (Required) A log query.
    ///     - `field` - (Required) A field in log query to populate the variable values
    /// - `metadata_variable_source_definition` - (Optional) Variable values from a metric query.
    ///     - `filter` - (Required) Filter to search the catalog.
    ///     - `key` - (Required) Return the values for this given key.
    /// - `csv_variable_source_definition` - (Optional) Variable values in csv format.
    ///     - `values` - (Required) A comma separated values for the variable.
    /// 
    /// ## Import
    /// 
    /// Dashboard can be imported using the dashboard id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)
    /// </summary>
    [SumoLogicResourceType("sumologic:index/dashboard:Dashboard")]
    public partial class Dashboard : global::Pulumi.CustomResource
    {
        [Output("coloringRules")]
        public Output<ImmutableArray<Outputs.DashboardColoringRule>> ColoringRules { get; private set; } = null!;

        /// <summary>
        /// Description of the dashboard.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// The identifier of the folder to save the dashboard in. By default it is saved in your
        /// personal folder.
        /// </summary>
        [Output("folderId")]
        public Output<string?> FolderId { get; private set; } = null!;

        /// <summary>
        /// Layout of the dashboard. See layout schema for details.
        /// </summary>
        [Output("layout")]
        public Output<Outputs.DashboardLayout?> Layout { get; private set; } = null!;

        /// <summary>
        /// A list of panels in the dashboard. See panel schema for details.
        /// </summary>
        [Output("panels")]
        public Output<ImmutableArray<Outputs.DashboardPanel>> Panels { get; private set; } = null!;

        /// <summary>
        /// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
        /// </summary>
        [Output("refreshInterval")]
        public Output<int?> RefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Theme of the dashboard.
        /// </summary>
        [Output("theme")]
        public Output<string?> Theme { get; private set; } = null!;

        /// <summary>
        /// Time range of the dashboard. See time range schema
        /// for details.
        /// </summary>
        [Output("timeRange")]
        public Output<Outputs.DashboardTimeRange> TimeRange { get; private set; } = null!;

        /// <summary>
        /// Title of the dashboard.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Topology labels for the dashboard. See
        /// topology label map schema
        /// for details.
        /// </summary>
        [Output("topologyLabelMap")]
        public Output<Outputs.DashboardTopologyLabelMap?> TopologyLabelMap { get; private set; } = null!;

        /// <summary>
        /// A list of variables for the dashboard. See variable schema
        /// for details.
        /// </summary>
        [Output("variables")]
        public Output<ImmutableArray<Outputs.DashboardVariable>> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a Dashboard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Dashboard(string name, DashboardArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/dashboard:Dashboard", name, args ?? new DashboardArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Dashboard(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/dashboard:Dashboard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Dashboard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Dashboard Get(string name, Input<string> id, DashboardState? state = null, CustomResourceOptions? options = null)
        {
            return new Dashboard(name, id, state, options);
        }
    }

    public sealed class DashboardArgs : global::Pulumi.ResourceArgs
    {
        [Input("coloringRules")]
        private InputList<Inputs.DashboardColoringRuleArgs>? _coloringRules;
        public InputList<Inputs.DashboardColoringRuleArgs> ColoringRules
        {
            get => _coloringRules ?? (_coloringRules = new InputList<Inputs.DashboardColoringRuleArgs>());
            set => _coloringRules = value;
        }

        /// <summary>
        /// Description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The identifier of the folder to save the dashboard in. By default it is saved in your
        /// personal folder.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Layout of the dashboard. See layout schema for details.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.DashboardLayoutArgs>? Layout { get; set; }

        [Input("panels")]
        private InputList<Inputs.DashboardPanelArgs>? _panels;

        /// <summary>
        /// A list of panels in the dashboard. See panel schema for details.
        /// </summary>
        public InputList<Inputs.DashboardPanelArgs> Panels
        {
            get => _panels ?? (_panels = new InputList<Inputs.DashboardPanelArgs>());
            set => _panels = value;
        }

        /// <summary>
        /// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
        /// </summary>
        [Input("refreshInterval")]
        public Input<int>? RefreshInterval { get; set; }

        /// <summary>
        /// Theme of the dashboard.
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// Time range of the dashboard. See time range schema
        /// for details.
        /// </summary>
        [Input("timeRange", required: true)]
        public Input<Inputs.DashboardTimeRangeArgs> TimeRange { get; set; } = null!;

        /// <summary>
        /// Title of the dashboard.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Topology labels for the dashboard. See
        /// topology label map schema
        /// for details.
        /// </summary>
        [Input("topologyLabelMap")]
        public Input<Inputs.DashboardTopologyLabelMapArgs>? TopologyLabelMap { get; set; }

        [Input("variables")]
        private InputList<Inputs.DashboardVariableArgs>? _variables;

        /// <summary>
        /// A list of variables for the dashboard. See variable schema
        /// for details.
        /// </summary>
        public InputList<Inputs.DashboardVariableArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.DashboardVariableArgs>());
            set => _variables = value;
        }

        public DashboardArgs()
        {
        }
        public static new DashboardArgs Empty => new DashboardArgs();
    }

    public sealed class DashboardState : global::Pulumi.ResourceArgs
    {
        [Input("coloringRules")]
        private InputList<Inputs.DashboardColoringRuleGetArgs>? _coloringRules;
        public InputList<Inputs.DashboardColoringRuleGetArgs> ColoringRules
        {
            get => _coloringRules ?? (_coloringRules = new InputList<Inputs.DashboardColoringRuleGetArgs>());
            set => _coloringRules = value;
        }

        /// <summary>
        /// Description of the dashboard.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The identifier of the folder to save the dashboard in. By default it is saved in your
        /// personal folder.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Layout of the dashboard. See layout schema for details.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.DashboardLayoutGetArgs>? Layout { get; set; }

        [Input("panels")]
        private InputList<Inputs.DashboardPanelGetArgs>? _panels;

        /// <summary>
        /// A list of panels in the dashboard. See panel schema for details.
        /// </summary>
        public InputList<Inputs.DashboardPanelGetArgs> Panels
        {
            get => _panels ?? (_panels = new InputList<Inputs.DashboardPanelGetArgs>());
            set => _panels = value;
        }

        /// <summary>
        /// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
        /// </summary>
        [Input("refreshInterval")]
        public Input<int>? RefreshInterval { get; set; }

        /// <summary>
        /// Theme of the dashboard.
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// Time range of the dashboard. See time range schema
        /// for details.
        /// </summary>
        [Input("timeRange")]
        public Input<Inputs.DashboardTimeRangeGetArgs>? TimeRange { get; set; }

        /// <summary>
        /// Title of the dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Topology labels for the dashboard. See
        /// topology label map schema
        /// for details.
        /// </summary>
        [Input("topologyLabelMap")]
        public Input<Inputs.DashboardTopologyLabelMapGetArgs>? TopologyLabelMap { get; set; }

        [Input("variables")]
        private InputList<Inputs.DashboardVariableGetArgs>? _variables;

        /// <summary>
        /// A list of variables for the dashboard. See variable schema
        /// for details.
        /// </summary>
        public InputList<Inputs.DashboardVariableGetArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.DashboardVariableGetArgs>());
            set => _variables = value;
        }

        public DashboardState()
        {
        }
        public static new DashboardState Empty => new DashboardState();
    }
}
