// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    public static class GetHttpSource
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetHttpSource.Invoke(new()
        ///     {
        ///         CollectorId = 121212,
        ///         Name = "source_name",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
        /// If either `id` or `name` are not present, the data source block fails with a panic (at this point).
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
        /// - `name` - The name of the collector.
        /// - `description` - The description of the collector.
        /// - `category` - The default source category for any source attached to this collector.
        /// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
        /// - `multiline` - Multiline processing enabled or not.
        /// - `url` - The HTTP endpoint to use for sending data to this source.
        /// </summary>
        public static Task<GetHttpSourceResult> InvokeAsync(GetHttpSourceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHttpSourceResult>("sumologic:index/getHttpSource:getHttpSource", args ?? new GetHttpSourceArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using SumoLogic = Pulumi.SumoLogic;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = SumoLogic.GetHttpSource.Invoke(new()
        ///     {
        ///         CollectorId = 121212,
        ///         Name = "source_name",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// A HTTP Source can be looked up by using a combination of `collector_id` &amp; `name`.
        /// If either `id` or `name` are not present, the data source block fails with a panic (at this point).
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes reference
        /// 
        /// The following attributes are exported:
        /// 
        /// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
        /// - `name` - The name of the collector.
        /// - `description` - The description of the collector.
        /// - `category` - The default source category for any source attached to this collector.
        /// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
        /// - `multiline` - Multiline processing enabled or not.
        /// - `url` - The HTTP endpoint to use for sending data to this source.
        /// </summary>
        public static Output<GetHttpSourceResult> Invoke(GetHttpSourceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHttpSourceResult>("sumologic:index/getHttpSource:getHttpSource", args ?? new GetHttpSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHttpSourceArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectorId")]
        public int? CollectorId { get; set; }

        [Input("id")]
        public int? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetHttpSourceArgs()
        {
        }
        public static new GetHttpSourceArgs Empty => new GetHttpSourceArgs();
    }

    public sealed class GetHttpSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        [Input("id")]
        public Input<int>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetHttpSourceInvokeArgs()
        {
        }
        public static new GetHttpSourceInvokeArgs Empty => new GetHttpSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetHttpSourceResult
    {
        public readonly string Category;
        public readonly int? CollectorId;
        public readonly string Description;
        public readonly int Id;
        public readonly bool Multiline;
        public readonly string? Name;
        public readonly string Timezone;
        public readonly string Url;

        [OutputConstructor]
        private GetHttpSourceResult(
            string category,

            int? collectorId,

            string description,

            int id,

            bool multiline,

            string? name,

            string timezone,

            string url)
        {
            Category = category;
            CollectorId = collectorId;
            Description = description;
            Id = id;
            Multiline = multiline;
            Name = name;
            Timezone = timezone;
            Url = url;
        }
    }
}
