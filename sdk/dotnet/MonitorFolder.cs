// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides the ability to create, read, delete, and update folders for [Monitors](https://help.sumologic.com/?cid=10020).
    /// &gt; If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor folder resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders).
    /// 
    /// ## Example Monitor Folder
    /// 
    /// NOTE: Monitor folders are considered a different resource from Library content folders.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tfMonitorFolder1 = new SumoLogic.MonitorFolder("tfMonitorFolder1", new()
    ///     {
    ///         Description = "A folder for monitors managed by terraform.",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Monitor folders can be imported using the monitor folder identifier, such ashcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/monitorFolder:MonitorFolder tf_monitor_folder_1 0000000000ABC123
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/?cid=10020 [2]https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-to-monitors-folders
    /// </summary>
    [SumoLogicResourceType("sumologic:index/monitorFolder:MonitorFolder")]
    public partial class MonitorFolder : global::Pulumi.CustomResource
    {
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The description of the monitor folder.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("isLocked")]
        public Output<bool?> IsLocked { get; private set; } = null!;

        [Output("isMutable")]
        public Output<bool> IsMutable { get; private set; } = null!;

        [Output("isSystem")]
        public Output<bool> IsSystem { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor folder. The name must be alphanumeric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.
        /// </summary>
        [Output("objPermissions")]
        public Output<ImmutableArray<Outputs.MonitorFolderObjPermission>> ObjPermissions { get; private set; } = null!;

        /// <summary>
        /// The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        [Output("postRequestMap")]
        public Output<ImmutableDictionary<string, string>?> PostRequestMap { get; private set; } = null!;

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryFolder`
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a MonitorFolder resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MonitorFolder(string name, MonitorFolderArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/monitorFolder:MonitorFolder", name, args ?? new MonitorFolderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MonitorFolder(string name, Input<string> id, MonitorFolderState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/monitorFolder:MonitorFolder", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MonitorFolder resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MonitorFolder Get(string name, Input<string> id, MonitorFolderState? state = null, CustomResourceOptions? options = null)
        {
            return new MonitorFolder(name, id, state, options);
        }
    }

    public sealed class MonitorFolderArgs : global::Pulumi.ResourceArgs
    {
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the monitor folder.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The name of the monitor folder. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objPermissions")]
        private InputList<Inputs.MonitorFolderObjPermissionArgs>? _objPermissions;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.
        /// </summary>
        public InputList<Inputs.MonitorFolderObjPermissionArgs> ObjPermissions
        {
            get => _objPermissions ?? (_objPermissions = new InputList<Inputs.MonitorFolderObjPermissionArgs>());
            set => _objPermissions = value;
        }

        /// <summary>
        /// The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryFolder`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorFolderArgs()
        {
        }
        public static new MonitorFolderArgs Empty => new MonitorFolderArgs();
    }

    public sealed class MonitorFolderState : global::Pulumi.ResourceArgs
    {
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The description of the monitor folder.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("isLocked")]
        public Input<bool>? IsLocked { get; set; }

        [Input("isMutable")]
        public Input<bool>? IsMutable { get; set; }

        [Input("isSystem")]
        public Input<bool>? IsSystem { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// The name of the monitor folder. The name must be alphanumeric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objPermissions")]
        private InputList<Inputs.MonitorFolderObjPermissionGetArgs>? _objPermissions;

        /// <summary>
        /// `obj_permission` construct represents a Permission Statement associated with this Folder. A set of `obj_permission` constructs can be specified under a single Folder. An `obj_permission` construct can be used to control permissions Explicitly associated with a Folder. But, it cannot be used to control permissions Inherited from a Parent / Ancestor Folder.  Default FGP would be still set to the Folder upon creation (e.g. the creating user would have full permission), even if no `obj_permission` construct is specified at a Folder and the FGP feature is enabled at the account.
        /// </summary>
        public InputList<Inputs.MonitorFolderObjPermissionGetArgs> ObjPermissions
        {
            get => _objPermissions ?? (_objPermissions = new InputList<Inputs.MonitorFolderObjPermissionGetArgs>());
            set => _objPermissions = value;
        }

        /// <summary>
        /// The identifier of the Monitor Folder that contains this Monitor Folder. Defaults to the root folder.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        [Input("postRequestMap")]
        private InputMap<string>? _postRequestMap;
        public InputMap<string> PostRequestMap
        {
            get => _postRequestMap ?? (_postRequestMap = new InputMap<string>());
            set => _postRequestMap = value;
        }

        /// <summary>
        /// The type of object model. Valid value:
        /// - `MonitorsLibraryFolder`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("version")]
        public Input<int>? Version { get; set; }

        public MonitorFolderState()
        {
        }
        public static new MonitorFolderState Empty => new MonitorFolderState();
    }
}
