// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a CSE Rule Tuning Expression.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ruleTuningExpression = new SumoLogic.CseRuleTuningExpression("ruleTuningExpression", new()
    ///     {
    ///         Description = "New Rule Tuning Description",
    ///         Enabled = true,
    ///         Exclude = true,
    ///         Expression = "accountId = 1234",
    ///         IsGlobal = false,
    ///         RuleIds = new[]
    ///         {
    ///             "LEGACY-S00084",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Rule tuning expression can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression rule_tuning_expression id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression")]
    public partial class CseRuleTuningExpression : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the rule tuning expression.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
        /// </summary>
        [Output("exclude")]
        public Output<bool> Exclude { get; private set; } = null!;

        /// <summary>
        /// Expression to match.
        /// </summary>
        [Output("expression")]
        public Output<string> Expression { get; private set; } = null!;

        /// <summary>
        /// Set to true if this tuning expression should be applied to all rules.
        /// </summary>
        [Output("isGlobal")]
        public Output<bool> IsGlobal { get; private set; } = null!;

        /// <summary>
        /// The name of the rule tuning expression.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)
        /// </summary>
        [Output("ruleIds")]
        public Output<ImmutableArray<string>> RuleIds { get; private set; } = null!;


        /// <summary>
        /// Create a CseRuleTuningExpression resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseRuleTuningExpression(string name, CseRuleTuningExpressionArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression", name, args ?? new CseRuleTuningExpressionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseRuleTuningExpression(string name, Input<string> id, CseRuleTuningExpressionState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseRuleTuningExpression resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseRuleTuningExpression Get(string name, Input<string> id, CseRuleTuningExpressionState? state = null, CustomResourceOptions? options = null)
        {
            return new CseRuleTuningExpression(name, id, state, options);
        }
    }

    public sealed class CseRuleTuningExpressionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the rule tuning expression.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
        /// </summary>
        [Input("exclude", required: true)]
        public Input<bool> Exclude { get; set; } = null!;

        /// <summary>
        /// Expression to match.
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// Set to true if this tuning expression should be applied to all rules.
        /// </summary>
        [Input("isGlobal", required: true)]
        public Input<bool> IsGlobal { get; set; } = null!;

        /// <summary>
        /// The name of the rule tuning expression.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleIds", required: true)]
        private InputList<string>? _ruleIds;

        /// <summary>
        /// List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)
        /// </summary>
        public InputList<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new InputList<string>());
            set => _ruleIds = value;
        }

        public CseRuleTuningExpressionArgs()
        {
        }
        public static new CseRuleTuningExpressionArgs Empty => new CseRuleTuningExpressionArgs();
    }

    public sealed class CseRuleTuningExpressionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the rule tuning expression.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
        /// </summary>
        [Input("exclude")]
        public Input<bool>? Exclude { get; set; }

        /// <summary>
        /// Expression to match.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// Set to true if this tuning expression should be applied to all rules.
        /// </summary>
        [Input("isGlobal")]
        public Input<bool>? IsGlobal { get; set; }

        /// <summary>
        /// The name of the rule tuning expression.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleIds")]
        private InputList<string>? _ruleIds;

        /// <summary>
        /// List of rule IDs, for the tuning expression to be applied. ( Empty if is_global set to true)
        /// </summary>
        public InputList<string> RuleIds
        {
            get => _ruleIds ?? (_ruleIds = new InputList<string>());
            set => _ruleIds = value;
        }

        public CseRuleTuningExpressionState()
        {
        }
        public static new CseRuleTuningExpressionState Empty => new CseRuleTuningExpressionState();
    }
}
