// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Sets the Sumologic Policies. Since each policy is global for the entire organization, please ensure that only a single
    /// instance of this resource is defined. The behavior for defining more than one policies resource is undefined.
    /// 
    /// The following policies are supported:
    /// - [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index)
    /// - [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards)
    /// - [Maximum Web Session Timeout Policy](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout)
    /// - [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index)
    /// - [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org)
    /// - [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePolicies = new SumoLogic.Policies("examplePolicies", new()
    ///     {
    ///         Audit = false,
    ///         DataAccessLevel = false,
    ///         MaxUserSessionTimeout = "7d",
    ///         SearchAudit = false,
    ///         ShareDashboardsOutsideOrganization = false,
    ///         UserConcurrentSessionsLimit = new SumoLogic.Inputs.PoliciesUserConcurrentSessionsLimitArgs
    ///         {
    ///             Enabled = false,
    ///             MaxConcurrentSessions = 100,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Policies can be imported using the id `org-policies`. hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/policies:Policies example_policies org-policies
    /// ```
    /// 
    ///  [1]https://help.sumologic.com/Manage/Security/Audit-Index [2]https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards [3]https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout [4]https://help.sumologic.com/Manage/Security/Search_Audit_Index [5]https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org [6]https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions
    /// </summary>
    [SumoLogicResourceType("sumologic:index/policies:Policies")]
    public partial class Policies : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
        /// </summary>
        [Output("audit")]
        public Output<bool> Audit { get; private set; } = null!;

        /// <summary>
        /// Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
        /// </summary>
        [Output("dataAccessLevel")]
        public Output<bool> DataAccessLevel { get; private set; } = null!;

        /// <summary>
        /// The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
        /// </summary>
        [Output("maxUserSessionTimeout")]
        public Output<string> MaxUserSessionTimeout { get; private set; } = null!;

        /// <summary>
        /// Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
        /// </summary>
        [Output("searchAudit")]
        public Output<bool> SearchAudit { get; private set; } = null!;

        /// <summary>
        /// Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
        /// </summary>
        [Output("shareDashboardsOutsideOrganization")]
        public Output<bool> ShareDashboardsOutsideOrganization { get; private set; } = null!;

        /// <summary>
        /// The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
        /// </summary>
        [Output("userConcurrentSessionsLimit")]
        public Output<Outputs.PoliciesUserConcurrentSessionsLimit> UserConcurrentSessionsLimit { get; private set; } = null!;


        /// <summary>
        /// Create a Policies resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policies(string name, PoliciesArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/policies:Policies", name, args ?? new PoliciesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policies(string name, Input<string> id, PoliciesState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/policies:Policies", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policies resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policies Get(string name, Input<string> id, PoliciesState? state = null, CustomResourceOptions? options = null)
        {
            return new Policies(name, id, state, options);
        }
    }

    public sealed class PoliciesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
        /// </summary>
        [Input("audit", required: true)]
        public Input<bool> Audit { get; set; } = null!;

        /// <summary>
        /// Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
        /// </summary>
        [Input("dataAccessLevel", required: true)]
        public Input<bool> DataAccessLevel { get; set; } = null!;

        /// <summary>
        /// The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
        /// </summary>
        [Input("maxUserSessionTimeout", required: true)]
        public Input<string> MaxUserSessionTimeout { get; set; } = null!;

        /// <summary>
        /// Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
        /// </summary>
        [Input("searchAudit", required: true)]
        public Input<bool> SearchAudit { get; set; } = null!;

        /// <summary>
        /// Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
        /// </summary>
        [Input("shareDashboardsOutsideOrganization", required: true)]
        public Input<bool> ShareDashboardsOutsideOrganization { get; set; } = null!;

        /// <summary>
        /// The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
        /// </summary>
        [Input("userConcurrentSessionsLimit", required: true)]
        public Input<Inputs.PoliciesUserConcurrentSessionsLimitArgs> UserConcurrentSessionsLimit { get; set; } = null!;

        public PoliciesArgs()
        {
        }
        public static new PoliciesArgs Empty => new PoliciesArgs();
    }

    public sealed class PoliciesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the [Audit Policy](https://help.sumologic.com/Manage/Security/Audit-Index) is enabled.
        /// </summary>
        [Input("audit")]
        public Input<bool>? Audit { get; set; }

        /// <summary>
        /// Whether the [Data Access Level Policy](https://help.sumologic.com/Manage/Security/Data_Access_Level_for_Shared_Dashboards) is enabled.
        /// </summary>
        [Input("dataAccessLevel")]
        public Input<bool>? DataAccessLevel { get; set; }

        /// <summary>
        /// The [maximum web session timeout](https://help.sumologic.com/Manage/Security/Set_a_Maximum_Web_Session_Timeout) users are able to configure within their user preferences.
        /// </summary>
        [Input("maxUserSessionTimeout")]
        public Input<string>? MaxUserSessionTimeout { get; set; }

        /// <summary>
        /// Whether the [Search Audit Policy](https://help.sumologic.com/Manage/Security/Search_Audit_Index) is enabled.
        /// </summary>
        [Input("searchAudit")]
        public Input<bool>? SearchAudit { get; set; }

        /// <summary>
        /// Whether the [Share a Dashboard Outside Organization Policy](https://help.sumologic.com/Visualizations-and-Alerts/Dashboards/Share_Dashboards/Share_a_Dashboard_Outside_Your_Org) is enabled.
        /// </summary>
        [Input("shareDashboardsOutsideOrganization")]
        public Input<bool>? ShareDashboardsOutsideOrganization { get; set; }

        /// <summary>
        /// The [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions). See user_concurrent_sessions_limit schema for details.
        /// </summary>
        [Input("userConcurrentSessionsLimit")]
        public Input<Inputs.PoliciesUserConcurrentSessionsLimitGetArgs>? UserConcurrentSessionsLimit { get; set; }

        public PoliciesState()
        {
        }
        public static new PoliciesState Empty => new PoliciesState();
    }
}
