// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// Provides a Sumologic CSE Log Mapping.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var logMapping = new SumoLogic.CseLogMapping("logMapping", new()
    ///     {
    ///         Enabled = true,
    ///         Fields = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseLogMappingFieldArgs
    ///             {
    ///                 AlternateValues = new[]
    ///                 {
    ///                     "altValue",
    ///                 },
    ///                 CaseInsensitive = false,
    ///                 DefaultValue = "",
    ///                 FieldJoins = new[]
    ///                 {
    ///                     "and",
    ///                 },
    ///                 Format = "JSON",
    ///                 FormatParameters = new[]
    ///                 {
    ///                     "param",
    ///                 },
    ///                 JoinDelimiter = "",
    ///                 Lookups = new[]
    ///                 {
    ///                     new SumoLogic.Inputs.CseLogMappingFieldLookupArgs
    ///                     {
    ///                         Key = "tunnel-up",
    ///                         Value = "true",
    ///                     },
    ///                 },
    ///                 Name = "action",
    ///                 SkippedValues = new[]
    ///                 {
    ///                     "-",
    ///                 },
    ///                 SplitDelimiter = ",",
    ///                 SplitIndex = 0,
    ///                 TimeZone = "UTC",
    ///                 Value = "action",
    ///                 ValueType = "constant",
    ///             },
    ///         },
    ///         ProductGuid = "003d35b3-3ba8-4e93-8776-e5810b4e243e",
    ///         RecordType = "Audit",
    ///         RelatesEntities = true,
    ///         SkippedValues = new[]
    ///         {
    ///             "skipped",
    ///         },
    ///         StructuredInputs = new[]
    ///         {
    ///             new SumoLogic.Inputs.CseLogMappingStructuredInputArgs
    ///             {
    ///                 EventIdPattern = "vpn",
    ///                 LogFormat = "JSON",
    ///                 Product = "fortinate",
    ///                 Vendor = "fortinate",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Log Mapping can be imported using the field id, e.g.hcl
    /// 
    /// ```sh
    ///  $ pulumi import sumologic:index/cseLogMapping:CseLogMapping log_mapping id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseLogMapping:CseLogMapping")]
    public partial class CseLogMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// List of fields for the new log mapping. See field_schema for details.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.CseLogMappingField>> Fields { get; private set; } = null!;

        /// <summary>
        /// The name of the log mapping.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the parent log mapping.
        /// </summary>
        [Output("parentId")]
        public Output<string?> ParentId { get; private set; } = null!;

        /// <summary>
        /// Product GUID.
        /// </summary>
        [Output("productGuid")]
        public Output<string> ProductGuid { get; private set; } = null!;

        /// <summary>
        /// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
        /// </summary>
        [Output("recordType")]
        public Output<string> RecordType { get; private set; } = null!;

        /// <summary>
        /// Set to true to relate entities.
        /// </summary>
        [Output("relatesEntities")]
        public Output<bool?> RelatesEntities { get; private set; } = null!;

        /// <summary>
        /// List of skipped values.
        /// </summary>
        [Output("skippedValues")]
        public Output<ImmutableArray<string>> SkippedValues { get; private set; } = null!;

        /// <summary>
        /// List of structured inputs for the new log mapping. See structured_input_schema for details.
        /// </summary>
        [Output("structuredInputs")]
        public Output<ImmutableArray<Outputs.CseLogMappingStructuredInput>> StructuredInputs { get; private set; } = null!;

        /// <summary>
        /// Unstructured fields for the new log mapping. See unstructured_field_schema for details.
        /// </summary>
        [Output("unstructuredFields")]
        public Output<Outputs.CseLogMappingUnstructuredFields?> UnstructuredFields { get; private set; } = null!;


        /// <summary>
        /// Create a CseLogMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseLogMapping(string name, CseLogMappingArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseLogMapping:CseLogMapping", name, args ?? new CseLogMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseLogMapping(string name, Input<string> id, CseLogMappingState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseLogMapping:CseLogMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseLogMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseLogMapping Get(string name, Input<string> id, CseLogMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new CseLogMapping(name, id, state, options);
        }
    }

    public sealed class CseLogMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("fields", required: true)]
        private InputList<Inputs.CseLogMappingFieldArgs>? _fields;

        /// <summary>
        /// List of fields for the new log mapping. See field_schema for details.
        /// </summary>
        public InputList<Inputs.CseLogMappingFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.CseLogMappingFieldArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the log mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the parent log mapping.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Product GUID.
        /// </summary>
        [Input("productGuid", required: true)]
        public Input<string> ProductGuid { get; set; } = null!;

        /// <summary>
        /// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
        /// </summary>
        [Input("recordType", required: true)]
        public Input<string> RecordType { get; set; } = null!;

        /// <summary>
        /// Set to true to relate entities.
        /// </summary>
        [Input("relatesEntities")]
        public Input<bool>? RelatesEntities { get; set; }

        [Input("skippedValues")]
        private InputList<string>? _skippedValues;

        /// <summary>
        /// List of skipped values.
        /// </summary>
        public InputList<string> SkippedValues
        {
            get => _skippedValues ?? (_skippedValues = new InputList<string>());
            set => _skippedValues = value;
        }

        [Input("structuredInputs")]
        private InputList<Inputs.CseLogMappingStructuredInputArgs>? _structuredInputs;

        /// <summary>
        /// List of structured inputs for the new log mapping. See structured_input_schema for details.
        /// </summary>
        public InputList<Inputs.CseLogMappingStructuredInputArgs> StructuredInputs
        {
            get => _structuredInputs ?? (_structuredInputs = new InputList<Inputs.CseLogMappingStructuredInputArgs>());
            set => _structuredInputs = value;
        }

        /// <summary>
        /// Unstructured fields for the new log mapping. See unstructured_field_schema for details.
        /// </summary>
        [Input("unstructuredFields")]
        public Input<Inputs.CseLogMappingUnstructuredFieldsArgs>? UnstructuredFields { get; set; }

        public CseLogMappingArgs()
        {
        }
        public static new CseLogMappingArgs Empty => new CseLogMappingArgs();
    }

    public sealed class CseLogMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enabled flag.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("fields")]
        private InputList<Inputs.CseLogMappingFieldGetArgs>? _fields;

        /// <summary>
        /// List of fields for the new log mapping. See field_schema for details.
        /// </summary>
        public InputList<Inputs.CseLogMappingFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.CseLogMappingFieldGetArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The name of the log mapping.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the parent log mapping.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// Product GUID.
        /// </summary>
        [Input("productGuid")]
        public Input<string>? ProductGuid { get; set; }

        /// <summary>
        /// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
        /// </summary>
        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        /// <summary>
        /// Set to true to relate entities.
        /// </summary>
        [Input("relatesEntities")]
        public Input<bool>? RelatesEntities { get; set; }

        [Input("skippedValues")]
        private InputList<string>? _skippedValues;

        /// <summary>
        /// List of skipped values.
        /// </summary>
        public InputList<string> SkippedValues
        {
            get => _skippedValues ?? (_skippedValues = new InputList<string>());
            set => _skippedValues = value;
        }

        [Input("structuredInputs")]
        private InputList<Inputs.CseLogMappingStructuredInputGetArgs>? _structuredInputs;

        /// <summary>
        /// List of structured inputs for the new log mapping. See structured_input_schema for details.
        /// </summary>
        public InputList<Inputs.CseLogMappingStructuredInputGetArgs> StructuredInputs
        {
            get => _structuredInputs ?? (_structuredInputs = new InputList<Inputs.CseLogMappingStructuredInputGetArgs>());
            set => _structuredInputs = value;
        }

        /// <summary>
        /// Unstructured fields for the new log mapping. See unstructured_field_schema for details.
        /// </summary>
        [Input("unstructuredFields")]
        public Input<Inputs.CseLogMappingUnstructuredFieldsGetArgs>? UnstructuredFields { get; set; }

        public CseLogMappingState()
        {
        }
        public static new CseLogMappingState Empty => new CseLogMappingState();
    }
}
