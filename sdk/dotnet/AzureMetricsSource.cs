// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    [SumoLogicResourceType("sumologic:index/azureMetricsSource:AzureMetricsSource")]
    public partial class AzureMetricsSource : global::Pulumi.CustomResource
    {
        [Output("authentication")]
        public Output<Outputs.AzureMetricsSourceAuthentication> Authentication { get; private set; } = null!;

        [Output("automaticDateParsing")]
        public Output<bool?> AutomaticDateParsing { get; private set; } = null!;

        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        [Output("collectorId")]
        public Output<int> CollectorId { get; private set; } = null!;

        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("cutoffRelativeTime")]
        public Output<string?> CutoffRelativeTime { get; private set; } = null!;

        [Output("cutoffTimestamp")]
        public Output<int?> CutoffTimestamp { get; private set; } = null!;

        [Output("defaultDateFormats")]
        public Output<ImmutableArray<Outputs.AzureMetricsSourceDefaultDateFormat>> DefaultDateFormats { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("fields")]
        public Output<ImmutableDictionary<string, string>?> Fields { get; private set; } = null!;

        [Output("filters")]
        public Output<ImmutableArray<Outputs.AzureMetricsSourceFilter>> Filters { get; private set; } = null!;

        [Output("forceTimezone")]
        public Output<bool?> ForceTimezone { get; private set; } = null!;

        [Output("hashAlgorithm")]
        public Output<string?> HashAlgorithm { get; private set; } = null!;

        [Output("hostName")]
        public Output<string?> HostName { get; private set; } = null!;

        [Output("manualPrefixRegexp")]
        public Output<string?> ManualPrefixRegexp { get; private set; } = null!;

        [Output("multilineProcessingEnabled")]
        public Output<bool?> MultilineProcessingEnabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("path")]
        public Output<Outputs.AzureMetricsSourcePath> Path { get; private set; } = null!;

        [Output("paused")]
        public Output<bool?> Paused { get; private set; } = null!;

        [Output("scanInterval")]
        public Output<int?> ScanInterval { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("useAutolineMatching")]
        public Output<bool?> UseAutolineMatching { get; private set; } = null!;


        /// <summary>
        /// Create a AzureMetricsSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzureMetricsSource(string name, AzureMetricsSourceArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/azureMetricsSource:AzureMetricsSource", name, args ?? new AzureMetricsSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzureMetricsSource(string name, Input<string> id, AzureMetricsSourceState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/azureMetricsSource:AzureMetricsSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzureMetricsSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzureMetricsSource Get(string name, Input<string> id, AzureMetricsSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new AzureMetricsSource(name, id, state, options);
        }
    }

    public sealed class AzureMetricsSourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("authentication", required: true)]
        public Input<Inputs.AzureMetricsSourceAuthenticationArgs> Authentication { get; set; } = null!;

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId", required: true)]
        public Input<int> CollectorId { get; set; } = null!;

        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AzureMetricsSourceDefaultDateFormatArgs>? _defaultDateFormats;
        public InputList<Inputs.AzureMetricsSourceDefaultDateFormatArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AzureMetricsSourceDefaultDateFormatArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AzureMetricsSourceFilterArgs>? _filters;
        public InputList<Inputs.AzureMetricsSourceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AzureMetricsSourceFilterArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hashAlgorithm")]
        public Input<string>? HashAlgorithm { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("path", required: true)]
        public Input<Inputs.AzureMetricsSourcePathArgs> Path { get; set; } = null!;

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AzureMetricsSourceArgs()
        {
        }
        public static new AzureMetricsSourceArgs Empty => new AzureMetricsSourceArgs();
    }

    public sealed class AzureMetricsSourceState : global::Pulumi.ResourceArgs
    {
        [Input("authentication")]
        public Input<Inputs.AzureMetricsSourceAuthenticationGetArgs>? Authentication { get; set; }

        [Input("automaticDateParsing")]
        public Input<bool>? AutomaticDateParsing { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("collectorId")]
        public Input<int>? CollectorId { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cutoffRelativeTime")]
        public Input<string>? CutoffRelativeTime { get; set; }

        [Input("cutoffTimestamp")]
        public Input<int>? CutoffTimestamp { get; set; }

        [Input("defaultDateFormats")]
        private InputList<Inputs.AzureMetricsSourceDefaultDateFormatGetArgs>? _defaultDateFormats;
        public InputList<Inputs.AzureMetricsSourceDefaultDateFormatGetArgs> DefaultDateFormats
        {
            get => _defaultDateFormats ?? (_defaultDateFormats = new InputList<Inputs.AzureMetricsSourceDefaultDateFormatGetArgs>());
            set => _defaultDateFormats = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private InputList<Inputs.AzureMetricsSourceFilterGetArgs>? _filters;
        public InputList<Inputs.AzureMetricsSourceFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.AzureMetricsSourceFilterGetArgs>());
            set => _filters = value;
        }

        [Input("forceTimezone")]
        public Input<bool>? ForceTimezone { get; set; }

        [Input("hashAlgorithm")]
        public Input<string>? HashAlgorithm { get; set; }

        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        [Input("manualPrefixRegexp")]
        public Input<string>? ManualPrefixRegexp { get; set; }

        [Input("multilineProcessingEnabled")]
        public Input<bool>? MultilineProcessingEnabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("path")]
        public Input<Inputs.AzureMetricsSourcePathGetArgs>? Path { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("scanInterval")]
        public Input<int>? ScanInterval { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("useAutolineMatching")]
        public Input<bool>? UseAutolineMatching { get; set; }

        public AzureMetricsSourceState()
        {
        }
        public static new AzureMetricsSourceState Empty => new AzureMetricsSourceState();
    }
}
