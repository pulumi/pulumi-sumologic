// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// ## ___
    /// 
    /// layout: "sumologic"
    /// page_title: "SumoLogic: sumologic.CseOutlierRule"
    /// description: |-
    ///   Provides a CSE Outlier Rule
    /// ---
    /// 
    /// # sumologic.CseOutlierRule
    /// Provides a Sumo Logic CSE [Outlier Rule](https://help.sumologic.com/docs/cse/rules/write-outlier-rule/).
    /// 
    /// ## Import
    /// 
    /// Outlier rules can be imported using the field id, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/cseOutlierRule:CseOutlierRule outlier_rule id
    /// ```
    /// </summary>
    [SumoLogicResourceType("sumologic:index/cseOutlierRule:CseOutlierRule")]
    public partial class CseOutlierRule : global::Pulumi.CustomResource
    {
        [Output("aggregationFunctions")]
        public Output<Outputs.CseOutlierRuleAggregationFunctions> AggregationFunctions { get; private set; } = null!;

        /// <summary>
        /// The baseline window size in milliseconds
        /// </summary>
        [Output("baselineWindowSize")]
        public Output<string> BaselineWindowSize { get; private set; } = null!;

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Output("descriptionExpression")]
        public Output<string> DescriptionExpression { get; private set; } = null!;

        /// <summary>
        /// The deviation threshold used to calculate the threshold to trigger signals
        /// </summary>
        [Output("deviationThreshold")]
        public Output<int> DeviationThreshold { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The entities to generate Signals on
        /// + `entityType` - (Required) The type of the entity to generate the Signal on
        /// </summary>
        [Output("entitySelectors")]
        public Output<ImmutableArray<Outputs.CseOutlierRuleEntitySelector>> EntitySelectors { get; private set; } = null!;

        /// <summary>
        /// The minimum threshold to trigger signals
        /// </summary>
        [Output("floorValue")]
        public Output<int> FloorValue { get; private set; } = null!;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        [Output("groupByFields")]
        public Output<ImmutableArray<string>> GroupByFields { get; private set; } = null!;

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Output("isPrototype")]
        public Output<bool?> IsPrototype { get; private set; } = null!;

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Output("matchExpression")]
        public Output<string> MatchExpression { get; private set; } = null!;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Output("nameExpression")]
        public Output<string> NameExpression { get; private set; } = null!;

        /// <summary>
        /// The retention window size in milliseconds
        /// </summary>
        [Output("retentionWindowSize")]
        public Output<string> RetentionWindowSize { get; private set; } = null!;

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Output("severity")]
        public Output<int> Severity { get; private set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Output("summaryExpression")]
        public Output<string?> SummaryExpression { get; private set; } = null!;

        /// <summary>
        /// For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Output("suppressionWindowSize")]
        public Output<int?> SuppressionWindowSize { get; private set; } = null!;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
        /// </summary>
        [Output("windowSize")]
        public Output<string> WindowSize { get; private set; } = null!;


        /// <summary>
        /// Create a CseOutlierRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CseOutlierRule(string name, CseOutlierRuleArgs args, CustomResourceOptions? options = null)
            : base("sumologic:index/cseOutlierRule:CseOutlierRule", name, args ?? new CseOutlierRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CseOutlierRule(string name, Input<string> id, CseOutlierRuleState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/cseOutlierRule:CseOutlierRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CseOutlierRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CseOutlierRule Get(string name, Input<string> id, CseOutlierRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CseOutlierRule(name, id, state, options);
        }
    }

    public sealed class CseOutlierRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("aggregationFunctions", required: true)]
        public Input<Inputs.CseOutlierRuleAggregationFunctionsArgs> AggregationFunctions { get; set; } = null!;

        /// <summary>
        /// The baseline window size in milliseconds
        /// </summary>
        [Input("baselineWindowSize", required: true)]
        public Input<string> BaselineWindowSize { get; set; } = null!;

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("descriptionExpression", required: true)]
        public Input<string> DescriptionExpression { get; set; } = null!;

        /// <summary>
        /// The deviation threshold used to calculate the threshold to trigger signals
        /// </summary>
        [Input("deviationThreshold", required: true)]
        public Input<int> DeviationThreshold { get; set; } = null!;

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("entitySelectors", required: true)]
        private InputList<Inputs.CseOutlierRuleEntitySelectorArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// + `entityType` - (Required) The type of the entity to generate the Signal on
        /// </summary>
        public InputList<Inputs.CseOutlierRuleEntitySelectorArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseOutlierRuleEntitySelectorArgs>());
            set => _entitySelectors = value;
        }

        /// <summary>
        /// The minimum threshold to trigger signals
        /// </summary>
        [Input("floorValue", required: true)]
        public Input<int> FloorValue { get; set; } = null!;

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Input("matchExpression", required: true)]
        public Input<string> MatchExpression { get; set; } = null!;

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Input("nameExpression", required: true)]
        public Input<string> NameExpression { get; set; } = null!;

        /// <summary>
        /// The retention window size in milliseconds
        /// </summary>
        [Input("retentionWindowSize", required: true)]
        public Input<string> RetentionWindowSize { get; set; } = null!;

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Input("severity", required: true)]
        public Input<int> Severity { get; set; } = null!;

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        /// <summary>
        /// For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("suppressionWindowSize")]
        public Input<int>? SuppressionWindowSize { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
        /// </summary>
        [Input("windowSize", required: true)]
        public Input<string> WindowSize { get; set; } = null!;

        public CseOutlierRuleArgs()
        {
        }
        public static new CseOutlierRuleArgs Empty => new CseOutlierRuleArgs();
    }

    public sealed class CseOutlierRuleState : global::Pulumi.ResourceArgs
    {
        [Input("aggregationFunctions")]
        public Input<Inputs.CseOutlierRuleAggregationFunctionsGetArgs>? AggregationFunctions { get; set; }

        /// <summary>
        /// The baseline window size in milliseconds
        /// </summary>
        [Input("baselineWindowSize")]
        public Input<string>? BaselineWindowSize { get; set; }

        /// <summary>
        /// The description of the generated Signals
        /// </summary>
        [Input("descriptionExpression")]
        public Input<string>? DescriptionExpression { get; set; }

        /// <summary>
        /// The deviation threshold used to calculate the threshold to trigger signals
        /// </summary>
        [Input("deviationThreshold")]
        public Input<int>? DeviationThreshold { get; set; }

        /// <summary>
        /// Whether the rule should generate Signals
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entitySelectors")]
        private InputList<Inputs.CseOutlierRuleEntitySelectorGetArgs>? _entitySelectors;

        /// <summary>
        /// The entities to generate Signals on
        /// + `entityType` - (Required) The type of the entity to generate the Signal on
        /// </summary>
        public InputList<Inputs.CseOutlierRuleEntitySelectorGetArgs> EntitySelectors
        {
            get => _entitySelectors ?? (_entitySelectors = new InputList<Inputs.CseOutlierRuleEntitySelectorGetArgs>());
            set => _entitySelectors = value;
        }

        /// <summary>
        /// The minimum threshold to trigger signals
        /// </summary>
        [Input("floorValue")]
        public Input<int>? FloorValue { get; set; }

        [Input("groupByFields")]
        private InputList<string>? _groupByFields;

        /// <summary>
        /// A list of fields to group records by
        /// </summary>
        public InputList<string> GroupByFields
        {
            get => _groupByFields ?? (_groupByFields = new InputList<string>());
            set => _groupByFields = value;
        }

        /// <summary>
        /// Whether the generated Signals should be prototype Signals
        /// </summary>
        [Input("isPrototype")]
        public Input<bool>? IsPrototype { get; set; }

        /// <summary>
        /// The expression for which records to match on
        /// </summary>
        [Input("matchExpression")]
        public Input<string>? MatchExpression { get; set; }

        /// <summary>
        /// The name of the Rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the generated Signals
        /// </summary>
        [Input("nameExpression")]
        public Input<string>? NameExpression { get; set; }

        /// <summary>
        /// The retention window size in milliseconds
        /// </summary>
        [Input("retentionWindowSize")]
        public Input<string>? RetentionWindowSize { get; set; }

        /// <summary>
        /// The severity of the generated Signals
        /// </summary>
        [Input("severity")]
        public Input<int>? Severity { get; set; }

        /// <summary>
        /// The summary of the generated Signals
        /// </summary>
        [Input("summaryExpression")]
        public Input<string>? SummaryExpression { get; set; }

        /// <summary>
        /// For how long to suppress Signal generation, in milliseconds. Must be greater than `window_size` and less than the global limit of 7 days.
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Input("suppressionWindowSize")]
        public Input<int>? SuppressionWindowSize { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tags of the generated Signals
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
        /// </summary>
        [Input("windowSize")]
        public Input<string>? WindowSize { get; set; }

        public CseOutlierRuleState()
        {
        }
        public static new CseOutlierRuleState Empty => new CseOutlierRuleState();
    }
}
