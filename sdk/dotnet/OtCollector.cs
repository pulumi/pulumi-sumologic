// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SumoLogic
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using SumoLogic = Pulumi.SumoLogic;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleOtCollector = new SumoLogic.OtCollector("example_ot_collector", new()
    ///     {
    ///         Description = "Testing OT collector using terraform",
    ///         TimeZone = "UTC",
    ///         Category = "apache",
    ///         IsRemotelyManaged = true,
    ///         Ephemeral = false,
    ///         Name = "test OT Collector",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OT Collectors can be imported using the collector id, e.g.:
    /// 
    /// hcl
    /// 
    /// ```sh
    /// $ pulumi import sumologic:index/otCollector:OtCollector test 00005AF3107A4007
    /// ```
    /// 
    /// [1]: https://help.sumologic.com/docs/send-data/opentelemetry-collector
    /// 
    /// [2]: https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral
    /// 
    /// [3]: https://help.sumologic.com/Manage/Fields
    /// 
    /// [4]: https://en.wikipedia.org/wiki/Tz_database
    /// </summary>
    [SumoLogicResourceType("sumologic:index/otCollector:OtCollector")]
    public partial class OtCollector : global::Pulumi.CustomResource
    {
        [Output("alive")]
        public Output<bool> Alive { get; private set; } = null!;

        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Output("category")]
        public Output<string?> Category { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of the OT Collector.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        /// </summary>
        [Output("ephemeral")]
        public Output<bool?> Ephemeral { get; private set; } = null!;

        /// <summary>
        /// Management Status of the OT Collector based on if it is remotely or locally managed.
        /// </summary>
        [Output("isRemotelyManaged")]
        public Output<bool?> IsRemotelyManaged { get; private set; } = null!;

        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// Name of the OT Collector.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// 
        /// The following attributes are exported:
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a OtCollector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OtCollector(string name, OtCollectorArgs? args = null, CustomResourceOptions? options = null)
            : base("sumologic:index/otCollector:OtCollector", name, args ?? new OtCollectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OtCollector(string name, Input<string> id, OtCollectorState? state = null, CustomResourceOptions? options = null)
            : base("sumologic:index/otCollector:OtCollector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OtCollector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OtCollector Get(string name, Input<string> id, OtCollectorState? state = null, CustomResourceOptions? options = null)
        {
            return new OtCollector(name, id, state, options);
        }
    }

    public sealed class OtCollectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Description of the OT Collector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        /// </summary>
        [Input("ephemeral")]
        public Input<bool>? Ephemeral { get; set; }

        /// <summary>
        /// Management Status of the OT Collector based on if it is remotely or locally managed.
        /// </summary>
        [Input("isRemotelyManaged")]
        public Input<bool>? IsRemotelyManaged { get; set; }

        /// <summary>
        /// Name of the OT Collector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// 
        /// The following attributes are exported:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public OtCollectorArgs()
        {
        }
        public static new OtCollectorArgs Empty => new OtCollectorArgs();
    }

    public sealed class OtCollectorState : global::Pulumi.ResourceArgs
    {
        [Input("alive")]
        public Input<bool>? Alive { get; set; }

        /// <summary>
        /// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Description of the OT Collector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        /// </summary>
        [Input("ephemeral")]
        public Input<bool>? Ephemeral { get; set; }

        /// <summary>
        /// Management Status of the OT Collector based on if it is remotely or locally managed.
        /// </summary>
        [Input("isRemotelyManaged")]
        public Input<bool>? IsRemotelyManaged { get; set; }

        [Input("modifiedAt")]
        public Input<string>? ModifiedAt { get; set; }

        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// Name of the OT Collector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map containing [key/value pairs][3].
        /// 
        /// The following attributes are exported:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public OtCollectorState()
        {
        }
        public static new OtCollectorState Empty => new OtCollectorState();
    }
}
