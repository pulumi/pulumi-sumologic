// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Sumologic CSE Automation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseAutomation(ctx, "insightAutomation", &sumologic.CseAutomationArgs{
//				CseResourceType: pulumi.String("INSIGHT"),
//				ExecutionTypes: pulumi.StringArray{
//					pulumi.String("NEW_INSIGHT"),
//					pulumi.String("INSIGHT_CLOSED"),
//				},
//				PlaybookId: pulumi.String("638079aedb99cafada1e80a0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewCseAutomation(ctx, "entityAutomation", &sumologic.CseAutomationArgs{
//				CseResourceSubTypes: pulumi.StringArray{
//					pulumi.String("_ip"),
//				},
//				CseResourceType: pulumi.String("ENTITY"),
//				ExecutionTypes: pulumi.StringArray{
//					pulumi.String("ON_DEMAND"),
//				},
//				PlaybookId: pulumi.String("638079aedb99cafada1e80a0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Automation can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseAutomation:CseAutomation automation id
//
// ```
type CseAutomation struct {
	pulumi.CustomResourceState

	// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
	//
	// The following attributes are exported:
	CseResourceSubTypes pulumi.StringArrayOutput `pulumi:"cseResourceSubTypes"`
	// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
	CseResourceType pulumi.StringOutput `pulumi:"cseResourceType"`
	// Automation description.
	Description pulumi.StringOutput `pulumi:"description"`
	Enabled     pulumi.BoolOutput   `pulumi:"enabled"`
	// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
	ExecutionTypes pulumi.StringArrayOutput `pulumi:"executionTypes"`
	// Automation name.
	Name       pulumi.StringOutput `pulumi:"name"`
	PlaybookId pulumi.StringOutput `pulumi:"playbookId"`
}

// NewCseAutomation registers a new resource with the given unique name, arguments, and options.
func NewCseAutomation(ctx *pulumi.Context,
	name string, args *CseAutomationArgs, opts ...pulumi.ResourceOption) (*CseAutomation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CseResourceType == nil {
		return nil, errors.New("invalid value for required argument 'CseResourceType'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ExecutionTypes == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionTypes'")
	}
	if args.PlaybookId == nil {
		return nil, errors.New("invalid value for required argument 'PlaybookId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CseAutomation
	err := ctx.RegisterResource("sumologic:index/cseAutomation:CseAutomation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseAutomation gets an existing CseAutomation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseAutomation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseAutomationState, opts ...pulumi.ResourceOption) (*CseAutomation, error) {
	var resource CseAutomation
	err := ctx.ReadResource("sumologic:index/cseAutomation:CseAutomation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseAutomation resources.
type cseAutomationState struct {
	// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
	//
	// The following attributes are exported:
	CseResourceSubTypes []string `pulumi:"cseResourceSubTypes"`
	// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
	CseResourceType *string `pulumi:"cseResourceType"`
	// Automation description.
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
	ExecutionTypes []string `pulumi:"executionTypes"`
	// Automation name.
	Name       *string `pulumi:"name"`
	PlaybookId *string `pulumi:"playbookId"`
}

type CseAutomationState struct {
	// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
	//
	// The following attributes are exported:
	CseResourceSubTypes pulumi.StringArrayInput
	// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
	CseResourceType pulumi.StringPtrInput
	// Automation description.
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
	ExecutionTypes pulumi.StringArrayInput
	// Automation name.
	Name       pulumi.StringPtrInput
	PlaybookId pulumi.StringPtrInput
}

func (CseAutomationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseAutomationState)(nil)).Elem()
}

type cseAutomationArgs struct {
	// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
	//
	// The following attributes are exported:
	CseResourceSubTypes []string `pulumi:"cseResourceSubTypes"`
	// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
	CseResourceType string `pulumi:"cseResourceType"`
	Enabled         bool   `pulumi:"enabled"`
	// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
	ExecutionTypes []string `pulumi:"executionTypes"`
	PlaybookId     string   `pulumi:"playbookId"`
}

// The set of arguments for constructing a CseAutomation resource.
type CseAutomationArgs struct {
	// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
	//
	// The following attributes are exported:
	CseResourceSubTypes pulumi.StringArrayInput
	// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
	CseResourceType pulumi.StringInput
	Enabled         pulumi.BoolInput
	// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
	ExecutionTypes pulumi.StringArrayInput
	PlaybookId     pulumi.StringInput
}

func (CseAutomationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseAutomationArgs)(nil)).Elem()
}

type CseAutomationInput interface {
	pulumi.Input

	ToCseAutomationOutput() CseAutomationOutput
	ToCseAutomationOutputWithContext(ctx context.Context) CseAutomationOutput
}

func (*CseAutomation) ElementType() reflect.Type {
	return reflect.TypeOf((**CseAutomation)(nil)).Elem()
}

func (i *CseAutomation) ToCseAutomationOutput() CseAutomationOutput {
	return i.ToCseAutomationOutputWithContext(context.Background())
}

func (i *CseAutomation) ToCseAutomationOutputWithContext(ctx context.Context) CseAutomationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAutomationOutput)
}

func (i *CseAutomation) ToOutput(ctx context.Context) pulumix.Output[*CseAutomation] {
	return pulumix.Output[*CseAutomation]{
		OutputState: i.ToCseAutomationOutputWithContext(ctx).OutputState,
	}
}

// CseAutomationArrayInput is an input type that accepts CseAutomationArray and CseAutomationArrayOutput values.
// You can construct a concrete instance of `CseAutomationArrayInput` via:
//
//	CseAutomationArray{ CseAutomationArgs{...} }
type CseAutomationArrayInput interface {
	pulumi.Input

	ToCseAutomationArrayOutput() CseAutomationArrayOutput
	ToCseAutomationArrayOutputWithContext(context.Context) CseAutomationArrayOutput
}

type CseAutomationArray []CseAutomationInput

func (CseAutomationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseAutomation)(nil)).Elem()
}

func (i CseAutomationArray) ToCseAutomationArrayOutput() CseAutomationArrayOutput {
	return i.ToCseAutomationArrayOutputWithContext(context.Background())
}

func (i CseAutomationArray) ToCseAutomationArrayOutputWithContext(ctx context.Context) CseAutomationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAutomationArrayOutput)
}

func (i CseAutomationArray) ToOutput(ctx context.Context) pulumix.Output[[]*CseAutomation] {
	return pulumix.Output[[]*CseAutomation]{
		OutputState: i.ToCseAutomationArrayOutputWithContext(ctx).OutputState,
	}
}

// CseAutomationMapInput is an input type that accepts CseAutomationMap and CseAutomationMapOutput values.
// You can construct a concrete instance of `CseAutomationMapInput` via:
//
//	CseAutomationMap{ "key": CseAutomationArgs{...} }
type CseAutomationMapInput interface {
	pulumi.Input

	ToCseAutomationMapOutput() CseAutomationMapOutput
	ToCseAutomationMapOutputWithContext(context.Context) CseAutomationMapOutput
}

type CseAutomationMap map[string]CseAutomationInput

func (CseAutomationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseAutomation)(nil)).Elem()
}

func (i CseAutomationMap) ToCseAutomationMapOutput() CseAutomationMapOutput {
	return i.ToCseAutomationMapOutputWithContext(context.Background())
}

func (i CseAutomationMap) ToCseAutomationMapOutputWithContext(ctx context.Context) CseAutomationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseAutomationMapOutput)
}

func (i CseAutomationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CseAutomation] {
	return pulumix.Output[map[string]*CseAutomation]{
		OutputState: i.ToCseAutomationMapOutputWithContext(ctx).OutputState,
	}
}

type CseAutomationOutput struct{ *pulumi.OutputState }

func (CseAutomationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseAutomation)(nil)).Elem()
}

func (o CseAutomationOutput) ToCseAutomationOutput() CseAutomationOutput {
	return o
}

func (o CseAutomationOutput) ToCseAutomationOutputWithContext(ctx context.Context) CseAutomationOutput {
	return o
}

func (o CseAutomationOutput) ToOutput(ctx context.Context) pulumix.Output[*CseAutomation] {
	return pulumix.Output[*CseAutomation]{
		OutputState: o.OutputState,
	}
}

// CSE Resource sub-type when cseResourceType is specified as "ENTITY". Examples: "_ip", "_mac".
//
// The following attributes are exported:
func (o CseAutomationOutput) CseResourceSubTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringArrayOutput { return v.CseResourceSubTypes }).(pulumi.StringArrayOutput)
}

// CSE Resource type for automation. Valid values: "INSIGHT", "ENTITY".
func (o CseAutomationOutput) CseResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringOutput { return v.CseResourceType }).(pulumi.StringOutput)
}

// Automation description.
func (o CseAutomationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o CseAutomationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Automation execution type. Valid values: "NEW_INSIGHT", "INSIGHT_CLOSED", "ON_DEMAND".
func (o CseAutomationOutput) ExecutionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringArrayOutput { return v.ExecutionTypes }).(pulumi.StringArrayOutput)
}

// Automation name.
func (o CseAutomationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CseAutomationOutput) PlaybookId() pulumi.StringOutput {
	return o.ApplyT(func(v *CseAutomation) pulumi.StringOutput { return v.PlaybookId }).(pulumi.StringOutput)
}

type CseAutomationArrayOutput struct{ *pulumi.OutputState }

func (CseAutomationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseAutomation)(nil)).Elem()
}

func (o CseAutomationArrayOutput) ToCseAutomationArrayOutput() CseAutomationArrayOutput {
	return o
}

func (o CseAutomationArrayOutput) ToCseAutomationArrayOutputWithContext(ctx context.Context) CseAutomationArrayOutput {
	return o
}

func (o CseAutomationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CseAutomation] {
	return pulumix.Output[[]*CseAutomation]{
		OutputState: o.OutputState,
	}
}

func (o CseAutomationArrayOutput) Index(i pulumi.IntInput) CseAutomationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseAutomation {
		return vs[0].([]*CseAutomation)[vs[1].(int)]
	}).(CseAutomationOutput)
}

type CseAutomationMapOutput struct{ *pulumi.OutputState }

func (CseAutomationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseAutomation)(nil)).Elem()
}

func (o CseAutomationMapOutput) ToCseAutomationMapOutput() CseAutomationMapOutput {
	return o
}

func (o CseAutomationMapOutput) ToCseAutomationMapOutputWithContext(ctx context.Context) CseAutomationMapOutput {
	return o
}

func (o CseAutomationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CseAutomation] {
	return pulumix.Output[map[string]*CseAutomation]{
		OutputState: o.OutputState,
	}
}

func (o CseAutomationMapOutput) MapIndex(k pulumi.StringInput) CseAutomationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseAutomation {
		return vs[0].(map[string]*CseAutomation)[vs[1].(string)]
	}).(CseAutomationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseAutomationInput)(nil)).Elem(), &CseAutomation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseAutomationArrayInput)(nil)).Elem(), CseAutomationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseAutomationMapInput)(nil)).Elem(), CseAutomationMap{})
	pulumi.RegisterOutputType(CseAutomationOutput{})
	pulumi.RegisterOutputType(CseAutomationArrayOutput{})
	pulumi.RegisterOutputType(CseAutomationMapOutput{})
}
