// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic AWS XRay source to collect metrics derived from XRay traces.
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
//				Description: pulumi.String("Just testing this"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewAwsXraySource(ctx, "awsXraySource", &sumologic.AwsXraySourceArgs{
//				Authentication: &AwsXraySourceAuthenticationArgs{
//					RoleArn: pulumi.String("arn:aws:iam::01234567890:role/sumo-role"),
//					Type:    pulumi.String("AWSRoleBasedAuthentication"),
//				},
//				Category:    pulumi.String("aws/xray"),
//				CollectorId: collector.ID(),
//				ContentType: pulumi.String("AwsXRay"),
//				Description: pulumi.String("My description"),
//				Path: &AwsXraySourcePathArgs{
//					LimitToRegions: pulumi.StringArray{
//						pulumi.String("us-west-2"),
//					},
//					Type: pulumi.String("AwsXRayPath"),
//				},
//				Paused:       pulumi.Bool(false),
//				ScanInterval: pulumi.Int(300000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AWS XRay sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/awsXraySource:AwsXraySource test 123/456
//
// ```
//
//	AWS XRay sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/awsXraySource:AwsXraySource test my-test-collector/my-test-source
//
// ```
type AwsXraySource struct {
	pulumi.CustomResourceState

	// Authentication details for making `xray:Get*` calls.
	Authentication       AwsXraySourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput              `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput            `pulumi:"category"`
	CollectorId          pulumi.IntOutput                  `pulumi:"collectorId"`
	// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
	ContentType                pulumi.StringOutput                       `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                    `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                       `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         AwsXraySourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                    `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                    `pulumi:"fields"`
	Filters                    AwsXraySourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                      `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                    `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                    `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                      `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                       `pulumi:"name"`
	// The location to scan for new data.
	Path AwsXraySourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
	ScanInterval        pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone            pulumi.StringPtrOutput `pulumi:"timezone"`
	Url                 pulumi.StringOutput    `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput   `pulumi:"useAutolineMatching"`
}

// NewAwsXraySource registers a new resource with the given unique name, arguments, and options.
func NewAwsXraySource(ctx *pulumi.Context,
	name string, args *AwsXraySourceArgs, opts ...pulumi.ResourceOption) (*AwsXraySource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource AwsXraySource
	err := ctx.RegisterResource("sumologic:index/awsXraySource:AwsXraySource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsXraySource gets an existing AwsXraySource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsXraySource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsXraySourceState, opts ...pulumi.ResourceOption) (*AwsXraySource, error) {
	var resource AwsXraySource
	err := ctx.ReadResource("sumologic:index/awsXraySource:AwsXraySource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsXraySource resources.
type awsXraySourceState struct {
	// Authentication details for making `xray:Get*` calls.
	Authentication       *AwsXraySourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                        `pulumi:"automaticDateParsing"`
	Category             *string                      `pulumi:"category"`
	CollectorId          *int                         `pulumi:"collectorId"`
	// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
	ContentType                *string                          `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []AwsXraySourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []AwsXraySourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path *AwsXraySourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
	ScanInterval        *int    `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type AwsXraySourceState struct {
	// Authentication details for making `xray:Get*` calls.
	Authentication       AwsXraySourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         AwsXraySourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    AwsXraySourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path AwsXraySourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
	ScanInterval        pulumi.IntPtrInput
	Timezone            pulumi.StringPtrInput
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (AwsXraySourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsXraySourceState)(nil)).Elem()
}

type awsXraySourceArgs struct {
	// Authentication details for making `xray:Get*` calls.
	Authentication       AwsXraySourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                       `pulumi:"automaticDateParsing"`
	Category             *string                     `pulumi:"category"`
	CollectorId          int                         `pulumi:"collectorId"`
	// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
	ContentType                string                           `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []AwsXraySourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []AwsXraySourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path AwsXraySourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a AwsXraySource resource.
type AwsXraySourceArgs struct {
	// Authentication details for making `xray:Get*` calls.
	Authentication       AwsXraySourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         AwsXraySourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    AwsXraySourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path AwsXraySourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (AwsXraySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsXraySourceArgs)(nil)).Elem()
}

type AwsXraySourceInput interface {
	pulumi.Input

	ToAwsXraySourceOutput() AwsXraySourceOutput
	ToAwsXraySourceOutputWithContext(ctx context.Context) AwsXraySourceOutput
}

func (*AwsXraySource) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsXraySource)(nil)).Elem()
}

func (i *AwsXraySource) ToAwsXraySourceOutput() AwsXraySourceOutput {
	return i.ToAwsXraySourceOutputWithContext(context.Background())
}

func (i *AwsXraySource) ToAwsXraySourceOutputWithContext(ctx context.Context) AwsXraySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsXraySourceOutput)
}

// AwsXraySourceArrayInput is an input type that accepts AwsXraySourceArray and AwsXraySourceArrayOutput values.
// You can construct a concrete instance of `AwsXraySourceArrayInput` via:
//
//	AwsXraySourceArray{ AwsXraySourceArgs{...} }
type AwsXraySourceArrayInput interface {
	pulumi.Input

	ToAwsXraySourceArrayOutput() AwsXraySourceArrayOutput
	ToAwsXraySourceArrayOutputWithContext(context.Context) AwsXraySourceArrayOutput
}

type AwsXraySourceArray []AwsXraySourceInput

func (AwsXraySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsXraySource)(nil)).Elem()
}

func (i AwsXraySourceArray) ToAwsXraySourceArrayOutput() AwsXraySourceArrayOutput {
	return i.ToAwsXraySourceArrayOutputWithContext(context.Background())
}

func (i AwsXraySourceArray) ToAwsXraySourceArrayOutputWithContext(ctx context.Context) AwsXraySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsXraySourceArrayOutput)
}

// AwsXraySourceMapInput is an input type that accepts AwsXraySourceMap and AwsXraySourceMapOutput values.
// You can construct a concrete instance of `AwsXraySourceMapInput` via:
//
//	AwsXraySourceMap{ "key": AwsXraySourceArgs{...} }
type AwsXraySourceMapInput interface {
	pulumi.Input

	ToAwsXraySourceMapOutput() AwsXraySourceMapOutput
	ToAwsXraySourceMapOutputWithContext(context.Context) AwsXraySourceMapOutput
}

type AwsXraySourceMap map[string]AwsXraySourceInput

func (AwsXraySourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsXraySource)(nil)).Elem()
}

func (i AwsXraySourceMap) ToAwsXraySourceMapOutput() AwsXraySourceMapOutput {
	return i.ToAwsXraySourceMapOutputWithContext(context.Background())
}

func (i AwsXraySourceMap) ToAwsXraySourceMapOutputWithContext(ctx context.Context) AwsXraySourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsXraySourceMapOutput)
}

type AwsXraySourceOutput struct{ *pulumi.OutputState }

func (AwsXraySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsXraySource)(nil)).Elem()
}

func (o AwsXraySourceOutput) ToAwsXraySourceOutput() AwsXraySourceOutput {
	return o
}

func (o AwsXraySourceOutput) ToAwsXraySourceOutputWithContext(ctx context.Context) AwsXraySourceOutput {
	return o
}

// Authentication details for making `xray:Get*` calls.
func (o AwsXraySourceOutput) Authentication() AwsXraySourceAuthenticationOutput {
	return o.ApplyT(func(v *AwsXraySource) AwsXraySourceAuthenticationOutput { return v.Authentication }).(AwsXraySourceAuthenticationOutput)
}

func (o AwsXraySourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o AwsXraySourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. This has to be `AwsXRay` for AWS XRay source.
func (o AwsXraySourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o AwsXraySourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o AwsXraySourceOutput) DefaultDateFormats() AwsXraySourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *AwsXraySource) AwsXraySourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(AwsXraySourceDefaultDateFormatArrayOutput)
}

func (o AwsXraySourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o AwsXraySourceOutput) Filters() AwsXraySourceFilterArrayOutput {
	return o.ApplyT(func(v *AwsXraySource) AwsXraySourceFilterArrayOutput { return v.Filters }).(AwsXraySourceFilterArrayOutput)
}

func (o AwsXraySourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o AwsXraySourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o AwsXraySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location to scan for new data.
func (o AwsXraySourceOutput) Path() AwsXraySourcePathOutput {
	return o.ApplyT(func(v *AwsXraySource) AwsXraySourcePathOutput { return v.Path }).(AwsXraySourcePathOutput)
}

// When set to true, the scanner is paused. To disable, set to false.
func (o AwsXraySourceOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Time interval in milliseconds of scans for new data. The minimum value is 1000 milliseconds. Currently this value is not respected, and collection happens at a default interval of 1 minute.
func (o AwsXraySourceOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o AwsXraySourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o AwsXraySourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o AwsXraySourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AwsXraySource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type AwsXraySourceArrayOutput struct{ *pulumi.OutputState }

func (AwsXraySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsXraySource)(nil)).Elem()
}

func (o AwsXraySourceArrayOutput) ToAwsXraySourceArrayOutput() AwsXraySourceArrayOutput {
	return o
}

func (o AwsXraySourceArrayOutput) ToAwsXraySourceArrayOutputWithContext(ctx context.Context) AwsXraySourceArrayOutput {
	return o
}

func (o AwsXraySourceArrayOutput) Index(i pulumi.IntInput) AwsXraySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsXraySource {
		return vs[0].([]*AwsXraySource)[vs[1].(int)]
	}).(AwsXraySourceOutput)
}

type AwsXraySourceMapOutput struct{ *pulumi.OutputState }

func (AwsXraySourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsXraySource)(nil)).Elem()
}

func (o AwsXraySourceMapOutput) ToAwsXraySourceMapOutput() AwsXraySourceMapOutput {
	return o
}

func (o AwsXraySourceMapOutput) ToAwsXraySourceMapOutputWithContext(ctx context.Context) AwsXraySourceMapOutput {
	return o
}

func (o AwsXraySourceMapOutput) MapIndex(k pulumi.StringInput) AwsXraySourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsXraySource {
		return vs[0].(map[string]*AwsXraySource)[vs[1].(string)]
	}).(AwsXraySourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsXraySourceInput)(nil)).Elem(), &AwsXraySource{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsXraySourceArrayInput)(nil)).Elem(), AwsXraySourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsXraySourceMapInput)(nil)).Elem(), AwsXraySourceMap{})
	pulumi.RegisterOutputType(AwsXraySourceOutput{})
	pulumi.RegisterOutputType(AwsXraySourceArrayOutput{})
	pulumi.RegisterOutputType(AwsXraySourceMapOutput{})
}
