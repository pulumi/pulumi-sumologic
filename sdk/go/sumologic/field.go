// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Field](https://help.sumologic.com/Manage/Fields).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewField(ctx, "field", &sumologic.FieldArgs{
// 			DataType:  pulumi.String("Int"),
// 			FieldName: pulumi.String("int_field_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Fields can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/field:Field field 000000000ABC1234
// ```
//
//  [1]https://help.sumologic.com/Manage/Fields
type Field struct {
	pulumi.CustomResourceState

	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType pulumi.StringPtrOutput `pulumi:"dataType"`
	// Field identifier.
	FieldId pulumi.StringOutput `pulumi:"fieldId"`
	// Name of the field.
	FieldName pulumi.StringOutput `pulumi:"fieldName"`
	// State of the field (either `Enabled` or `Disabled`).
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewField registers a new resource with the given unique name, arguments, and options.
func NewField(ctx *pulumi.Context,
	name string, args *FieldArgs, opts ...pulumi.ResourceOption) (*Field, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FieldName == nil {
		return nil, errors.New("invalid value for required argument 'FieldName'")
	}
	var resource Field
	err := ctx.RegisterResource("sumologic:index/field:Field", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetField gets an existing Field resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FieldState, opts ...pulumi.ResourceOption) (*Field, error) {
	var resource Field
	err := ctx.ReadResource("sumologic:index/field:Field", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Field resources.
type fieldState struct {
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType *string `pulumi:"dataType"`
	// Field identifier.
	FieldId *string `pulumi:"fieldId"`
	// Name of the field.
	FieldName *string `pulumi:"fieldName"`
	// State of the field (either `Enabled` or `Disabled`).
	State *string `pulumi:"state"`
}

type FieldState struct {
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType pulumi.StringPtrInput
	// Field identifier.
	FieldId pulumi.StringPtrInput
	// Name of the field.
	FieldName pulumi.StringPtrInput
	// State of the field (either `Enabled` or `Disabled`).
	State pulumi.StringPtrInput
}

func (FieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldState)(nil)).Elem()
}

type fieldArgs struct {
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType *string `pulumi:"dataType"`
	// Name of the field.
	FieldName string `pulumi:"fieldName"`
	// State of the field (either `Enabled` or `Disabled`).
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Field resource.
type FieldArgs struct {
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType pulumi.StringPtrInput
	// Name of the field.
	FieldName pulumi.StringInput
	// State of the field (either `Enabled` or `Disabled`).
	State pulumi.StringPtrInput
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldArgs)(nil)).Elem()
}

type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(ctx context.Context) FieldOutput
}

func (*Field) ElementType() reflect.Type {
	return reflect.TypeOf((**Field)(nil)).Elem()
}

func (i *Field) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i *Field) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldArrayInput is an input type that accepts FieldArray and FieldArrayOutput values.
// You can construct a concrete instance of `FieldArrayInput` via:
//
//          FieldArray{ FieldArgs{...} }
type FieldArrayInput interface {
	pulumi.Input

	ToFieldArrayOutput() FieldArrayOutput
	ToFieldArrayOutputWithContext(context.Context) FieldArrayOutput
}

type FieldArray []FieldInput

func (FieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Field)(nil)).Elem()
}

func (i FieldArray) ToFieldArrayOutput() FieldArrayOutput {
	return i.ToFieldArrayOutputWithContext(context.Background())
}

func (i FieldArray) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldArrayOutput)
}

// FieldMapInput is an input type that accepts FieldMap and FieldMapOutput values.
// You can construct a concrete instance of `FieldMapInput` via:
//
//          FieldMap{ "key": FieldArgs{...} }
type FieldMapInput interface {
	pulumi.Input

	ToFieldMapOutput() FieldMapOutput
	ToFieldMapOutputWithContext(context.Context) FieldMapOutput
}

type FieldMap map[string]FieldInput

func (FieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Field)(nil)).Elem()
}

func (i FieldMap) ToFieldMapOutput() FieldMapOutput {
	return i.ToFieldMapOutputWithContext(context.Background())
}

func (i FieldMap) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMapOutput)
}

type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

type FieldArrayOutput struct{ *pulumi.OutputState }

func (FieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Field)(nil)).Elem()
}

func (o FieldArrayOutput) ToFieldArrayOutput() FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) Index(i pulumi.IntInput) FieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Field {
		return vs[0].([]*Field)[vs[1].(int)]
	}).(FieldOutput)
}

type FieldMapOutput struct{ *pulumi.OutputState }

func (FieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Field)(nil)).Elem()
}

func (o FieldMapOutput) ToFieldMapOutput() FieldMapOutput {
	return o
}

func (o FieldMapOutput) ToFieldMapOutputWithContext(ctx context.Context) FieldMapOutput {
	return o
}

func (o FieldMapOutput) MapIndex(k pulumi.StringInput) FieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Field {
		return vs[0].(map[string]*Field)[vs[1].(string)]
	}).(FieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), &Field{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldArrayInput)(nil)).Elem(), FieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMapInput)(nil)).Elem(), FieldMap{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldArrayOutput{})
	pulumi.RegisterOutputType(FieldMapOutput{})
}
