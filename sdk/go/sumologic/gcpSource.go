// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumo Logic Google Cloud Platform Source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source).
//
// ***Note:*** Google no longer requires a pub/sub domain to be [verified](https://cloud.google.com/pubsub/docs/push). You no longer have to set up domain verification with your GCP Source endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewGcpSource(ctx, "gcpSource", &sumologic.GcpSourceArgs{
// 			Category:    pulumi.String("gcp"),
// 			CollectorId: collector.ID(),
// 			Description: pulumi.String("My description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Sumo Logic Google Cloud Platform sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/gcpSource:GcpSource test 100000001/100000001
// ```
//
//  Sumo Logic Google Cloud Platform sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/gcpSource:GcpSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Google-Cloud-Platform-Source [3]https://cloud.google.com/pubsub/docs/push
type GcpSource struct {
	pulumi.CustomResourceState

	Authentication             GcpSourceAuthenticationPtrOutput      `pulumi:"authentication"`
	AutomaticDateParsing       pulumi.BoolPtrOutput                  `pulumi:"automaticDateParsing"`
	Category                   pulumi.StringPtrOutput                `pulumi:"category"`
	CollectorId                pulumi.IntOutput                      `pulumi:"collectorId"`
	ContentType                pulumi.StringPtrOutput                `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                   `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         GcpSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                `pulumi:"fields"`
	Filters                    GcpSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                  `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          pulumi.BoolPtrOutput                  `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                  `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                   `pulumi:"name"`
	Path                       GcpSourcePathPtrOutput                `pulumi:"path"`
	Timezone                   pulumi.StringPtrOutput                `pulumi:"timezone"`
	// The HTTP endpoint to use for sending data to this source.
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewGcpSource registers a new resource with the given unique name, arguments, and options.
func NewGcpSource(ctx *pulumi.Context,
	name string, args *GcpSourceArgs, opts ...pulumi.ResourceOption) (*GcpSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	var resource GcpSource
	err := ctx.RegisterResource("sumologic:index/gcpSource:GcpSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpSource gets an existing GcpSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpSourceState, opts ...pulumi.ResourceOption) (*GcpSource, error) {
	var resource GcpSource
	err := ctx.ReadResource("sumologic:index/gcpSource:GcpSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpSource resources.
type gcpSourceState struct {
	Authentication             *GcpSourceAuthentication     `pulumi:"authentication"`
	AutomaticDateParsing       *bool                        `pulumi:"automaticDateParsing"`
	Category                   *string                      `pulumi:"category"`
	CollectorId                *int                         `pulumi:"collectorId"`
	ContentType                *string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []GcpSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []GcpSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                        `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	Path                       *GcpSourcePath               `pulumi:"path"`
	Timezone                   *string                      `pulumi:"timezone"`
	// The HTTP endpoint to use for sending data to this source.
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type GcpSourceState struct {
	Authentication             GcpSourceAuthenticationPtrInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntPtrInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         GcpSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    GcpSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       GcpSourcePathPtrInput
	Timezone                   pulumi.StringPtrInput
	// The HTTP endpoint to use for sending data to this source.
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (GcpSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpSourceState)(nil)).Elem()
}

type gcpSourceArgs struct {
	Authentication             *GcpSourceAuthentication     `pulumi:"authentication"`
	AutomaticDateParsing       *bool                        `pulumi:"automaticDateParsing"`
	Category                   *string                      `pulumi:"category"`
	CollectorId                int                          `pulumi:"collectorId"`
	ContentType                *string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []GcpSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []GcpSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                        `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	Path                       *GcpSourcePath               `pulumi:"path"`
	Timezone                   *string                      `pulumi:"timezone"`
	UseAutolineMatching        *bool                        `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a GcpSource resource.
type GcpSourceArgs struct {
	Authentication             GcpSourceAuthenticationPtrInput
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         GcpSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    GcpSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       GcpSourcePathPtrInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (GcpSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpSourceArgs)(nil)).Elem()
}

type GcpSourceInput interface {
	pulumi.Input

	ToGcpSourceOutput() GcpSourceOutput
	ToGcpSourceOutputWithContext(ctx context.Context) GcpSourceOutput
}

func (*GcpSource) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpSource)(nil)).Elem()
}

func (i *GcpSource) ToGcpSourceOutput() GcpSourceOutput {
	return i.ToGcpSourceOutputWithContext(context.Background())
}

func (i *GcpSource) ToGcpSourceOutputWithContext(ctx context.Context) GcpSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSourceOutput)
}

// GcpSourceArrayInput is an input type that accepts GcpSourceArray and GcpSourceArrayOutput values.
// You can construct a concrete instance of `GcpSourceArrayInput` via:
//
//          GcpSourceArray{ GcpSourceArgs{...} }
type GcpSourceArrayInput interface {
	pulumi.Input

	ToGcpSourceArrayOutput() GcpSourceArrayOutput
	ToGcpSourceArrayOutputWithContext(context.Context) GcpSourceArrayOutput
}

type GcpSourceArray []GcpSourceInput

func (GcpSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpSource)(nil)).Elem()
}

func (i GcpSourceArray) ToGcpSourceArrayOutput() GcpSourceArrayOutput {
	return i.ToGcpSourceArrayOutputWithContext(context.Background())
}

func (i GcpSourceArray) ToGcpSourceArrayOutputWithContext(ctx context.Context) GcpSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSourceArrayOutput)
}

// GcpSourceMapInput is an input type that accepts GcpSourceMap and GcpSourceMapOutput values.
// You can construct a concrete instance of `GcpSourceMapInput` via:
//
//          GcpSourceMap{ "key": GcpSourceArgs{...} }
type GcpSourceMapInput interface {
	pulumi.Input

	ToGcpSourceMapOutput() GcpSourceMapOutput
	ToGcpSourceMapOutputWithContext(context.Context) GcpSourceMapOutput
}

type GcpSourceMap map[string]GcpSourceInput

func (GcpSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpSource)(nil)).Elem()
}

func (i GcpSourceMap) ToGcpSourceMapOutput() GcpSourceMapOutput {
	return i.ToGcpSourceMapOutputWithContext(context.Background())
}

func (i GcpSourceMap) ToGcpSourceMapOutputWithContext(ctx context.Context) GcpSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpSourceMapOutput)
}

type GcpSourceOutput struct{ *pulumi.OutputState }

func (GcpSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpSource)(nil)).Elem()
}

func (o GcpSourceOutput) ToGcpSourceOutput() GcpSourceOutput {
	return o
}

func (o GcpSourceOutput) ToGcpSourceOutputWithContext(ctx context.Context) GcpSourceOutput {
	return o
}

type GcpSourceArrayOutput struct{ *pulumi.OutputState }

func (GcpSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpSource)(nil)).Elem()
}

func (o GcpSourceArrayOutput) ToGcpSourceArrayOutput() GcpSourceArrayOutput {
	return o
}

func (o GcpSourceArrayOutput) ToGcpSourceArrayOutputWithContext(ctx context.Context) GcpSourceArrayOutput {
	return o
}

func (o GcpSourceArrayOutput) Index(i pulumi.IntInput) GcpSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpSource {
		return vs[0].([]*GcpSource)[vs[1].(int)]
	}).(GcpSourceOutput)
}

type GcpSourceMapOutput struct{ *pulumi.OutputState }

func (GcpSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpSource)(nil)).Elem()
}

func (o GcpSourceMapOutput) ToGcpSourceMapOutput() GcpSourceMapOutput {
	return o
}

func (o GcpSourceMapOutput) ToGcpSourceMapOutputWithContext(ctx context.Context) GcpSourceMapOutput {
	return o
}

func (o GcpSourceMapOutput) MapIndex(k pulumi.StringInput) GcpSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpSource {
		return vs[0].(map[string]*GcpSource)[vs[1].(string)]
	}).(GcpSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSourceInput)(nil)).Elem(), &GcpSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSourceArrayInput)(nil)).Elem(), GcpSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpSourceMapInput)(nil)).Elem(), GcpSourceMap{})
	pulumi.RegisterOutputType(GcpSourceOutput{})
	pulumi.RegisterOutputType(GcpSourceArrayOutput{})
	pulumi.RegisterOutputType(GcpSourceMapOutput{})
}
