// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a [Sumologic AWS S3 Archive Source][2].
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
//				Description: pulumi.String("Just testing this"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewS3ArchiveSource(ctx, "terraformS3ArchiveSource", &sumologic.S3ArchiveSourceArgs{
//				Authentication: &sumologic.S3ArchiveSourceAuthenticationArgs{
//					AccessKey: pulumi.String("someKey"),
//					SecretKey: pulumi.String("******"),
//					Type:      pulumi.String("S3BucketAuthentication"),
//				},
//				Category:    pulumi.String("aws/s3"),
//				CollectorId: collector.ID(),
//				ContentType: pulumi.String("AwsS3Bucket"),
//				Description: pulumi.String("My description"),
//				Path: &sumologic.S3ArchiveSourcePathArgs{
//					BucketName:     pulumi.String("Bucket1"),
//					PathExpression: pulumi.String("*"),
//					Type:           pulumi.String("S3BucketPathExpression"),
//				},
//				Paused:       pulumi.Bool(false),
//				ScanInterval: pulumi.Int(300000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// S3 sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/s3ArchiveSource:S3ArchiveSource test 123/456
//
// ```
//
//	S3 sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/s3ArchiveSource:S3ArchiveSource test my-test-collector/my-test-source
//
// ```
//
//	[1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/docs/manage/archive/#create-an-aws-s3-archivesource
type S3ArchiveSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       S3ArchiveSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput              `pulumi:"category"`
	CollectorId          pulumi.IntOutput                    `pulumi:"collectorId"`
	// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                         `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         S3ArchiveSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                      `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                      `pulumi:"fields"`
	Filters                    S3ArchiveSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                        `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                      `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                      `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                        `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                         `pulumi:"name"`
	// The location to scan for new data.
	Path S3ArchiveSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewS3ArchiveSource registers a new resource with the given unique name, arguments, and options.
func NewS3ArchiveSource(ctx *pulumi.Context,
	name string, args *S3ArchiveSourceArgs, opts ...pulumi.ResourceOption) (*S3ArchiveSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3ArchiveSource
	err := ctx.RegisterResource("sumologic:index/s3ArchiveSource:S3ArchiveSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3ArchiveSource gets an existing S3ArchiveSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3ArchiveSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3ArchiveSourceState, opts ...pulumi.ResourceOption) (*S3ArchiveSource, error) {
	var resource S3ArchiveSource
	err := ctx.ReadResource("sumologic:index/s3ArchiveSource:S3ArchiveSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3ArchiveSource resources.
type s3archiveSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *S3ArchiveSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                          `pulumi:"automaticDateParsing"`
	Category             *string                        `pulumi:"category"`
	CollectorId          *int                           `pulumi:"collectorId"`
	// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                            `pulumi:"contentType"`
	CutoffRelativeTime         *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3ArchiveSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                            `pulumi:"description"`
	Fields                     map[string]string                  `pulumi:"fields"`
	Filters                    []S3ArchiveSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                              `pulumi:"forceTimezone"`
	HostName                   *string                            `pulumi:"hostName"`
	ManualPrefixRegexp         *string                            `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                              `pulumi:"multilineProcessingEnabled"`
	Name                       *string                            `pulumi:"name"`
	// The location to scan for new data.
	Path *S3ArchiveSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type S3ArchiveSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3ArchiveSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3ArchiveSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3ArchiveSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3ArchiveSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3ArchiveSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3archiveSourceState)(nil)).Elem()
}

type s3archiveSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3ArchiveSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                         `pulumi:"automaticDateParsing"`
	Category             *string                       `pulumi:"category"`
	CollectorId          int                           `pulumi:"collectorId"`
	// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3ArchiveSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                            `pulumi:"description"`
	Fields                     map[string]string                  `pulumi:"fields"`
	Filters                    []S3ArchiveSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                              `pulumi:"forceTimezone"`
	HostName                   *string                            `pulumi:"hostName"`
	ManualPrefixRegexp         *string                            `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                              `pulumi:"multilineProcessingEnabled"`
	Name                       *string                            `pulumi:"name"`
	// The location to scan for new data.
	Path S3ArchiveSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a S3ArchiveSource resource.
type S3ArchiveSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3ArchiveSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3ArchiveSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3ArchiveSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3ArchiveSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3ArchiveSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3archiveSourceArgs)(nil)).Elem()
}

type S3ArchiveSourceInput interface {
	pulumi.Input

	ToS3ArchiveSourceOutput() S3ArchiveSourceOutput
	ToS3ArchiveSourceOutputWithContext(ctx context.Context) S3ArchiveSourceOutput
}

func (*S3ArchiveSource) ElementType() reflect.Type {
	return reflect.TypeOf((**S3ArchiveSource)(nil)).Elem()
}

func (i *S3ArchiveSource) ToS3ArchiveSourceOutput() S3ArchiveSourceOutput {
	return i.ToS3ArchiveSourceOutputWithContext(context.Background())
}

func (i *S3ArchiveSource) ToS3ArchiveSourceOutputWithContext(ctx context.Context) S3ArchiveSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3ArchiveSourceOutput)
}

func (i *S3ArchiveSource) ToOutput(ctx context.Context) pulumix.Output[*S3ArchiveSource] {
	return pulumix.Output[*S3ArchiveSource]{
		OutputState: i.ToS3ArchiveSourceOutputWithContext(ctx).OutputState,
	}
}

// S3ArchiveSourceArrayInput is an input type that accepts S3ArchiveSourceArray and S3ArchiveSourceArrayOutput values.
// You can construct a concrete instance of `S3ArchiveSourceArrayInput` via:
//
//	S3ArchiveSourceArray{ S3ArchiveSourceArgs{...} }
type S3ArchiveSourceArrayInput interface {
	pulumi.Input

	ToS3ArchiveSourceArrayOutput() S3ArchiveSourceArrayOutput
	ToS3ArchiveSourceArrayOutputWithContext(context.Context) S3ArchiveSourceArrayOutput
}

type S3ArchiveSourceArray []S3ArchiveSourceInput

func (S3ArchiveSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3ArchiveSource)(nil)).Elem()
}

func (i S3ArchiveSourceArray) ToS3ArchiveSourceArrayOutput() S3ArchiveSourceArrayOutput {
	return i.ToS3ArchiveSourceArrayOutputWithContext(context.Background())
}

func (i S3ArchiveSourceArray) ToS3ArchiveSourceArrayOutputWithContext(ctx context.Context) S3ArchiveSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3ArchiveSourceArrayOutput)
}

func (i S3ArchiveSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]*S3ArchiveSource] {
	return pulumix.Output[[]*S3ArchiveSource]{
		OutputState: i.ToS3ArchiveSourceArrayOutputWithContext(ctx).OutputState,
	}
}

// S3ArchiveSourceMapInput is an input type that accepts S3ArchiveSourceMap and S3ArchiveSourceMapOutput values.
// You can construct a concrete instance of `S3ArchiveSourceMapInput` via:
//
//	S3ArchiveSourceMap{ "key": S3ArchiveSourceArgs{...} }
type S3ArchiveSourceMapInput interface {
	pulumi.Input

	ToS3ArchiveSourceMapOutput() S3ArchiveSourceMapOutput
	ToS3ArchiveSourceMapOutputWithContext(context.Context) S3ArchiveSourceMapOutput
}

type S3ArchiveSourceMap map[string]S3ArchiveSourceInput

func (S3ArchiveSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3ArchiveSource)(nil)).Elem()
}

func (i S3ArchiveSourceMap) ToS3ArchiveSourceMapOutput() S3ArchiveSourceMapOutput {
	return i.ToS3ArchiveSourceMapOutputWithContext(context.Background())
}

func (i S3ArchiveSourceMap) ToS3ArchiveSourceMapOutputWithContext(ctx context.Context) S3ArchiveSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3ArchiveSourceMapOutput)
}

func (i S3ArchiveSourceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*S3ArchiveSource] {
	return pulumix.Output[map[string]*S3ArchiveSource]{
		OutputState: i.ToS3ArchiveSourceMapOutputWithContext(ctx).OutputState,
	}
}

type S3ArchiveSourceOutput struct{ *pulumi.OutputState }

func (S3ArchiveSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3ArchiveSource)(nil)).Elem()
}

func (o S3ArchiveSourceOutput) ToS3ArchiveSourceOutput() S3ArchiveSourceOutput {
	return o
}

func (o S3ArchiveSourceOutput) ToS3ArchiveSourceOutputWithContext(ctx context.Context) S3ArchiveSourceOutput {
	return o
}

func (o S3ArchiveSourceOutput) ToOutput(ctx context.Context) pulumix.Output[*S3ArchiveSource] {
	return pulumix.Output[*S3ArchiveSource]{
		OutputState: o.OutputState,
	}
}

// Authentication details for connecting to the S3 bucket.
func (o S3ArchiveSourceOutput) Authentication() S3ArchiveSourceAuthenticationOutput {
	return o.ApplyT(func(v *S3ArchiveSource) S3ArchiveSourceAuthenticationOutput { return v.Authentication }).(S3ArchiveSourceAuthenticationOutput)
}

func (o S3ArchiveSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o S3ArchiveSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o S3ArchiveSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. It should be `AwsS3ArchiveBucket` for archive source. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o S3ArchiveSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o S3ArchiveSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o S3ArchiveSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o S3ArchiveSourceOutput) DefaultDateFormats() S3ArchiveSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *S3ArchiveSource) S3ArchiveSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(S3ArchiveSourceDefaultDateFormatArrayOutput)
}

func (o S3ArchiveSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o S3ArchiveSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o S3ArchiveSourceOutput) Filters() S3ArchiveSourceFilterArrayOutput {
	return o.ApplyT(func(v *S3ArchiveSource) S3ArchiveSourceFilterArrayOutput { return v.Filters }).(S3ArchiveSourceFilterArrayOutput)
}

func (o S3ArchiveSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o S3ArchiveSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o S3ArchiveSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o S3ArchiveSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o S3ArchiveSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location to scan for new data.
func (o S3ArchiveSourceOutput) Path() S3ArchiveSourcePathOutput {
	return o.ApplyT(func(v *S3ArchiveSource) S3ArchiveSourcePathOutput { return v.Path }).(S3ArchiveSourcePathOutput)
}

// When set to true, the scanner is paused. To disable, set to false.
func (o S3ArchiveSourceOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o S3ArchiveSourceOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o S3ArchiveSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
func (o S3ArchiveSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o S3ArchiveSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3ArchiveSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type S3ArchiveSourceArrayOutput struct{ *pulumi.OutputState }

func (S3ArchiveSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3ArchiveSource)(nil)).Elem()
}

func (o S3ArchiveSourceArrayOutput) ToS3ArchiveSourceArrayOutput() S3ArchiveSourceArrayOutput {
	return o
}

func (o S3ArchiveSourceArrayOutput) ToS3ArchiveSourceArrayOutputWithContext(ctx context.Context) S3ArchiveSourceArrayOutput {
	return o
}

func (o S3ArchiveSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*S3ArchiveSource] {
	return pulumix.Output[[]*S3ArchiveSource]{
		OutputState: o.OutputState,
	}
}

func (o S3ArchiveSourceArrayOutput) Index(i pulumi.IntInput) S3ArchiveSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3ArchiveSource {
		return vs[0].([]*S3ArchiveSource)[vs[1].(int)]
	}).(S3ArchiveSourceOutput)
}

type S3ArchiveSourceMapOutput struct{ *pulumi.OutputState }

func (S3ArchiveSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3ArchiveSource)(nil)).Elem()
}

func (o S3ArchiveSourceMapOutput) ToS3ArchiveSourceMapOutput() S3ArchiveSourceMapOutput {
	return o
}

func (o S3ArchiveSourceMapOutput) ToS3ArchiveSourceMapOutputWithContext(ctx context.Context) S3ArchiveSourceMapOutput {
	return o
}

func (o S3ArchiveSourceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*S3ArchiveSource] {
	return pulumix.Output[map[string]*S3ArchiveSource]{
		OutputState: o.OutputState,
	}
}

func (o S3ArchiveSourceMapOutput) MapIndex(k pulumi.StringInput) S3ArchiveSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3ArchiveSource {
		return vs[0].(map[string]*S3ArchiveSource)[vs[1].(string)]
	}).(S3ArchiveSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3ArchiveSourceInput)(nil)).Elem(), &S3ArchiveSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3ArchiveSourceArrayInput)(nil)).Elem(), S3ArchiveSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3ArchiveSourceMapInput)(nil)).Elem(), S3ArchiveSourceMap{})
	pulumi.RegisterOutputType(S3ArchiveSourceOutput{})
	pulumi.RegisterOutputType(S3ArchiveSourceArrayOutput{})
	pulumi.RegisterOutputType(S3ArchiveSourceMapOutput{})
}
