// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the ability to create, read, delete, update connections.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewConnection(ctx, "connection", &sumologic.ConnectionArgs{
// 			Type:        pulumi.String("WebhookConnection"),
// 			Description: pulumi.String("My description"),
// 			Url:         pulumi.String("https://connection-endpoint.com"),
// 			Headers: pulumi.StringMap{
// 				"X-Header": pulumi.String("my-header"),
// 			},
// 			CustomHeaders: pulumi.StringMap{
// 				"X-custom": pulumi.String("my-custom-header"),
// 			},
// 			DefaultPayload: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v", "{\n", "  \"client\" : \"Sumo Logic\",\n", "  \"eventType\" : \"{{Name}}\",\n", "  \"description\" : \"{{Description}}\",\n", "  \"search_url\" : \"{{QueryUrl}}\",\n", "  \"num_records\" : \"{{NumRawResults}}\",\n", "  \"search_results\" : \"{{AggregateResultsJson}}\"\n", "}\n")),
// 			WebhookType:    pulumi.String("Webhook"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Connections can be imported using the connection id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/connection:Connection test 1234567890
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
	ConnectionSubtype pulumi.StringPtrOutput `pulumi:"connectionSubtype"`
	// Map of custom webhook headers
	CustomHeaders pulumi.StringMapOutput `pulumi:"customHeaders"`
	// Default payload of the webhook.
	DefaultPayload pulumi.StringOutput `pulumi:"defaultPayload"`
	// Description of the connection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Map of access authorization headers.
	Headers pulumi.StringMapOutput `pulumi:"headers"`
	// Name of connection. Name should be a valid alphanumeric value.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of connection. Only `WebhookConnection` is implemented right now.
	Type pulumi.StringOutput `pulumi:"type"`
	// URL for the webhook connection.
	Url pulumi.StringOutput `pulumi:"url"`
	// Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
	WebhookType pulumi.StringPtrOutput `pulumi:"webhookType"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultPayload == nil {
		return nil, errors.New("invalid value for required argument 'DefaultPayload'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Connection
	err := ctx.RegisterResource("sumologic:index/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("sumologic:index/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
	ConnectionSubtype *string `pulumi:"connectionSubtype"`
	// Map of custom webhook headers
	CustomHeaders map[string]string `pulumi:"customHeaders"`
	// Default payload of the webhook.
	DefaultPayload *string `pulumi:"defaultPayload"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// Map of access authorization headers.
	Headers map[string]string `pulumi:"headers"`
	// Name of connection. Name should be a valid alphanumeric value.
	Name *string `pulumi:"name"`
	// Type of connection. Only `WebhookConnection` is implemented right now.
	Type *string `pulumi:"type"`
	// URL for the webhook connection.
	Url *string `pulumi:"url"`
	// Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
	WebhookType *string `pulumi:"webhookType"`
}

type ConnectionState struct {
	// The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
	ConnectionSubtype pulumi.StringPtrInput
	// Map of custom webhook headers
	CustomHeaders pulumi.StringMapInput
	// Default payload of the webhook.
	DefaultPayload pulumi.StringPtrInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// Map of access authorization headers.
	Headers pulumi.StringMapInput
	// Name of connection. Name should be a valid alphanumeric value.
	Name pulumi.StringPtrInput
	// Type of connection. Only `WebhookConnection` is implemented right now.
	Type pulumi.StringPtrInput
	// URL for the webhook connection.
	Url pulumi.StringPtrInput
	// Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
	WebhookType pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
	ConnectionSubtype *string `pulumi:"connectionSubtype"`
	// Map of custom webhook headers
	CustomHeaders map[string]string `pulumi:"customHeaders"`
	// Default payload of the webhook.
	DefaultPayload string `pulumi:"defaultPayload"`
	// Description of the connection.
	Description *string `pulumi:"description"`
	// Map of access authorization headers.
	Headers map[string]string `pulumi:"headers"`
	// Name of connection. Name should be a valid alphanumeric value.
	Name *string `pulumi:"name"`
	// Type of connection. Only `WebhookConnection` is implemented right now.
	Type string `pulumi:"type"`
	// URL for the webhook connection.
	Url string `pulumi:"url"`
	// Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
	WebhookType *string `pulumi:"webhookType"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The subtype of the connection. Valid values are `Incident` and `Event`. NOTE: This is only used for the `ServiceNow` webhook type.
	ConnectionSubtype pulumi.StringPtrInput
	// Map of custom webhook headers
	CustomHeaders pulumi.StringMapInput
	// Default payload of the webhook.
	DefaultPayload pulumi.StringInput
	// Description of the connection.
	Description pulumi.StringPtrInput
	// Map of access authorization headers.
	Headers pulumi.StringMapInput
	// Name of connection. Name should be a valid alphanumeric value.
	Name pulumi.StringPtrInput
	// Type of connection. Only `WebhookConnection` is implemented right now.
	Type pulumi.StringInput
	// URL for the webhook connection.
	Url pulumi.StringInput
	// Type of webhook. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `PagerDuty`, `Slack`, `Webhook`, `NewRelic`, `MicrosoftTeams`, `ServiceNow`, and `SumoCloudSOAR`. Default: `Webhook`
	WebhookType pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//          ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//          ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
