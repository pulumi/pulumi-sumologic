// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## ___
//
// layout: "sumologic"
// page_title: "SumoLogic: CseOutlierRule"
// description: |-
//
//	Provides a CSE Outlier Rule
//
// ---
//
// # CseOutlierRule
// Provides a Sumo Logic CSE [Outlier Rule](https://help.sumologic.com/docs/cse/rules/write-outlier-rule/).
//
// ## Import
//
// # Outlier rules can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseOutlierRule:CseOutlierRule outlier_rule id
//
// ```
type CseOutlierRule struct {
	pulumi.CustomResourceState

	AggregationFunctions CseOutlierRuleAggregationFunctionsOutput `pulumi:"aggregationFunctions"`
	// The baseline window size in milliseconds
	BaselineWindowSize pulumi.StringOutput `pulumi:"baselineWindowSize"`
	// The description of the generated Signals
	DescriptionExpression pulumi.StringOutput `pulumi:"descriptionExpression"`
	// The deviation threshold used to calculate the threshold to trigger signals
	DeviationThreshold pulumi.IntOutput `pulumi:"deviationThreshold"`
	// Whether the rule should generate Signals
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors CseOutlierRuleEntitySelectorArrayOutput `pulumi:"entitySelectors"`
	// The minimum threshold to trigger signals
	FloorValue pulumi.IntOutput `pulumi:"floorValue"`
	// A list of fields to group records by
	GroupByFields pulumi.StringArrayOutput `pulumi:"groupByFields"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrOutput `pulumi:"isPrototype"`
	// The expression for which records to match on
	MatchExpression pulumi.StringOutput `pulumi:"matchExpression"`
	// The name of the Rule
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the generated Signals
	NameExpression pulumi.StringOutput `pulumi:"nameExpression"`
	// The retention window size in milliseconds
	RetentionWindowSize pulumi.StringOutput `pulumi:"retentionWindowSize"`
	// The severity of the generated Signals
	Severity pulumi.IntOutput `pulumi:"severity"`
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrOutput `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
	//
	// The following attributes are exported:
	WindowSize pulumi.StringOutput `pulumi:"windowSize"`
}

// NewCseOutlierRule registers a new resource with the given unique name, arguments, and options.
func NewCseOutlierRule(ctx *pulumi.Context,
	name string, args *CseOutlierRuleArgs, opts ...pulumi.ResourceOption) (*CseOutlierRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AggregationFunctions == nil {
		return nil, errors.New("invalid value for required argument 'AggregationFunctions'")
	}
	if args.BaselineWindowSize == nil {
		return nil, errors.New("invalid value for required argument 'BaselineWindowSize'")
	}
	if args.DescriptionExpression == nil {
		return nil, errors.New("invalid value for required argument 'DescriptionExpression'")
	}
	if args.DeviationThreshold == nil {
		return nil, errors.New("invalid value for required argument 'DeviationThreshold'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.FloorValue == nil {
		return nil, errors.New("invalid value for required argument 'FloorValue'")
	}
	if args.MatchExpression == nil {
		return nil, errors.New("invalid value for required argument 'MatchExpression'")
	}
	if args.NameExpression == nil {
		return nil, errors.New("invalid value for required argument 'NameExpression'")
	}
	if args.RetentionWindowSize == nil {
		return nil, errors.New("invalid value for required argument 'RetentionWindowSize'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.WindowSize == nil {
		return nil, errors.New("invalid value for required argument 'WindowSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CseOutlierRule
	err := ctx.RegisterResource("sumologic:index/cseOutlierRule:CseOutlierRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseOutlierRule gets an existing CseOutlierRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseOutlierRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseOutlierRuleState, opts ...pulumi.ResourceOption) (*CseOutlierRule, error) {
	var resource CseOutlierRule
	err := ctx.ReadResource("sumologic:index/cseOutlierRule:CseOutlierRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseOutlierRule resources.
type cseOutlierRuleState struct {
	AggregationFunctions *CseOutlierRuleAggregationFunctions `pulumi:"aggregationFunctions"`
	// The baseline window size in milliseconds
	BaselineWindowSize *string `pulumi:"baselineWindowSize"`
	// The description of the generated Signals
	DescriptionExpression *string `pulumi:"descriptionExpression"`
	// The deviation threshold used to calculate the threshold to trigger signals
	DeviationThreshold *int `pulumi:"deviationThreshold"`
	// Whether the rule should generate Signals
	Enabled *bool `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors []CseOutlierRuleEntitySelector `pulumi:"entitySelectors"`
	// The minimum threshold to trigger signals
	FloorValue *int `pulumi:"floorValue"`
	// A list of fields to group records by
	GroupByFields []string `pulumi:"groupByFields"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype *bool `pulumi:"isPrototype"`
	// The expression for which records to match on
	MatchExpression *string `pulumi:"matchExpression"`
	// The name of the Rule
	Name *string `pulumi:"name"`
	// The name of the generated Signals
	NameExpression *string `pulumi:"nameExpression"`
	// The retention window size in milliseconds
	RetentionWindowSize *string `pulumi:"retentionWindowSize"`
	// The severity of the generated Signals
	Severity *int `pulumi:"severity"`
	// The summary of the generated Signals
	SummaryExpression *string `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags []string `pulumi:"tags"`
	// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
	//
	// The following attributes are exported:
	WindowSize *string `pulumi:"windowSize"`
}

type CseOutlierRuleState struct {
	AggregationFunctions CseOutlierRuleAggregationFunctionsPtrInput
	// The baseline window size in milliseconds
	BaselineWindowSize pulumi.StringPtrInput
	// The description of the generated Signals
	DescriptionExpression pulumi.StringPtrInput
	// The deviation threshold used to calculate the threshold to trigger signals
	DeviationThreshold pulumi.IntPtrInput
	// Whether the rule should generate Signals
	Enabled pulumi.BoolPtrInput
	// The entities to generate Signals on
	EntitySelectors CseOutlierRuleEntitySelectorArrayInput
	// The minimum threshold to trigger signals
	FloorValue pulumi.IntPtrInput
	// A list of fields to group records by
	GroupByFields pulumi.StringArrayInput
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrInput
	// The expression for which records to match on
	MatchExpression pulumi.StringPtrInput
	// The name of the Rule
	Name pulumi.StringPtrInput
	// The name of the generated Signals
	NameExpression pulumi.StringPtrInput
	// The retention window size in milliseconds
	RetentionWindowSize pulumi.StringPtrInput
	// The severity of the generated Signals
	Severity pulumi.IntPtrInput
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrInput
	// The tags of the generated Signals
	Tags pulumi.StringArrayInput
	// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
	//
	// The following attributes are exported:
	WindowSize pulumi.StringPtrInput
}

func (CseOutlierRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseOutlierRuleState)(nil)).Elem()
}

type cseOutlierRuleArgs struct {
	AggregationFunctions CseOutlierRuleAggregationFunctions `pulumi:"aggregationFunctions"`
	// The baseline window size in milliseconds
	BaselineWindowSize string `pulumi:"baselineWindowSize"`
	// The description of the generated Signals
	DescriptionExpression string `pulumi:"descriptionExpression"`
	// The deviation threshold used to calculate the threshold to trigger signals
	DeviationThreshold int `pulumi:"deviationThreshold"`
	// Whether the rule should generate Signals
	Enabled bool `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors []CseOutlierRuleEntitySelector `pulumi:"entitySelectors"`
	// The minimum threshold to trigger signals
	FloorValue int `pulumi:"floorValue"`
	// A list of fields to group records by
	GroupByFields []string `pulumi:"groupByFields"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype *bool `pulumi:"isPrototype"`
	// The expression for which records to match on
	MatchExpression string `pulumi:"matchExpression"`
	// The name of the Rule
	Name *string `pulumi:"name"`
	// The name of the generated Signals
	NameExpression string `pulumi:"nameExpression"`
	// The retention window size in milliseconds
	RetentionWindowSize string `pulumi:"retentionWindowSize"`
	// The severity of the generated Signals
	Severity int `pulumi:"severity"`
	// The summary of the generated Signals
	SummaryExpression *string `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags []string `pulumi:"tags"`
	// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
	//
	// The following attributes are exported:
	WindowSize string `pulumi:"windowSize"`
}

// The set of arguments for constructing a CseOutlierRule resource.
type CseOutlierRuleArgs struct {
	AggregationFunctions CseOutlierRuleAggregationFunctionsInput
	// The baseline window size in milliseconds
	BaselineWindowSize pulumi.StringInput
	// The description of the generated Signals
	DescriptionExpression pulumi.StringInput
	// The deviation threshold used to calculate the threshold to trigger signals
	DeviationThreshold pulumi.IntInput
	// Whether the rule should generate Signals
	Enabled pulumi.BoolInput
	// The entities to generate Signals on
	EntitySelectors CseOutlierRuleEntitySelectorArrayInput
	// The minimum threshold to trigger signals
	FloorValue pulumi.IntInput
	// A list of fields to group records by
	GroupByFields pulumi.StringArrayInput
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrInput
	// The expression for which records to match on
	MatchExpression pulumi.StringInput
	// The name of the Rule
	Name pulumi.StringPtrInput
	// The name of the generated Signals
	NameExpression pulumi.StringInput
	// The retention window size in milliseconds
	RetentionWindowSize pulumi.StringInput
	// The severity of the generated Signals
	Severity pulumi.IntInput
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrInput
	// The tags of the generated Signals
	Tags pulumi.StringArrayInput
	// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
	//
	// The following attributes are exported:
	WindowSize pulumi.StringInput
}

func (CseOutlierRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseOutlierRuleArgs)(nil)).Elem()
}

type CseOutlierRuleInput interface {
	pulumi.Input

	ToCseOutlierRuleOutput() CseOutlierRuleOutput
	ToCseOutlierRuleOutputWithContext(ctx context.Context) CseOutlierRuleOutput
}

func (*CseOutlierRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CseOutlierRule)(nil)).Elem()
}

func (i *CseOutlierRule) ToCseOutlierRuleOutput() CseOutlierRuleOutput {
	return i.ToCseOutlierRuleOutputWithContext(context.Background())
}

func (i *CseOutlierRule) ToCseOutlierRuleOutputWithContext(ctx context.Context) CseOutlierRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseOutlierRuleOutput)
}

// CseOutlierRuleArrayInput is an input type that accepts CseOutlierRuleArray and CseOutlierRuleArrayOutput values.
// You can construct a concrete instance of `CseOutlierRuleArrayInput` via:
//
//	CseOutlierRuleArray{ CseOutlierRuleArgs{...} }
type CseOutlierRuleArrayInput interface {
	pulumi.Input

	ToCseOutlierRuleArrayOutput() CseOutlierRuleArrayOutput
	ToCseOutlierRuleArrayOutputWithContext(context.Context) CseOutlierRuleArrayOutput
}

type CseOutlierRuleArray []CseOutlierRuleInput

func (CseOutlierRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseOutlierRule)(nil)).Elem()
}

func (i CseOutlierRuleArray) ToCseOutlierRuleArrayOutput() CseOutlierRuleArrayOutput {
	return i.ToCseOutlierRuleArrayOutputWithContext(context.Background())
}

func (i CseOutlierRuleArray) ToCseOutlierRuleArrayOutputWithContext(ctx context.Context) CseOutlierRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseOutlierRuleArrayOutput)
}

// CseOutlierRuleMapInput is an input type that accepts CseOutlierRuleMap and CseOutlierRuleMapOutput values.
// You can construct a concrete instance of `CseOutlierRuleMapInput` via:
//
//	CseOutlierRuleMap{ "key": CseOutlierRuleArgs{...} }
type CseOutlierRuleMapInput interface {
	pulumi.Input

	ToCseOutlierRuleMapOutput() CseOutlierRuleMapOutput
	ToCseOutlierRuleMapOutputWithContext(context.Context) CseOutlierRuleMapOutput
}

type CseOutlierRuleMap map[string]CseOutlierRuleInput

func (CseOutlierRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseOutlierRule)(nil)).Elem()
}

func (i CseOutlierRuleMap) ToCseOutlierRuleMapOutput() CseOutlierRuleMapOutput {
	return i.ToCseOutlierRuleMapOutputWithContext(context.Background())
}

func (i CseOutlierRuleMap) ToCseOutlierRuleMapOutputWithContext(ctx context.Context) CseOutlierRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseOutlierRuleMapOutput)
}

type CseOutlierRuleOutput struct{ *pulumi.OutputState }

func (CseOutlierRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseOutlierRule)(nil)).Elem()
}

func (o CseOutlierRuleOutput) ToCseOutlierRuleOutput() CseOutlierRuleOutput {
	return o
}

func (o CseOutlierRuleOutput) ToCseOutlierRuleOutputWithContext(ctx context.Context) CseOutlierRuleOutput {
	return o
}

func (o CseOutlierRuleOutput) AggregationFunctions() CseOutlierRuleAggregationFunctionsOutput {
	return o.ApplyT(func(v *CseOutlierRule) CseOutlierRuleAggregationFunctionsOutput { return v.AggregationFunctions }).(CseOutlierRuleAggregationFunctionsOutput)
}

// The baseline window size in milliseconds
func (o CseOutlierRuleOutput) BaselineWindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.BaselineWindowSize }).(pulumi.StringOutput)
}

// The description of the generated Signals
func (o CseOutlierRuleOutput) DescriptionExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.DescriptionExpression }).(pulumi.StringOutput)
}

// The deviation threshold used to calculate the threshold to trigger signals
func (o CseOutlierRuleOutput) DeviationThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.IntOutput { return v.DeviationThreshold }).(pulumi.IntOutput)
}

// Whether the rule should generate Signals
func (o CseOutlierRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The entities to generate Signals on
func (o CseOutlierRuleOutput) EntitySelectors() CseOutlierRuleEntitySelectorArrayOutput {
	return o.ApplyT(func(v *CseOutlierRule) CseOutlierRuleEntitySelectorArrayOutput { return v.EntitySelectors }).(CseOutlierRuleEntitySelectorArrayOutput)
}

// The minimum threshold to trigger signals
func (o CseOutlierRuleOutput) FloorValue() pulumi.IntOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.IntOutput { return v.FloorValue }).(pulumi.IntOutput)
}

// A list of fields to group records by
func (o CseOutlierRuleOutput) GroupByFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringArrayOutput { return v.GroupByFields }).(pulumi.StringArrayOutput)
}

// Whether the generated Signals should be prototype Signals
func (o CseOutlierRuleOutput) IsPrototype() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.BoolPtrOutput { return v.IsPrototype }).(pulumi.BoolPtrOutput)
}

// The expression for which records to match on
func (o CseOutlierRuleOutput) MatchExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.MatchExpression }).(pulumi.StringOutput)
}

// The name of the Rule
func (o CseOutlierRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the generated Signals
func (o CseOutlierRuleOutput) NameExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.NameExpression }).(pulumi.StringOutput)
}

// The retention window size in milliseconds
func (o CseOutlierRuleOutput) RetentionWindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.RetentionWindowSize }).(pulumi.StringOutput)
}

// The severity of the generated Signals
func (o CseOutlierRuleOutput) Severity() pulumi.IntOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.IntOutput { return v.Severity }).(pulumi.IntOutput)
}

// The summary of the generated Signals
func (o CseOutlierRuleOutput) SummaryExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringPtrOutput { return v.SummaryExpression }).(pulumi.StringPtrOutput)
}

// The tags of the generated Signals
func (o CseOutlierRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The window size. Current acceptable values are T60M (1 hr) or  T24H (1 day)
//
// The following attributes are exported:
func (o CseOutlierRuleOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v *CseOutlierRule) pulumi.StringOutput { return v.WindowSize }).(pulumi.StringOutput)
}

type CseOutlierRuleArrayOutput struct{ *pulumi.OutputState }

func (CseOutlierRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseOutlierRule)(nil)).Elem()
}

func (o CseOutlierRuleArrayOutput) ToCseOutlierRuleArrayOutput() CseOutlierRuleArrayOutput {
	return o
}

func (o CseOutlierRuleArrayOutput) ToCseOutlierRuleArrayOutputWithContext(ctx context.Context) CseOutlierRuleArrayOutput {
	return o
}

func (o CseOutlierRuleArrayOutput) Index(i pulumi.IntInput) CseOutlierRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseOutlierRule {
		return vs[0].([]*CseOutlierRule)[vs[1].(int)]
	}).(CseOutlierRuleOutput)
}

type CseOutlierRuleMapOutput struct{ *pulumi.OutputState }

func (CseOutlierRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseOutlierRule)(nil)).Elem()
}

func (o CseOutlierRuleMapOutput) ToCseOutlierRuleMapOutput() CseOutlierRuleMapOutput {
	return o
}

func (o CseOutlierRuleMapOutput) ToCseOutlierRuleMapOutputWithContext(ctx context.Context) CseOutlierRuleMapOutput {
	return o
}

func (o CseOutlierRuleMapOutput) MapIndex(k pulumi.StringInput) CseOutlierRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseOutlierRule {
		return vs[0].(map[string]*CseOutlierRule)[vs[1].(string)]
	}).(CseOutlierRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseOutlierRuleInput)(nil)).Elem(), &CseOutlierRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseOutlierRuleArrayInput)(nil)).Elem(), CseOutlierRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseOutlierRuleMapInput)(nil)).Elem(), CseOutlierRuleMap{})
	pulumi.RegisterOutputType(CseOutlierRuleOutput{})
	pulumi.RegisterOutputType(CseOutlierRuleArrayOutput{})
	pulumi.RegisterOutputType(CseOutlierRuleMapOutput{})
}
