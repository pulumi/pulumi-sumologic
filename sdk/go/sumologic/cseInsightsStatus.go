// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic CSE Insights Status. Preconfigured Insight statuses cannot be edited or deleted; you can however create custom statuses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseInsightsStatus(ctx, "insightsStatus", &sumologic.CseInsightsStatusArgs{
// 			Description: pulumi.String("New description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Insights Status can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseInsightsStatus:CseInsightsStatus insights_status id
// ```
type CseInsightsStatus struct {
	pulumi.CustomResourceState

	// The description of the insights status.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	DisplayName pulumi.StringOutput    `pulumi:"displayName"`
	// The name of the insights status.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCseInsightsStatus registers a new resource with the given unique name, arguments, and options.
func NewCseInsightsStatus(ctx *pulumi.Context,
	name string, args *CseInsightsStatusArgs, opts ...pulumi.ResourceOption) (*CseInsightsStatus, error) {
	if args == nil {
		args = &CseInsightsStatusArgs{}
	}

	var resource CseInsightsStatus
	err := ctx.RegisterResource("sumologic:index/cseInsightsStatus:CseInsightsStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseInsightsStatus gets an existing CseInsightsStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseInsightsStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseInsightsStatusState, opts ...pulumi.ResourceOption) (*CseInsightsStatus, error) {
	var resource CseInsightsStatus
	err := ctx.ReadResource("sumologic:index/cseInsightsStatus:CseInsightsStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseInsightsStatus resources.
type cseInsightsStatusState struct {
	// The description of the insights status.
	Description *string `pulumi:"description"`
	DisplayName *string `pulumi:"displayName"`
	// The name of the insights status.
	Name *string `pulumi:"name"`
}

type CseInsightsStatusState struct {
	// The description of the insights status.
	Description pulumi.StringPtrInput
	DisplayName pulumi.StringPtrInput
	// The name of the insights status.
	Name pulumi.StringPtrInput
}

func (CseInsightsStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsStatusState)(nil)).Elem()
}

type cseInsightsStatusArgs struct {
	// The description of the insights status.
	Description *string `pulumi:"description"`
	// The name of the insights status.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CseInsightsStatus resource.
type CseInsightsStatusArgs struct {
	// The description of the insights status.
	Description pulumi.StringPtrInput
	// The name of the insights status.
	Name pulumi.StringPtrInput
}

func (CseInsightsStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsStatusArgs)(nil)).Elem()
}

type CseInsightsStatusInput interface {
	pulumi.Input

	ToCseInsightsStatusOutput() CseInsightsStatusOutput
	ToCseInsightsStatusOutputWithContext(ctx context.Context) CseInsightsStatusOutput
}

func (*CseInsightsStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsStatus)(nil)).Elem()
}

func (i *CseInsightsStatus) ToCseInsightsStatusOutput() CseInsightsStatusOutput {
	return i.ToCseInsightsStatusOutputWithContext(context.Background())
}

func (i *CseInsightsStatus) ToCseInsightsStatusOutputWithContext(ctx context.Context) CseInsightsStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsStatusOutput)
}

// CseInsightsStatusArrayInput is an input type that accepts CseInsightsStatusArray and CseInsightsStatusArrayOutput values.
// You can construct a concrete instance of `CseInsightsStatusArrayInput` via:
//
//          CseInsightsStatusArray{ CseInsightsStatusArgs{...} }
type CseInsightsStatusArrayInput interface {
	pulumi.Input

	ToCseInsightsStatusArrayOutput() CseInsightsStatusArrayOutput
	ToCseInsightsStatusArrayOutputWithContext(context.Context) CseInsightsStatusArrayOutput
}

type CseInsightsStatusArray []CseInsightsStatusInput

func (CseInsightsStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseInsightsStatus)(nil)).Elem()
}

func (i CseInsightsStatusArray) ToCseInsightsStatusArrayOutput() CseInsightsStatusArrayOutput {
	return i.ToCseInsightsStatusArrayOutputWithContext(context.Background())
}

func (i CseInsightsStatusArray) ToCseInsightsStatusArrayOutputWithContext(ctx context.Context) CseInsightsStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsStatusArrayOutput)
}

// CseInsightsStatusMapInput is an input type that accepts CseInsightsStatusMap and CseInsightsStatusMapOutput values.
// You can construct a concrete instance of `CseInsightsStatusMapInput` via:
//
//          CseInsightsStatusMap{ "key": CseInsightsStatusArgs{...} }
type CseInsightsStatusMapInput interface {
	pulumi.Input

	ToCseInsightsStatusMapOutput() CseInsightsStatusMapOutput
	ToCseInsightsStatusMapOutputWithContext(context.Context) CseInsightsStatusMapOutput
}

type CseInsightsStatusMap map[string]CseInsightsStatusInput

func (CseInsightsStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseInsightsStatus)(nil)).Elem()
}

func (i CseInsightsStatusMap) ToCseInsightsStatusMapOutput() CseInsightsStatusMapOutput {
	return i.ToCseInsightsStatusMapOutputWithContext(context.Background())
}

func (i CseInsightsStatusMap) ToCseInsightsStatusMapOutputWithContext(ctx context.Context) CseInsightsStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsStatusMapOutput)
}

type CseInsightsStatusOutput struct{ *pulumi.OutputState }

func (CseInsightsStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsStatus)(nil)).Elem()
}

func (o CseInsightsStatusOutput) ToCseInsightsStatusOutput() CseInsightsStatusOutput {
	return o
}

func (o CseInsightsStatusOutput) ToCseInsightsStatusOutputWithContext(ctx context.Context) CseInsightsStatusOutput {
	return o
}

// The description of the insights status.
func (o CseInsightsStatusOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseInsightsStatus) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CseInsightsStatusOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *CseInsightsStatus) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the insights status.
func (o CseInsightsStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseInsightsStatus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CseInsightsStatusArrayOutput struct{ *pulumi.OutputState }

func (CseInsightsStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseInsightsStatus)(nil)).Elem()
}

func (o CseInsightsStatusArrayOutput) ToCseInsightsStatusArrayOutput() CseInsightsStatusArrayOutput {
	return o
}

func (o CseInsightsStatusArrayOutput) ToCseInsightsStatusArrayOutputWithContext(ctx context.Context) CseInsightsStatusArrayOutput {
	return o
}

func (o CseInsightsStatusArrayOutput) Index(i pulumi.IntInput) CseInsightsStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseInsightsStatus {
		return vs[0].([]*CseInsightsStatus)[vs[1].(int)]
	}).(CseInsightsStatusOutput)
}

type CseInsightsStatusMapOutput struct{ *pulumi.OutputState }

func (CseInsightsStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseInsightsStatus)(nil)).Elem()
}

func (o CseInsightsStatusMapOutput) ToCseInsightsStatusMapOutput() CseInsightsStatusMapOutput {
	return o
}

func (o CseInsightsStatusMapOutput) ToCseInsightsStatusMapOutputWithContext(ctx context.Context) CseInsightsStatusMapOutput {
	return o
}

func (o CseInsightsStatusMapOutput) MapIndex(k pulumi.StringInput) CseInsightsStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseInsightsStatus {
		return vs[0].(map[string]*CseInsightsStatus)[vs[1].(string)]
	}).(CseInsightsStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsStatusInput)(nil)).Elem(), &CseInsightsStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsStatusArrayInput)(nil)).Elem(), CseInsightsStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsStatusMapInput)(nil)).Elem(), CseInsightsStatusMap{})
	pulumi.RegisterOutputType(CseInsightsStatusOutput{})
	pulumi.RegisterOutputType(CseInsightsStatusArrayOutput{})
	pulumi.RegisterOutputType(CseInsightsStatusMapOutput{})
}
