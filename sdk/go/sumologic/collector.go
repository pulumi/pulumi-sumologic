// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic (Hosted) Collector][1].
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 			Fields: pulumi.StringMap{
// 				"environment": pulumi.String("production"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Collectors can be imported using the collector id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/collector:Collector test 1234567890
// ```
//
//  Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/collector:Collector test my_test_collector
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Hosted_Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields
type Collector struct {
	pulumi.CustomResourceState

	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// The description of the collector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapOutput `pulumi:"fields"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringOutput `pulumi:"name"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewCollector registers a new resource with the given unique name, arguments, and options.
func NewCollector(ctx *pulumi.Context,
	name string, args *CollectorArgs, opts ...pulumi.ResourceOption) (*Collector, error) {
	if args == nil {
		args = &CollectorArgs{}
	}

	var resource Collector
	err := ctx.RegisterResource("sumologic:index/collector:Collector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollector gets an existing Collector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectorState, opts ...pulumi.ResourceOption) (*Collector, error) {
	var resource Collector
	err := ctx.ReadResource("sumologic:index/collector:Collector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Collector resources.
type collectorState struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category *string `pulumi:"category"`
	// The description of the collector.
	Description *string `pulumi:"description"`
	// Map containing [key/value pairs][3].
	Fields map[string]string `pulumi:"fields"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name *string `pulumi:"name"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone *string `pulumi:"timezone"`
}

type CollectorState struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category pulumi.StringPtrInput
	// The description of the collector.
	Description pulumi.StringPtrInput
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapInput
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringPtrInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrInput
}

func (CollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorState)(nil)).Elem()
}

type collectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category *string `pulumi:"category"`
	// The description of the collector.
	Description *string `pulumi:"description"`
	// Map containing [key/value pairs][3].
	Fields map[string]string `pulumi:"fields"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name *string `pulumi:"name"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a Collector resource.
type CollectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category pulumi.StringPtrInput
	// The description of the collector.
	Description pulumi.StringPtrInput
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapInput
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringPtrInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrInput
}

func (CollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorArgs)(nil)).Elem()
}

type CollectorInput interface {
	pulumi.Input

	ToCollectorOutput() CollectorOutput
	ToCollectorOutputWithContext(ctx context.Context) CollectorOutput
}

func (*Collector) ElementType() reflect.Type {
	return reflect.TypeOf((**Collector)(nil)).Elem()
}

func (i *Collector) ToCollectorOutput() CollectorOutput {
	return i.ToCollectorOutputWithContext(context.Background())
}

func (i *Collector) ToCollectorOutputWithContext(ctx context.Context) CollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorOutput)
}

// CollectorArrayInput is an input type that accepts CollectorArray and CollectorArrayOutput values.
// You can construct a concrete instance of `CollectorArrayInput` via:
//
//          CollectorArray{ CollectorArgs{...} }
type CollectorArrayInput interface {
	pulumi.Input

	ToCollectorArrayOutput() CollectorArrayOutput
	ToCollectorArrayOutputWithContext(context.Context) CollectorArrayOutput
}

type CollectorArray []CollectorInput

func (CollectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collector)(nil)).Elem()
}

func (i CollectorArray) ToCollectorArrayOutput() CollectorArrayOutput {
	return i.ToCollectorArrayOutputWithContext(context.Background())
}

func (i CollectorArray) ToCollectorArrayOutputWithContext(ctx context.Context) CollectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorArrayOutput)
}

// CollectorMapInput is an input type that accepts CollectorMap and CollectorMapOutput values.
// You can construct a concrete instance of `CollectorMapInput` via:
//
//          CollectorMap{ "key": CollectorArgs{...} }
type CollectorMapInput interface {
	pulumi.Input

	ToCollectorMapOutput() CollectorMapOutput
	ToCollectorMapOutputWithContext(context.Context) CollectorMapOutput
}

type CollectorMap map[string]CollectorInput

func (CollectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collector)(nil)).Elem()
}

func (i CollectorMap) ToCollectorMapOutput() CollectorMapOutput {
	return i.ToCollectorMapOutputWithContext(context.Background())
}

func (i CollectorMap) ToCollectorMapOutputWithContext(ctx context.Context) CollectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorMapOutput)
}

type CollectorOutput struct{ *pulumi.OutputState }

func (CollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Collector)(nil)).Elem()
}

func (o CollectorOutput) ToCollectorOutput() CollectorOutput {
	return o
}

func (o CollectorOutput) ToCollectorOutputWithContext(ctx context.Context) CollectorOutput {
	return o
}

// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
func (o CollectorOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// The description of the collector.
func (o CollectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Map containing [key/value pairs][3].
func (o CollectorOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
func (o CollectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
func (o CollectorOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Collector) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type CollectorArrayOutput struct{ *pulumi.OutputState }

func (CollectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Collector)(nil)).Elem()
}

func (o CollectorArrayOutput) ToCollectorArrayOutput() CollectorArrayOutput {
	return o
}

func (o CollectorArrayOutput) ToCollectorArrayOutputWithContext(ctx context.Context) CollectorArrayOutput {
	return o
}

func (o CollectorArrayOutput) Index(i pulumi.IntInput) CollectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Collector {
		return vs[0].([]*Collector)[vs[1].(int)]
	}).(CollectorOutput)
}

type CollectorMapOutput struct{ *pulumi.OutputState }

func (CollectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Collector)(nil)).Elem()
}

func (o CollectorMapOutput) ToCollectorMapOutput() CollectorMapOutput {
	return o
}

func (o CollectorMapOutput) ToCollectorMapOutputWithContext(ctx context.Context) CollectorMapOutput {
	return o
}

func (o CollectorMapOutput) MapIndex(k pulumi.StringInput) CollectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Collector {
		return vs[0].(map[string]*Collector)[vs[1].(string)]
	}).(CollectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorInput)(nil)).Elem(), &Collector{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorArrayInput)(nil)).Elem(), CollectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorMapInput)(nil)).Elem(), CollectorMap{})
	pulumi.RegisterOutputType(CollectorOutput{})
	pulumi.RegisterOutputType(CollectorArrayOutput{})
	pulumi.RegisterOutputType(CollectorMapOutput{})
}
