// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic AWS S3 Source][2].
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewS3Source(ctx, "s3Source", &sumologic.S3SourceArgs{
// 			Authentication: &S3SourceAuthenticationArgs{
// 				AccessKey: pulumi.String("someKey"),
// 				SecretKey: pulumi.String("******"),
// 				Type:      pulumi.String("S3BucketAuthentication"),
// 			},
// 			Category:    pulumi.String("aws/s3"),
// 			CollectorId: collector.ID(),
// 			ContentType: pulumi.String("AwsS3Bucket"),
// 			Description: pulumi.String("My description"),
// 			Path: &S3SourcePathArgs{
// 				BucketName:     pulumi.String("Bucket1"),
// 				PathExpression: pulumi.String("*"),
// 				Type:           pulumi.String("S3BucketPathExpression"),
// 			},
// 			Paused:       pulumi.Bool(false),
// 			ScanInterval: pulumi.Int(300000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// S3 sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/s3Source:S3Source test 123/456
// ```
//
//  S3 sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/s3Source:S3Source test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source
type S3Source struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       S3SourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput         `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput       `pulumi:"category"`
	CollectorId          pulumi.IntOutput             `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                  `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput               `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                  `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         S3SourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput               `pulumi:"description"`
	Fields                     pulumi.StringMapOutput               `pulumi:"fields"`
	Filters                    S3SourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                 `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput               `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput               `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                 `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                  `pulumi:"name"`
	// The location to scan for new data.
	Path S3SourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewS3Source registers a new resource with the given unique name, arguments, and options.
func NewS3Source(ctx *pulumi.Context,
	name string, args *S3SourceArgs, opts ...pulumi.ResourceOption) (*S3Source, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource S3Source
	err := ctx.RegisterResource("sumologic:index/s3Source:S3Source", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Source gets an existing S3Source resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Source(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3SourceState, opts ...pulumi.ResourceOption) (*S3Source, error) {
	var resource S3Source
	err := ctx.ReadResource("sumologic:index/s3Source:S3Source", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Source resources.
type s3sourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *S3SourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                   `pulumi:"automaticDateParsing"`
	Category             *string                 `pulumi:"category"`
	CollectorId          *int                    `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                     `pulumi:"contentType"`
	CutoffRelativeTime         *string                     `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                        `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3SourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                     `pulumi:"description"`
	Fields                     map[string]string           `pulumi:"fields"`
	Filters                    []S3SourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                       `pulumi:"forceTimezone"`
	HostName                   *string                     `pulumi:"hostName"`
	ManualPrefixRegexp         *string                     `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                       `pulumi:"multilineProcessingEnabled"`
	Name                       *string                     `pulumi:"name"`
	// The location to scan for new data.
	Path *S3SourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type S3SourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3SourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3SourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3SourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3SourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3SourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3sourceState)(nil)).Elem()
}

type s3sourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3SourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                  `pulumi:"automaticDateParsing"`
	Category             *string                `pulumi:"category"`
	CollectorId          int                    `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                     `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                        `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3SourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                     `pulumi:"description"`
	Fields                     map[string]string           `pulumi:"fields"`
	Filters                    []S3SourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                       `pulumi:"forceTimezone"`
	HostName                   *string                     `pulumi:"hostName"`
	ManualPrefixRegexp         *string                     `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                       `pulumi:"multilineProcessingEnabled"`
	Name                       *string                     `pulumi:"name"`
	// The location to scan for new data.
	Path S3SourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a S3Source resource.
type S3SourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3SourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3SourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3SourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3SourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3sourceArgs)(nil)).Elem()
}

type S3SourceInput interface {
	pulumi.Input

	ToS3SourceOutput() S3SourceOutput
	ToS3SourceOutputWithContext(ctx context.Context) S3SourceOutput
}

func (*S3Source) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Source)(nil)).Elem()
}

func (i *S3Source) ToS3SourceOutput() S3SourceOutput {
	return i.ToS3SourceOutputWithContext(context.Background())
}

func (i *S3Source) ToS3SourceOutputWithContext(ctx context.Context) S3SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceOutput)
}

// S3SourceArrayInput is an input type that accepts S3SourceArray and S3SourceArrayOutput values.
// You can construct a concrete instance of `S3SourceArrayInput` via:
//
//          S3SourceArray{ S3SourceArgs{...} }
type S3SourceArrayInput interface {
	pulumi.Input

	ToS3SourceArrayOutput() S3SourceArrayOutput
	ToS3SourceArrayOutputWithContext(context.Context) S3SourceArrayOutput
}

type S3SourceArray []S3SourceInput

func (S3SourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Source)(nil)).Elem()
}

func (i S3SourceArray) ToS3SourceArrayOutput() S3SourceArrayOutput {
	return i.ToS3SourceArrayOutputWithContext(context.Background())
}

func (i S3SourceArray) ToS3SourceArrayOutputWithContext(ctx context.Context) S3SourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceArrayOutput)
}

// S3SourceMapInput is an input type that accepts S3SourceMap and S3SourceMapOutput values.
// You can construct a concrete instance of `S3SourceMapInput` via:
//
//          S3SourceMap{ "key": S3SourceArgs{...} }
type S3SourceMapInput interface {
	pulumi.Input

	ToS3SourceMapOutput() S3SourceMapOutput
	ToS3SourceMapOutputWithContext(context.Context) S3SourceMapOutput
}

type S3SourceMap map[string]S3SourceInput

func (S3SourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Source)(nil)).Elem()
}

func (i S3SourceMap) ToS3SourceMapOutput() S3SourceMapOutput {
	return i.ToS3SourceMapOutputWithContext(context.Background())
}

func (i S3SourceMap) ToS3SourceMapOutputWithContext(ctx context.Context) S3SourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceMapOutput)
}

type S3SourceOutput struct{ *pulumi.OutputState }

func (S3SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Source)(nil)).Elem()
}

func (o S3SourceOutput) ToS3SourceOutput() S3SourceOutput {
	return o
}

func (o S3SourceOutput) ToS3SourceOutputWithContext(ctx context.Context) S3SourceOutput {
	return o
}

type S3SourceArrayOutput struct{ *pulumi.OutputState }

func (S3SourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Source)(nil)).Elem()
}

func (o S3SourceArrayOutput) ToS3SourceArrayOutput() S3SourceArrayOutput {
	return o
}

func (o S3SourceArrayOutput) ToS3SourceArrayOutputWithContext(ctx context.Context) S3SourceArrayOutput {
	return o
}

func (o S3SourceArrayOutput) Index(i pulumi.IntInput) S3SourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Source {
		return vs[0].([]*S3Source)[vs[1].(int)]
	}).(S3SourceOutput)
}

type S3SourceMapOutput struct{ *pulumi.OutputState }

func (S3SourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Source)(nil)).Elem()
}

func (o S3SourceMapOutput) ToS3SourceMapOutput() S3SourceMapOutput {
	return o
}

func (o S3SourceMapOutput) ToS3SourceMapOutputWithContext(ctx context.Context) S3SourceMapOutput {
	return o
}

func (o S3SourceMapOutput) MapIndex(k pulumi.StringInput) S3SourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Source {
		return vs[0].(map[string]*S3Source)[vs[1].(string)]
	}).(S3SourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceInput)(nil)).Elem(), &S3Source{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceArrayInput)(nil)).Elem(), S3SourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceMapInput)(nil)).Elem(), S3SourceMap{})
	pulumi.RegisterOutputType(S3SourceOutput{})
	pulumi.RegisterOutputType(S3SourceArrayOutput{})
	pulumi.RegisterOutputType(S3SourceMapOutput{})
}
