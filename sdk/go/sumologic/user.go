// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic User](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleRole, err := sumologic.NewRole(ctx, "exampleRole", &sumologic.RoleArgs{
//				Description: pulumi.String("Testing resource sumologic_role"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUser1, err := sumologic.NewUser(ctx, "exampleUser1", &sumologic.UserArgs{
//				FirstName: pulumi.String("Jon"),
//				LastName:  pulumi.String("Doe"),
//				Email:     pulumi.String("jon.doe@gmail.com"),
//				IsActive:  pulumi.Bool(true),
//				RoleIds: pulumi.StringArray{
//					exampleRole.ID(),
//				},
//				TransferTo: pulumi.String(""),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewUser(ctx, "exampleUser2", &sumologic.UserArgs{
//				FirstName: pulumi.String("Jane"),
//				LastName:  pulumi.String("Smith"),
//				Email:     pulumi.String("jane.smith@gmail.com"),
//				RoleIds: pulumi.StringArray{
//					exampleRole.ID(),
//				},
//				TransferTo: exampleUser1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Users can be imported using the user id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/user:User user 1234567890
//
// ```
//
//	[1]https://help.sumologic.com/Manage/Users-and-Roles/Manage-Users
type User struct {
	pulumi.CustomResourceState

	// Email of the user.
	Email pulumi.StringOutput `pulumi:"email"`
	// First name of the user.
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// This has the value true if the user is active and false if they have been deactivated.
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// Last name of the user.
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// List of roleIds associated with the user.
	RoleIds pulumi.StringArrayOutput `pulumi:"roleIds"`
	// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
	TransferTo pulumi.StringOutput `pulumi:"transferTo"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.IsActive == nil {
		return nil, errors.New("invalid value for required argument 'IsActive'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.RoleIds == nil {
		return nil, errors.New("invalid value for required argument 'RoleIds'")
	}
	if args.TransferTo == nil {
		return nil, errors.New("invalid value for required argument 'TransferTo'")
	}
	var resource User
	err := ctx.RegisterResource("sumologic:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("sumologic:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Email of the user.
	Email *string `pulumi:"email"`
	// First name of the user.
	FirstName *string `pulumi:"firstName"`
	// This has the value true if the user is active and false if they have been deactivated.
	IsActive *bool `pulumi:"isActive"`
	// Last name of the user.
	LastName *string `pulumi:"lastName"`
	// List of roleIds associated with the user.
	RoleIds []string `pulumi:"roleIds"`
	// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
	TransferTo *string `pulumi:"transferTo"`
}

type UserState struct {
	// Email of the user.
	Email pulumi.StringPtrInput
	// First name of the user.
	FirstName pulumi.StringPtrInput
	// This has the value true if the user is active and false if they have been deactivated.
	IsActive pulumi.BoolPtrInput
	// Last name of the user.
	LastName pulumi.StringPtrInput
	// List of roleIds associated with the user.
	RoleIds pulumi.StringArrayInput
	// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
	TransferTo pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Email of the user.
	Email string `pulumi:"email"`
	// First name of the user.
	FirstName string `pulumi:"firstName"`
	// This has the value true if the user is active and false if they have been deactivated.
	IsActive bool `pulumi:"isActive"`
	// Last name of the user.
	LastName string `pulumi:"lastName"`
	// List of roleIds associated with the user.
	RoleIds []string `pulumi:"roleIds"`
	// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
	TransferTo string `pulumi:"transferTo"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Email of the user.
	Email pulumi.StringInput
	// First name of the user.
	FirstName pulumi.StringInput
	// This has the value true if the user is active and false if they have been deactivated.
	IsActive pulumi.BoolInput
	// Last name of the user.
	LastName pulumi.StringInput
	// List of roleIds associated with the user.
	RoleIds pulumi.StringArrayInput
	// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
	TransferTo pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Email of the user.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// First name of the user.
func (o UserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// This has the value true if the user is active and false if they have been deactivated.
func (o UserOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// Last name of the user.
func (o UserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// List of roleIds associated with the user.
func (o UserOutput) RoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.RoleIds }).(pulumi.StringArrayOutput)
}

// UserId of user to transfer this user's content to on deletion, can be empty. Must be applied prior to deletion to take effect.
func (o UserOutput) TransferTo() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.TransferTo }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
