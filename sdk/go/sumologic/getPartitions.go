// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a way to retrieve all [Sumologic Partitions](https://help.sumologic.com/docs/manage/partitions/data-tiers/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.GetPartitions(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// The following attributes are exported:
//
// - `name` - The name of the partition.
// - `routingExpression` - The query that defines the data to be included in the partition.
// - `analyticsTier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
// - `retentionPeriod` - The number of days to retain data in the partition.
// - `isCompliant` - Whether the partition is used for compliance or audit purposes.
// - `isIncludedInDefaultSearch` - Whether the partition is included in the default search scope.
// - `totalBytes` - The size of the data in the partition in bytes.
// - `isActive` - Whether the partition is currently active or decommissioned.
// - `indexType` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
// - `dataForwardingId` - The ID of the data forwarding configuration to be used by the partition.
//
// [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
func GetPartitions(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetPartitionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPartitionsResult
	err := ctx.Invoke("sumologic:index/getPartitions:getPartitions", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getPartitions.
type GetPartitionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string                   `pulumi:"id"`
	Partitions []GetPartitionsPartition `pulumi:"partitions"`
}

func GetPartitionsOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetPartitionsResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetPartitionsResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("sumologic:index/getPartitions:getPartitions", nil, GetPartitionsResultOutput{}, options).(GetPartitionsResultOutput), nil
	}).(GetPartitionsResultOutput)
}

// A collection of values returned by getPartitions.
type GetPartitionsResultOutput struct{ *pulumi.OutputState }

func (GetPartitionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPartitionsResult)(nil)).Elem()
}

func (o GetPartitionsResultOutput) ToGetPartitionsResultOutput() GetPartitionsResultOutput {
	return o
}

func (o GetPartitionsResultOutput) ToGetPartitionsResultOutputWithContext(ctx context.Context) GetPartitionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPartitionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPartitionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPartitionsResultOutput) Partitions() GetPartitionsPartitionArrayOutput {
	return o.ApplyT(func(v GetPartitionsResult) []GetPartitionsPartition { return v.Partitions }).(GetPartitionsPartitionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPartitionsResultOutput{})
}
