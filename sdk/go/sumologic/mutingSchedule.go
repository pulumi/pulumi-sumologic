// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the ability to create, read, delete, and update [MutingSchedule](https://help.sumologic.com/docs/alerts/monitors/muting-schedules/).
//
// ## Example One-time Muting Schedule From 12:00 AM To 1:00 AM On 2023-08-05 For All monitor
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMutingSchedule(ctx, "muting_schedule", &sumologic.MutingScheduleArgs{
//				Name:        pulumi.String("Muting Schedule For one time"),
//				Description: pulumi.String("This is an example for one time Muting schedule for all monitor"),
//				Type:        pulumi.String("MutingSchedulesLibraryMutingSchedule"),
//				ContentType: pulumi.String("MutingSchedule"),
//				Monitor: &sumologic.MutingScheduleMonitorArgs{
//					All: pulumi.Bool(true),
//				},
//				Schedule: &sumologic.MutingScheduleScheduleArgs{
//					Timezone:  pulumi.String("America/Los_Angeles"),
//					StartDate: pulumi.String("2023-08-05"),
//					StartTime: pulumi.String("00:00"),
//					Duration:  pulumi.Int(60),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example One-time Muting Schedule From 12:00 AM To 1:00 AM On 2023-08-05 For Specifc Monitor/Folder ids
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMutingSchedule(ctx, "muting_schedule", &sumologic.MutingScheduleArgs{
//				Name:        pulumi.String("Muting Schedule For one time"),
//				Description: pulumi.String("This is an example for one time Muting schedule for all monitor"),
//				Type:        pulumi.String("MutingSchedulesLibraryMutingSchedule"),
//				ContentType: pulumi.String("MutingSchedule"),
//				Monitor: &sumologic.MutingScheduleMonitorArgs{
//					Ids: pulumi.StringArray{
//						pulumi.String("0000000000200B92"),
//					},
//				},
//				Schedule: &sumologic.MutingScheduleScheduleArgs{
//					Timezone:  pulumi.String("America/Los_Angeles"),
//					StartDate: pulumi.String("2023-08-05"),
//					StartTime: pulumi.String("00:00"),
//					Duration:  pulumi.Int(60),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Daily Muting Schedule From 9:00 AM to 9:30 and 10:00 AM to 10:30 AM Since 2023-08-05 For All monitor
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMutingSchedule(ctx, "muting_schedule", &sumologic.MutingScheduleArgs{
//				Name:        pulumi.String("Muting Schedule For one time"),
//				Description: pulumi.String("This is an example for one time Muting schedule for all monitor"),
//				Type:        pulumi.String("MutingSchedulesLibraryMutingSchedule"),
//				ContentType: pulumi.String("MutingSchedule"),
//				Monitor: &sumologic.MutingScheduleMonitorArgs{
//					All: pulumi.Bool(true),
//				},
//				Schedule: &sumologic.MutingScheduleScheduleArgs{
//					Timezone:  pulumi.String("America/Los_Angeles"),
//					StartDate: pulumi.String("2023-08-05"),
//					StartTime: pulumi.String("00:00"),
//					Duration:  pulumi.Int(30),
//					Rrule:     pulumi.String("FREQ=DAILY;INTERVAL=1;BYHOUR=9,10"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Daily Muting Schedule From 9:00 AM to 9:30 and 10:00 AM to 10:30 AM Since 2023-08-05 For Specifc Monitor/Folder ids
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMutingSchedule(ctx, "muting_schedule", &sumologic.MutingScheduleArgs{
//				Name:        pulumi.String("Muting Schedule For one time"),
//				Description: pulumi.String("This is an example for one time Muting schedule for all monitor"),
//				Type:        pulumi.String("MutingSchedulesLibraryMutingSchedule"),
//				ContentType: pulumi.String("MutingSchedule"),
//				Monitor: &sumologic.MutingScheduleMonitorArgs{
//					Ids: pulumi.StringArray{
//						pulumi.String("0000000000200B92"),
//					},
//				},
//				Schedule: &sumologic.MutingScheduleScheduleArgs{
//					Timezone:  pulumi.String("America/Los_Angeles"),
//					StartDate: pulumi.String("2023-08-05"),
//					StartTime: pulumi.String("00:00"),
//					Duration:  pulumi.Int(30),
//					Rrule:     pulumi.String("FREQ=DAILY;INTERVAL=1;BYHOUR=9,10"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MutingSchedule struct {
	pulumi.CustomResourceState

	// The type of the content object. Valid value:
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy   pulumi.StringOutput    `pulumi:"createdBy"`
	// The description of the muting schedule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	IsMutable   pulumi.BoolOutput      `pulumi:"isMutable"`
	IsSystem    pulumi.BoolOutput      `pulumi:"isSystem"`
	ModifiedAt  pulumi.StringOutput    `pulumi:"modifiedAt"`
	ModifiedBy  pulumi.StringOutput    `pulumi:"modifiedBy"`
	// The monitors which need to put in the muting schedule. see `monitorScopeType`:
	Monitor MutingScheduleMonitorPtrOutput `pulumi:"monitor"`
	// The name of the muting schedule. The name must be alphanumeric.
	Name     pulumi.StringOutput `pulumi:"name"`
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// The schedule information. see `scheduleType`.
	Schedule MutingScheduleScheduleOutput `pulumi:"schedule"`
	// The type of object model. Valid value:
	Type    pulumi.StringPtrOutput `pulumi:"type"`
	Version pulumi.IntOutput       `pulumi:"version"`
}

// NewMutingSchedule registers a new resource with the given unique name, arguments, and options.
func NewMutingSchedule(ctx *pulumi.Context,
	name string, args *MutingScheduleArgs, opts ...pulumi.ResourceOption) (*MutingSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MutingSchedule
	err := ctx.RegisterResource("sumologic:index/mutingSchedule:MutingSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMutingSchedule gets an existing MutingSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMutingSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MutingScheduleState, opts ...pulumi.ResourceOption) (*MutingSchedule, error) {
	var resource MutingSchedule
	err := ctx.ReadResource("sumologic:index/mutingSchedule:MutingSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MutingSchedule resources.
type mutingScheduleState struct {
	// The type of the content object. Valid value:
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the muting schedule.
	Description *string `pulumi:"description"`
	IsMutable   *bool   `pulumi:"isMutable"`
	IsSystem    *bool   `pulumi:"isSystem"`
	ModifiedAt  *string `pulumi:"modifiedAt"`
	ModifiedBy  *string `pulumi:"modifiedBy"`
	// The monitors which need to put in the muting schedule. see `monitorScopeType`:
	Monitor *MutingScheduleMonitor `pulumi:"monitor"`
	// The name of the muting schedule. The name must be alphanumeric.
	Name     *string `pulumi:"name"`
	ParentId *string `pulumi:"parentId"`
	// The schedule information. see `scheduleType`.
	Schedule *MutingScheduleSchedule `pulumi:"schedule"`
	// The type of object model. Valid value:
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

type MutingScheduleState struct {
	// The type of the content object. Valid value:
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the muting schedule.
	Description pulumi.StringPtrInput
	IsMutable   pulumi.BoolPtrInput
	IsSystem    pulumi.BoolPtrInput
	ModifiedAt  pulumi.StringPtrInput
	ModifiedBy  pulumi.StringPtrInput
	// The monitors which need to put in the muting schedule. see `monitorScopeType`:
	Monitor MutingScheduleMonitorPtrInput
	// The name of the muting schedule. The name must be alphanumeric.
	Name     pulumi.StringPtrInput
	ParentId pulumi.StringPtrInput
	// The schedule information. see `scheduleType`.
	Schedule MutingScheduleSchedulePtrInput
	// The type of object model. Valid value:
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (MutingScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*mutingScheduleState)(nil)).Elem()
}

type mutingScheduleArgs struct {
	// The type of the content object. Valid value:
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the muting schedule.
	Description *string `pulumi:"description"`
	IsMutable   *bool   `pulumi:"isMutable"`
	IsSystem    *bool   `pulumi:"isSystem"`
	ModifiedAt  *string `pulumi:"modifiedAt"`
	ModifiedBy  *string `pulumi:"modifiedBy"`
	// The monitors which need to put in the muting schedule. see `monitorScopeType`:
	Monitor *MutingScheduleMonitor `pulumi:"monitor"`
	// The name of the muting schedule. The name must be alphanumeric.
	Name     *string `pulumi:"name"`
	ParentId *string `pulumi:"parentId"`
	// The schedule information. see `scheduleType`.
	Schedule MutingScheduleSchedule `pulumi:"schedule"`
	// The type of object model. Valid value:
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

// The set of arguments for constructing a MutingSchedule resource.
type MutingScheduleArgs struct {
	// The type of the content object. Valid value:
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the muting schedule.
	Description pulumi.StringPtrInput
	IsMutable   pulumi.BoolPtrInput
	IsSystem    pulumi.BoolPtrInput
	ModifiedAt  pulumi.StringPtrInput
	ModifiedBy  pulumi.StringPtrInput
	// The monitors which need to put in the muting schedule. see `monitorScopeType`:
	Monitor MutingScheduleMonitorPtrInput
	// The name of the muting schedule. The name must be alphanumeric.
	Name     pulumi.StringPtrInput
	ParentId pulumi.StringPtrInput
	// The schedule information. see `scheduleType`.
	Schedule MutingScheduleScheduleInput
	// The type of object model. Valid value:
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (MutingScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mutingScheduleArgs)(nil)).Elem()
}

type MutingScheduleInput interface {
	pulumi.Input

	ToMutingScheduleOutput() MutingScheduleOutput
	ToMutingScheduleOutputWithContext(ctx context.Context) MutingScheduleOutput
}

func (*MutingSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**MutingSchedule)(nil)).Elem()
}

func (i *MutingSchedule) ToMutingScheduleOutput() MutingScheduleOutput {
	return i.ToMutingScheduleOutputWithContext(context.Background())
}

func (i *MutingSchedule) ToMutingScheduleOutputWithContext(ctx context.Context) MutingScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutingScheduleOutput)
}

// MutingScheduleArrayInput is an input type that accepts MutingScheduleArray and MutingScheduleArrayOutput values.
// You can construct a concrete instance of `MutingScheduleArrayInput` via:
//
//	MutingScheduleArray{ MutingScheduleArgs{...} }
type MutingScheduleArrayInput interface {
	pulumi.Input

	ToMutingScheduleArrayOutput() MutingScheduleArrayOutput
	ToMutingScheduleArrayOutputWithContext(context.Context) MutingScheduleArrayOutput
}

type MutingScheduleArray []MutingScheduleInput

func (MutingScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutingSchedule)(nil)).Elem()
}

func (i MutingScheduleArray) ToMutingScheduleArrayOutput() MutingScheduleArrayOutput {
	return i.ToMutingScheduleArrayOutputWithContext(context.Background())
}

func (i MutingScheduleArray) ToMutingScheduleArrayOutputWithContext(ctx context.Context) MutingScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutingScheduleArrayOutput)
}

// MutingScheduleMapInput is an input type that accepts MutingScheduleMap and MutingScheduleMapOutput values.
// You can construct a concrete instance of `MutingScheduleMapInput` via:
//
//	MutingScheduleMap{ "key": MutingScheduleArgs{...} }
type MutingScheduleMapInput interface {
	pulumi.Input

	ToMutingScheduleMapOutput() MutingScheduleMapOutput
	ToMutingScheduleMapOutputWithContext(context.Context) MutingScheduleMapOutput
}

type MutingScheduleMap map[string]MutingScheduleInput

func (MutingScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutingSchedule)(nil)).Elem()
}

func (i MutingScheduleMap) ToMutingScheduleMapOutput() MutingScheduleMapOutput {
	return i.ToMutingScheduleMapOutputWithContext(context.Background())
}

func (i MutingScheduleMap) ToMutingScheduleMapOutputWithContext(ctx context.Context) MutingScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MutingScheduleMapOutput)
}

type MutingScheduleOutput struct{ *pulumi.OutputState }

func (MutingScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MutingSchedule)(nil)).Elem()
}

func (o MutingScheduleOutput) ToMutingScheduleOutput() MutingScheduleOutput {
	return o
}

func (o MutingScheduleOutput) ToMutingScheduleOutputWithContext(ctx context.Context) MutingScheduleOutput {
	return o
}

// The type of the content object. Valid value:
func (o MutingScheduleOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o MutingScheduleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MutingScheduleOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The description of the muting schedule.
func (o MutingScheduleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MutingScheduleOutput) IsMutable() pulumi.BoolOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.BoolOutput { return v.IsMutable }).(pulumi.BoolOutput)
}

func (o MutingScheduleOutput) IsSystem() pulumi.BoolOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.BoolOutput { return v.IsSystem }).(pulumi.BoolOutput)
}

func (o MutingScheduleOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o MutingScheduleOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// The monitors which need to put in the muting schedule. see `monitorScopeType`:
func (o MutingScheduleOutput) Monitor() MutingScheduleMonitorPtrOutput {
	return o.ApplyT(func(v *MutingSchedule) MutingScheduleMonitorPtrOutput { return v.Monitor }).(MutingScheduleMonitorPtrOutput)
}

// The name of the muting schedule. The name must be alphanumeric.
func (o MutingScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MutingScheduleOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// The schedule information. see `scheduleType`.
func (o MutingScheduleOutput) Schedule() MutingScheduleScheduleOutput {
	return o.ApplyT(func(v *MutingSchedule) MutingScheduleScheduleOutput { return v.Schedule }).(MutingScheduleScheduleOutput)
}

// The type of object model. Valid value:
func (o MutingScheduleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o MutingScheduleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *MutingSchedule) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type MutingScheduleArrayOutput struct{ *pulumi.OutputState }

func (MutingScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MutingSchedule)(nil)).Elem()
}

func (o MutingScheduleArrayOutput) ToMutingScheduleArrayOutput() MutingScheduleArrayOutput {
	return o
}

func (o MutingScheduleArrayOutput) ToMutingScheduleArrayOutputWithContext(ctx context.Context) MutingScheduleArrayOutput {
	return o
}

func (o MutingScheduleArrayOutput) Index(i pulumi.IntInput) MutingScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MutingSchedule {
		return vs[0].([]*MutingSchedule)[vs[1].(int)]
	}).(MutingScheduleOutput)
}

type MutingScheduleMapOutput struct{ *pulumi.OutputState }

func (MutingScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MutingSchedule)(nil)).Elem()
}

func (o MutingScheduleMapOutput) ToMutingScheduleMapOutput() MutingScheduleMapOutput {
	return o
}

func (o MutingScheduleMapOutput) ToMutingScheduleMapOutputWithContext(ctx context.Context) MutingScheduleMapOutput {
	return o
}

func (o MutingScheduleMapOutput) MapIndex(k pulumi.StringInput) MutingScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MutingSchedule {
		return vs[0].(map[string]*MutingSchedule)[vs[1].(string)]
	}).(MutingScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MutingScheduleInput)(nil)).Elem(), &MutingSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutingScheduleArrayInput)(nil)).Elem(), MutingScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MutingScheduleMapInput)(nil)).Elem(), MutingScheduleMap{})
	pulumi.RegisterOutputType(MutingScheduleOutput{})
	pulumi.RegisterOutputType(MutingScheduleArrayOutput{})
	pulumi.RegisterOutputType(MutingScheduleMapOutput{})
}
