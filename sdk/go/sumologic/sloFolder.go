// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the ability to create, read, delete, and update folders for SLO's.
//
// ## Example SLO Folder
//
// NOTE: SLO folders are considered a different resource from Library content and monitor folders.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewSloFolder(ctx, "tfSloFolder", &sumologic.SloFolderArgs{
//				Description: pulumi.String("A folder for SLO's managed by terraform."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Nested SLO Folders
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tfPaymentsTeamRootFolder, err := sumologic.NewSloFolder(ctx, "tfPaymentsTeamRootFolder", &sumologic.SloFolderArgs{
//				Description: pulumi.String("SLO's payments services."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewSloFolder(ctx, "tfPaymentsTeamProdFolder", &sumologic.SloFolderArgs{
//				Description: pulumi.String("SLOs for the Payments service on Production Environment."),
//				ParentId:    tfPaymentsTeamRootFolder.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewSloFolder(ctx, "tfPaymentsTeamStagFolder", &sumologic.SloFolderArgs{
//				Description: pulumi.String("SLOs for the payments service on Staging Environment."),
//				ParentId:    tfPaymentsTeamRootFolder.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SLO folders can be imported using the SLO folder identifier, such as:
//
// shell
//
// ```sh
//
//	$ pulumi import sumologic:index/sloFolder:SloFolder tf_slo_folder_1 0000000000ABC123
//
// ```
type SloFolder struct {
	pulumi.CustomResourceState

	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy   pulumi.StringOutput    `pulumi:"createdBy"`
	// The description of the SLO folder.
	Description pulumi.StringOutput  `pulumi:"description"`
	IsLocked    pulumi.BoolPtrOutput `pulumi:"isLocked"`
	IsMutable   pulumi.BoolOutput    `pulumi:"isMutable"`
	IsSystem    pulumi.BoolOutput    `pulumi:"isSystem"`
	ModifiedAt  pulumi.StringOutput  `pulumi:"modifiedAt"`
	ModifiedBy  pulumi.StringOutput  `pulumi:"modifiedBy"`
	// The name of the SLO folder. The name must be alphanumeric.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
	ParentId       pulumi.StringOutput    `pulumi:"parentId"`
	PostRequestMap pulumi.StringMapOutput `pulumi:"postRequestMap"`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
	Version        pulumi.IntOutput       `pulumi:"version"`
}

// NewSloFolder registers a new resource with the given unique name, arguments, and options.
func NewSloFolder(ctx *pulumi.Context,
	name string, args *SloFolderArgs, opts ...pulumi.ResourceOption) (*SloFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource SloFolder
	err := ctx.RegisterResource("sumologic:index/sloFolder:SloFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSloFolder gets an existing SloFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSloFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloFolderState, opts ...pulumi.ResourceOption) (*SloFolder, error) {
	var resource SloFolder
	err := ctx.ReadResource("sumologic:index/sloFolder:SloFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SloFolder resources.
type sloFolderState struct {
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the SLO folder.
	Description *string `pulumi:"description"`
	IsLocked    *bool   `pulumi:"isLocked"`
	IsMutable   *bool   `pulumi:"isMutable"`
	IsSystem    *bool   `pulumi:"isSystem"`
	ModifiedAt  *string `pulumi:"modifiedAt"`
	ModifiedBy  *string `pulumi:"modifiedBy"`
	// The name of the SLO folder. The name must be alphanumeric.
	Name *string `pulumi:"name"`
	// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
	ParentId       *string           `pulumi:"parentId"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	Type           *string           `pulumi:"type"`
	Version        *int              `pulumi:"version"`
}

type SloFolderState struct {
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the SLO folder.
	Description pulumi.StringPtrInput
	IsLocked    pulumi.BoolPtrInput
	IsMutable   pulumi.BoolPtrInput
	IsSystem    pulumi.BoolPtrInput
	ModifiedAt  pulumi.StringPtrInput
	ModifiedBy  pulumi.StringPtrInput
	// The name of the SLO folder. The name must be alphanumeric.
	Name pulumi.StringPtrInput
	// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
	ParentId       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	Type           pulumi.StringPtrInput
	Version        pulumi.IntPtrInput
}

func (SloFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloFolderState)(nil)).Elem()
}

type sloFolderArgs struct {
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the SLO folder.
	Description string  `pulumi:"description"`
	IsLocked    *bool   `pulumi:"isLocked"`
	IsMutable   *bool   `pulumi:"isMutable"`
	IsSystem    *bool   `pulumi:"isSystem"`
	ModifiedAt  *string `pulumi:"modifiedAt"`
	ModifiedBy  *string `pulumi:"modifiedBy"`
	// The name of the SLO folder. The name must be alphanumeric.
	Name *string `pulumi:"name"`
	// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
	ParentId       *string           `pulumi:"parentId"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	Type           *string           `pulumi:"type"`
	Version        *int              `pulumi:"version"`
}

// The set of arguments for constructing a SloFolder resource.
type SloFolderArgs struct {
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the SLO folder.
	Description pulumi.StringInput
	IsLocked    pulumi.BoolPtrInput
	IsMutable   pulumi.BoolPtrInput
	IsSystem    pulumi.BoolPtrInput
	ModifiedAt  pulumi.StringPtrInput
	ModifiedBy  pulumi.StringPtrInput
	// The name of the SLO folder. The name must be alphanumeric.
	Name pulumi.StringPtrInput
	// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
	ParentId       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	Type           pulumi.StringPtrInput
	Version        pulumi.IntPtrInput
}

func (SloFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloFolderArgs)(nil)).Elem()
}

type SloFolderInput interface {
	pulumi.Input

	ToSloFolderOutput() SloFolderOutput
	ToSloFolderOutputWithContext(ctx context.Context) SloFolderOutput
}

func (*SloFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**SloFolder)(nil)).Elem()
}

func (i *SloFolder) ToSloFolderOutput() SloFolderOutput {
	return i.ToSloFolderOutputWithContext(context.Background())
}

func (i *SloFolder) ToSloFolderOutputWithContext(ctx context.Context) SloFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloFolderOutput)
}

// SloFolderArrayInput is an input type that accepts SloFolderArray and SloFolderArrayOutput values.
// You can construct a concrete instance of `SloFolderArrayInput` via:
//
//	SloFolderArray{ SloFolderArgs{...} }
type SloFolderArrayInput interface {
	pulumi.Input

	ToSloFolderArrayOutput() SloFolderArrayOutput
	ToSloFolderArrayOutputWithContext(context.Context) SloFolderArrayOutput
}

type SloFolderArray []SloFolderInput

func (SloFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloFolder)(nil)).Elem()
}

func (i SloFolderArray) ToSloFolderArrayOutput() SloFolderArrayOutput {
	return i.ToSloFolderArrayOutputWithContext(context.Background())
}

func (i SloFolderArray) ToSloFolderArrayOutputWithContext(ctx context.Context) SloFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloFolderArrayOutput)
}

// SloFolderMapInput is an input type that accepts SloFolderMap and SloFolderMapOutput values.
// You can construct a concrete instance of `SloFolderMapInput` via:
//
//	SloFolderMap{ "key": SloFolderArgs{...} }
type SloFolderMapInput interface {
	pulumi.Input

	ToSloFolderMapOutput() SloFolderMapOutput
	ToSloFolderMapOutputWithContext(context.Context) SloFolderMapOutput
}

type SloFolderMap map[string]SloFolderInput

func (SloFolderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloFolder)(nil)).Elem()
}

func (i SloFolderMap) ToSloFolderMapOutput() SloFolderMapOutput {
	return i.ToSloFolderMapOutputWithContext(context.Background())
}

func (i SloFolderMap) ToSloFolderMapOutputWithContext(ctx context.Context) SloFolderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloFolderMapOutput)
}

type SloFolderOutput struct{ *pulumi.OutputState }

func (SloFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloFolder)(nil)).Elem()
}

func (o SloFolderOutput) ToSloFolderOutput() SloFolderOutput {
	return o
}

func (o SloFolderOutput) ToSloFolderOutputWithContext(ctx context.Context) SloFolderOutput {
	return o
}

func (o SloFolderOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o SloFolderOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SloFolderOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The description of the SLO folder.
func (o SloFolderOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SloFolderOutput) IsLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.BoolPtrOutput { return v.IsLocked }).(pulumi.BoolPtrOutput)
}

func (o SloFolderOutput) IsMutable() pulumi.BoolOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.BoolOutput { return v.IsMutable }).(pulumi.BoolOutput)
}

func (o SloFolderOutput) IsSystem() pulumi.BoolOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.BoolOutput { return v.IsSystem }).(pulumi.BoolOutput)
}

func (o SloFolderOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o SloFolderOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// The name of the SLO folder. The name must be alphanumeric.
func (o SloFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the SLO Folder that contains this SLO Folder. Defaults to the root folder.
func (o SloFolderOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

func (o SloFolderOutput) PostRequestMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringMapOutput { return v.PostRequestMap }).(pulumi.StringMapOutput)
}

func (o SloFolderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o SloFolderOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SloFolder) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SloFolderArrayOutput struct{ *pulumi.OutputState }

func (SloFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SloFolder)(nil)).Elem()
}

func (o SloFolderArrayOutput) ToSloFolderArrayOutput() SloFolderArrayOutput {
	return o
}

func (o SloFolderArrayOutput) ToSloFolderArrayOutputWithContext(ctx context.Context) SloFolderArrayOutput {
	return o
}

func (o SloFolderArrayOutput) Index(i pulumi.IntInput) SloFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SloFolder {
		return vs[0].([]*SloFolder)[vs[1].(int)]
	}).(SloFolderOutput)
}

type SloFolderMapOutput struct{ *pulumi.OutputState }

func (SloFolderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SloFolder)(nil)).Elem()
}

func (o SloFolderMapOutput) ToSloFolderMapOutput() SloFolderMapOutput {
	return o
}

func (o SloFolderMapOutput) ToSloFolderMapOutputWithContext(ctx context.Context) SloFolderMapOutput {
	return o
}

func (o SloFolderMapOutput) MapIndex(k pulumi.StringInput) SloFolderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SloFolder {
		return vs[0].(map[string]*SloFolder)[vs[1].(string)]
	}).(SloFolderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SloFolderInput)(nil)).Elem(), &SloFolder{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloFolderArrayInput)(nil)).Elem(), SloFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloFolderMapInput)(nil)).Elem(), SloFolderMap{})
	pulumi.RegisterOutputType(SloFolderOutput{})
	pulumi.RegisterOutputType(SloFolderArrayOutput{})
	pulumi.RegisterOutputType(SloFolderMapOutput{})
}
