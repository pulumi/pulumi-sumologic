// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Lookup Table](https://help.sumologic.com/05Search/Lookup_Tables).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewLookupTable(ctx, "lookupTable", &sumologic.LookupTableArgs{
// 			Description: pulumi.String("some description"),
// 			Fields: LookupTableFieldArray{
// 				&LookupTableFieldArgs{
// 					FieldName: pulumi.String("FieldName1"),
// 					FieldType: pulumi.String("boolean"),
// 				},
// 				&LookupTableFieldArgs{
// 					FieldName: pulumi.String("FieldName2"),
// 					FieldType: pulumi.String("string"),
// 				},
// 			},
// 			ParentFolderId: pulumi.String("<personal folder id>"),
// 			PrimaryKeys: pulumi.StringArray{
// 				pulumi.String("FieldName1"),
// 			},
// 			SizeLimitAction: pulumi.String("DeleteOldData"),
// 			Ttl:             pulumi.Int(100),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// The following attributes are exported:
//
// - `id` - Unique identifier for the partition.
//
// ## Import
//
// Lookup Tables can be imported using the id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/lookupTable:LookupTable test 1234567890
// ```
//
//  [1]https://help.sumologic.com/05Search/Lookup_Tables
type LookupTable struct {
	pulumi.CustomResourceState

	// The description of the lookup table.
	Description pulumi.StringOutput `pulumi:"description"`
	// The list of fields in the lookup table.
	Fields LookupTableFieldArrayOutput `pulumi:"fields"`
	// The name of the lookup table.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parent-folder-path identifier of the lookup table in the Library.
	ParentFolderId pulumi.StringPtrOutput `pulumi:"parentFolderId"`
	// The primary key field names.
	PrimaryKeys     pulumi.StringArrayOutput `pulumi:"primaryKeys"`
	SizeLimitAction pulumi.StringPtrOutput   `pulumi:"sizeLimitAction"`
	// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
}

// NewLookupTable registers a new resource with the given unique name, arguments, and options.
func NewLookupTable(ctx *pulumi.Context,
	name string, args *LookupTableArgs, opts ...pulumi.ResourceOption) (*LookupTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource LookupTable
	err := ctx.RegisterResource("sumologic:index/lookupTable:LookupTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLookupTable gets an existing LookupTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLookupTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LookupTableState, opts ...pulumi.ResourceOption) (*LookupTable, error) {
	var resource LookupTable
	err := ctx.ReadResource("sumologic:index/lookupTable:LookupTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LookupTable resources.
type lookupTableState struct {
	// The description of the lookup table.
	Description *string `pulumi:"description"`
	// The list of fields in the lookup table.
	Fields []LookupTableField `pulumi:"fields"`
	// The name of the lookup table.
	Name *string `pulumi:"name"`
	// The parent-folder-path identifier of the lookup table in the Library.
	ParentFolderId *string `pulumi:"parentFolderId"`
	// The primary key field names.
	PrimaryKeys     []string `pulumi:"primaryKeys"`
	SizeLimitAction *string  `pulumi:"sizeLimitAction"`
	// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
	Ttl *int `pulumi:"ttl"`
}

type LookupTableState struct {
	// The description of the lookup table.
	Description pulumi.StringPtrInput
	// The list of fields in the lookup table.
	Fields LookupTableFieldArrayInput
	// The name of the lookup table.
	Name pulumi.StringPtrInput
	// The parent-folder-path identifier of the lookup table in the Library.
	ParentFolderId pulumi.StringPtrInput
	// The primary key field names.
	PrimaryKeys     pulumi.StringArrayInput
	SizeLimitAction pulumi.StringPtrInput
	// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
	Ttl pulumi.IntPtrInput
}

func (LookupTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*lookupTableState)(nil)).Elem()
}

type lookupTableArgs struct {
	// The description of the lookup table.
	Description string `pulumi:"description"`
	// The list of fields in the lookup table.
	Fields []LookupTableField `pulumi:"fields"`
	// The name of the lookup table.
	Name *string `pulumi:"name"`
	// The parent-folder-path identifier of the lookup table in the Library.
	ParentFolderId *string `pulumi:"parentFolderId"`
	// The primary key field names.
	PrimaryKeys     []string `pulumi:"primaryKeys"`
	SizeLimitAction *string  `pulumi:"sizeLimitAction"`
	// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a LookupTable resource.
type LookupTableArgs struct {
	// The description of the lookup table.
	Description pulumi.StringInput
	// The list of fields in the lookup table.
	Fields LookupTableFieldArrayInput
	// The name of the lookup table.
	Name pulumi.StringPtrInput
	// The parent-folder-path identifier of the lookup table in the Library.
	ParentFolderId pulumi.StringPtrInput
	// The primary key field names.
	PrimaryKeys     pulumi.StringArrayInput
	SizeLimitAction pulumi.StringPtrInput
	// A time to live for each entry in the lookup table (in minutes). 365 days is the maximum time to live for each entry that you can specify. Setting it to 0 means that the records will not expire automatically.
	Ttl pulumi.IntPtrInput
}

func (LookupTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lookupTableArgs)(nil)).Elem()
}

type LookupTableInput interface {
	pulumi.Input

	ToLookupTableOutput() LookupTableOutput
	ToLookupTableOutputWithContext(ctx context.Context) LookupTableOutput
}

func (*LookupTable) ElementType() reflect.Type {
	return reflect.TypeOf((**LookupTable)(nil)).Elem()
}

func (i *LookupTable) ToLookupTableOutput() LookupTableOutput {
	return i.ToLookupTableOutputWithContext(context.Background())
}

func (i *LookupTable) ToLookupTableOutputWithContext(ctx context.Context) LookupTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupTableOutput)
}

// LookupTableArrayInput is an input type that accepts LookupTableArray and LookupTableArrayOutput values.
// You can construct a concrete instance of `LookupTableArrayInput` via:
//
//          LookupTableArray{ LookupTableArgs{...} }
type LookupTableArrayInput interface {
	pulumi.Input

	ToLookupTableArrayOutput() LookupTableArrayOutput
	ToLookupTableArrayOutputWithContext(context.Context) LookupTableArrayOutput
}

type LookupTableArray []LookupTableInput

func (LookupTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LookupTable)(nil)).Elem()
}

func (i LookupTableArray) ToLookupTableArrayOutput() LookupTableArrayOutput {
	return i.ToLookupTableArrayOutputWithContext(context.Background())
}

func (i LookupTableArray) ToLookupTableArrayOutputWithContext(ctx context.Context) LookupTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupTableArrayOutput)
}

// LookupTableMapInput is an input type that accepts LookupTableMap and LookupTableMapOutput values.
// You can construct a concrete instance of `LookupTableMapInput` via:
//
//          LookupTableMap{ "key": LookupTableArgs{...} }
type LookupTableMapInput interface {
	pulumi.Input

	ToLookupTableMapOutput() LookupTableMapOutput
	ToLookupTableMapOutputWithContext(context.Context) LookupTableMapOutput
}

type LookupTableMap map[string]LookupTableInput

func (LookupTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LookupTable)(nil)).Elem()
}

func (i LookupTableMap) ToLookupTableMapOutput() LookupTableMapOutput {
	return i.ToLookupTableMapOutputWithContext(context.Background())
}

func (i LookupTableMap) ToLookupTableMapOutputWithContext(ctx context.Context) LookupTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupTableMapOutput)
}

type LookupTableOutput struct{ *pulumi.OutputState }

func (LookupTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LookupTable)(nil)).Elem()
}

func (o LookupTableOutput) ToLookupTableOutput() LookupTableOutput {
	return o
}

func (o LookupTableOutput) ToLookupTableOutputWithContext(ctx context.Context) LookupTableOutput {
	return o
}

type LookupTableArrayOutput struct{ *pulumi.OutputState }

func (LookupTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LookupTable)(nil)).Elem()
}

func (o LookupTableArrayOutput) ToLookupTableArrayOutput() LookupTableArrayOutput {
	return o
}

func (o LookupTableArrayOutput) ToLookupTableArrayOutputWithContext(ctx context.Context) LookupTableArrayOutput {
	return o
}

func (o LookupTableArrayOutput) Index(i pulumi.IntInput) LookupTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LookupTable {
		return vs[0].([]*LookupTable)[vs[1].(int)]
	}).(LookupTableOutput)
}

type LookupTableMapOutput struct{ *pulumi.OutputState }

func (LookupTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LookupTable)(nil)).Elem()
}

func (o LookupTableMapOutput) ToLookupTableMapOutput() LookupTableMapOutput {
	return o
}

func (o LookupTableMapOutput) ToLookupTableMapOutputWithContext(ctx context.Context) LookupTableMapOutput {
	return o
}

func (o LookupTableMapOutput) MapIndex(k pulumi.StringInput) LookupTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LookupTable {
		return vs[0].(map[string]*LookupTable)[vs[1].(string)]
	}).(LookupTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LookupTableInput)(nil)).Elem(), &LookupTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*LookupTableArrayInput)(nil)).Elem(), LookupTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LookupTableMapInput)(nil)).Elem(), LookupTableMap{})
	pulumi.RegisterOutputType(LookupTableOutput{})
	pulumi.RegisterOutputType(LookupTableArrayOutput{})
	pulumi.RegisterOutputType(LookupTableMapOutput{})
}
