// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic CSE Context Action.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseContextAction(ctx, "contextAction", &sumologic.CseContextActionArgs{
//				AllRecordFields: pulumi.Bool(false),
//				Enabled:         pulumi.Bool(true),
//				EntityTypes: pulumi.StringArray{
//					pulumi.String("_hostname"),
//				},
//				IocTypes: pulumi.StringArray{
//					pulumi.String("IP_ADDRESS"),
//				},
//				RecordFields: pulumi.StringArray{
//					pulumi.String("request_url"),
//				},
//				Template: pulumi.String("https://bar.com/?q={{value}}"),
//				Type:     pulumi.String("URL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Context Action can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseContextAction:CseContextAction context_action id
//
// ```
type CseContextAction struct {
	pulumi.CustomResourceState

	// Use all record fields.
	AllRecordFields pulumi.BoolPtrOutput `pulumi:"allRecordFields"`
	// Whether the context action is enabled.
	//
	// The following attributes are exported:
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Applicable to given entity types.
	EntityTypes pulumi.StringArrayOutput `pulumi:"entityTypes"`
	// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
	IocTypes pulumi.StringArrayOutput `pulumi:"iocTypes"`
	// Context Action name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specific record fields.
	RecordFields pulumi.StringArrayOutput `pulumi:"recordFields"`
	// The URL/QUERY template.
	Template pulumi.StringPtrOutput `pulumi:"template"`
	// Context Action type. Valid values: "URL", "QUERY".
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewCseContextAction registers a new resource with the given unique name, arguments, and options.
func NewCseContextAction(ctx *pulumi.Context,
	name string, args *CseContextActionArgs, opts ...pulumi.ResourceOption) (*CseContextAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IocTypes == nil {
		return nil, errors.New("invalid value for required argument 'IocTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CseContextAction
	err := ctx.RegisterResource("sumologic:index/cseContextAction:CseContextAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseContextAction gets an existing CseContextAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseContextAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseContextActionState, opts ...pulumi.ResourceOption) (*CseContextAction, error) {
	var resource CseContextAction
	err := ctx.ReadResource("sumologic:index/cseContextAction:CseContextAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseContextAction resources.
type cseContextActionState struct {
	// Use all record fields.
	AllRecordFields *bool `pulumi:"allRecordFields"`
	// Whether the context action is enabled.
	//
	// The following attributes are exported:
	Enabled *bool `pulumi:"enabled"`
	// Applicable to given entity types.
	EntityTypes []string `pulumi:"entityTypes"`
	// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
	IocTypes []string `pulumi:"iocTypes"`
	// Context Action name.
	Name *string `pulumi:"name"`
	// Specific record fields.
	RecordFields []string `pulumi:"recordFields"`
	// The URL/QUERY template.
	Template *string `pulumi:"template"`
	// Context Action type. Valid values: "URL", "QUERY".
	Type *string `pulumi:"type"`
}

type CseContextActionState struct {
	// Use all record fields.
	AllRecordFields pulumi.BoolPtrInput
	// Whether the context action is enabled.
	//
	// The following attributes are exported:
	Enabled pulumi.BoolPtrInput
	// Applicable to given entity types.
	EntityTypes pulumi.StringArrayInput
	// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
	IocTypes pulumi.StringArrayInput
	// Context Action name.
	Name pulumi.StringPtrInput
	// Specific record fields.
	RecordFields pulumi.StringArrayInput
	// The URL/QUERY template.
	Template pulumi.StringPtrInput
	// Context Action type. Valid values: "URL", "QUERY".
	Type pulumi.StringPtrInput
}

func (CseContextActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseContextActionState)(nil)).Elem()
}

type cseContextActionArgs struct {
	// Use all record fields.
	AllRecordFields *bool `pulumi:"allRecordFields"`
	// Whether the context action is enabled.
	//
	// The following attributes are exported:
	Enabled *bool `pulumi:"enabled"`
	// Applicable to given entity types.
	EntityTypes []string `pulumi:"entityTypes"`
	// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
	IocTypes []string `pulumi:"iocTypes"`
	// Context Action name.
	Name *string `pulumi:"name"`
	// Specific record fields.
	RecordFields []string `pulumi:"recordFields"`
	// The URL/QUERY template.
	Template *string `pulumi:"template"`
	// Context Action type. Valid values: "URL", "QUERY".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a CseContextAction resource.
type CseContextActionArgs struct {
	// Use all record fields.
	AllRecordFields pulumi.BoolPtrInput
	// Whether the context action is enabled.
	//
	// The following attributes are exported:
	Enabled pulumi.BoolPtrInput
	// Applicable to given entity types.
	EntityTypes pulumi.StringArrayInput
	// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
	IocTypes pulumi.StringArrayInput
	// Context Action name.
	Name pulumi.StringPtrInput
	// Specific record fields.
	RecordFields pulumi.StringArrayInput
	// The URL/QUERY template.
	Template pulumi.StringPtrInput
	// Context Action type. Valid values: "URL", "QUERY".
	Type pulumi.StringPtrInput
}

func (CseContextActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseContextActionArgs)(nil)).Elem()
}

type CseContextActionInput interface {
	pulumi.Input

	ToCseContextActionOutput() CseContextActionOutput
	ToCseContextActionOutputWithContext(ctx context.Context) CseContextActionOutput
}

func (*CseContextAction) ElementType() reflect.Type {
	return reflect.TypeOf((**CseContextAction)(nil)).Elem()
}

func (i *CseContextAction) ToCseContextActionOutput() CseContextActionOutput {
	return i.ToCseContextActionOutputWithContext(context.Background())
}

func (i *CseContextAction) ToCseContextActionOutputWithContext(ctx context.Context) CseContextActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseContextActionOutput)
}

// CseContextActionArrayInput is an input type that accepts CseContextActionArray and CseContextActionArrayOutput values.
// You can construct a concrete instance of `CseContextActionArrayInput` via:
//
//	CseContextActionArray{ CseContextActionArgs{...} }
type CseContextActionArrayInput interface {
	pulumi.Input

	ToCseContextActionArrayOutput() CseContextActionArrayOutput
	ToCseContextActionArrayOutputWithContext(context.Context) CseContextActionArrayOutput
}

type CseContextActionArray []CseContextActionInput

func (CseContextActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseContextAction)(nil)).Elem()
}

func (i CseContextActionArray) ToCseContextActionArrayOutput() CseContextActionArrayOutput {
	return i.ToCseContextActionArrayOutputWithContext(context.Background())
}

func (i CseContextActionArray) ToCseContextActionArrayOutputWithContext(ctx context.Context) CseContextActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseContextActionArrayOutput)
}

// CseContextActionMapInput is an input type that accepts CseContextActionMap and CseContextActionMapOutput values.
// You can construct a concrete instance of `CseContextActionMapInput` via:
//
//	CseContextActionMap{ "key": CseContextActionArgs{...} }
type CseContextActionMapInput interface {
	pulumi.Input

	ToCseContextActionMapOutput() CseContextActionMapOutput
	ToCseContextActionMapOutputWithContext(context.Context) CseContextActionMapOutput
}

type CseContextActionMap map[string]CseContextActionInput

func (CseContextActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseContextAction)(nil)).Elem()
}

func (i CseContextActionMap) ToCseContextActionMapOutput() CseContextActionMapOutput {
	return i.ToCseContextActionMapOutputWithContext(context.Background())
}

func (i CseContextActionMap) ToCseContextActionMapOutputWithContext(ctx context.Context) CseContextActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseContextActionMapOutput)
}

type CseContextActionOutput struct{ *pulumi.OutputState }

func (CseContextActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseContextAction)(nil)).Elem()
}

func (o CseContextActionOutput) ToCseContextActionOutput() CseContextActionOutput {
	return o
}

func (o CseContextActionOutput) ToCseContextActionOutputWithContext(ctx context.Context) CseContextActionOutput {
	return o
}

// Use all record fields.
func (o CseContextActionOutput) AllRecordFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.BoolPtrOutput { return v.AllRecordFields }).(pulumi.BoolPtrOutput)
}

// Whether the context action is enabled.
//
// The following attributes are exported:
func (o CseContextActionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Applicable to given entity types.
func (o CseContextActionOutput) EntityTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringArrayOutput { return v.EntityTypes }).(pulumi.StringArrayOutput)
}

// IOC Data types. Valid values: "ASN", "DOMAIN", "HASH", "IP_ADDRESS", "MAC_ADDRESS", "PORT", "RECORD_PROPERTY", "URL".
func (o CseContextActionOutput) IocTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringArrayOutput { return v.IocTypes }).(pulumi.StringArrayOutput)
}

// Context Action name.
func (o CseContextActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specific record fields.
func (o CseContextActionOutput) RecordFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringArrayOutput { return v.RecordFields }).(pulumi.StringArrayOutput)
}

// The URL/QUERY template.
func (o CseContextActionOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringPtrOutput { return v.Template }).(pulumi.StringPtrOutput)
}

// Context Action type. Valid values: "URL", "QUERY".
func (o CseContextActionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseContextAction) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type CseContextActionArrayOutput struct{ *pulumi.OutputState }

func (CseContextActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseContextAction)(nil)).Elem()
}

func (o CseContextActionArrayOutput) ToCseContextActionArrayOutput() CseContextActionArrayOutput {
	return o
}

func (o CseContextActionArrayOutput) ToCseContextActionArrayOutputWithContext(ctx context.Context) CseContextActionArrayOutput {
	return o
}

func (o CseContextActionArrayOutput) Index(i pulumi.IntInput) CseContextActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseContextAction {
		return vs[0].([]*CseContextAction)[vs[1].(int)]
	}).(CseContextActionOutput)
}

type CseContextActionMapOutput struct{ *pulumi.OutputState }

func (CseContextActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseContextAction)(nil)).Elem()
}

func (o CseContextActionMapOutput) ToCseContextActionMapOutput() CseContextActionMapOutput {
	return o
}

func (o CseContextActionMapOutput) ToCseContextActionMapOutputWithContext(ctx context.Context) CseContextActionMapOutput {
	return o
}

func (o CseContextActionMapOutput) MapIndex(k pulumi.StringInput) CseContextActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseContextAction {
		return vs[0].(map[string]*CseContextAction)[vs[1].(string)]
	}).(CseContextActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseContextActionInput)(nil)).Elem(), &CseContextAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseContextActionArrayInput)(nil)).Elem(), CseContextActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseContextActionMapInput)(nil)).Elem(), CseContextActionMap{})
	pulumi.RegisterOutputType(CseContextActionOutput{})
	pulumi.RegisterOutputType(CseContextActionArrayOutput{})
	pulumi.RegisterOutputType(CseContextActionMapOutput{})
}
