// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **WARNING:** This data source is deprecated and will be removed in the next major version.
//
// Provides a Sumologic Polling source. This source is used to import data from various AWS products, eg. AWS S3 buckets, Cloudwatch Metrics etc.
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Import
//
// Polling sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/pollingSource:PollingSource test 123/456
// ```
//
//  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/pollingSource:PollingSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
type PollingSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       PollingSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput              `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput            `pulumi:"category"`
	CollectorId          pulumi.IntOutput                  `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                       `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                    `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                       `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         PollingSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                    `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                    `pulumi:"fields"`
	Filters                    PollingSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                      `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                    `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                    `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                      `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                       `pulumi:"name"`
	// The location to scan for new data.
	Path PollingSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewPollingSource registers a new resource with the given unique name, arguments, and options.
func NewPollingSource(ctx *pulumi.Context,
	name string, args *PollingSourceArgs, opts ...pulumi.ResourceOption) (*PollingSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource PollingSource
	err := ctx.RegisterResource("sumologic:index/pollingSource:PollingSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPollingSource gets an existing PollingSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPollingSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PollingSourceState, opts ...pulumi.ResourceOption) (*PollingSource, error) {
	var resource PollingSource
	err := ctx.ReadResource("sumologic:index/pollingSource:PollingSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PollingSource resources.
type pollingSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *PollingSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                        `pulumi:"automaticDateParsing"`
	Category             *string                      `pulumi:"category"`
	CollectorId          *int                         `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                          `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []PollingSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []PollingSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path *PollingSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type PollingSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       PollingSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         PollingSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    PollingSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path PollingSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (PollingSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*pollingSourceState)(nil)).Elem()
}

type pollingSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       PollingSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                       `pulumi:"automaticDateParsing"`
	Category             *string                     `pulumi:"category"`
	CollectorId          int                         `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                           `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []PollingSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []PollingSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path PollingSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a PollingSource resource.
type PollingSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       PollingSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         PollingSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    PollingSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path PollingSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (PollingSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pollingSourceArgs)(nil)).Elem()
}

type PollingSourceInput interface {
	pulumi.Input

	ToPollingSourceOutput() PollingSourceOutput
	ToPollingSourceOutputWithContext(ctx context.Context) PollingSourceOutput
}

func (*PollingSource) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSource)(nil)).Elem()
}

func (i *PollingSource) ToPollingSourceOutput() PollingSourceOutput {
	return i.ToPollingSourceOutputWithContext(context.Background())
}

func (i *PollingSource) ToPollingSourceOutputWithContext(ctx context.Context) PollingSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceOutput)
}

// PollingSourceArrayInput is an input type that accepts PollingSourceArray and PollingSourceArrayOutput values.
// You can construct a concrete instance of `PollingSourceArrayInput` via:
//
//          PollingSourceArray{ PollingSourceArgs{...} }
type PollingSourceArrayInput interface {
	pulumi.Input

	ToPollingSourceArrayOutput() PollingSourceArrayOutput
	ToPollingSourceArrayOutputWithContext(context.Context) PollingSourceArrayOutput
}

type PollingSourceArray []PollingSourceInput

func (PollingSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PollingSource)(nil)).Elem()
}

func (i PollingSourceArray) ToPollingSourceArrayOutput() PollingSourceArrayOutput {
	return i.ToPollingSourceArrayOutputWithContext(context.Background())
}

func (i PollingSourceArray) ToPollingSourceArrayOutputWithContext(ctx context.Context) PollingSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceArrayOutput)
}

// PollingSourceMapInput is an input type that accepts PollingSourceMap and PollingSourceMapOutput values.
// You can construct a concrete instance of `PollingSourceMapInput` via:
//
//          PollingSourceMap{ "key": PollingSourceArgs{...} }
type PollingSourceMapInput interface {
	pulumi.Input

	ToPollingSourceMapOutput() PollingSourceMapOutput
	ToPollingSourceMapOutputWithContext(context.Context) PollingSourceMapOutput
}

type PollingSourceMap map[string]PollingSourceInput

func (PollingSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PollingSource)(nil)).Elem()
}

func (i PollingSourceMap) ToPollingSourceMapOutput() PollingSourceMapOutput {
	return i.ToPollingSourceMapOutputWithContext(context.Background())
}

func (i PollingSourceMap) ToPollingSourceMapOutputWithContext(ctx context.Context) PollingSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceMapOutput)
}

type PollingSourceOutput struct{ *pulumi.OutputState }

func (PollingSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSource)(nil)).Elem()
}

func (o PollingSourceOutput) ToPollingSourceOutput() PollingSourceOutput {
	return o
}

func (o PollingSourceOutput) ToPollingSourceOutputWithContext(ctx context.Context) PollingSourceOutput {
	return o
}

// Authentication details for connecting to the S3 bucket.
func (o PollingSourceOutput) Authentication() PollingSourceAuthenticationOutput {
	return o.ApplyT(func(v *PollingSource) PollingSourceAuthenticationOutput { return v.Authentication }).(PollingSourceAuthenticationOutput)
}

func (o PollingSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o PollingSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PollingSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o PollingSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o PollingSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o PollingSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o PollingSourceOutput) DefaultDateFormats() PollingSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *PollingSource) PollingSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(PollingSourceDefaultDateFormatArrayOutput)
}

func (o PollingSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PollingSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o PollingSourceOutput) Filters() PollingSourceFilterArrayOutput {
	return o.ApplyT(func(v *PollingSource) PollingSourceFilterArrayOutput { return v.Filters }).(PollingSourceFilterArrayOutput)
}

func (o PollingSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o PollingSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o PollingSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o PollingSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o PollingSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location to scan for new data.
func (o PollingSourceOutput) Path() PollingSourcePathOutput {
	return o.ApplyT(func(v *PollingSource) PollingSourcePathOutput { return v.Path }).(PollingSourcePathOutput)
}

// When set to true, the scanner is paused. To disable, set to false.
func (o PollingSourceOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o PollingSourceOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o PollingSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
func (o PollingSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o PollingSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PollingSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type PollingSourceArrayOutput struct{ *pulumi.OutputState }

func (PollingSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PollingSource)(nil)).Elem()
}

func (o PollingSourceArrayOutput) ToPollingSourceArrayOutput() PollingSourceArrayOutput {
	return o
}

func (o PollingSourceArrayOutput) ToPollingSourceArrayOutputWithContext(ctx context.Context) PollingSourceArrayOutput {
	return o
}

func (o PollingSourceArrayOutput) Index(i pulumi.IntInput) PollingSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PollingSource {
		return vs[0].([]*PollingSource)[vs[1].(int)]
	}).(PollingSourceOutput)
}

type PollingSourceMapOutput struct{ *pulumi.OutputState }

func (PollingSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PollingSource)(nil)).Elem()
}

func (o PollingSourceMapOutput) ToPollingSourceMapOutput() PollingSourceMapOutput {
	return o
}

func (o PollingSourceMapOutput) ToPollingSourceMapOutputWithContext(ctx context.Context) PollingSourceMapOutput {
	return o
}

func (o PollingSourceMapOutput) MapIndex(k pulumi.StringInput) PollingSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PollingSource {
		return vs[0].(map[string]*PollingSource)[vs[1].(string)]
	}).(PollingSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceInput)(nil)).Elem(), &PollingSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceArrayInput)(nil)).Elem(), PollingSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceMapInput)(nil)).Elem(), PollingSourceMap{})
	pulumi.RegisterOutputType(PollingSourceOutput{})
	pulumi.RegisterOutputType(PollingSourceArrayOutput{})
	pulumi.RegisterOutputType(PollingSourceMapOutput{})
}
