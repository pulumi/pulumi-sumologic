// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an easy way to retrieve a folder.
//
// You must specify the absolute path of the folder to retrieve. The content library has "Library"
// folder at the root level. For items in "Personal" folder, the base path is "/Library/Users/user@sumologic.com"
// where "user@sumologic.com" is the email address of the user. For example, if a user with email address
// `wile@acme.com` has `Rockets` folder inside Personal folder, the path of Rockets folder will be
// `/Library/Users/wile@acme.com/Rockets`.
//
// For items in "Admin Recommended" folder, the base path is "/Library/Admin Recommended". For example,
// given a folder `Acme` in Admin Recommended folder, the path will be `/Library/Admin Recommended/Acme`.
func LookupFolder(ctx *pulumi.Context, args *LookupFolderArgs, opts ...pulumi.InvokeOption) (*LookupFolderResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFolderResult
	err := ctx.Invoke("sumologic:index/getFolder:getFolder", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFolder.
type LookupFolderArgs struct {
	Path string `pulumi:"path"`
}

// A collection of values returned by getFolder.
type LookupFolderResult struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	Path string `pulumi:"path"`
}

func LookupFolderOutput(ctx *pulumi.Context, args LookupFolderOutputArgs, opts ...pulumi.InvokeOption) LookupFolderResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFolderResultOutput, error) {
			args := v.(LookupFolderArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupFolderResult
			secret, err := ctx.InvokePackageRaw("sumologic:index/getFolder:getFolder", args, &rv, "", opts...)
			if err != nil {
				return LookupFolderResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupFolderResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupFolderResultOutput), nil
			}
			return output, nil
		}).(LookupFolderResultOutput)
}

// A collection of arguments for invoking getFolder.
type LookupFolderOutputArgs struct {
	Path pulumi.StringInput `pulumi:"path"`
}

func (LookupFolderOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFolderArgs)(nil)).Elem()
}

// A collection of values returned by getFolder.
type LookupFolderResultOutput struct{ *pulumi.OutputState }

func (LookupFolderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFolderResult)(nil)).Elem()
}

func (o LookupFolderResultOutput) ToLookupFolderResultOutput() LookupFolderResultOutput {
	return o
}

func (o LookupFolderResultOutput) ToLookupFolderResultOutputWithContext(ctx context.Context) LookupFolderResultOutput {
	return o
}

func (o LookupFolderResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFolderResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupFolderResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFolderResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupFolderResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFolderResult) string { return v.Path }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFolderResultOutput{})
}
