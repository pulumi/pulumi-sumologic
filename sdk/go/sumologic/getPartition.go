// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.LookupPartition(ctx, &sumologic.LookupPartitionArgs{
//				Id: "1234567890",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A partition can be looked up by `id`.
//
// ## Attributes reference
//
// The following attributes are exported:
//
// - `name` - The name of the partition.
// - `routingExpression` - The query that defines the data to be included in the partition.
// - `analyticsTier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
// - `retentionPeriod` - The number of days to retain data in the partition.
// - `isCompliant` - Whether the partition is used for compliance or audit purposes.
// - `isIncludedInDefaultSearch` - Whether the partition is included in the default search scope.
// - `totalBytes` - The size of the data in the partition in bytes.
// - `isActive` - Whether the partition is currently active or decommissioned.
// - `indexType` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
// - `dataForwardingId` - The ID of the data forwarding configuration to be used by the partition.
//
// [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
func LookupPartition(ctx *pulumi.Context, args *LookupPartitionArgs, opts ...pulumi.InvokeOption) (*LookupPartitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPartitionResult
	err := ctx.Invoke("sumologic:index/getPartition:getPartition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPartition.
type LookupPartitionArgs struct {
	Id string `pulumi:"id"`
}

// A collection of values returned by getPartition.
type LookupPartitionResult struct {
	AnalyticsTier                    string `pulumi:"analyticsTier"`
	DataForwardingId                 string `pulumi:"dataForwardingId"`
	Id                               string `pulumi:"id"`
	IndexType                        string `pulumi:"indexType"`
	IsActive                         bool   `pulumi:"isActive"`
	IsCompliant                      bool   `pulumi:"isCompliant"`
	IsIncludedInDefaultSearch        bool   `pulumi:"isIncludedInDefaultSearch"`
	Name                             string `pulumi:"name"`
	ReduceRetentionPeriodImmediately bool   `pulumi:"reduceRetentionPeriodImmediately"`
	RetentionPeriod                  int    `pulumi:"retentionPeriod"`
	RoutingExpression                string `pulumi:"routingExpression"`
	TotalBytes                       int    `pulumi:"totalBytes"`
}

func LookupPartitionOutput(ctx *pulumi.Context, args LookupPartitionOutputArgs, opts ...pulumi.InvokeOption) LookupPartitionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPartitionResultOutput, error) {
			args := v.(LookupPartitionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sumologic:index/getPartition:getPartition", args, LookupPartitionResultOutput{}, options).(LookupPartitionResultOutput), nil
		}).(LookupPartitionResultOutput)
}

// A collection of arguments for invoking getPartition.
type LookupPartitionOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupPartitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartitionArgs)(nil)).Elem()
}

// A collection of values returned by getPartition.
type LookupPartitionResultOutput struct{ *pulumi.OutputState }

func (LookupPartitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartitionResult)(nil)).Elem()
}

func (o LookupPartitionResultOutput) ToLookupPartitionResultOutput() LookupPartitionResultOutput {
	return o
}

func (o LookupPartitionResultOutput) ToLookupPartitionResultOutputWithContext(ctx context.Context) LookupPartitionResultOutput {
	return o
}

func (o LookupPartitionResultOutput) AnalyticsTier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.AnalyticsTier }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) DataForwardingId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.DataForwardingId }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) IndexType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.IndexType }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPartitionResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

func (o LookupPartitionResultOutput) IsCompliant() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPartitionResult) bool { return v.IsCompliant }).(pulumi.BoolOutput)
}

func (o LookupPartitionResultOutput) IsIncludedInDefaultSearch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPartitionResult) bool { return v.IsIncludedInDefaultSearch }).(pulumi.BoolOutput)
}

func (o LookupPartitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) ReduceRetentionPeriodImmediately() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPartitionResult) bool { return v.ReduceRetentionPeriodImmediately }).(pulumi.BoolOutput)
}

func (o LookupPartitionResultOutput) RetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPartitionResult) int { return v.RetentionPeriod }).(pulumi.IntOutput)
}

func (o LookupPartitionResultOutput) RoutingExpression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.RoutingExpression }).(pulumi.StringOutput)
}

func (o LookupPartitionResultOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPartitionResult) int { return v.TotalBytes }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPartitionResultOutput{})
}
