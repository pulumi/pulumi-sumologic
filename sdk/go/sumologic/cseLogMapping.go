// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic CSE Log Mapping.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseLogMapping(ctx, "logMapping", &sumologic.CseLogMappingArgs{
//				Enabled: pulumi.Bool(true),
//				Fields: sumologic.CseLogMappingFieldArray{
//					&sumologic.CseLogMappingFieldArgs{
//						AlternateValues: pulumi.StringArray{
//							pulumi.String("altValue"),
//						},
//						CaseInsensitive: pulumi.Bool(false),
//						DefaultValue:    pulumi.String(""),
//						FieldJoins: pulumi.StringArray{
//							pulumi.String("and"),
//						},
//						Format: pulumi.String("JSON"),
//						FormatParameters: pulumi.StringArray{
//							pulumi.String("param"),
//						},
//						JoinDelimiter: pulumi.String(""),
//						Lookups: sumologic.CseLogMappingFieldLookupArray{
//							&sumologic.CseLogMappingFieldLookupArgs{
//								Key:   pulumi.String("tunnel-up"),
//								Value: pulumi.String("true"),
//							},
//						},
//						Name: pulumi.String("action"),
//						SkippedValues: pulumi.StringArray{
//							pulumi.String("-"),
//						},
//						SplitDelimiter: pulumi.String(","),
//						SplitIndex:     pulumi.Int(0),
//						TimeZone:       pulumi.String("UTC"),
//						Value:          pulumi.String("action"),
//						ValueType:      pulumi.String("constant"),
//					},
//				},
//				ProductGuid:     pulumi.String("003d35b3-3ba8-4e93-8776-e5810b4e243e"),
//				RecordType:      pulumi.String("Audit"),
//				RelatesEntities: pulumi.Bool(true),
//				SkippedValues: pulumi.StringArray{
//					pulumi.String("skipped"),
//				},
//				StructuredInputs: sumologic.CseLogMappingStructuredInputArray{
//					&sumologic.CseLogMappingStructuredInputArgs{
//						EventIdPattern: pulumi.String("vpn"),
//						LogFormat:      pulumi.String("JSON"),
//						Product:        pulumi.String("fortinate"),
//						Vendor:         pulumi.String("fortinate"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Log Mapping can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseLogMapping:CseLogMapping log_mapping id
//
// ```
type CseLogMapping struct {
	pulumi.CustomResourceState

	// Enabled flag.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// List of fields for the new log mapping. See fieldSchema for details.
	Fields CseLogMappingFieldArrayOutput `pulumi:"fields"`
	// The name of the log mapping.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the parent log mapping.
	ParentId pulumi.StringPtrOutput `pulumi:"parentId"`
	// Product GUID.
	ProductGuid pulumi.StringOutput `pulumi:"productGuid"`
	// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// Set to true to relate entities.
	RelatesEntities pulumi.BoolPtrOutput `pulumi:"relatesEntities"`
	// List of skipped values.
	SkippedValues pulumi.StringArrayOutput `pulumi:"skippedValues"`
	// List of structured inputs for the new log mapping. See structuredInputSchema for details.
	StructuredInputs CseLogMappingStructuredInputArrayOutput `pulumi:"structuredInputs"`
	// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
	UnstructuredFields CseLogMappingUnstructuredFieldsPtrOutput `pulumi:"unstructuredFields"`
}

// NewCseLogMapping registers a new resource with the given unique name, arguments, and options.
func NewCseLogMapping(ctx *pulumi.Context,
	name string, args *CseLogMappingArgs, opts ...pulumi.ResourceOption) (*CseLogMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Fields == nil {
		return nil, errors.New("invalid value for required argument 'Fields'")
	}
	if args.ProductGuid == nil {
		return nil, errors.New("invalid value for required argument 'ProductGuid'")
	}
	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	var resource CseLogMapping
	err := ctx.RegisterResource("sumologic:index/cseLogMapping:CseLogMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseLogMapping gets an existing CseLogMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseLogMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseLogMappingState, opts ...pulumi.ResourceOption) (*CseLogMapping, error) {
	var resource CseLogMapping
	err := ctx.ReadResource("sumologic:index/cseLogMapping:CseLogMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseLogMapping resources.
type cseLogMappingState struct {
	// Enabled flag.
	Enabled *bool `pulumi:"enabled"`
	// List of fields for the new log mapping. See fieldSchema for details.
	Fields []CseLogMappingField `pulumi:"fields"`
	// The name of the log mapping.
	Name *string `pulumi:"name"`
	// The id of the parent log mapping.
	ParentId *string `pulumi:"parentId"`
	// Product GUID.
	ProductGuid *string `pulumi:"productGuid"`
	// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
	RecordType *string `pulumi:"recordType"`
	// Set to true to relate entities.
	RelatesEntities *bool `pulumi:"relatesEntities"`
	// List of skipped values.
	SkippedValues []string `pulumi:"skippedValues"`
	// List of structured inputs for the new log mapping. See structuredInputSchema for details.
	StructuredInputs []CseLogMappingStructuredInput `pulumi:"structuredInputs"`
	// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
	UnstructuredFields *CseLogMappingUnstructuredFields `pulumi:"unstructuredFields"`
}

type CseLogMappingState struct {
	// Enabled flag.
	Enabled pulumi.BoolPtrInput
	// List of fields for the new log mapping. See fieldSchema for details.
	Fields CseLogMappingFieldArrayInput
	// The name of the log mapping.
	Name pulumi.StringPtrInput
	// The id of the parent log mapping.
	ParentId pulumi.StringPtrInput
	// Product GUID.
	ProductGuid pulumi.StringPtrInput
	// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
	RecordType pulumi.StringPtrInput
	// Set to true to relate entities.
	RelatesEntities pulumi.BoolPtrInput
	// List of skipped values.
	SkippedValues pulumi.StringArrayInput
	// List of structured inputs for the new log mapping. See structuredInputSchema for details.
	StructuredInputs CseLogMappingStructuredInputArrayInput
	// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
	UnstructuredFields CseLogMappingUnstructuredFieldsPtrInput
}

func (CseLogMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseLogMappingState)(nil)).Elem()
}

type cseLogMappingArgs struct {
	// Enabled flag.
	Enabled bool `pulumi:"enabled"`
	// List of fields for the new log mapping. See fieldSchema for details.
	Fields []CseLogMappingField `pulumi:"fields"`
	// The name of the log mapping.
	Name *string `pulumi:"name"`
	// The id of the parent log mapping.
	ParentId *string `pulumi:"parentId"`
	// Product GUID.
	ProductGuid string `pulumi:"productGuid"`
	// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
	RecordType string `pulumi:"recordType"`
	// Set to true to relate entities.
	RelatesEntities *bool `pulumi:"relatesEntities"`
	// List of skipped values.
	SkippedValues []string `pulumi:"skippedValues"`
	// List of structured inputs for the new log mapping. See structuredInputSchema for details.
	StructuredInputs []CseLogMappingStructuredInput `pulumi:"structuredInputs"`
	// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
	UnstructuredFields *CseLogMappingUnstructuredFields `pulumi:"unstructuredFields"`
}

// The set of arguments for constructing a CseLogMapping resource.
type CseLogMappingArgs struct {
	// Enabled flag.
	Enabled pulumi.BoolInput
	// List of fields for the new log mapping. See fieldSchema for details.
	Fields CseLogMappingFieldArrayInput
	// The name of the log mapping.
	Name pulumi.StringPtrInput
	// The id of the parent log mapping.
	ParentId pulumi.StringPtrInput
	// Product GUID.
	ProductGuid pulumi.StringInput
	// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
	RecordType pulumi.StringInput
	// Set to true to relate entities.
	RelatesEntities pulumi.BoolPtrInput
	// List of skipped values.
	SkippedValues pulumi.StringArrayInput
	// List of structured inputs for the new log mapping. See structuredInputSchema for details.
	StructuredInputs CseLogMappingStructuredInputArrayInput
	// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
	UnstructuredFields CseLogMappingUnstructuredFieldsPtrInput
}

func (CseLogMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseLogMappingArgs)(nil)).Elem()
}

type CseLogMappingInput interface {
	pulumi.Input

	ToCseLogMappingOutput() CseLogMappingOutput
	ToCseLogMappingOutputWithContext(ctx context.Context) CseLogMappingOutput
}

func (*CseLogMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**CseLogMapping)(nil)).Elem()
}

func (i *CseLogMapping) ToCseLogMappingOutput() CseLogMappingOutput {
	return i.ToCseLogMappingOutputWithContext(context.Background())
}

func (i *CseLogMapping) ToCseLogMappingOutputWithContext(ctx context.Context) CseLogMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseLogMappingOutput)
}

// CseLogMappingArrayInput is an input type that accepts CseLogMappingArray and CseLogMappingArrayOutput values.
// You can construct a concrete instance of `CseLogMappingArrayInput` via:
//
//	CseLogMappingArray{ CseLogMappingArgs{...} }
type CseLogMappingArrayInput interface {
	pulumi.Input

	ToCseLogMappingArrayOutput() CseLogMappingArrayOutput
	ToCseLogMappingArrayOutputWithContext(context.Context) CseLogMappingArrayOutput
}

type CseLogMappingArray []CseLogMappingInput

func (CseLogMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseLogMapping)(nil)).Elem()
}

func (i CseLogMappingArray) ToCseLogMappingArrayOutput() CseLogMappingArrayOutput {
	return i.ToCseLogMappingArrayOutputWithContext(context.Background())
}

func (i CseLogMappingArray) ToCseLogMappingArrayOutputWithContext(ctx context.Context) CseLogMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseLogMappingArrayOutput)
}

// CseLogMappingMapInput is an input type that accepts CseLogMappingMap and CseLogMappingMapOutput values.
// You can construct a concrete instance of `CseLogMappingMapInput` via:
//
//	CseLogMappingMap{ "key": CseLogMappingArgs{...} }
type CseLogMappingMapInput interface {
	pulumi.Input

	ToCseLogMappingMapOutput() CseLogMappingMapOutput
	ToCseLogMappingMapOutputWithContext(context.Context) CseLogMappingMapOutput
}

type CseLogMappingMap map[string]CseLogMappingInput

func (CseLogMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseLogMapping)(nil)).Elem()
}

func (i CseLogMappingMap) ToCseLogMappingMapOutput() CseLogMappingMapOutput {
	return i.ToCseLogMappingMapOutputWithContext(context.Background())
}

func (i CseLogMappingMap) ToCseLogMappingMapOutputWithContext(ctx context.Context) CseLogMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseLogMappingMapOutput)
}

type CseLogMappingOutput struct{ *pulumi.OutputState }

func (CseLogMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseLogMapping)(nil)).Elem()
}

func (o CseLogMappingOutput) ToCseLogMappingOutput() CseLogMappingOutput {
	return o
}

func (o CseLogMappingOutput) ToCseLogMappingOutputWithContext(ctx context.Context) CseLogMappingOutput {
	return o
}

// Enabled flag.
func (o CseLogMappingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// List of fields for the new log mapping. See fieldSchema for details.
func (o CseLogMappingOutput) Fields() CseLogMappingFieldArrayOutput {
	return o.ApplyT(func(v *CseLogMapping) CseLogMappingFieldArrayOutput { return v.Fields }).(CseLogMappingFieldArrayOutput)
}

// The name of the log mapping.
func (o CseLogMappingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the parent log mapping.
func (o CseLogMappingOutput) ParentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.StringPtrOutput { return v.ParentId }).(pulumi.StringPtrOutput)
}

// Product GUID.
func (o CseLogMappingOutput) ProductGuid() pulumi.StringOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.StringOutput { return v.ProductGuid }).(pulumi.StringOutput)
}

// The record type to be created. (possible values: Audit, AuditChange, AuditFile, AuditResourceAccess, Authentication, AuthenticationPrivilegeEscalation, Canary, Email, Endpoint, EndpointModuleLoad, EndpointProcess, Network, NetworkDHCP, NetworkDNS, NetworkFlow, NetworkHTTP, NetworkProxy, Notification, NotificationVulnerability)
func (o CseLogMappingOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.StringOutput { return v.RecordType }).(pulumi.StringOutput)
}

// Set to true to relate entities.
func (o CseLogMappingOutput) RelatesEntities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.BoolPtrOutput { return v.RelatesEntities }).(pulumi.BoolPtrOutput)
}

// List of skipped values.
func (o CseLogMappingOutput) SkippedValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseLogMapping) pulumi.StringArrayOutput { return v.SkippedValues }).(pulumi.StringArrayOutput)
}

// List of structured inputs for the new log mapping. See structuredInputSchema for details.
func (o CseLogMappingOutput) StructuredInputs() CseLogMappingStructuredInputArrayOutput {
	return o.ApplyT(func(v *CseLogMapping) CseLogMappingStructuredInputArrayOutput { return v.StructuredInputs }).(CseLogMappingStructuredInputArrayOutput)
}

// Unstructured fields for the new log mapping. See unstructuredFieldSchema for details.
func (o CseLogMappingOutput) UnstructuredFields() CseLogMappingUnstructuredFieldsPtrOutput {
	return o.ApplyT(func(v *CseLogMapping) CseLogMappingUnstructuredFieldsPtrOutput { return v.UnstructuredFields }).(CseLogMappingUnstructuredFieldsPtrOutput)
}

type CseLogMappingArrayOutput struct{ *pulumi.OutputState }

func (CseLogMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseLogMapping)(nil)).Elem()
}

func (o CseLogMappingArrayOutput) ToCseLogMappingArrayOutput() CseLogMappingArrayOutput {
	return o
}

func (o CseLogMappingArrayOutput) ToCseLogMappingArrayOutputWithContext(ctx context.Context) CseLogMappingArrayOutput {
	return o
}

func (o CseLogMappingArrayOutput) Index(i pulumi.IntInput) CseLogMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseLogMapping {
		return vs[0].([]*CseLogMapping)[vs[1].(int)]
	}).(CseLogMappingOutput)
}

type CseLogMappingMapOutput struct{ *pulumi.OutputState }

func (CseLogMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseLogMapping)(nil)).Elem()
}

func (o CseLogMappingMapOutput) ToCseLogMappingMapOutput() CseLogMappingMapOutput {
	return o
}

func (o CseLogMappingMapOutput) ToCseLogMappingMapOutputWithContext(ctx context.Context) CseLogMappingMapOutput {
	return o
}

func (o CseLogMappingMapOutput) MapIndex(k pulumi.StringInput) CseLogMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseLogMapping {
		return vs[0].(map[string]*CseLogMapping)[vs[1].(string)]
	}).(CseLogMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseLogMappingInput)(nil)).Elem(), &CseLogMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseLogMappingArrayInput)(nil)).Elem(), CseLogMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseLogMappingMapInput)(nil)).Elem(), CseLogMappingMap{})
	pulumi.RegisterOutputType(CseLogMappingOutput{})
	pulumi.RegisterOutputType(CseLogMappingArrayOutput{})
	pulumi.RegisterOutputType(CseLogMappingMapOutput{})
}
