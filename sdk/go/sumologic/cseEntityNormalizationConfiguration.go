// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the Sumologic CSE Entity Normalization Configuration for the whole organization. There can be only one configuration per organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseEntityNormalizationConfiguration(ctx, "entityNormalizationConfiguration", &sumologic.CseEntityNormalizationConfigurationArgs{
//				AwsNormalizationEnabled: pulumi.Bool(true),
//				DefaultNormalizedDomain: pulumi.String("domain.com"),
//				DomainMappings: sumologic.CseEntityNormalizationConfigurationDomainMappingArray{
//					&sumologic.CseEntityNormalizationConfigurationDomainMappingArgs{
//						NormalizedDomain: pulumi.String("normalized.domain"),
//						RawDomain:        pulumi.String("raw.domain"),
//					},
//				},
//				FqdnNormalizationEnabled:    pulumi.Bool(true),
//				NormalizeHostnames:          pulumi.Bool(true),
//				NormalizeUsernames:          pulumi.Bool(true),
//				WindowsNormalizationEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Entity Normalization Configuration can be imported using the id `cse-entity-normalization-configuration`hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration entity_normalization_configuration cse-entity-normalization-configuration
//
// ```
type CseEntityNormalizationConfiguration struct {
	pulumi.CustomResourceState

	// Normalize AWS ARN and Usernames.
	AwsNormalizationEnabled pulumi.BoolOutput `pulumi:"awsNormalizationEnabled"`
	// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
	DefaultNormalizedDomain pulumi.StringPtrOutput `pulumi:"defaultNormalizedDomain"`
	// Secondary domains.
	DomainMappings CseEntityNormalizationConfigurationDomainMappingArrayOutput `pulumi:"domainMappings"`
	// Normalize names in the form user@somedomain.net or hostname.somedomain.net
	FqdnNormalizationEnabled pulumi.BoolOutput `pulumi:"fqdnNormalizationEnabled"`
	// If hostname normalization is enabled.
	NormalizeHostnames pulumi.BoolOutput `pulumi:"normalizeHostnames"`
	// If username normalization is enabled.
	NormalizeUsernames pulumi.BoolOutput `pulumi:"normalizeUsernames"`
	// Normalize active directory domains username and hostname formats.
	WindowsNormalizationEnabled pulumi.BoolOutput `pulumi:"windowsNormalizationEnabled"`
}

// NewCseEntityNormalizationConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCseEntityNormalizationConfiguration(ctx *pulumi.Context,
	name string, args *CseEntityNormalizationConfigurationArgs, opts ...pulumi.ResourceOption) (*CseEntityNormalizationConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsNormalizationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'AwsNormalizationEnabled'")
	}
	if args.DomainMappings == nil {
		return nil, errors.New("invalid value for required argument 'DomainMappings'")
	}
	if args.FqdnNormalizationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'FqdnNormalizationEnabled'")
	}
	if args.NormalizeHostnames == nil {
		return nil, errors.New("invalid value for required argument 'NormalizeHostnames'")
	}
	if args.NormalizeUsernames == nil {
		return nil, errors.New("invalid value for required argument 'NormalizeUsernames'")
	}
	if args.WindowsNormalizationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'WindowsNormalizationEnabled'")
	}
	var resource CseEntityNormalizationConfiguration
	err := ctx.RegisterResource("sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseEntityNormalizationConfiguration gets an existing CseEntityNormalizationConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseEntityNormalizationConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseEntityNormalizationConfigurationState, opts ...pulumi.ResourceOption) (*CseEntityNormalizationConfiguration, error) {
	var resource CseEntityNormalizationConfiguration
	err := ctx.ReadResource("sumologic:index/cseEntityNormalizationConfiguration:CseEntityNormalizationConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseEntityNormalizationConfiguration resources.
type cseEntityNormalizationConfigurationState struct {
	// Normalize AWS ARN and Usernames.
	AwsNormalizationEnabled *bool `pulumi:"awsNormalizationEnabled"`
	// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
	DefaultNormalizedDomain *string `pulumi:"defaultNormalizedDomain"`
	// Secondary domains.
	DomainMappings []CseEntityNormalizationConfigurationDomainMapping `pulumi:"domainMappings"`
	// Normalize names in the form user@somedomain.net or hostname.somedomain.net
	FqdnNormalizationEnabled *bool `pulumi:"fqdnNormalizationEnabled"`
	// If hostname normalization is enabled.
	NormalizeHostnames *bool `pulumi:"normalizeHostnames"`
	// If username normalization is enabled.
	NormalizeUsernames *bool `pulumi:"normalizeUsernames"`
	// Normalize active directory domains username and hostname formats.
	WindowsNormalizationEnabled *bool `pulumi:"windowsNormalizationEnabled"`
}

type CseEntityNormalizationConfigurationState struct {
	// Normalize AWS ARN and Usernames.
	AwsNormalizationEnabled pulumi.BoolPtrInput
	// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
	DefaultNormalizedDomain pulumi.StringPtrInput
	// Secondary domains.
	DomainMappings CseEntityNormalizationConfigurationDomainMappingArrayInput
	// Normalize names in the form user@somedomain.net or hostname.somedomain.net
	FqdnNormalizationEnabled pulumi.BoolPtrInput
	// If hostname normalization is enabled.
	NormalizeHostnames pulumi.BoolPtrInput
	// If username normalization is enabled.
	NormalizeUsernames pulumi.BoolPtrInput
	// Normalize active directory domains username and hostname formats.
	WindowsNormalizationEnabled pulumi.BoolPtrInput
}

func (CseEntityNormalizationConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseEntityNormalizationConfigurationState)(nil)).Elem()
}

type cseEntityNormalizationConfigurationArgs struct {
	// Normalize AWS ARN and Usernames.
	AwsNormalizationEnabled bool `pulumi:"awsNormalizationEnabled"`
	// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
	DefaultNormalizedDomain *string `pulumi:"defaultNormalizedDomain"`
	// Secondary domains.
	DomainMappings []CseEntityNormalizationConfigurationDomainMapping `pulumi:"domainMappings"`
	// Normalize names in the form user@somedomain.net or hostname.somedomain.net
	FqdnNormalizationEnabled bool `pulumi:"fqdnNormalizationEnabled"`
	// If hostname normalization is enabled.
	NormalizeHostnames bool `pulumi:"normalizeHostnames"`
	// If username normalization is enabled.
	NormalizeUsernames bool `pulumi:"normalizeUsernames"`
	// Normalize active directory domains username and hostname formats.
	WindowsNormalizationEnabled bool `pulumi:"windowsNormalizationEnabled"`
}

// The set of arguments for constructing a CseEntityNormalizationConfiguration resource.
type CseEntityNormalizationConfigurationArgs struct {
	// Normalize AWS ARN and Usernames.
	AwsNormalizationEnabled pulumi.BoolInput
	// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
	DefaultNormalizedDomain pulumi.StringPtrInput
	// Secondary domains.
	DomainMappings CseEntityNormalizationConfigurationDomainMappingArrayInput
	// Normalize names in the form user@somedomain.net or hostname.somedomain.net
	FqdnNormalizationEnabled pulumi.BoolInput
	// If hostname normalization is enabled.
	NormalizeHostnames pulumi.BoolInput
	// If username normalization is enabled.
	NormalizeUsernames pulumi.BoolInput
	// Normalize active directory domains username and hostname formats.
	WindowsNormalizationEnabled pulumi.BoolInput
}

func (CseEntityNormalizationConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseEntityNormalizationConfigurationArgs)(nil)).Elem()
}

type CseEntityNormalizationConfigurationInput interface {
	pulumi.Input

	ToCseEntityNormalizationConfigurationOutput() CseEntityNormalizationConfigurationOutput
	ToCseEntityNormalizationConfigurationOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationOutput
}

func (*CseEntityNormalizationConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (i *CseEntityNormalizationConfiguration) ToCseEntityNormalizationConfigurationOutput() CseEntityNormalizationConfigurationOutput {
	return i.ToCseEntityNormalizationConfigurationOutputWithContext(context.Background())
}

func (i *CseEntityNormalizationConfiguration) ToCseEntityNormalizationConfigurationOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseEntityNormalizationConfigurationOutput)
}

// CseEntityNormalizationConfigurationArrayInput is an input type that accepts CseEntityNormalizationConfigurationArray and CseEntityNormalizationConfigurationArrayOutput values.
// You can construct a concrete instance of `CseEntityNormalizationConfigurationArrayInput` via:
//
//	CseEntityNormalizationConfigurationArray{ CseEntityNormalizationConfigurationArgs{...} }
type CseEntityNormalizationConfigurationArrayInput interface {
	pulumi.Input

	ToCseEntityNormalizationConfigurationArrayOutput() CseEntityNormalizationConfigurationArrayOutput
	ToCseEntityNormalizationConfigurationArrayOutputWithContext(context.Context) CseEntityNormalizationConfigurationArrayOutput
}

type CseEntityNormalizationConfigurationArray []CseEntityNormalizationConfigurationInput

func (CseEntityNormalizationConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (i CseEntityNormalizationConfigurationArray) ToCseEntityNormalizationConfigurationArrayOutput() CseEntityNormalizationConfigurationArrayOutput {
	return i.ToCseEntityNormalizationConfigurationArrayOutputWithContext(context.Background())
}

func (i CseEntityNormalizationConfigurationArray) ToCseEntityNormalizationConfigurationArrayOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseEntityNormalizationConfigurationArrayOutput)
}

// CseEntityNormalizationConfigurationMapInput is an input type that accepts CseEntityNormalizationConfigurationMap and CseEntityNormalizationConfigurationMapOutput values.
// You can construct a concrete instance of `CseEntityNormalizationConfigurationMapInput` via:
//
//	CseEntityNormalizationConfigurationMap{ "key": CseEntityNormalizationConfigurationArgs{...} }
type CseEntityNormalizationConfigurationMapInput interface {
	pulumi.Input

	ToCseEntityNormalizationConfigurationMapOutput() CseEntityNormalizationConfigurationMapOutput
	ToCseEntityNormalizationConfigurationMapOutputWithContext(context.Context) CseEntityNormalizationConfigurationMapOutput
}

type CseEntityNormalizationConfigurationMap map[string]CseEntityNormalizationConfigurationInput

func (CseEntityNormalizationConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (i CseEntityNormalizationConfigurationMap) ToCseEntityNormalizationConfigurationMapOutput() CseEntityNormalizationConfigurationMapOutput {
	return i.ToCseEntityNormalizationConfigurationMapOutputWithContext(context.Background())
}

func (i CseEntityNormalizationConfigurationMap) ToCseEntityNormalizationConfigurationMapOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseEntityNormalizationConfigurationMapOutput)
}

type CseEntityNormalizationConfigurationOutput struct{ *pulumi.OutputState }

func (CseEntityNormalizationConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (o CseEntityNormalizationConfigurationOutput) ToCseEntityNormalizationConfigurationOutput() CseEntityNormalizationConfigurationOutput {
	return o
}

func (o CseEntityNormalizationConfigurationOutput) ToCseEntityNormalizationConfigurationOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationOutput {
	return o
}

// Normalize AWS ARN and Usernames.
func (o CseEntityNormalizationConfigurationOutput) AwsNormalizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.BoolOutput { return v.AwsNormalizationEnabled }).(pulumi.BoolOutput)
}

// When normalization is configured, at least one domain must be configured and a "Normalized Default Domain" must be provided.
func (o CseEntityNormalizationConfigurationOutput) DefaultNormalizedDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.StringPtrOutput { return v.DefaultNormalizedDomain }).(pulumi.StringPtrOutput)
}

// Secondary domains.
func (o CseEntityNormalizationConfigurationOutput) DomainMappings() CseEntityNormalizationConfigurationDomainMappingArrayOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) CseEntityNormalizationConfigurationDomainMappingArrayOutput {
		return v.DomainMappings
	}).(CseEntityNormalizationConfigurationDomainMappingArrayOutput)
}

// Normalize names in the form user@somedomain.net or hostname.somedomain.net
func (o CseEntityNormalizationConfigurationOutput) FqdnNormalizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.BoolOutput { return v.FqdnNormalizationEnabled }).(pulumi.BoolOutput)
}

// If hostname normalization is enabled.
func (o CseEntityNormalizationConfigurationOutput) NormalizeHostnames() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.BoolOutput { return v.NormalizeHostnames }).(pulumi.BoolOutput)
}

// If username normalization is enabled.
func (o CseEntityNormalizationConfigurationOutput) NormalizeUsernames() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.BoolOutput { return v.NormalizeUsernames }).(pulumi.BoolOutput)
}

// Normalize active directory domains username and hostname formats.
func (o CseEntityNormalizationConfigurationOutput) WindowsNormalizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseEntityNormalizationConfiguration) pulumi.BoolOutput { return v.WindowsNormalizationEnabled }).(pulumi.BoolOutput)
}

type CseEntityNormalizationConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CseEntityNormalizationConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (o CseEntityNormalizationConfigurationArrayOutput) ToCseEntityNormalizationConfigurationArrayOutput() CseEntityNormalizationConfigurationArrayOutput {
	return o
}

func (o CseEntityNormalizationConfigurationArrayOutput) ToCseEntityNormalizationConfigurationArrayOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationArrayOutput {
	return o
}

func (o CseEntityNormalizationConfigurationArrayOutput) Index(i pulumi.IntInput) CseEntityNormalizationConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseEntityNormalizationConfiguration {
		return vs[0].([]*CseEntityNormalizationConfiguration)[vs[1].(int)]
	}).(CseEntityNormalizationConfigurationOutput)
}

type CseEntityNormalizationConfigurationMapOutput struct{ *pulumi.OutputState }

func (CseEntityNormalizationConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseEntityNormalizationConfiguration)(nil)).Elem()
}

func (o CseEntityNormalizationConfigurationMapOutput) ToCseEntityNormalizationConfigurationMapOutput() CseEntityNormalizationConfigurationMapOutput {
	return o
}

func (o CseEntityNormalizationConfigurationMapOutput) ToCseEntityNormalizationConfigurationMapOutputWithContext(ctx context.Context) CseEntityNormalizationConfigurationMapOutput {
	return o
}

func (o CseEntityNormalizationConfigurationMapOutput) MapIndex(k pulumi.StringInput) CseEntityNormalizationConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseEntityNormalizationConfiguration {
		return vs[0].(map[string]*CseEntityNormalizationConfiguration)[vs[1].(string)]
	}).(CseEntityNormalizationConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseEntityNormalizationConfigurationInput)(nil)).Elem(), &CseEntityNormalizationConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseEntityNormalizationConfigurationArrayInput)(nil)).Elem(), CseEntityNormalizationConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseEntityNormalizationConfigurationMapInput)(nil)).Elem(), CseEntityNormalizationConfigurationMap{})
	pulumi.RegisterOutputType(CseEntityNormalizationConfigurationOutput{})
	pulumi.RegisterOutputType(CseEntityNormalizationConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CseEntityNormalizationConfigurationMapOutput{})
}
