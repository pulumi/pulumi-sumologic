// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic ELB source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source).
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewElbSource(ctx, "elbSource", &sumologic.ElbSourceArgs{
// 			Authentication: &ElbSourceAuthenticationArgs{
// 				AccessKey: pulumi.String("someKey"),
// 				SecretKey: pulumi.String("******"),
// 				Type:      pulumi.String("S3BucketAuthentication"),
// 			},
// 			Category:    pulumi.String("aws/elb"),
// 			CollectorId: collector.ID(),
// 			ContentType: pulumi.String("AwsElbBucket"),
// 			Description: pulumi.String("My description"),
// 			Path: &ElbSourcePathArgs{
// 				BucketName:     pulumi.String("Bucket1"),
// 				PathExpression: pulumi.String("*"),
// 				Type:           pulumi.String("S3BucketPathExpression"),
// 			},
// 			Paused:       pulumi.Bool(false),
// 			ScanInterval: pulumi.Int(300000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ELB sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/elbSource:ElbSource test 123/456
// ```
//
//  ELB sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/elbSource:ElbSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-Elastic-Load-Balancing-Source
type ElbSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       ElbSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput          `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput        `pulumi:"category"`
	CollectorId          pulumi.IntOutput              `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                   `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                   `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         ElbSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                `pulumi:"fields"`
	Filters                    ElbSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                  `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                  `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                   `pulumi:"name"`
	// The location to scan for new data.
	Path ElbSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewElbSource registers a new resource with the given unique name, arguments, and options.
func NewElbSource(ctx *pulumi.Context,
	name string, args *ElbSourceArgs, opts ...pulumi.ResourceOption) (*ElbSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource ElbSource
	err := ctx.RegisterResource("sumologic:index/elbSource:ElbSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbSource gets an existing ElbSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbSourceState, opts ...pulumi.ResourceOption) (*ElbSource, error) {
	var resource ElbSource
	err := ctx.ReadResource("sumologic:index/elbSource:ElbSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbSource resources.
type elbSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *ElbSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                    `pulumi:"automaticDateParsing"`
	Category             *string                  `pulumi:"category"`
	CollectorId          *int                     `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []ElbSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []ElbSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	// The location to scan for new data.
	Path *ElbSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type ElbSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       ElbSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         ElbSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    ElbSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path ElbSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (ElbSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbSourceState)(nil)).Elem()
}

type elbSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       ElbSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                   `pulumi:"automaticDateParsing"`
	Category             *string                 `pulumi:"category"`
	CollectorId          int                     `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                       `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []ElbSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []ElbSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	// The location to scan for new data.
	Path ElbSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a ElbSource resource.
type ElbSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       ElbSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         ElbSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    ElbSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path ElbSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (ElbSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbSourceArgs)(nil)).Elem()
}

type ElbSourceInput interface {
	pulumi.Input

	ToElbSourceOutput() ElbSourceOutput
	ToElbSourceOutputWithContext(ctx context.Context) ElbSourceOutput
}

func (*ElbSource) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbSource)(nil)).Elem()
}

func (i *ElbSource) ToElbSourceOutput() ElbSourceOutput {
	return i.ToElbSourceOutputWithContext(context.Background())
}

func (i *ElbSource) ToElbSourceOutputWithContext(ctx context.Context) ElbSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSourceOutput)
}

// ElbSourceArrayInput is an input type that accepts ElbSourceArray and ElbSourceArrayOutput values.
// You can construct a concrete instance of `ElbSourceArrayInput` via:
//
//          ElbSourceArray{ ElbSourceArgs{...} }
type ElbSourceArrayInput interface {
	pulumi.Input

	ToElbSourceArrayOutput() ElbSourceArrayOutput
	ToElbSourceArrayOutputWithContext(context.Context) ElbSourceArrayOutput
}

type ElbSourceArray []ElbSourceInput

func (ElbSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbSource)(nil)).Elem()
}

func (i ElbSourceArray) ToElbSourceArrayOutput() ElbSourceArrayOutput {
	return i.ToElbSourceArrayOutputWithContext(context.Background())
}

func (i ElbSourceArray) ToElbSourceArrayOutputWithContext(ctx context.Context) ElbSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSourceArrayOutput)
}

// ElbSourceMapInput is an input type that accepts ElbSourceMap and ElbSourceMapOutput values.
// You can construct a concrete instance of `ElbSourceMapInput` via:
//
//          ElbSourceMap{ "key": ElbSourceArgs{...} }
type ElbSourceMapInput interface {
	pulumi.Input

	ToElbSourceMapOutput() ElbSourceMapOutput
	ToElbSourceMapOutputWithContext(context.Context) ElbSourceMapOutput
}

type ElbSourceMap map[string]ElbSourceInput

func (ElbSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbSource)(nil)).Elem()
}

func (i ElbSourceMap) ToElbSourceMapOutput() ElbSourceMapOutput {
	return i.ToElbSourceMapOutputWithContext(context.Background())
}

func (i ElbSourceMap) ToElbSourceMapOutputWithContext(ctx context.Context) ElbSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSourceMapOutput)
}

type ElbSourceOutput struct{ *pulumi.OutputState }

func (ElbSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbSource)(nil)).Elem()
}

func (o ElbSourceOutput) ToElbSourceOutput() ElbSourceOutput {
	return o
}

func (o ElbSourceOutput) ToElbSourceOutputWithContext(ctx context.Context) ElbSourceOutput {
	return o
}

type ElbSourceArrayOutput struct{ *pulumi.OutputState }

func (ElbSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbSource)(nil)).Elem()
}

func (o ElbSourceArrayOutput) ToElbSourceArrayOutput() ElbSourceArrayOutput {
	return o
}

func (o ElbSourceArrayOutput) ToElbSourceArrayOutputWithContext(ctx context.Context) ElbSourceArrayOutput {
	return o
}

func (o ElbSourceArrayOutput) Index(i pulumi.IntInput) ElbSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbSource {
		return vs[0].([]*ElbSource)[vs[1].(int)]
	}).(ElbSourceOutput)
}

type ElbSourceMapOutput struct{ *pulumi.OutputState }

func (ElbSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbSource)(nil)).Elem()
}

func (o ElbSourceMapOutput) ToElbSourceMapOutput() ElbSourceMapOutput {
	return o
}

func (o ElbSourceMapOutput) ToElbSourceMapOutputWithContext(ctx context.Context) ElbSourceMapOutput {
	return o
}

func (o ElbSourceMapOutput) MapIndex(k pulumi.StringInput) ElbSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbSource {
		return vs[0].(map[string]*ElbSource)[vs[1].(string)]
	}).(ElbSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSourceInput)(nil)).Elem(), &ElbSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSourceArrayInput)(nil)).Elem(), ElbSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSourceMapInput)(nil)).Elem(), ElbSourceMap{})
	pulumi.RegisterOutputType(ElbSourceOutput{})
	pulumi.RegisterOutputType(ElbSourceArrayOutput{})
	pulumi.RegisterOutputType(ElbSourceMapOutput{})
}
