// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic SAML Configuration](https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewSamlConfiguration(ctx, "exampleSamlConfiguration", &sumologic.SamlConfigurationArgs{
// 			AuthnRequestUrl:              pulumi.String(""),
// 			ConfigurationName:            pulumi.String("SumoLogic"),
// 			DebugMode:                    pulumi.Bool(false),
// 			DisableRequestedAuthnContext: pulumi.Bool(false),
// 			EmailAttribute:               pulumi.String(""),
// 			IsRedirectBinding:            pulumi.Bool(false),
// 			Issuer:                       pulumi.String("http://www.okta.com/abxcseyuiwelflkdjh"),
// 			LogoutEnabled:                pulumi.Bool(false),
// 			LogoutUrl:                    pulumi.String(""),
// 			OnDemandProvisioningEnabled: &SamlConfigurationOnDemandProvisioningEnabledArgs{
// 				FirstNameAttribute: pulumi.String("firstName"),
// 				LastNameAttribute:  pulumi.String("lastName"),
// 				OnDemandProvisioningRoles: pulumi.StringArray{
// 					pulumi.String("Administrator"),
// 				},
// 			},
// 			RolesAttribute:          pulumi.String("Administrator"),
// 			SignAuthnRequest:        pulumi.Bool(false),
// 			SpInitiatedLoginEnabled: pulumi.Bool(false),
// 			SpInitiatedLoginPath:    pulumi.String(""),
// 			X509cert1:               pulumi.String("string"),
// 			X509cert2:               pulumi.String(""),
// 			X509cert3:               pulumi.String(""),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// The following attributes are exported:
//
// - `id` - Unique identifier for the SAML Configuration.
// - `certificate` - Authentication Request Signing Certificate for the user.
// - `assertionConsumerUrl` - The URL on Sumo Logic where the IdP will redirect to with its authentication response.
// - `entityId` - A unique identifier that is the intended audience of the SAML assertion.
//
// ## Import
//
// SAML Configuration can be imported using the SAML configuration id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/samlConfiguration:SamlConfiguration example 00000000454A5979
// ```
//
//  [1]https://help.sumologic.com/Manage/Security/SAML/01-Set-Up-SAML-for-Single-Sign-On
type SamlConfiguration struct {
	pulumi.CustomResourceState

	AssertionConsumerUrl pulumi.StringOutput `pulumi:"assertionConsumerUrl"`
	// The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
	AuthnRequestUrl pulumi.StringPtrOutput `pulumi:"authnRequestUrl"`
	Certificate     pulumi.StringOutput    `pulumi:"certificate"`
	// Name of the SSO policy or another name used to describe the policy internally.
	ConfigurationName pulumi.StringOutput `pulumi:"configurationName"`
	// True if additional details are included when a user fails to sign in. Defaults to false.
	DebugMode pulumi.BoolPtrOutput `pulumi:"debugMode"`
	// True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
	DisableRequestedAuthnContext pulumi.BoolPtrOutput `pulumi:"disableRequestedAuthnContext"`
	// The email address of the new user account. Defaults to "".
	EmailAttribute pulumi.StringPtrOutput `pulumi:"emailAttribute"`
	EntityId       pulumi.StringOutput    `pulumi:"entityId"`
	// True if the SAML binding is of HTTP Redirect type. Defaults to false.
	IsRedirectBinding pulumi.BoolPtrOutput `pulumi:"isRedirectBinding"`
	// The unique URL assigned to the organization by the SAML Identity Provider.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
	LogoutEnabled pulumi.BoolPtrOutput `pulumi:"logoutEnabled"`
	// The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
	LogoutUrl pulumi.StringPtrOutput `pulumi:"logoutUrl"`
	// The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
	OnDemandProvisioningEnabled SamlConfigurationOnDemandProvisioningEnabledPtrOutput `pulumi:"onDemandProvisioningEnabled"`
	// The role that Sumo Logic will assign to users when they sign in. Defaults to "".
	RolesAttribute pulumi.StringPtrOutput `pulumi:"rolesAttribute"`
	// True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
	SignAuthnRequest pulumi.BoolPtrOutput `pulumi:"signAuthnRequest"`
	// True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
	SpInitiatedLoginEnabled pulumi.BoolPtrOutput `pulumi:"spInitiatedLoginEnabled"`
	// The identifier used to generate a unique URL for user login. Defaults to "".
	SpInitiatedLoginPath pulumi.StringPtrOutput `pulumi:"spInitiatedLoginPath"`
	// The certificate is used to verify the signature in SAML assertions.
	X509cert1 pulumi.StringOutput `pulumi:"x509cert1"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
	X509cert2 pulumi.StringPtrOutput `pulumi:"x509cert2"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
	X509cert3 pulumi.StringPtrOutput `pulumi:"x509cert3"`
}

// NewSamlConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSamlConfiguration(ctx *pulumi.Context,
	name string, args *SamlConfigurationArgs, opts ...pulumi.ResourceOption) (*SamlConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationName'")
	}
	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.X509cert1 == nil {
		return nil, errors.New("invalid value for required argument 'X509cert1'")
	}
	var resource SamlConfiguration
	err := ctx.RegisterResource("sumologic:index/samlConfiguration:SamlConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlConfiguration gets an existing SamlConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlConfigurationState, opts ...pulumi.ResourceOption) (*SamlConfiguration, error) {
	var resource SamlConfiguration
	err := ctx.ReadResource("sumologic:index/samlConfiguration:SamlConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlConfiguration resources.
type samlConfigurationState struct {
	AssertionConsumerUrl *string `pulumi:"assertionConsumerUrl"`
	// The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
	AuthnRequestUrl *string `pulumi:"authnRequestUrl"`
	Certificate     *string `pulumi:"certificate"`
	// Name of the SSO policy or another name used to describe the policy internally.
	ConfigurationName *string `pulumi:"configurationName"`
	// True if additional details are included when a user fails to sign in. Defaults to false.
	DebugMode *bool `pulumi:"debugMode"`
	// True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
	DisableRequestedAuthnContext *bool `pulumi:"disableRequestedAuthnContext"`
	// The email address of the new user account. Defaults to "".
	EmailAttribute *string `pulumi:"emailAttribute"`
	EntityId       *string `pulumi:"entityId"`
	// True if the SAML binding is of HTTP Redirect type. Defaults to false.
	IsRedirectBinding *bool `pulumi:"isRedirectBinding"`
	// The unique URL assigned to the organization by the SAML Identity Provider.
	Issuer *string `pulumi:"issuer"`
	// True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
	LogoutEnabled *bool `pulumi:"logoutEnabled"`
	// The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
	LogoutUrl *string `pulumi:"logoutUrl"`
	// The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
	OnDemandProvisioningEnabled *SamlConfigurationOnDemandProvisioningEnabled `pulumi:"onDemandProvisioningEnabled"`
	// The role that Sumo Logic will assign to users when they sign in. Defaults to "".
	RolesAttribute *string `pulumi:"rolesAttribute"`
	// True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
	SignAuthnRequest *bool `pulumi:"signAuthnRequest"`
	// True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
	SpInitiatedLoginEnabled *bool `pulumi:"spInitiatedLoginEnabled"`
	// The identifier used to generate a unique URL for user login. Defaults to "".
	SpInitiatedLoginPath *string `pulumi:"spInitiatedLoginPath"`
	// The certificate is used to verify the signature in SAML assertions.
	X509cert1 *string `pulumi:"x509cert1"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
	X509cert2 *string `pulumi:"x509cert2"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
	X509cert3 *string `pulumi:"x509cert3"`
}

type SamlConfigurationState struct {
	AssertionConsumerUrl pulumi.StringPtrInput
	// The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
	AuthnRequestUrl pulumi.StringPtrInput
	Certificate     pulumi.StringPtrInput
	// Name of the SSO policy or another name used to describe the policy internally.
	ConfigurationName pulumi.StringPtrInput
	// True if additional details are included when a user fails to sign in. Defaults to false.
	DebugMode pulumi.BoolPtrInput
	// True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
	DisableRequestedAuthnContext pulumi.BoolPtrInput
	// The email address of the new user account. Defaults to "".
	EmailAttribute pulumi.StringPtrInput
	EntityId       pulumi.StringPtrInput
	// True if the SAML binding is of HTTP Redirect type. Defaults to false.
	IsRedirectBinding pulumi.BoolPtrInput
	// The unique URL assigned to the organization by the SAML Identity Provider.
	Issuer pulumi.StringPtrInput
	// True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
	LogoutEnabled pulumi.BoolPtrInput
	// The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
	LogoutUrl pulumi.StringPtrInput
	// The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
	OnDemandProvisioningEnabled SamlConfigurationOnDemandProvisioningEnabledPtrInput
	// The role that Sumo Logic will assign to users when they sign in. Defaults to "".
	RolesAttribute pulumi.StringPtrInput
	// True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
	SignAuthnRequest pulumi.BoolPtrInput
	// True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
	SpInitiatedLoginEnabled pulumi.BoolPtrInput
	// The identifier used to generate a unique URL for user login. Defaults to "".
	SpInitiatedLoginPath pulumi.StringPtrInput
	// The certificate is used to verify the signature in SAML assertions.
	X509cert1 pulumi.StringPtrInput
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
	X509cert2 pulumi.StringPtrInput
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
	X509cert3 pulumi.StringPtrInput
}

func (SamlConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlConfigurationState)(nil)).Elem()
}

type samlConfigurationArgs struct {
	// The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
	AuthnRequestUrl *string `pulumi:"authnRequestUrl"`
	// Name of the SSO policy or another name used to describe the policy internally.
	ConfigurationName string `pulumi:"configurationName"`
	// True if additional details are included when a user fails to sign in. Defaults to false.
	DebugMode *bool `pulumi:"debugMode"`
	// True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
	DisableRequestedAuthnContext *bool `pulumi:"disableRequestedAuthnContext"`
	// The email address of the new user account. Defaults to "".
	EmailAttribute *string `pulumi:"emailAttribute"`
	// True if the SAML binding is of HTTP Redirect type. Defaults to false.
	IsRedirectBinding *bool `pulumi:"isRedirectBinding"`
	// The unique URL assigned to the organization by the SAML Identity Provider.
	Issuer string `pulumi:"issuer"`
	// True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
	LogoutEnabled *bool `pulumi:"logoutEnabled"`
	// The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
	LogoutUrl *string `pulumi:"logoutUrl"`
	// The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
	OnDemandProvisioningEnabled *SamlConfigurationOnDemandProvisioningEnabled `pulumi:"onDemandProvisioningEnabled"`
	// The role that Sumo Logic will assign to users when they sign in. Defaults to "".
	RolesAttribute *string `pulumi:"rolesAttribute"`
	// True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
	SignAuthnRequest *bool `pulumi:"signAuthnRequest"`
	// True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
	SpInitiatedLoginEnabled *bool `pulumi:"spInitiatedLoginEnabled"`
	// The identifier used to generate a unique URL for user login. Defaults to "".
	SpInitiatedLoginPath *string `pulumi:"spInitiatedLoginPath"`
	// The certificate is used to verify the signature in SAML assertions.
	X509cert1 string `pulumi:"x509cert1"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
	X509cert2 *string `pulumi:"x509cert2"`
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
	X509cert3 *string `pulumi:"x509cert3"`
}

// The set of arguments for constructing a SamlConfiguration resource.
type SamlConfigurationArgs struct {
	// The URL that the identity provider has assigned for Sumo Logic to submit SAML authentication requests to the identity provider. Defaults to "".
	AuthnRequestUrl pulumi.StringPtrInput
	// Name of the SSO policy or another name used to describe the policy internally.
	ConfigurationName pulumi.StringInput
	// True if additional details are included when a user fails to sign in. Defaults to false.
	DebugMode pulumi.BoolPtrInput
	// True if Sumo Logic will include the RequestedAuthnContext element of the SAML AuthnRequests it sends to the identity provider. Defaults to false.
	DisableRequestedAuthnContext pulumi.BoolPtrInput
	// The email address of the new user account. Defaults to "".
	EmailAttribute pulumi.StringPtrInput
	// True if the SAML binding is of HTTP Redirect type. Defaults to false.
	IsRedirectBinding pulumi.BoolPtrInput
	// The unique URL assigned to the organization by the SAML Identity Provider.
	Issuer pulumi.StringInput
	// True if users are redirected to a URL after signing out of Sumo Logic. Defaults to false.
	LogoutEnabled pulumi.BoolPtrInput
	// The URL that users will be redirected to after signing out of Sumo Logic. Defaults to "".
	LogoutUrl pulumi.StringPtrInput
	// The configuration for on-demand provisioning. See onDemandProvisioningEnabled schema for details.
	OnDemandProvisioningEnabled SamlConfigurationOnDemandProvisioningEnabledPtrInput
	// The role that Sumo Logic will assign to users when they sign in. Defaults to "".
	RolesAttribute pulumi.StringPtrInput
	// True if Sumo Logic will send signed Authn requests to the identity provider. Defaults to false.
	SignAuthnRequest pulumi.BoolPtrInput
	// True if Sumo Logic redirects users to your identity provider with a SAML AuthnRequest when signing in. Defaults to false.
	SpInitiatedLoginEnabled pulumi.BoolPtrInput
	// The identifier used to generate a unique URL for user login. Defaults to "".
	SpInitiatedLoginPath pulumi.StringPtrInput
	// The certificate is used to verify the signature in SAML assertions.
	X509cert1 pulumi.StringInput
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires. Defaults to "".
	X509cert2 pulumi.StringPtrInput
	// The backup certificate used to verify the signature in SAML assertions when x509cert1 expires and x509cert2 is empty. Defaults to "".
	X509cert3 pulumi.StringPtrInput
}

func (SamlConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlConfigurationArgs)(nil)).Elem()
}

type SamlConfigurationInput interface {
	pulumi.Input

	ToSamlConfigurationOutput() SamlConfigurationOutput
	ToSamlConfigurationOutputWithContext(ctx context.Context) SamlConfigurationOutput
}

func (*SamlConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlConfiguration)(nil)).Elem()
}

func (i *SamlConfiguration) ToSamlConfigurationOutput() SamlConfigurationOutput {
	return i.ToSamlConfigurationOutputWithContext(context.Background())
}

func (i *SamlConfiguration) ToSamlConfigurationOutputWithContext(ctx context.Context) SamlConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationOutput)
}

// SamlConfigurationArrayInput is an input type that accepts SamlConfigurationArray and SamlConfigurationArrayOutput values.
// You can construct a concrete instance of `SamlConfigurationArrayInput` via:
//
//          SamlConfigurationArray{ SamlConfigurationArgs{...} }
type SamlConfigurationArrayInput interface {
	pulumi.Input

	ToSamlConfigurationArrayOutput() SamlConfigurationArrayOutput
	ToSamlConfigurationArrayOutputWithContext(context.Context) SamlConfigurationArrayOutput
}

type SamlConfigurationArray []SamlConfigurationInput

func (SamlConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlConfiguration)(nil)).Elem()
}

func (i SamlConfigurationArray) ToSamlConfigurationArrayOutput() SamlConfigurationArrayOutput {
	return i.ToSamlConfigurationArrayOutputWithContext(context.Background())
}

func (i SamlConfigurationArray) ToSamlConfigurationArrayOutputWithContext(ctx context.Context) SamlConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationArrayOutput)
}

// SamlConfigurationMapInput is an input type that accepts SamlConfigurationMap and SamlConfigurationMapOutput values.
// You can construct a concrete instance of `SamlConfigurationMapInput` via:
//
//          SamlConfigurationMap{ "key": SamlConfigurationArgs{...} }
type SamlConfigurationMapInput interface {
	pulumi.Input

	ToSamlConfigurationMapOutput() SamlConfigurationMapOutput
	ToSamlConfigurationMapOutputWithContext(context.Context) SamlConfigurationMapOutput
}

type SamlConfigurationMap map[string]SamlConfigurationInput

func (SamlConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlConfiguration)(nil)).Elem()
}

func (i SamlConfigurationMap) ToSamlConfigurationMapOutput() SamlConfigurationMapOutput {
	return i.ToSamlConfigurationMapOutputWithContext(context.Background())
}

func (i SamlConfigurationMap) ToSamlConfigurationMapOutputWithContext(ctx context.Context) SamlConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationMapOutput)
}

type SamlConfigurationOutput struct{ *pulumi.OutputState }

func (SamlConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlConfiguration)(nil)).Elem()
}

func (o SamlConfigurationOutput) ToSamlConfigurationOutput() SamlConfigurationOutput {
	return o
}

func (o SamlConfigurationOutput) ToSamlConfigurationOutputWithContext(ctx context.Context) SamlConfigurationOutput {
	return o
}

type SamlConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SamlConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SamlConfiguration)(nil)).Elem()
}

func (o SamlConfigurationArrayOutput) ToSamlConfigurationArrayOutput() SamlConfigurationArrayOutput {
	return o
}

func (o SamlConfigurationArrayOutput) ToSamlConfigurationArrayOutputWithContext(ctx context.Context) SamlConfigurationArrayOutput {
	return o
}

func (o SamlConfigurationArrayOutput) Index(i pulumi.IntInput) SamlConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SamlConfiguration {
		return vs[0].([]*SamlConfiguration)[vs[1].(int)]
	}).(SamlConfigurationOutput)
}

type SamlConfigurationMapOutput struct{ *pulumi.OutputState }

func (SamlConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SamlConfiguration)(nil)).Elem()
}

func (o SamlConfigurationMapOutput) ToSamlConfigurationMapOutput() SamlConfigurationMapOutput {
	return o
}

func (o SamlConfigurationMapOutput) ToSamlConfigurationMapOutputWithContext(ctx context.Context) SamlConfigurationMapOutput {
	return o
}

func (o SamlConfigurationMapOutput) MapIndex(k pulumi.StringInput) SamlConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SamlConfiguration {
		return vs[0].(map[string]*SamlConfiguration)[vs[1].(string)]
	}).(SamlConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SamlConfigurationInput)(nil)).Elem(), &SamlConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlConfigurationArrayInput)(nil)).Elem(), SamlConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlConfigurationMapInput)(nil)).Elem(), SamlConfigurationMap{})
	pulumi.RegisterOutputType(SamlConfigurationOutput{})
	pulumi.RegisterOutputType(SamlConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SamlConfigurationMapOutput{})
}
