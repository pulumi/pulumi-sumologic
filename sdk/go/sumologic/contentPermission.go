// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a way to configure permissions on a content to share it with a user, a role, or the entire
// org. You can read more [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content).
//
// There are three permission levels `View`, `Edit` and `Manage`. You can read more about different
// levels [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
//
// > When you add a new permission to a content, all the lower level permissions are added by default.
// For example, giving a user "Manage" permission on a content, implicitly gives them "Edit" and "View"
// permissions on the content. Due to this behavior, when you add a higher level permission, you must
// also add all the lower level permissions. For example, when you give a user "Edit" permission via
// the resource, you must give them "View" permission otherwise state and configuration will be out
// of sync.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		personalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"type":        "FolderSyncDefinition",
// 			"name":        "test_permission_resource_folder",
// 			"description": "",
// 			"children":    []interface{}{},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		permissionTestContent, err := sumologic.NewContent(ctx, "permissionTestContent", &sumologic.ContentArgs{
// 			ParentId: pulumi.String(personalFolder.Id),
// 			Config:   pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		role, err := sumologic.LookupRole(ctx, &GetRoleArgs{
// 			Name: pulumi.StringRef("test_role"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		user, err := sumologic.LookupUser(ctx, &GetUserArgs{
// 			Email: pulumi.StringRef("user@example.com"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewContentPermission(ctx, "contentPermissionTest", &sumologic.ContentPermissionArgs{
// 			ContentId:           permissionTestContent.ID(),
// 			NotifyRecipient:     pulumi.Bool(true),
// 			NotificationMessage: pulumi.String("You now have the permission to access this content"),
// 			Permissions: ContentPermissionPermissionArray{
// 				&ContentPermissionPermissionArgs{
// 					PermissionName: pulumi.String("View"),
// 					SourceType:     pulumi.String("role"),
// 					SourceId:       pulumi.String(role.Id),
// 				},
// 				&ContentPermissionPermissionArgs{
// 					PermissionName: pulumi.String("View"),
// 					SourceType:     pulumi.String("user"),
// 					SourceId:       pulumi.String(user.Id),
// 				},
// 				&ContentPermissionPermissionArgs{
// 					PermissionName: pulumi.String("Edit"),
// 					SourceType:     pulumi.String("user"),
// 					SourceId:       pulumi.String(user.Id),
// 				},
// 				&ContentPermissionPermissionArgs{
// 					PermissionName: pulumi.String("Manage"),
// 					SourceType:     pulumi.String("user"),
// 					SourceId:       pulumi.String(user.Id),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Permisions on a content item can be imported using the content identifier, e.g.hcl // import permissions for content item with identifier = 0000000008E0183E
//
// ```sh
//  $ pulumi import sumologic:index/contentPermission:ContentPermission dashboard_permission_import 0000000008E0183E
// ```
type ContentPermission struct {
	pulumi.CustomResourceState

	// The identifier of the content item for which you want to update
	// permissions.
	ContentId pulumi.StringOutput `pulumi:"contentId"`
	// The notification message to send to the users.
	NotificationMessage pulumi.StringPtrOutput `pulumi:"notificationMessage"`
	// Boolean value. Set it to "true" to notify the recipients by email.
	NotifyRecipient pulumi.BoolOutput `pulumi:"notifyRecipient"`
	// Permission block defining permission on the content. See
	// permission schema for details.
	Permissions ContentPermissionPermissionArrayOutput `pulumi:"permissions"`
}

// NewContentPermission registers a new resource with the given unique name, arguments, and options.
func NewContentPermission(ctx *pulumi.Context,
	name string, args *ContentPermissionArgs, opts ...pulumi.ResourceOption) (*ContentPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentId == nil {
		return nil, errors.New("invalid value for required argument 'ContentId'")
	}
	if args.NotifyRecipient == nil {
		return nil, errors.New("invalid value for required argument 'NotifyRecipient'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	var resource ContentPermission
	err := ctx.RegisterResource("sumologic:index/contentPermission:ContentPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentPermission gets an existing ContentPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentPermissionState, opts ...pulumi.ResourceOption) (*ContentPermission, error) {
	var resource ContentPermission
	err := ctx.ReadResource("sumologic:index/contentPermission:ContentPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentPermission resources.
type contentPermissionState struct {
	// The identifier of the content item for which you want to update
	// permissions.
	ContentId *string `pulumi:"contentId"`
	// The notification message to send to the users.
	NotificationMessage *string `pulumi:"notificationMessage"`
	// Boolean value. Set it to "true" to notify the recipients by email.
	NotifyRecipient *bool `pulumi:"notifyRecipient"`
	// Permission block defining permission on the content. See
	// permission schema for details.
	Permissions []ContentPermissionPermission `pulumi:"permissions"`
}

type ContentPermissionState struct {
	// The identifier of the content item for which you want to update
	// permissions.
	ContentId pulumi.StringPtrInput
	// The notification message to send to the users.
	NotificationMessage pulumi.StringPtrInput
	// Boolean value. Set it to "true" to notify the recipients by email.
	NotifyRecipient pulumi.BoolPtrInput
	// Permission block defining permission on the content. See
	// permission schema for details.
	Permissions ContentPermissionPermissionArrayInput
}

func (ContentPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentPermissionState)(nil)).Elem()
}

type contentPermissionArgs struct {
	// The identifier of the content item for which you want to update
	// permissions.
	ContentId string `pulumi:"contentId"`
	// The notification message to send to the users.
	NotificationMessage *string `pulumi:"notificationMessage"`
	// Boolean value. Set it to "true" to notify the recipients by email.
	NotifyRecipient bool `pulumi:"notifyRecipient"`
	// Permission block defining permission on the content. See
	// permission schema for details.
	Permissions []ContentPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a ContentPermission resource.
type ContentPermissionArgs struct {
	// The identifier of the content item for which you want to update
	// permissions.
	ContentId pulumi.StringInput
	// The notification message to send to the users.
	NotificationMessage pulumi.StringPtrInput
	// Boolean value. Set it to "true" to notify the recipients by email.
	NotifyRecipient pulumi.BoolInput
	// Permission block defining permission on the content. See
	// permission schema for details.
	Permissions ContentPermissionPermissionArrayInput
}

func (ContentPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentPermissionArgs)(nil)).Elem()
}

type ContentPermissionInput interface {
	pulumi.Input

	ToContentPermissionOutput() ContentPermissionOutput
	ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput
}

func (*ContentPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentPermission)(nil)).Elem()
}

func (i *ContentPermission) ToContentPermissionOutput() ContentPermissionOutput {
	return i.ToContentPermissionOutputWithContext(context.Background())
}

func (i *ContentPermission) ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionOutput)
}

// ContentPermissionArrayInput is an input type that accepts ContentPermissionArray and ContentPermissionArrayOutput values.
// You can construct a concrete instance of `ContentPermissionArrayInput` via:
//
//          ContentPermissionArray{ ContentPermissionArgs{...} }
type ContentPermissionArrayInput interface {
	pulumi.Input

	ToContentPermissionArrayOutput() ContentPermissionArrayOutput
	ToContentPermissionArrayOutputWithContext(context.Context) ContentPermissionArrayOutput
}

type ContentPermissionArray []ContentPermissionInput

func (ContentPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentPermission)(nil)).Elem()
}

func (i ContentPermissionArray) ToContentPermissionArrayOutput() ContentPermissionArrayOutput {
	return i.ToContentPermissionArrayOutputWithContext(context.Background())
}

func (i ContentPermissionArray) ToContentPermissionArrayOutputWithContext(ctx context.Context) ContentPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionArrayOutput)
}

// ContentPermissionMapInput is an input type that accepts ContentPermissionMap and ContentPermissionMapOutput values.
// You can construct a concrete instance of `ContentPermissionMapInput` via:
//
//          ContentPermissionMap{ "key": ContentPermissionArgs{...} }
type ContentPermissionMapInput interface {
	pulumi.Input

	ToContentPermissionMapOutput() ContentPermissionMapOutput
	ToContentPermissionMapOutputWithContext(context.Context) ContentPermissionMapOutput
}

type ContentPermissionMap map[string]ContentPermissionInput

func (ContentPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentPermission)(nil)).Elem()
}

func (i ContentPermissionMap) ToContentPermissionMapOutput() ContentPermissionMapOutput {
	return i.ToContentPermissionMapOutputWithContext(context.Background())
}

func (i ContentPermissionMap) ToContentPermissionMapOutputWithContext(ctx context.Context) ContentPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentPermissionMapOutput)
}

type ContentPermissionOutput struct{ *pulumi.OutputState }

func (ContentPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentPermission)(nil)).Elem()
}

func (o ContentPermissionOutput) ToContentPermissionOutput() ContentPermissionOutput {
	return o
}

func (o ContentPermissionOutput) ToContentPermissionOutputWithContext(ctx context.Context) ContentPermissionOutput {
	return o
}

type ContentPermissionArrayOutput struct{ *pulumi.OutputState }

func (ContentPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentPermission)(nil)).Elem()
}

func (o ContentPermissionArrayOutput) ToContentPermissionArrayOutput() ContentPermissionArrayOutput {
	return o
}

func (o ContentPermissionArrayOutput) ToContentPermissionArrayOutputWithContext(ctx context.Context) ContentPermissionArrayOutput {
	return o
}

func (o ContentPermissionArrayOutput) Index(i pulumi.IntInput) ContentPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentPermission {
		return vs[0].([]*ContentPermission)[vs[1].(int)]
	}).(ContentPermissionOutput)
}

type ContentPermissionMapOutput struct{ *pulumi.OutputState }

func (ContentPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentPermission)(nil)).Elem()
}

func (o ContentPermissionMapOutput) ToContentPermissionMapOutput() ContentPermissionMapOutput {
	return o
}

func (o ContentPermissionMapOutput) ToContentPermissionMapOutputWithContext(ctx context.Context) ContentPermissionMapOutput {
	return o
}

func (o ContentPermissionMapOutput) MapIndex(k pulumi.StringInput) ContentPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentPermission {
		return vs[0].(map[string]*ContentPermission)[vs[1].(string)]
	}).(ContentPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionInput)(nil)).Elem(), &ContentPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionArrayInput)(nil)).Elem(), ContentPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentPermissionMapInput)(nil)).Elem(), ContentPermissionMap{})
	pulumi.RegisterOutputType(ContentPermissionOutput{})
	pulumi.RegisterOutputType(ContentPermissionArrayOutput{})
	pulumi.RegisterOutputType(ContentPermissionMapOutput{})
}
