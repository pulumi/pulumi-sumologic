// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType string `pulumi:"entityType"`
	// Next level without a condition.
	NextLevel *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel `pulumi:"nextLevel"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions []HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition `pulumi:"nextLevelsWithConditions"`
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput` via:
//
//	HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs{...}
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// Next level without a condition.
	NextLevel HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput `pulumi:"nextLevel"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayInput `pulumi:"nextLevelsWithConditions"`
}

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel)(nil)).Elem()
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return o
}

// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel) string {
		return v.EntityType
	}).(pulumi.StringOutput)
}

// Next level without a condition.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) NextLevel() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel) *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel {
		return v.NextLevel
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput)
}

// Zero or more next levels with conditions.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) NextLevelsWithConditions() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel) []HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition {
		return v.NextLevelsWithConditions
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType string `pulumi:"entityType"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions []string `pulumi:"nextLevelsWithConditions"`
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelInput` via:
//
//	HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs{...}
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions pulumi.StringArrayInput `pulumi:"nextLevelsWithConditions"`
}

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel)(nil)).Elem()
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput)
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput).ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(ctx)
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs, HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtr and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput` via:
//
//	        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs{...}
//
//	or:
//
//	        nil
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput
}

type hierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrType HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs

func HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtr(v *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput {
	return (*hierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrType)(v)
}

func (*hierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel)(nil)).Elem()
}

func (i *hierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrType) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(context.Background())
}

func (i *hierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrType) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return o.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(context.Background())
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel {
		return &v
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput)
}

// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) string {
		return v.EntityType
	}).(pulumi.StringOutput)
}

// Zero or more next levels with conditions.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput) NextLevelsWithConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) []string {
		return v.NextLevelsWithConditions
	}).(pulumi.StringArrayOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) Elem() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput {
	return o.ApplyT(func(v *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel {
		if v != nil {
			return *v
		}
		var ret HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel
		return ret
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput)
}

// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) *string {
		if v == nil {
			return nil
		}
		return &v.EntityType
	}).(pulumi.StringPtrOutput)
}

// Zero or more next levels with conditions.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput) NextLevelsWithConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel) []string {
		if v == nil {
			return nil
		}
		return v.NextLevelsWithConditions
	}).(pulumi.StringArrayOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition struct {
	// Condition to be checked against for level.entityType value, for now full string match.
	Condition string                                                                                                                                                                                                             `pulumi:"condition"`
	Level     HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel `pulumi:"level"`
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionInput` via:
//
//	HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs{...}
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs struct {
	// Condition to be checked against for level.entityType value, for now full string match.
	Condition pulumi.StringInput                                                                                                                                                                                                      `pulumi:"condition"`
	Level     HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput `pulumi:"level"`
}

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition)(nil)).Elem()
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput)
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayInput` via:
//
//	HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray{ HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs{...} }
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray []HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionInput

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition)(nil)).Elem()
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput {
	return o
}

// Condition to be checked against for level.entityType value, for now full string match.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition) string {
		return v.Condition
	}).(pulumi.StringOutput)
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput) Level() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel {
		return v.Level
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput) Index(i pulumi.IntInput) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition {
		return vs[0].([]HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition)[vs[1].(int)]
	}).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType string `pulumi:"entityType"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions []string `pulumi:"nextLevelsWithConditions"`
}

// HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput is an input type that accepts HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs and HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput values.
// You can construct a concrete instance of `HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput` via:
//
//	HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs{...}
type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput interface {
	pulumi.Input

	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput
	ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs struct {
	// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
	EntityType pulumi.StringInput `pulumi:"entityType"`
	// Zero or more next levels with conditions.
	NextLevelsWithConditions pulumi.StringArrayInput `pulumi:"nextLevelsWithConditions"`
}

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel)(nil)).Elem()
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return i.ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(context.Background())
}

func (i HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput)
}

type HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput struct{ *pulumi.OutputState }

func (HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel)(nil)).Elem()
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput() HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return o
}

func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) ToHierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutputWithContext(ctx context.Context) HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput {
	return o
}

// Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel) string {
		return v.EntityType
	}).(pulumi.StringOutput)
}

// Zero or more next levels with conditions.
func (o HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput) NextLevelsWithConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel) []string {
		return v.NextLevelsWithConditions
	}).(pulumi.StringArrayOutput)
}

type HttpSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// HttpSourceDefaultDateFormatInput is an input type that accepts HttpSourceDefaultDateFormatArgs and HttpSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `HttpSourceDefaultDateFormatInput` via:
//
//	HttpSourceDefaultDateFormatArgs{...}
type HttpSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToHttpSourceDefaultDateFormatOutput() HttpSourceDefaultDateFormatOutput
	ToHttpSourceDefaultDateFormatOutputWithContext(context.Context) HttpSourceDefaultDateFormatOutput
}

type HttpSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (HttpSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSourceDefaultDateFormat)(nil)).Elem()
}

func (i HttpSourceDefaultDateFormatArgs) ToHttpSourceDefaultDateFormatOutput() HttpSourceDefaultDateFormatOutput {
	return i.ToHttpSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i HttpSourceDefaultDateFormatArgs) ToHttpSourceDefaultDateFormatOutputWithContext(ctx context.Context) HttpSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSourceDefaultDateFormatOutput)
}

// HttpSourceDefaultDateFormatArrayInput is an input type that accepts HttpSourceDefaultDateFormatArray and HttpSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `HttpSourceDefaultDateFormatArrayInput` via:
//
//	HttpSourceDefaultDateFormatArray{ HttpSourceDefaultDateFormatArgs{...} }
type HttpSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToHttpSourceDefaultDateFormatArrayOutput() HttpSourceDefaultDateFormatArrayOutput
	ToHttpSourceDefaultDateFormatArrayOutputWithContext(context.Context) HttpSourceDefaultDateFormatArrayOutput
}

type HttpSourceDefaultDateFormatArray []HttpSourceDefaultDateFormatInput

func (HttpSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpSourceDefaultDateFormat)(nil)).Elem()
}

func (i HttpSourceDefaultDateFormatArray) ToHttpSourceDefaultDateFormatArrayOutput() HttpSourceDefaultDateFormatArrayOutput {
	return i.ToHttpSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i HttpSourceDefaultDateFormatArray) ToHttpSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) HttpSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSourceDefaultDateFormatArrayOutput)
}

type HttpSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (HttpSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSourceDefaultDateFormat)(nil)).Elem()
}

func (o HttpSourceDefaultDateFormatOutput) ToHttpSourceDefaultDateFormatOutput() HttpSourceDefaultDateFormatOutput {
	return o
}

func (o HttpSourceDefaultDateFormatOutput) ToHttpSourceDefaultDateFormatOutputWithContext(ctx context.Context) HttpSourceDefaultDateFormatOutput {
	return o
}

func (o HttpSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o HttpSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type HttpSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (HttpSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpSourceDefaultDateFormat)(nil)).Elem()
}

func (o HttpSourceDefaultDateFormatArrayOutput) ToHttpSourceDefaultDateFormatArrayOutput() HttpSourceDefaultDateFormatArrayOutput {
	return o
}

func (o HttpSourceDefaultDateFormatArrayOutput) ToHttpSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) HttpSourceDefaultDateFormatArrayOutput {
	return o
}

func (o HttpSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) HttpSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpSourceDefaultDateFormat {
		return vs[0].([]HttpSourceDefaultDateFormat)[vs[1].(int)]
	}).(HttpSourceDefaultDateFormatOutput)
}

type HttpSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// HttpSourceFilterInput is an input type that accepts HttpSourceFilterArgs and HttpSourceFilterOutput values.
// You can construct a concrete instance of `HttpSourceFilterInput` via:
//
//	HttpSourceFilterArgs{...}
type HttpSourceFilterInput interface {
	pulumi.Input

	ToHttpSourceFilterOutput() HttpSourceFilterOutput
	ToHttpSourceFilterOutputWithContext(context.Context) HttpSourceFilterOutput
}

type HttpSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (HttpSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSourceFilter)(nil)).Elem()
}

func (i HttpSourceFilterArgs) ToHttpSourceFilterOutput() HttpSourceFilterOutput {
	return i.ToHttpSourceFilterOutputWithContext(context.Background())
}

func (i HttpSourceFilterArgs) ToHttpSourceFilterOutputWithContext(ctx context.Context) HttpSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSourceFilterOutput)
}

// HttpSourceFilterArrayInput is an input type that accepts HttpSourceFilterArray and HttpSourceFilterArrayOutput values.
// You can construct a concrete instance of `HttpSourceFilterArrayInput` via:
//
//	HttpSourceFilterArray{ HttpSourceFilterArgs{...} }
type HttpSourceFilterArrayInput interface {
	pulumi.Input

	ToHttpSourceFilterArrayOutput() HttpSourceFilterArrayOutput
	ToHttpSourceFilterArrayOutputWithContext(context.Context) HttpSourceFilterArrayOutput
}

type HttpSourceFilterArray []HttpSourceFilterInput

func (HttpSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpSourceFilter)(nil)).Elem()
}

func (i HttpSourceFilterArray) ToHttpSourceFilterArrayOutput() HttpSourceFilterArrayOutput {
	return i.ToHttpSourceFilterArrayOutputWithContext(context.Background())
}

func (i HttpSourceFilterArray) ToHttpSourceFilterArrayOutputWithContext(ctx context.Context) HttpSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSourceFilterArrayOutput)
}

type HttpSourceFilterOutput struct{ *pulumi.OutputState }

func (HttpSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSourceFilter)(nil)).Elem()
}

func (o HttpSourceFilterOutput) ToHttpSourceFilterOutput() HttpSourceFilterOutput {
	return o
}

func (o HttpSourceFilterOutput) ToHttpSourceFilterOutputWithContext(ctx context.Context) HttpSourceFilterOutput {
	return o
}

func (o HttpSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o HttpSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o HttpSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o HttpSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type HttpSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (HttpSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpSourceFilter)(nil)).Elem()
}

func (o HttpSourceFilterArrayOutput) ToHttpSourceFilterArrayOutput() HttpSourceFilterArrayOutput {
	return o
}

func (o HttpSourceFilterArrayOutput) ToHttpSourceFilterArrayOutputWithContext(ctx context.Context) HttpSourceFilterArrayOutput {
	return o
}

func (o HttpSourceFilterArrayOutput) Index(i pulumi.IntInput) HttpSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpSourceFilter {
		return vs[0].([]HttpSourceFilter)[vs[1].(int)]
	}).(HttpSourceFilterOutput)
}

type KineisLogSourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey *string `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey *string `pulumi:"secretKey"`
	// Must be either `KinesisLogPath` or `NoPathExpression`
	Type string `pulumi:"type"`
}

// KineisLogSourceAuthenticationInput is an input type that accepts KineisLogSourceAuthenticationArgs and KineisLogSourceAuthenticationOutput values.
// You can construct a concrete instance of `KineisLogSourceAuthenticationInput` via:
//
//	KineisLogSourceAuthenticationArgs{...}
type KineisLogSourceAuthenticationInput interface {
	pulumi.Input

	ToKineisLogSourceAuthenticationOutput() KineisLogSourceAuthenticationOutput
	ToKineisLogSourceAuthenticationOutputWithContext(context.Context) KineisLogSourceAuthenticationOutput
}

type KineisLogSourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// Must be either `KinesisLogPath` or `NoPathExpression`
	Type pulumi.StringInput `pulumi:"type"`
}

func (KineisLogSourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceAuthentication)(nil)).Elem()
}

func (i KineisLogSourceAuthenticationArgs) ToKineisLogSourceAuthenticationOutput() KineisLogSourceAuthenticationOutput {
	return i.ToKineisLogSourceAuthenticationOutputWithContext(context.Background())
}

func (i KineisLogSourceAuthenticationArgs) ToKineisLogSourceAuthenticationOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceAuthenticationOutput)
}

func (i KineisLogSourceAuthenticationArgs) ToKineisLogSourceAuthenticationPtrOutput() KineisLogSourceAuthenticationPtrOutput {
	return i.ToKineisLogSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i KineisLogSourceAuthenticationArgs) ToKineisLogSourceAuthenticationPtrOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceAuthenticationOutput).ToKineisLogSourceAuthenticationPtrOutputWithContext(ctx)
}

// KineisLogSourceAuthenticationPtrInput is an input type that accepts KineisLogSourceAuthenticationArgs, KineisLogSourceAuthenticationPtr and KineisLogSourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `KineisLogSourceAuthenticationPtrInput` via:
//
//	        KineisLogSourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type KineisLogSourceAuthenticationPtrInput interface {
	pulumi.Input

	ToKineisLogSourceAuthenticationPtrOutput() KineisLogSourceAuthenticationPtrOutput
	ToKineisLogSourceAuthenticationPtrOutputWithContext(context.Context) KineisLogSourceAuthenticationPtrOutput
}

type kineisLogSourceAuthenticationPtrType KineisLogSourceAuthenticationArgs

func KineisLogSourceAuthenticationPtr(v *KineisLogSourceAuthenticationArgs) KineisLogSourceAuthenticationPtrInput {
	return (*kineisLogSourceAuthenticationPtrType)(v)
}

func (*kineisLogSourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSourceAuthentication)(nil)).Elem()
}

func (i *kineisLogSourceAuthenticationPtrType) ToKineisLogSourceAuthenticationPtrOutput() KineisLogSourceAuthenticationPtrOutput {
	return i.ToKineisLogSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *kineisLogSourceAuthenticationPtrType) ToKineisLogSourceAuthenticationPtrOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceAuthenticationPtrOutput)
}

type KineisLogSourceAuthenticationOutput struct{ *pulumi.OutputState }

func (KineisLogSourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceAuthentication)(nil)).Elem()
}

func (o KineisLogSourceAuthenticationOutput) ToKineisLogSourceAuthenticationOutput() KineisLogSourceAuthenticationOutput {
	return o
}

func (o KineisLogSourceAuthenticationOutput) ToKineisLogSourceAuthenticationOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationOutput {
	return o
}

func (o KineisLogSourceAuthenticationOutput) ToKineisLogSourceAuthenticationPtrOutput() KineisLogSourceAuthenticationPtrOutput {
	return o.ToKineisLogSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o KineisLogSourceAuthenticationOutput) ToKineisLogSourceAuthenticationPtrOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KineisLogSourceAuthentication) *KineisLogSourceAuthentication {
		return &v
	}).(KineisLogSourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o KineisLogSourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o KineisLogSourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o KineisLogSourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Must be either `KinesisLogPath` or `NoPathExpression`
func (o KineisLogSourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type KineisLogSourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KineisLogSourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSourceAuthentication)(nil)).Elem()
}

func (o KineisLogSourceAuthenticationPtrOutput) ToKineisLogSourceAuthenticationPtrOutput() KineisLogSourceAuthenticationPtrOutput {
	return o
}

func (o KineisLogSourceAuthenticationPtrOutput) ToKineisLogSourceAuthenticationPtrOutputWithContext(ctx context.Context) KineisLogSourceAuthenticationPtrOutput {
	return o
}

func (o KineisLogSourceAuthenticationPtrOutput) Elem() KineisLogSourceAuthenticationOutput {
	return o.ApplyT(func(v *KineisLogSourceAuthentication) KineisLogSourceAuthentication {
		if v != nil {
			return *v
		}
		var ret KineisLogSourceAuthentication
		return ret
	}).(KineisLogSourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o KineisLogSourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o KineisLogSourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o KineisLogSourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// Must be either `KinesisLogPath` or `NoPathExpression`
func (o KineisLogSourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KineisLogSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// KineisLogSourceDefaultDateFormatInput is an input type that accepts KineisLogSourceDefaultDateFormatArgs and KineisLogSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `KineisLogSourceDefaultDateFormatInput` via:
//
//	KineisLogSourceDefaultDateFormatArgs{...}
type KineisLogSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToKineisLogSourceDefaultDateFormatOutput() KineisLogSourceDefaultDateFormatOutput
	ToKineisLogSourceDefaultDateFormatOutputWithContext(context.Context) KineisLogSourceDefaultDateFormatOutput
}

type KineisLogSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (KineisLogSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceDefaultDateFormat)(nil)).Elem()
}

func (i KineisLogSourceDefaultDateFormatArgs) ToKineisLogSourceDefaultDateFormatOutput() KineisLogSourceDefaultDateFormatOutput {
	return i.ToKineisLogSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i KineisLogSourceDefaultDateFormatArgs) ToKineisLogSourceDefaultDateFormatOutputWithContext(ctx context.Context) KineisLogSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceDefaultDateFormatOutput)
}

// KineisLogSourceDefaultDateFormatArrayInput is an input type that accepts KineisLogSourceDefaultDateFormatArray and KineisLogSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `KineisLogSourceDefaultDateFormatArrayInput` via:
//
//	KineisLogSourceDefaultDateFormatArray{ KineisLogSourceDefaultDateFormatArgs{...} }
type KineisLogSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToKineisLogSourceDefaultDateFormatArrayOutput() KineisLogSourceDefaultDateFormatArrayOutput
	ToKineisLogSourceDefaultDateFormatArrayOutputWithContext(context.Context) KineisLogSourceDefaultDateFormatArrayOutput
}

type KineisLogSourceDefaultDateFormatArray []KineisLogSourceDefaultDateFormatInput

func (KineisLogSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KineisLogSourceDefaultDateFormat)(nil)).Elem()
}

func (i KineisLogSourceDefaultDateFormatArray) ToKineisLogSourceDefaultDateFormatArrayOutput() KineisLogSourceDefaultDateFormatArrayOutput {
	return i.ToKineisLogSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i KineisLogSourceDefaultDateFormatArray) ToKineisLogSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) KineisLogSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceDefaultDateFormatArrayOutput)
}

type KineisLogSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (KineisLogSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceDefaultDateFormat)(nil)).Elem()
}

func (o KineisLogSourceDefaultDateFormatOutput) ToKineisLogSourceDefaultDateFormatOutput() KineisLogSourceDefaultDateFormatOutput {
	return o
}

func (o KineisLogSourceDefaultDateFormatOutput) ToKineisLogSourceDefaultDateFormatOutputWithContext(ctx context.Context) KineisLogSourceDefaultDateFormatOutput {
	return o
}

func (o KineisLogSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o KineisLogSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type KineisLogSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (KineisLogSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KineisLogSourceDefaultDateFormat)(nil)).Elem()
}

func (o KineisLogSourceDefaultDateFormatArrayOutput) ToKineisLogSourceDefaultDateFormatArrayOutput() KineisLogSourceDefaultDateFormatArrayOutput {
	return o
}

func (o KineisLogSourceDefaultDateFormatArrayOutput) ToKineisLogSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) KineisLogSourceDefaultDateFormatArrayOutput {
	return o
}

func (o KineisLogSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) KineisLogSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KineisLogSourceDefaultDateFormat {
		return vs[0].([]KineisLogSourceDefaultDateFormat)[vs[1].(int)]
	}).(KineisLogSourceDefaultDateFormatOutput)
}

type KineisLogSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// KineisLogSourceFilterInput is an input type that accepts KineisLogSourceFilterArgs and KineisLogSourceFilterOutput values.
// You can construct a concrete instance of `KineisLogSourceFilterInput` via:
//
//	KineisLogSourceFilterArgs{...}
type KineisLogSourceFilterInput interface {
	pulumi.Input

	ToKineisLogSourceFilterOutput() KineisLogSourceFilterOutput
	ToKineisLogSourceFilterOutputWithContext(context.Context) KineisLogSourceFilterOutput
}

type KineisLogSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (KineisLogSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceFilter)(nil)).Elem()
}

func (i KineisLogSourceFilterArgs) ToKineisLogSourceFilterOutput() KineisLogSourceFilterOutput {
	return i.ToKineisLogSourceFilterOutputWithContext(context.Background())
}

func (i KineisLogSourceFilterArgs) ToKineisLogSourceFilterOutputWithContext(ctx context.Context) KineisLogSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceFilterOutput)
}

// KineisLogSourceFilterArrayInput is an input type that accepts KineisLogSourceFilterArray and KineisLogSourceFilterArrayOutput values.
// You can construct a concrete instance of `KineisLogSourceFilterArrayInput` via:
//
//	KineisLogSourceFilterArray{ KineisLogSourceFilterArgs{...} }
type KineisLogSourceFilterArrayInput interface {
	pulumi.Input

	ToKineisLogSourceFilterArrayOutput() KineisLogSourceFilterArrayOutput
	ToKineisLogSourceFilterArrayOutputWithContext(context.Context) KineisLogSourceFilterArrayOutput
}

type KineisLogSourceFilterArray []KineisLogSourceFilterInput

func (KineisLogSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KineisLogSourceFilter)(nil)).Elem()
}

func (i KineisLogSourceFilterArray) ToKineisLogSourceFilterArrayOutput() KineisLogSourceFilterArrayOutput {
	return i.ToKineisLogSourceFilterArrayOutputWithContext(context.Background())
}

func (i KineisLogSourceFilterArray) ToKineisLogSourceFilterArrayOutputWithContext(ctx context.Context) KineisLogSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceFilterArrayOutput)
}

type KineisLogSourceFilterOutput struct{ *pulumi.OutputState }

func (KineisLogSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourceFilter)(nil)).Elem()
}

func (o KineisLogSourceFilterOutput) ToKineisLogSourceFilterOutput() KineisLogSourceFilterOutput {
	return o
}

func (o KineisLogSourceFilterOutput) ToKineisLogSourceFilterOutputWithContext(ctx context.Context) KineisLogSourceFilterOutput {
	return o
}

func (o KineisLogSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o KineisLogSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o KineisLogSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o KineisLogSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type KineisLogSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (KineisLogSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KineisLogSourceFilter)(nil)).Elem()
}

func (o KineisLogSourceFilterArrayOutput) ToKineisLogSourceFilterArrayOutput() KineisLogSourceFilterArrayOutput {
	return o
}

func (o KineisLogSourceFilterArrayOutput) ToKineisLogSourceFilterArrayOutputWithContext(ctx context.Context) KineisLogSourceFilterArrayOutput {
	return o
}

func (o KineisLogSourceFilterArrayOutput) Index(i pulumi.IntInput) KineisLogSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KineisLogSourceFilter {
		return vs[0].([]KineisLogSourceFilter)[vs[1].(int)]
	}).(KineisLogSourceFilterOutput)
}

type KineisLogSourcePath struct {
	// The name of the bucket. This is needed if using type `KinesisLogPath`.
	BucketName *string `pulumi:"bucketName"`
	// The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
	PathExpression *string `pulumi:"pathExpression"`
	// The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int `pulumi:"scanInterval"`
	// Must be either `KinesisLogPath` or `NoPathExpression`
	Type string `pulumi:"type"`
}

// KineisLogSourcePathInput is an input type that accepts KineisLogSourcePathArgs and KineisLogSourcePathOutput values.
// You can construct a concrete instance of `KineisLogSourcePathInput` via:
//
//	KineisLogSourcePathArgs{...}
type KineisLogSourcePathInput interface {
	pulumi.Input

	ToKineisLogSourcePathOutput() KineisLogSourcePathOutput
	ToKineisLogSourcePathOutputWithContext(context.Context) KineisLogSourcePathOutput
}

type KineisLogSourcePathArgs struct {
	// The name of the bucket. This is needed if using type `KinesisLogPath`.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
	PathExpression pulumi.StringPtrInput `pulumi:"pathExpression"`
	// The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput `pulumi:"scanInterval"`
	// Must be either `KinesisLogPath` or `NoPathExpression`
	Type pulumi.StringInput `pulumi:"type"`
}

func (KineisLogSourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourcePath)(nil)).Elem()
}

func (i KineisLogSourcePathArgs) ToKineisLogSourcePathOutput() KineisLogSourcePathOutput {
	return i.ToKineisLogSourcePathOutputWithContext(context.Background())
}

func (i KineisLogSourcePathArgs) ToKineisLogSourcePathOutputWithContext(ctx context.Context) KineisLogSourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourcePathOutput)
}

func (i KineisLogSourcePathArgs) ToKineisLogSourcePathPtrOutput() KineisLogSourcePathPtrOutput {
	return i.ToKineisLogSourcePathPtrOutputWithContext(context.Background())
}

func (i KineisLogSourcePathArgs) ToKineisLogSourcePathPtrOutputWithContext(ctx context.Context) KineisLogSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourcePathOutput).ToKineisLogSourcePathPtrOutputWithContext(ctx)
}

// KineisLogSourcePathPtrInput is an input type that accepts KineisLogSourcePathArgs, KineisLogSourcePathPtr and KineisLogSourcePathPtrOutput values.
// You can construct a concrete instance of `KineisLogSourcePathPtrInput` via:
//
//	        KineisLogSourcePathArgs{...}
//
//	or:
//
//	        nil
type KineisLogSourcePathPtrInput interface {
	pulumi.Input

	ToKineisLogSourcePathPtrOutput() KineisLogSourcePathPtrOutput
	ToKineisLogSourcePathPtrOutputWithContext(context.Context) KineisLogSourcePathPtrOutput
}

type kineisLogSourcePathPtrType KineisLogSourcePathArgs

func KineisLogSourcePathPtr(v *KineisLogSourcePathArgs) KineisLogSourcePathPtrInput {
	return (*kineisLogSourcePathPtrType)(v)
}

func (*kineisLogSourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSourcePath)(nil)).Elem()
}

func (i *kineisLogSourcePathPtrType) ToKineisLogSourcePathPtrOutput() KineisLogSourcePathPtrOutput {
	return i.ToKineisLogSourcePathPtrOutputWithContext(context.Background())
}

func (i *kineisLogSourcePathPtrType) ToKineisLogSourcePathPtrOutputWithContext(ctx context.Context) KineisLogSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourcePathPtrOutput)
}

type KineisLogSourcePathOutput struct{ *pulumi.OutputState }

func (KineisLogSourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KineisLogSourcePath)(nil)).Elem()
}

func (o KineisLogSourcePathOutput) ToKineisLogSourcePathOutput() KineisLogSourcePathOutput {
	return o
}

func (o KineisLogSourcePathOutput) ToKineisLogSourcePathOutputWithContext(ctx context.Context) KineisLogSourcePathOutput {
	return o
}

func (o KineisLogSourcePathOutput) ToKineisLogSourcePathPtrOutput() KineisLogSourcePathPtrOutput {
	return o.ToKineisLogSourcePathPtrOutputWithContext(context.Background())
}

func (o KineisLogSourcePathOutput) ToKineisLogSourcePathPtrOutputWithContext(ctx context.Context) KineisLogSourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KineisLogSourcePath) *KineisLogSourcePath {
		return &v
	}).(KineisLogSourcePathPtrOutput)
}

// The name of the bucket. This is needed if using type `KinesisLogPath`.
func (o KineisLogSourcePathOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourcePath) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
func (o KineisLogSourcePathOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KineisLogSourcePath) *string { return v.PathExpression }).(pulumi.StringPtrOutput)
}

// The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o KineisLogSourcePathOutput) ScanInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KineisLogSourcePath) *int { return v.ScanInterval }).(pulumi.IntPtrOutput)
}

// Must be either `KinesisLogPath` or `NoPathExpression`
func (o KineisLogSourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KineisLogSourcePath) string { return v.Type }).(pulumi.StringOutput)
}

type KineisLogSourcePathPtrOutput struct{ *pulumi.OutputState }

func (KineisLogSourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSourcePath)(nil)).Elem()
}

func (o KineisLogSourcePathPtrOutput) ToKineisLogSourcePathPtrOutput() KineisLogSourcePathPtrOutput {
	return o
}

func (o KineisLogSourcePathPtrOutput) ToKineisLogSourcePathPtrOutputWithContext(ctx context.Context) KineisLogSourcePathPtrOutput {
	return o
}

func (o KineisLogSourcePathPtrOutput) Elem() KineisLogSourcePathOutput {
	return o.ApplyT(func(v *KineisLogSourcePath) KineisLogSourcePath {
		if v != nil {
			return *v
		}
		var ret KineisLogSourcePath
		return ret
	}).(KineisLogSourcePathOutput)
}

// The name of the bucket. This is needed if using type `KinesisLogPath`.
func (o KineisLogSourcePathPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must includes `http-endpoint-failed/`.
func (o KineisLogSourcePathPtrOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.PathExpression
	}).(pulumi.StringPtrOutput)
}

// The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o KineisLogSourcePathPtrOutput) ScanInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KineisLogSourcePath) *int {
		if v == nil {
			return nil
		}
		return v.ScanInterval
	}).(pulumi.IntPtrOutput)
}

// Must be either `KinesisLogPath` or `NoPathExpression`
func (o KineisLogSourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KineisLogSourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KinesisMetricsSourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey *string `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey *string `pulumi:"secretKey"`
	// This value has to be set to `TagFilters`
	Type string `pulumi:"type"`
}

// KinesisMetricsSourceAuthenticationInput is an input type that accepts KinesisMetricsSourceAuthenticationArgs and KinesisMetricsSourceAuthenticationOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceAuthenticationInput` via:
//
//	KinesisMetricsSourceAuthenticationArgs{...}
type KinesisMetricsSourceAuthenticationInput interface {
	pulumi.Input

	ToKinesisMetricsSourceAuthenticationOutput() KinesisMetricsSourceAuthenticationOutput
	ToKinesisMetricsSourceAuthenticationOutputWithContext(context.Context) KinesisMetricsSourceAuthenticationOutput
}

type KinesisMetricsSourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringInput `pulumi:"type"`
}

func (KinesisMetricsSourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceAuthentication)(nil)).Elem()
}

func (i KinesisMetricsSourceAuthenticationArgs) ToKinesisMetricsSourceAuthenticationOutput() KinesisMetricsSourceAuthenticationOutput {
	return i.ToKinesisMetricsSourceAuthenticationOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceAuthenticationArgs) ToKinesisMetricsSourceAuthenticationOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceAuthenticationOutput)
}

func (i KinesisMetricsSourceAuthenticationArgs) ToKinesisMetricsSourceAuthenticationPtrOutput() KinesisMetricsSourceAuthenticationPtrOutput {
	return i.ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceAuthenticationArgs) ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceAuthenticationOutput).ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(ctx)
}

// KinesisMetricsSourceAuthenticationPtrInput is an input type that accepts KinesisMetricsSourceAuthenticationArgs, KinesisMetricsSourceAuthenticationPtr and KinesisMetricsSourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceAuthenticationPtrInput` via:
//
//	        KinesisMetricsSourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type KinesisMetricsSourceAuthenticationPtrInput interface {
	pulumi.Input

	ToKinesisMetricsSourceAuthenticationPtrOutput() KinesisMetricsSourceAuthenticationPtrOutput
	ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(context.Context) KinesisMetricsSourceAuthenticationPtrOutput
}

type kinesisMetricsSourceAuthenticationPtrType KinesisMetricsSourceAuthenticationArgs

func KinesisMetricsSourceAuthenticationPtr(v *KinesisMetricsSourceAuthenticationArgs) KinesisMetricsSourceAuthenticationPtrInput {
	return (*kinesisMetricsSourceAuthenticationPtrType)(v)
}

func (*kinesisMetricsSourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSourceAuthentication)(nil)).Elem()
}

func (i *kinesisMetricsSourceAuthenticationPtrType) ToKinesisMetricsSourceAuthenticationPtrOutput() KinesisMetricsSourceAuthenticationPtrOutput {
	return i.ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *kinesisMetricsSourceAuthenticationPtrType) ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceAuthenticationPtrOutput)
}

type KinesisMetricsSourceAuthenticationOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceAuthentication)(nil)).Elem()
}

func (o KinesisMetricsSourceAuthenticationOutput) ToKinesisMetricsSourceAuthenticationOutput() KinesisMetricsSourceAuthenticationOutput {
	return o
}

func (o KinesisMetricsSourceAuthenticationOutput) ToKinesisMetricsSourceAuthenticationOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationOutput {
	return o
}

func (o KinesisMetricsSourceAuthenticationOutput) ToKinesisMetricsSourceAuthenticationPtrOutput() KinesisMetricsSourceAuthenticationPtrOutput {
	return o.ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o KinesisMetricsSourceAuthenticationOutput) ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KinesisMetricsSourceAuthentication) *KinesisMetricsSourceAuthentication {
		return &v
	}).(KinesisMetricsSourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o KinesisMetricsSourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o KinesisMetricsSourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o KinesisMetricsSourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// This value has to be set to `TagFilters`
func (o KinesisMetricsSourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type KinesisMetricsSourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSourceAuthentication)(nil)).Elem()
}

func (o KinesisMetricsSourceAuthenticationPtrOutput) ToKinesisMetricsSourceAuthenticationPtrOutput() KinesisMetricsSourceAuthenticationPtrOutput {
	return o
}

func (o KinesisMetricsSourceAuthenticationPtrOutput) ToKinesisMetricsSourceAuthenticationPtrOutputWithContext(ctx context.Context) KinesisMetricsSourceAuthenticationPtrOutput {
	return o
}

func (o KinesisMetricsSourceAuthenticationPtrOutput) Elem() KinesisMetricsSourceAuthenticationOutput {
	return o.ApplyT(func(v *KinesisMetricsSourceAuthentication) KinesisMetricsSourceAuthentication {
		if v != nil {
			return *v
		}
		var ret KinesisMetricsSourceAuthentication
		return ret
	}).(KinesisMetricsSourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o KinesisMetricsSourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o KinesisMetricsSourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o KinesisMetricsSourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// This value has to be set to `TagFilters`
func (o KinesisMetricsSourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KinesisMetricsSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// KinesisMetricsSourceDefaultDateFormatInput is an input type that accepts KinesisMetricsSourceDefaultDateFormatArgs and KinesisMetricsSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceDefaultDateFormatInput` via:
//
//	KinesisMetricsSourceDefaultDateFormatArgs{...}
type KinesisMetricsSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToKinesisMetricsSourceDefaultDateFormatOutput() KinesisMetricsSourceDefaultDateFormatOutput
	ToKinesisMetricsSourceDefaultDateFormatOutputWithContext(context.Context) KinesisMetricsSourceDefaultDateFormatOutput
}

type KinesisMetricsSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (KinesisMetricsSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceDefaultDateFormat)(nil)).Elem()
}

func (i KinesisMetricsSourceDefaultDateFormatArgs) ToKinesisMetricsSourceDefaultDateFormatOutput() KinesisMetricsSourceDefaultDateFormatOutput {
	return i.ToKinesisMetricsSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceDefaultDateFormatArgs) ToKinesisMetricsSourceDefaultDateFormatOutputWithContext(ctx context.Context) KinesisMetricsSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceDefaultDateFormatOutput)
}

// KinesisMetricsSourceDefaultDateFormatArrayInput is an input type that accepts KinesisMetricsSourceDefaultDateFormatArray and KinesisMetricsSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceDefaultDateFormatArrayInput` via:
//
//	KinesisMetricsSourceDefaultDateFormatArray{ KinesisMetricsSourceDefaultDateFormatArgs{...} }
type KinesisMetricsSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToKinesisMetricsSourceDefaultDateFormatArrayOutput() KinesisMetricsSourceDefaultDateFormatArrayOutput
	ToKinesisMetricsSourceDefaultDateFormatArrayOutputWithContext(context.Context) KinesisMetricsSourceDefaultDateFormatArrayOutput
}

type KinesisMetricsSourceDefaultDateFormatArray []KinesisMetricsSourceDefaultDateFormatInput

func (KinesisMetricsSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourceDefaultDateFormat)(nil)).Elem()
}

func (i KinesisMetricsSourceDefaultDateFormatArray) ToKinesisMetricsSourceDefaultDateFormatArrayOutput() KinesisMetricsSourceDefaultDateFormatArrayOutput {
	return i.ToKinesisMetricsSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceDefaultDateFormatArray) ToKinesisMetricsSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceDefaultDateFormatArrayOutput)
}

type KinesisMetricsSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceDefaultDateFormat)(nil)).Elem()
}

func (o KinesisMetricsSourceDefaultDateFormatOutput) ToKinesisMetricsSourceDefaultDateFormatOutput() KinesisMetricsSourceDefaultDateFormatOutput {
	return o
}

func (o KinesisMetricsSourceDefaultDateFormatOutput) ToKinesisMetricsSourceDefaultDateFormatOutputWithContext(ctx context.Context) KinesisMetricsSourceDefaultDateFormatOutput {
	return o
}

func (o KinesisMetricsSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o KinesisMetricsSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type KinesisMetricsSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourceDefaultDateFormat)(nil)).Elem()
}

func (o KinesisMetricsSourceDefaultDateFormatArrayOutput) ToKinesisMetricsSourceDefaultDateFormatArrayOutput() KinesisMetricsSourceDefaultDateFormatArrayOutput {
	return o
}

func (o KinesisMetricsSourceDefaultDateFormatArrayOutput) ToKinesisMetricsSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceDefaultDateFormatArrayOutput {
	return o
}

func (o KinesisMetricsSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) KinesisMetricsSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KinesisMetricsSourceDefaultDateFormat {
		return vs[0].([]KinesisMetricsSourceDefaultDateFormat)[vs[1].(int)]
	}).(KinesisMetricsSourceDefaultDateFormatOutput)
}

type KinesisMetricsSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// KinesisMetricsSourceFilterInput is an input type that accepts KinesisMetricsSourceFilterArgs and KinesisMetricsSourceFilterOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceFilterInput` via:
//
//	KinesisMetricsSourceFilterArgs{...}
type KinesisMetricsSourceFilterInput interface {
	pulumi.Input

	ToKinesisMetricsSourceFilterOutput() KinesisMetricsSourceFilterOutput
	ToKinesisMetricsSourceFilterOutputWithContext(context.Context) KinesisMetricsSourceFilterOutput
}

type KinesisMetricsSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (KinesisMetricsSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceFilter)(nil)).Elem()
}

func (i KinesisMetricsSourceFilterArgs) ToKinesisMetricsSourceFilterOutput() KinesisMetricsSourceFilterOutput {
	return i.ToKinesisMetricsSourceFilterOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceFilterArgs) ToKinesisMetricsSourceFilterOutputWithContext(ctx context.Context) KinesisMetricsSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceFilterOutput)
}

// KinesisMetricsSourceFilterArrayInput is an input type that accepts KinesisMetricsSourceFilterArray and KinesisMetricsSourceFilterArrayOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceFilterArrayInput` via:
//
//	KinesisMetricsSourceFilterArray{ KinesisMetricsSourceFilterArgs{...} }
type KinesisMetricsSourceFilterArrayInput interface {
	pulumi.Input

	ToKinesisMetricsSourceFilterArrayOutput() KinesisMetricsSourceFilterArrayOutput
	ToKinesisMetricsSourceFilterArrayOutputWithContext(context.Context) KinesisMetricsSourceFilterArrayOutput
}

type KinesisMetricsSourceFilterArray []KinesisMetricsSourceFilterInput

func (KinesisMetricsSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourceFilter)(nil)).Elem()
}

func (i KinesisMetricsSourceFilterArray) ToKinesisMetricsSourceFilterArrayOutput() KinesisMetricsSourceFilterArrayOutput {
	return i.ToKinesisMetricsSourceFilterArrayOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceFilterArray) ToKinesisMetricsSourceFilterArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceFilterArrayOutput)
}

type KinesisMetricsSourceFilterOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourceFilter)(nil)).Elem()
}

func (o KinesisMetricsSourceFilterOutput) ToKinesisMetricsSourceFilterOutput() KinesisMetricsSourceFilterOutput {
	return o
}

func (o KinesisMetricsSourceFilterOutput) ToKinesisMetricsSourceFilterOutputWithContext(ctx context.Context) KinesisMetricsSourceFilterOutput {
	return o
}

func (o KinesisMetricsSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o KinesisMetricsSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o KinesisMetricsSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type KinesisMetricsSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourceFilter)(nil)).Elem()
}

func (o KinesisMetricsSourceFilterArrayOutput) ToKinesisMetricsSourceFilterArrayOutput() KinesisMetricsSourceFilterArrayOutput {
	return o
}

func (o KinesisMetricsSourceFilterArrayOutput) ToKinesisMetricsSourceFilterArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceFilterArrayOutput {
	return o
}

func (o KinesisMetricsSourceFilterArrayOutput) Index(i pulumi.IntInput) KinesisMetricsSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KinesisMetricsSourceFilter {
		return vs[0].([]KinesisMetricsSourceFilter)[vs[1].(int)]
	}).(KinesisMetricsSourceFilterOutput)
}

type KinesisMetricsSourcePath struct {
	// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
	TagFilters []KinesisMetricsSourcePathTagFilter `pulumi:"tagFilters"`
	// This value has to be set to `TagFilters`
	Type string `pulumi:"type"`
}

// KinesisMetricsSourcePathInput is an input type that accepts KinesisMetricsSourcePathArgs and KinesisMetricsSourcePathOutput values.
// You can construct a concrete instance of `KinesisMetricsSourcePathInput` via:
//
//	KinesisMetricsSourcePathArgs{...}
type KinesisMetricsSourcePathInput interface {
	pulumi.Input

	ToKinesisMetricsSourcePathOutput() KinesisMetricsSourcePathOutput
	ToKinesisMetricsSourcePathOutputWithContext(context.Context) KinesisMetricsSourcePathOutput
}

type KinesisMetricsSourcePathArgs struct {
	// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
	TagFilters KinesisMetricsSourcePathTagFilterArrayInput `pulumi:"tagFilters"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringInput `pulumi:"type"`
}

func (KinesisMetricsSourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourcePath)(nil)).Elem()
}

func (i KinesisMetricsSourcePathArgs) ToKinesisMetricsSourcePathOutput() KinesisMetricsSourcePathOutput {
	return i.ToKinesisMetricsSourcePathOutputWithContext(context.Background())
}

func (i KinesisMetricsSourcePathArgs) ToKinesisMetricsSourcePathOutputWithContext(ctx context.Context) KinesisMetricsSourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePathOutput)
}

func (i KinesisMetricsSourcePathArgs) ToKinesisMetricsSourcePathPtrOutput() KinesisMetricsSourcePathPtrOutput {
	return i.ToKinesisMetricsSourcePathPtrOutputWithContext(context.Background())
}

func (i KinesisMetricsSourcePathArgs) ToKinesisMetricsSourcePathPtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePathOutput).ToKinesisMetricsSourcePathPtrOutputWithContext(ctx)
}

// KinesisMetricsSourcePathPtrInput is an input type that accepts KinesisMetricsSourcePathArgs, KinesisMetricsSourcePathPtr and KinesisMetricsSourcePathPtrOutput values.
// You can construct a concrete instance of `KinesisMetricsSourcePathPtrInput` via:
//
//	        KinesisMetricsSourcePathArgs{...}
//
//	or:
//
//	        nil
type KinesisMetricsSourcePathPtrInput interface {
	pulumi.Input

	ToKinesisMetricsSourcePathPtrOutput() KinesisMetricsSourcePathPtrOutput
	ToKinesisMetricsSourcePathPtrOutputWithContext(context.Context) KinesisMetricsSourcePathPtrOutput
}

type kinesisMetricsSourcePathPtrType KinesisMetricsSourcePathArgs

func KinesisMetricsSourcePathPtr(v *KinesisMetricsSourcePathArgs) KinesisMetricsSourcePathPtrInput {
	return (*kinesisMetricsSourcePathPtrType)(v)
}

func (*kinesisMetricsSourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSourcePath)(nil)).Elem()
}

func (i *kinesisMetricsSourcePathPtrType) ToKinesisMetricsSourcePathPtrOutput() KinesisMetricsSourcePathPtrOutput {
	return i.ToKinesisMetricsSourcePathPtrOutputWithContext(context.Background())
}

func (i *kinesisMetricsSourcePathPtrType) ToKinesisMetricsSourcePathPtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePathPtrOutput)
}

type KinesisMetricsSourcePathOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourcePath)(nil)).Elem()
}

func (o KinesisMetricsSourcePathOutput) ToKinesisMetricsSourcePathOutput() KinesisMetricsSourcePathOutput {
	return o
}

func (o KinesisMetricsSourcePathOutput) ToKinesisMetricsSourcePathOutputWithContext(ctx context.Context) KinesisMetricsSourcePathOutput {
	return o
}

func (o KinesisMetricsSourcePathOutput) ToKinesisMetricsSourcePathPtrOutput() KinesisMetricsSourcePathPtrOutput {
	return o.ToKinesisMetricsSourcePathPtrOutputWithContext(context.Background())
}

func (o KinesisMetricsSourcePathOutput) ToKinesisMetricsSourcePathPtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KinesisMetricsSourcePath) *KinesisMetricsSourcePath {
		return &v
	}).(KinesisMetricsSourcePathPtrOutput)
}

// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
func (o KinesisMetricsSourcePathOutput) TagFilters() KinesisMetricsSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v KinesisMetricsSourcePath) []KinesisMetricsSourcePathTagFilter { return v.TagFilters }).(KinesisMetricsSourcePathTagFilterArrayOutput)
}

// This value has to be set to `TagFilters`
func (o KinesisMetricsSourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KinesisMetricsSourcePath) string { return v.Type }).(pulumi.StringOutput)
}

type KinesisMetricsSourcePathPtrOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSourcePath)(nil)).Elem()
}

func (o KinesisMetricsSourcePathPtrOutput) ToKinesisMetricsSourcePathPtrOutput() KinesisMetricsSourcePathPtrOutput {
	return o
}

func (o KinesisMetricsSourcePathPtrOutput) ToKinesisMetricsSourcePathPtrOutputWithContext(ctx context.Context) KinesisMetricsSourcePathPtrOutput {
	return o
}

func (o KinesisMetricsSourcePathPtrOutput) Elem() KinesisMetricsSourcePathOutput {
	return o.ApplyT(func(v *KinesisMetricsSourcePath) KinesisMetricsSourcePath {
		if v != nil {
			return *v
		}
		var ret KinesisMetricsSourcePath
		return ret
	}).(KinesisMetricsSourcePathOutput)
}

// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
func (o KinesisMetricsSourcePathPtrOutput) TagFilters() KinesisMetricsSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v *KinesisMetricsSourcePath) []KinesisMetricsSourcePathTagFilter {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(KinesisMetricsSourcePathTagFilterArrayOutput)
}

// This value has to be set to `TagFilters`
func (o KinesisMetricsSourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KinesisMetricsSourcePathTagFilter struct {
	// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
	Namespace *string `pulumi:"namespace"`
	// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
	Tags []string `pulumi:"tags"`
	// This value has to be set to `TagFilters`
	Type *string `pulumi:"type"`
}

// KinesisMetricsSourcePathTagFilterInput is an input type that accepts KinesisMetricsSourcePathTagFilterArgs and KinesisMetricsSourcePathTagFilterOutput values.
// You can construct a concrete instance of `KinesisMetricsSourcePathTagFilterInput` via:
//
//	KinesisMetricsSourcePathTagFilterArgs{...}
type KinesisMetricsSourcePathTagFilterInput interface {
	pulumi.Input

	ToKinesisMetricsSourcePathTagFilterOutput() KinesisMetricsSourcePathTagFilterOutput
	ToKinesisMetricsSourcePathTagFilterOutputWithContext(context.Context) KinesisMetricsSourcePathTagFilterOutput
}

type KinesisMetricsSourcePathTagFilterArgs struct {
	// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KinesisMetricsSourcePathTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourcePathTagFilter)(nil)).Elem()
}

func (i KinesisMetricsSourcePathTagFilterArgs) ToKinesisMetricsSourcePathTagFilterOutput() KinesisMetricsSourcePathTagFilterOutput {
	return i.ToKinesisMetricsSourcePathTagFilterOutputWithContext(context.Background())
}

func (i KinesisMetricsSourcePathTagFilterArgs) ToKinesisMetricsSourcePathTagFilterOutputWithContext(ctx context.Context) KinesisMetricsSourcePathTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePathTagFilterOutput)
}

// KinesisMetricsSourcePathTagFilterArrayInput is an input type that accepts KinesisMetricsSourcePathTagFilterArray and KinesisMetricsSourcePathTagFilterArrayOutput values.
// You can construct a concrete instance of `KinesisMetricsSourcePathTagFilterArrayInput` via:
//
//	KinesisMetricsSourcePathTagFilterArray{ KinesisMetricsSourcePathTagFilterArgs{...} }
type KinesisMetricsSourcePathTagFilterArrayInput interface {
	pulumi.Input

	ToKinesisMetricsSourcePathTagFilterArrayOutput() KinesisMetricsSourcePathTagFilterArrayOutput
	ToKinesisMetricsSourcePathTagFilterArrayOutputWithContext(context.Context) KinesisMetricsSourcePathTagFilterArrayOutput
}

type KinesisMetricsSourcePathTagFilterArray []KinesisMetricsSourcePathTagFilterInput

func (KinesisMetricsSourcePathTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourcePathTagFilter)(nil)).Elem()
}

func (i KinesisMetricsSourcePathTagFilterArray) ToKinesisMetricsSourcePathTagFilterArrayOutput() KinesisMetricsSourcePathTagFilterArrayOutput {
	return i.ToKinesisMetricsSourcePathTagFilterArrayOutputWithContext(context.Background())
}

func (i KinesisMetricsSourcePathTagFilterArray) ToKinesisMetricsSourcePathTagFilterArrayOutputWithContext(ctx context.Context) KinesisMetricsSourcePathTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourcePathTagFilterArrayOutput)
}

type KinesisMetricsSourcePathTagFilterOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourcePathTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KinesisMetricsSourcePathTagFilter)(nil)).Elem()
}

func (o KinesisMetricsSourcePathTagFilterOutput) ToKinesisMetricsSourcePathTagFilterOutput() KinesisMetricsSourcePathTagFilterOutput {
	return o
}

func (o KinesisMetricsSourcePathTagFilterOutput) ToKinesisMetricsSourcePathTagFilterOutputWithContext(ctx context.Context) KinesisMetricsSourcePathTagFilterOutput {
	return o
}

// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
func (o KinesisMetricsSourcePathTagFilterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourcePathTagFilter) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
func (o KinesisMetricsSourcePathTagFilterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KinesisMetricsSourcePathTagFilter) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// This value has to be set to `TagFilters`
func (o KinesisMetricsSourcePathTagFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KinesisMetricsSourcePathTagFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KinesisMetricsSourcePathTagFilterArrayOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourcePathTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KinesisMetricsSourcePathTagFilter)(nil)).Elem()
}

func (o KinesisMetricsSourcePathTagFilterArrayOutput) ToKinesisMetricsSourcePathTagFilterArrayOutput() KinesisMetricsSourcePathTagFilterArrayOutput {
	return o
}

func (o KinesisMetricsSourcePathTagFilterArrayOutput) ToKinesisMetricsSourcePathTagFilterArrayOutputWithContext(ctx context.Context) KinesisMetricsSourcePathTagFilterArrayOutput {
	return o
}

func (o KinesisMetricsSourcePathTagFilterArrayOutput) Index(i pulumi.IntInput) KinesisMetricsSourcePathTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KinesisMetricsSourcePathTagFilter {
		return vs[0].([]KinesisMetricsSourcePathTagFilter)[vs[1].(int)]
	}).(KinesisMetricsSourcePathTagFilterOutput)
}

type LookupTableField struct {
	FieldName string `pulumi:"fieldName"`
	FieldType string `pulumi:"fieldType"`
}

// LookupTableFieldInput is an input type that accepts LookupTableFieldArgs and LookupTableFieldOutput values.
// You can construct a concrete instance of `LookupTableFieldInput` via:
//
//	LookupTableFieldArgs{...}
type LookupTableFieldInput interface {
	pulumi.Input

	ToLookupTableFieldOutput() LookupTableFieldOutput
	ToLookupTableFieldOutputWithContext(context.Context) LookupTableFieldOutput
}

type LookupTableFieldArgs struct {
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	FieldType pulumi.StringInput `pulumi:"fieldType"`
}

func (LookupTableFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableField)(nil)).Elem()
}

func (i LookupTableFieldArgs) ToLookupTableFieldOutput() LookupTableFieldOutput {
	return i.ToLookupTableFieldOutputWithContext(context.Background())
}

func (i LookupTableFieldArgs) ToLookupTableFieldOutputWithContext(ctx context.Context) LookupTableFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupTableFieldOutput)
}

// LookupTableFieldArrayInput is an input type that accepts LookupTableFieldArray and LookupTableFieldArrayOutput values.
// You can construct a concrete instance of `LookupTableFieldArrayInput` via:
//
//	LookupTableFieldArray{ LookupTableFieldArgs{...} }
type LookupTableFieldArrayInput interface {
	pulumi.Input

	ToLookupTableFieldArrayOutput() LookupTableFieldArrayOutput
	ToLookupTableFieldArrayOutputWithContext(context.Context) LookupTableFieldArrayOutput
}

type LookupTableFieldArray []LookupTableFieldInput

func (LookupTableFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupTableField)(nil)).Elem()
}

func (i LookupTableFieldArray) ToLookupTableFieldArrayOutput() LookupTableFieldArrayOutput {
	return i.ToLookupTableFieldArrayOutputWithContext(context.Background())
}

func (i LookupTableFieldArray) ToLookupTableFieldArrayOutputWithContext(ctx context.Context) LookupTableFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupTableFieldArrayOutput)
}

type LookupTableFieldOutput struct{ *pulumi.OutputState }

func (LookupTableFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTableField)(nil)).Elem()
}

func (o LookupTableFieldOutput) ToLookupTableFieldOutput() LookupTableFieldOutput {
	return o
}

func (o LookupTableFieldOutput) ToLookupTableFieldOutputWithContext(ctx context.Context) LookupTableFieldOutput {
	return o
}

func (o LookupTableFieldOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableField) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o LookupTableFieldOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTableField) string { return v.FieldType }).(pulumi.StringOutput)
}

type LookupTableFieldArrayOutput struct{ *pulumi.OutputState }

func (LookupTableFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LookupTableField)(nil)).Elem()
}

func (o LookupTableFieldArrayOutput) ToLookupTableFieldArrayOutput() LookupTableFieldArrayOutput {
	return o
}

func (o LookupTableFieldArrayOutput) ToLookupTableFieldArrayOutputWithContext(ctx context.Context) LookupTableFieldArrayOutput {
	return o
}

func (o LookupTableFieldArrayOutput) Index(i pulumi.IntInput) LookupTableFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LookupTableField {
		return vs[0].([]LookupTableField)[vs[1].(int)]
	}).(LookupTableFieldOutput)
}

type MetadataSourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey *string `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey *string `pulumi:"secretKey"`
	// type of polling source. Only allowed value is `AwsMetadataPath`.
	Type string `pulumi:"type"`
}

// MetadataSourceAuthenticationInput is an input type that accepts MetadataSourceAuthenticationArgs and MetadataSourceAuthenticationOutput values.
// You can construct a concrete instance of `MetadataSourceAuthenticationInput` via:
//
//	MetadataSourceAuthenticationArgs{...}
type MetadataSourceAuthenticationInput interface {
	pulumi.Input

	ToMetadataSourceAuthenticationOutput() MetadataSourceAuthenticationOutput
	ToMetadataSourceAuthenticationOutputWithContext(context.Context) MetadataSourceAuthenticationOutput
}

type MetadataSourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// type of polling source. Only allowed value is `AwsMetadataPath`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetadataSourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceAuthentication)(nil)).Elem()
}

func (i MetadataSourceAuthenticationArgs) ToMetadataSourceAuthenticationOutput() MetadataSourceAuthenticationOutput {
	return i.ToMetadataSourceAuthenticationOutputWithContext(context.Background())
}

func (i MetadataSourceAuthenticationArgs) ToMetadataSourceAuthenticationOutputWithContext(ctx context.Context) MetadataSourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceAuthenticationOutput)
}

func (i MetadataSourceAuthenticationArgs) ToMetadataSourceAuthenticationPtrOutput() MetadataSourceAuthenticationPtrOutput {
	return i.ToMetadataSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i MetadataSourceAuthenticationArgs) ToMetadataSourceAuthenticationPtrOutputWithContext(ctx context.Context) MetadataSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceAuthenticationOutput).ToMetadataSourceAuthenticationPtrOutputWithContext(ctx)
}

// MetadataSourceAuthenticationPtrInput is an input type that accepts MetadataSourceAuthenticationArgs, MetadataSourceAuthenticationPtr and MetadataSourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `MetadataSourceAuthenticationPtrInput` via:
//
//	        MetadataSourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type MetadataSourceAuthenticationPtrInput interface {
	pulumi.Input

	ToMetadataSourceAuthenticationPtrOutput() MetadataSourceAuthenticationPtrOutput
	ToMetadataSourceAuthenticationPtrOutputWithContext(context.Context) MetadataSourceAuthenticationPtrOutput
}

type metadataSourceAuthenticationPtrType MetadataSourceAuthenticationArgs

func MetadataSourceAuthenticationPtr(v *MetadataSourceAuthenticationArgs) MetadataSourceAuthenticationPtrInput {
	return (*metadataSourceAuthenticationPtrType)(v)
}

func (*metadataSourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSourceAuthentication)(nil)).Elem()
}

func (i *metadataSourceAuthenticationPtrType) ToMetadataSourceAuthenticationPtrOutput() MetadataSourceAuthenticationPtrOutput {
	return i.ToMetadataSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *metadataSourceAuthenticationPtrType) ToMetadataSourceAuthenticationPtrOutputWithContext(ctx context.Context) MetadataSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceAuthenticationPtrOutput)
}

type MetadataSourceAuthenticationOutput struct{ *pulumi.OutputState }

func (MetadataSourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceAuthentication)(nil)).Elem()
}

func (o MetadataSourceAuthenticationOutput) ToMetadataSourceAuthenticationOutput() MetadataSourceAuthenticationOutput {
	return o
}

func (o MetadataSourceAuthenticationOutput) ToMetadataSourceAuthenticationOutputWithContext(ctx context.Context) MetadataSourceAuthenticationOutput {
	return o
}

func (o MetadataSourceAuthenticationOutput) ToMetadataSourceAuthenticationPtrOutput() MetadataSourceAuthenticationPtrOutput {
	return o.ToMetadataSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o MetadataSourceAuthenticationOutput) ToMetadataSourceAuthenticationPtrOutputWithContext(ctx context.Context) MetadataSourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataSourceAuthentication) *MetadataSourceAuthentication {
		return &v
	}).(MetadataSourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o MetadataSourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
func (o MetadataSourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o MetadataSourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// type of polling source. Only allowed value is `AwsMetadataPath`.
func (o MetadataSourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type MetadataSourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (MetadataSourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSourceAuthentication)(nil)).Elem()
}

func (o MetadataSourceAuthenticationPtrOutput) ToMetadataSourceAuthenticationPtrOutput() MetadataSourceAuthenticationPtrOutput {
	return o
}

func (o MetadataSourceAuthenticationPtrOutput) ToMetadataSourceAuthenticationPtrOutputWithContext(ctx context.Context) MetadataSourceAuthenticationPtrOutput {
	return o
}

func (o MetadataSourceAuthenticationPtrOutput) Elem() MetadataSourceAuthenticationOutput {
	return o.ApplyT(func(v *MetadataSourceAuthentication) MetadataSourceAuthentication {
		if v != nil {
			return *v
		}
		var ret MetadataSourceAuthentication
		return ret
	}).(MetadataSourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o MetadataSourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
func (o MetadataSourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o MetadataSourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// type of polling source. Only allowed value is `AwsMetadataPath`.
func (o MetadataSourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MetadataSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// MetadataSourceDefaultDateFormatInput is an input type that accepts MetadataSourceDefaultDateFormatArgs and MetadataSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `MetadataSourceDefaultDateFormatInput` via:
//
//	MetadataSourceDefaultDateFormatArgs{...}
type MetadataSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToMetadataSourceDefaultDateFormatOutput() MetadataSourceDefaultDateFormatOutput
	ToMetadataSourceDefaultDateFormatOutputWithContext(context.Context) MetadataSourceDefaultDateFormatOutput
}

type MetadataSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (MetadataSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceDefaultDateFormat)(nil)).Elem()
}

func (i MetadataSourceDefaultDateFormatArgs) ToMetadataSourceDefaultDateFormatOutput() MetadataSourceDefaultDateFormatOutput {
	return i.ToMetadataSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i MetadataSourceDefaultDateFormatArgs) ToMetadataSourceDefaultDateFormatOutputWithContext(ctx context.Context) MetadataSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceDefaultDateFormatOutput)
}

// MetadataSourceDefaultDateFormatArrayInput is an input type that accepts MetadataSourceDefaultDateFormatArray and MetadataSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `MetadataSourceDefaultDateFormatArrayInput` via:
//
//	MetadataSourceDefaultDateFormatArray{ MetadataSourceDefaultDateFormatArgs{...} }
type MetadataSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToMetadataSourceDefaultDateFormatArrayOutput() MetadataSourceDefaultDateFormatArrayOutput
	ToMetadataSourceDefaultDateFormatArrayOutputWithContext(context.Context) MetadataSourceDefaultDateFormatArrayOutput
}

type MetadataSourceDefaultDateFormatArray []MetadataSourceDefaultDateFormatInput

func (MetadataSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataSourceDefaultDateFormat)(nil)).Elem()
}

func (i MetadataSourceDefaultDateFormatArray) ToMetadataSourceDefaultDateFormatArrayOutput() MetadataSourceDefaultDateFormatArrayOutput {
	return i.ToMetadataSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i MetadataSourceDefaultDateFormatArray) ToMetadataSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) MetadataSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceDefaultDateFormatArrayOutput)
}

type MetadataSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (MetadataSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceDefaultDateFormat)(nil)).Elem()
}

func (o MetadataSourceDefaultDateFormatOutput) ToMetadataSourceDefaultDateFormatOutput() MetadataSourceDefaultDateFormatOutput {
	return o
}

func (o MetadataSourceDefaultDateFormatOutput) ToMetadataSourceDefaultDateFormatOutputWithContext(ctx context.Context) MetadataSourceDefaultDateFormatOutput {
	return o
}

func (o MetadataSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o MetadataSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type MetadataSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (MetadataSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataSourceDefaultDateFormat)(nil)).Elem()
}

func (o MetadataSourceDefaultDateFormatArrayOutput) ToMetadataSourceDefaultDateFormatArrayOutput() MetadataSourceDefaultDateFormatArrayOutput {
	return o
}

func (o MetadataSourceDefaultDateFormatArrayOutput) ToMetadataSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) MetadataSourceDefaultDateFormatArrayOutput {
	return o
}

func (o MetadataSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) MetadataSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataSourceDefaultDateFormat {
		return vs[0].([]MetadataSourceDefaultDateFormat)[vs[1].(int)]
	}).(MetadataSourceDefaultDateFormatOutput)
}

type MetadataSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// MetadataSourceFilterInput is an input type that accepts MetadataSourceFilterArgs and MetadataSourceFilterOutput values.
// You can construct a concrete instance of `MetadataSourceFilterInput` via:
//
//	MetadataSourceFilterArgs{...}
type MetadataSourceFilterInput interface {
	pulumi.Input

	ToMetadataSourceFilterOutput() MetadataSourceFilterOutput
	ToMetadataSourceFilterOutputWithContext(context.Context) MetadataSourceFilterOutput
}

type MetadataSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (MetadataSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceFilter)(nil)).Elem()
}

func (i MetadataSourceFilterArgs) ToMetadataSourceFilterOutput() MetadataSourceFilterOutput {
	return i.ToMetadataSourceFilterOutputWithContext(context.Background())
}

func (i MetadataSourceFilterArgs) ToMetadataSourceFilterOutputWithContext(ctx context.Context) MetadataSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceFilterOutput)
}

// MetadataSourceFilterArrayInput is an input type that accepts MetadataSourceFilterArray and MetadataSourceFilterArrayOutput values.
// You can construct a concrete instance of `MetadataSourceFilterArrayInput` via:
//
//	MetadataSourceFilterArray{ MetadataSourceFilterArgs{...} }
type MetadataSourceFilterArrayInput interface {
	pulumi.Input

	ToMetadataSourceFilterArrayOutput() MetadataSourceFilterArrayOutput
	ToMetadataSourceFilterArrayOutputWithContext(context.Context) MetadataSourceFilterArrayOutput
}

type MetadataSourceFilterArray []MetadataSourceFilterInput

func (MetadataSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataSourceFilter)(nil)).Elem()
}

func (i MetadataSourceFilterArray) ToMetadataSourceFilterArrayOutput() MetadataSourceFilterArrayOutput {
	return i.ToMetadataSourceFilterArrayOutputWithContext(context.Background())
}

func (i MetadataSourceFilterArray) ToMetadataSourceFilterArrayOutputWithContext(ctx context.Context) MetadataSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceFilterArrayOutput)
}

type MetadataSourceFilterOutput struct{ *pulumi.OutputState }

func (MetadataSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceFilter)(nil)).Elem()
}

func (o MetadataSourceFilterOutput) ToMetadataSourceFilterOutput() MetadataSourceFilterOutput {
	return o
}

func (o MetadataSourceFilterOutput) ToMetadataSourceFilterOutputWithContext(ctx context.Context) MetadataSourceFilterOutput {
	return o
}

func (o MetadataSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o MetadataSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o MetadataSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o MetadataSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type MetadataSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (MetadataSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataSourceFilter)(nil)).Elem()
}

func (o MetadataSourceFilterArrayOutput) ToMetadataSourceFilterArrayOutput() MetadataSourceFilterArrayOutput {
	return o
}

func (o MetadataSourceFilterArrayOutput) ToMetadataSourceFilterArrayOutputWithContext(ctx context.Context) MetadataSourceFilterArrayOutput {
	return o
}

func (o MetadataSourceFilterArrayOutput) Index(i pulumi.IntInput) MetadataSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataSourceFilter {
		return vs[0].([]MetadataSourceFilter)[vs[1].(int)]
	}).(MetadataSourceFilterOutput)
}

type MetadataSourcePath struct {
	// List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
	LimitToNamespaces []string `pulumi:"limitToNamespaces"`
	// List of Amazon regions.
	LimitToRegions []string `pulumi:"limitToRegions"`
	// Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
	TagFilters []string `pulumi:"tagFilters"`
	// type of polling source. Only allowed value is `AwsMetadataPath`.
	Type string `pulumi:"type"`
}

// MetadataSourcePathInput is an input type that accepts MetadataSourcePathArgs and MetadataSourcePathOutput values.
// You can construct a concrete instance of `MetadataSourcePathInput` via:
//
//	MetadataSourcePathArgs{...}
type MetadataSourcePathInput interface {
	pulumi.Input

	ToMetadataSourcePathOutput() MetadataSourcePathOutput
	ToMetadataSourcePathOutputWithContext(context.Context) MetadataSourcePathOutput
}

type MetadataSourcePathArgs struct {
	// List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
	LimitToNamespaces pulumi.StringArrayInput `pulumi:"limitToNamespaces"`
	// List of Amazon regions.
	LimitToRegions pulumi.StringArrayInput `pulumi:"limitToRegions"`
	// Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
	TagFilters pulumi.StringArrayInput `pulumi:"tagFilters"`
	// type of polling source. Only allowed value is `AwsMetadataPath`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MetadataSourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourcePath)(nil)).Elem()
}

func (i MetadataSourcePathArgs) ToMetadataSourcePathOutput() MetadataSourcePathOutput {
	return i.ToMetadataSourcePathOutputWithContext(context.Background())
}

func (i MetadataSourcePathArgs) ToMetadataSourcePathOutputWithContext(ctx context.Context) MetadataSourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourcePathOutput)
}

func (i MetadataSourcePathArgs) ToMetadataSourcePathPtrOutput() MetadataSourcePathPtrOutput {
	return i.ToMetadataSourcePathPtrOutputWithContext(context.Background())
}

func (i MetadataSourcePathArgs) ToMetadataSourcePathPtrOutputWithContext(ctx context.Context) MetadataSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourcePathOutput).ToMetadataSourcePathPtrOutputWithContext(ctx)
}

// MetadataSourcePathPtrInput is an input type that accepts MetadataSourcePathArgs, MetadataSourcePathPtr and MetadataSourcePathPtrOutput values.
// You can construct a concrete instance of `MetadataSourcePathPtrInput` via:
//
//	        MetadataSourcePathArgs{...}
//
//	or:
//
//	        nil
type MetadataSourcePathPtrInput interface {
	pulumi.Input

	ToMetadataSourcePathPtrOutput() MetadataSourcePathPtrOutput
	ToMetadataSourcePathPtrOutputWithContext(context.Context) MetadataSourcePathPtrOutput
}

type metadataSourcePathPtrType MetadataSourcePathArgs

func MetadataSourcePathPtr(v *MetadataSourcePathArgs) MetadataSourcePathPtrInput {
	return (*metadataSourcePathPtrType)(v)
}

func (*metadataSourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSourcePath)(nil)).Elem()
}

func (i *metadataSourcePathPtrType) ToMetadataSourcePathPtrOutput() MetadataSourcePathPtrOutput {
	return i.ToMetadataSourcePathPtrOutputWithContext(context.Background())
}

func (i *metadataSourcePathPtrType) ToMetadataSourcePathPtrOutputWithContext(ctx context.Context) MetadataSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourcePathPtrOutput)
}

type MetadataSourcePathOutput struct{ *pulumi.OutputState }

func (MetadataSourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourcePath)(nil)).Elem()
}

func (o MetadataSourcePathOutput) ToMetadataSourcePathOutput() MetadataSourcePathOutput {
	return o
}

func (o MetadataSourcePathOutput) ToMetadataSourcePathOutputWithContext(ctx context.Context) MetadataSourcePathOutput {
	return o
}

func (o MetadataSourcePathOutput) ToMetadataSourcePathPtrOutput() MetadataSourcePathPtrOutput {
	return o.ToMetadataSourcePathPtrOutputWithContext(context.Background())
}

func (o MetadataSourcePathOutput) ToMetadataSourcePathPtrOutputWithContext(ctx context.Context) MetadataSourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataSourcePath) *MetadataSourcePath {
		return &v
	}).(MetadataSourcePathPtrOutput)
}

// List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
func (o MetadataSourcePathOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataSourcePath) []string { return v.LimitToNamespaces }).(pulumi.StringArrayOutput)
}

// List of Amazon regions.
func (o MetadataSourcePathOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataSourcePath) []string { return v.LimitToRegions }).(pulumi.StringArrayOutput)
}

// Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
func (o MetadataSourcePathOutput) TagFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataSourcePath) []string { return v.TagFilters }).(pulumi.StringArrayOutput)
}

// type of polling source. Only allowed value is `AwsMetadataPath`.
func (o MetadataSourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourcePath) string { return v.Type }).(pulumi.StringOutput)
}

type MetadataSourcePathPtrOutput struct{ *pulumi.OutputState }

func (MetadataSourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSourcePath)(nil)).Elem()
}

func (o MetadataSourcePathPtrOutput) ToMetadataSourcePathPtrOutput() MetadataSourcePathPtrOutput {
	return o
}

func (o MetadataSourcePathPtrOutput) ToMetadataSourcePathPtrOutputWithContext(ctx context.Context) MetadataSourcePathPtrOutput {
	return o
}

func (o MetadataSourcePathPtrOutput) Elem() MetadataSourcePathOutput {
	return o.ApplyT(func(v *MetadataSourcePath) MetadataSourcePath {
		if v != nil {
			return *v
		}
		var ret MetadataSourcePath
		return ret
	}).(MetadataSourcePathOutput)
}

// List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
func (o MetadataSourcePathPtrOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToNamespaces
	}).(pulumi.StringArrayOutput)
}

// List of Amazon regions.
func (o MetadataSourcePathPtrOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToRegions
	}).(pulumi.StringArrayOutput)
}

// Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
func (o MetadataSourcePathPtrOutput) TagFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(pulumi.StringArrayOutput)
}

// type of polling source. Only allowed value is `AwsMetadataPath`.
func (o MetadataSourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MonitorFolderObjPermission struct {
	// A Set of Permissions. Valid Permission Values:
	Permissions []string `pulumi:"permissions"`
	// A Role ID or the Org ID of the account
	SubjectId string `pulumi:"subjectId"`
	// Valid values:
	SubjectType string `pulumi:"subjectType"`
}

// MonitorFolderObjPermissionInput is an input type that accepts MonitorFolderObjPermissionArgs and MonitorFolderObjPermissionOutput values.
// You can construct a concrete instance of `MonitorFolderObjPermissionInput` via:
//
//	MonitorFolderObjPermissionArgs{...}
type MonitorFolderObjPermissionInput interface {
	pulumi.Input

	ToMonitorFolderObjPermissionOutput() MonitorFolderObjPermissionOutput
	ToMonitorFolderObjPermissionOutputWithContext(context.Context) MonitorFolderObjPermissionOutput
}

type MonitorFolderObjPermissionArgs struct {
	// A Set of Permissions. Valid Permission Values:
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// A Role ID or the Org ID of the account
	SubjectId pulumi.StringInput `pulumi:"subjectId"`
	// Valid values:
	SubjectType pulumi.StringInput `pulumi:"subjectType"`
}

func (MonitorFolderObjPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorFolderObjPermission)(nil)).Elem()
}

func (i MonitorFolderObjPermissionArgs) ToMonitorFolderObjPermissionOutput() MonitorFolderObjPermissionOutput {
	return i.ToMonitorFolderObjPermissionOutputWithContext(context.Background())
}

func (i MonitorFolderObjPermissionArgs) ToMonitorFolderObjPermissionOutputWithContext(ctx context.Context) MonitorFolderObjPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderObjPermissionOutput)
}

// MonitorFolderObjPermissionArrayInput is an input type that accepts MonitorFolderObjPermissionArray and MonitorFolderObjPermissionArrayOutput values.
// You can construct a concrete instance of `MonitorFolderObjPermissionArrayInput` via:
//
//	MonitorFolderObjPermissionArray{ MonitorFolderObjPermissionArgs{...} }
type MonitorFolderObjPermissionArrayInput interface {
	pulumi.Input

	ToMonitorFolderObjPermissionArrayOutput() MonitorFolderObjPermissionArrayOutput
	ToMonitorFolderObjPermissionArrayOutputWithContext(context.Context) MonitorFolderObjPermissionArrayOutput
}

type MonitorFolderObjPermissionArray []MonitorFolderObjPermissionInput

func (MonitorFolderObjPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorFolderObjPermission)(nil)).Elem()
}

func (i MonitorFolderObjPermissionArray) ToMonitorFolderObjPermissionArrayOutput() MonitorFolderObjPermissionArrayOutput {
	return i.ToMonitorFolderObjPermissionArrayOutputWithContext(context.Background())
}

func (i MonitorFolderObjPermissionArray) ToMonitorFolderObjPermissionArrayOutputWithContext(ctx context.Context) MonitorFolderObjPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorFolderObjPermissionArrayOutput)
}

type MonitorFolderObjPermissionOutput struct{ *pulumi.OutputState }

func (MonitorFolderObjPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorFolderObjPermission)(nil)).Elem()
}

func (o MonitorFolderObjPermissionOutput) ToMonitorFolderObjPermissionOutput() MonitorFolderObjPermissionOutput {
	return o
}

func (o MonitorFolderObjPermissionOutput) ToMonitorFolderObjPermissionOutputWithContext(ctx context.Context) MonitorFolderObjPermissionOutput {
	return o
}

// A Set of Permissions. Valid Permission Values:
func (o MonitorFolderObjPermissionOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorFolderObjPermission) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// A Role ID or the Org ID of the account
func (o MonitorFolderObjPermissionOutput) SubjectId() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorFolderObjPermission) string { return v.SubjectId }).(pulumi.StringOutput)
}

// Valid values:
func (o MonitorFolderObjPermissionOutput) SubjectType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorFolderObjPermission) string { return v.SubjectType }).(pulumi.StringOutput)
}

type MonitorFolderObjPermissionArrayOutput struct{ *pulumi.OutputState }

func (MonitorFolderObjPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorFolderObjPermission)(nil)).Elem()
}

func (o MonitorFolderObjPermissionArrayOutput) ToMonitorFolderObjPermissionArrayOutput() MonitorFolderObjPermissionArrayOutput {
	return o
}

func (o MonitorFolderObjPermissionArrayOutput) ToMonitorFolderObjPermissionArrayOutputWithContext(ctx context.Context) MonitorFolderObjPermissionArrayOutput {
	return o
}

func (o MonitorFolderObjPermissionArrayOutput) Index(i pulumi.IntInput) MonitorFolderObjPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorFolderObjPermission {
		return vs[0].([]MonitorFolderObjPermission)[vs[1].(int)]
	}).(MonitorFolderObjPermissionOutput)
}

type MonitorNotification struct {
	Notification       MonitorNotificationNotification `pulumi:"notification"`
	RunForTriggerTypes []string                        `pulumi:"runForTriggerTypes"`
}

// MonitorNotificationInput is an input type that accepts MonitorNotificationArgs and MonitorNotificationOutput values.
// You can construct a concrete instance of `MonitorNotificationInput` via:
//
//	MonitorNotificationArgs{...}
type MonitorNotificationInput interface {
	pulumi.Input

	ToMonitorNotificationOutput() MonitorNotificationOutput
	ToMonitorNotificationOutputWithContext(context.Context) MonitorNotificationOutput
}

type MonitorNotificationArgs struct {
	Notification       MonitorNotificationNotificationInput `pulumi:"notification"`
	RunForTriggerTypes pulumi.StringArrayInput              `pulumi:"runForTriggerTypes"`
}

func (MonitorNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotification)(nil)).Elem()
}

func (i MonitorNotificationArgs) ToMonitorNotificationOutput() MonitorNotificationOutput {
	return i.ToMonitorNotificationOutputWithContext(context.Background())
}

func (i MonitorNotificationArgs) ToMonitorNotificationOutputWithContext(ctx context.Context) MonitorNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationOutput)
}

// MonitorNotificationArrayInput is an input type that accepts MonitorNotificationArray and MonitorNotificationArrayOutput values.
// You can construct a concrete instance of `MonitorNotificationArrayInput` via:
//
//	MonitorNotificationArray{ MonitorNotificationArgs{...} }
type MonitorNotificationArrayInput interface {
	pulumi.Input

	ToMonitorNotificationArrayOutput() MonitorNotificationArrayOutput
	ToMonitorNotificationArrayOutputWithContext(context.Context) MonitorNotificationArrayOutput
}

type MonitorNotificationArray []MonitorNotificationInput

func (MonitorNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorNotification)(nil)).Elem()
}

func (i MonitorNotificationArray) ToMonitorNotificationArrayOutput() MonitorNotificationArrayOutput {
	return i.ToMonitorNotificationArrayOutputWithContext(context.Background())
}

func (i MonitorNotificationArray) ToMonitorNotificationArrayOutputWithContext(ctx context.Context) MonitorNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationArrayOutput)
}

type MonitorNotificationOutput struct{ *pulumi.OutputState }

func (MonitorNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotification)(nil)).Elem()
}

func (o MonitorNotificationOutput) ToMonitorNotificationOutput() MonitorNotificationOutput {
	return o
}

func (o MonitorNotificationOutput) ToMonitorNotificationOutputWithContext(ctx context.Context) MonitorNotificationOutput {
	return o
}

func (o MonitorNotificationOutput) Notification() MonitorNotificationNotificationOutput {
	return o.ApplyT(func(v MonitorNotification) MonitorNotificationNotification { return v.Notification }).(MonitorNotificationNotificationOutput)
}

func (o MonitorNotificationOutput) RunForTriggerTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorNotification) []string { return v.RunForTriggerTypes }).(pulumi.StringArrayOutput)
}

type MonitorNotificationArrayOutput struct{ *pulumi.OutputState }

func (MonitorNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorNotification)(nil)).Elem()
}

func (o MonitorNotificationArrayOutput) ToMonitorNotificationArrayOutput() MonitorNotificationArrayOutput {
	return o
}

func (o MonitorNotificationArrayOutput) ToMonitorNotificationArrayOutputWithContext(ctx context.Context) MonitorNotificationArrayOutput {
	return o
}

func (o MonitorNotificationArrayOutput) Index(i pulumi.IntInput) MonitorNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorNotification {
		return vs[0].([]MonitorNotification)[vs[1].(int)]
	}).(MonitorNotificationOutput)
}

type MonitorNotificationNotification struct {
	// Deprecated: The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.
	ActionType      *string  `pulumi:"actionType"`
	ConnectionId    *string  `pulumi:"connectionId"`
	ConnectionType  *string  `pulumi:"connectionType"`
	MessageBody     *string  `pulumi:"messageBody"`
	PayloadOverride *string  `pulumi:"payloadOverride"`
	Recipients      []string `pulumi:"recipients"`
	Subject         *string  `pulumi:"subject"`
	TimeZone        *string  `pulumi:"timeZone"`
}

// MonitorNotificationNotificationInput is an input type that accepts MonitorNotificationNotificationArgs and MonitorNotificationNotificationOutput values.
// You can construct a concrete instance of `MonitorNotificationNotificationInput` via:
//
//	MonitorNotificationNotificationArgs{...}
type MonitorNotificationNotificationInput interface {
	pulumi.Input

	ToMonitorNotificationNotificationOutput() MonitorNotificationNotificationOutput
	ToMonitorNotificationNotificationOutputWithContext(context.Context) MonitorNotificationNotificationOutput
}

type MonitorNotificationNotificationArgs struct {
	// Deprecated: The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.
	ActionType      pulumi.StringPtrInput   `pulumi:"actionType"`
	ConnectionId    pulumi.StringPtrInput   `pulumi:"connectionId"`
	ConnectionType  pulumi.StringPtrInput   `pulumi:"connectionType"`
	MessageBody     pulumi.StringPtrInput   `pulumi:"messageBody"`
	PayloadOverride pulumi.StringPtrInput   `pulumi:"payloadOverride"`
	Recipients      pulumi.StringArrayInput `pulumi:"recipients"`
	Subject         pulumi.StringPtrInput   `pulumi:"subject"`
	TimeZone        pulumi.StringPtrInput   `pulumi:"timeZone"`
}

func (MonitorNotificationNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotificationNotification)(nil)).Elem()
}

func (i MonitorNotificationNotificationArgs) ToMonitorNotificationNotificationOutput() MonitorNotificationNotificationOutput {
	return i.ToMonitorNotificationNotificationOutputWithContext(context.Background())
}

func (i MonitorNotificationNotificationArgs) ToMonitorNotificationNotificationOutputWithContext(ctx context.Context) MonitorNotificationNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationNotificationOutput)
}

type MonitorNotificationNotificationOutput struct{ *pulumi.OutputState }

func (MonitorNotificationNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotificationNotification)(nil)).Elem()
}

func (o MonitorNotificationNotificationOutput) ToMonitorNotificationNotificationOutput() MonitorNotificationNotificationOutput {
	return o
}

func (o MonitorNotificationNotificationOutput) ToMonitorNotificationNotificationOutputWithContext(ctx context.Context) MonitorNotificationNotificationOutput {
	return o
}

// Deprecated: The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.
func (o MonitorNotificationNotificationOutput) ActionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.ActionType }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) MessageBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.MessageBody }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) PayloadOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.PayloadOverride }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) Recipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) []string { return v.Recipients }).(pulumi.StringArrayOutput)
}

func (o MonitorNotificationNotificationOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

func (o MonitorNotificationNotificationOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorNotificationNotification) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type MonitorObjPermission struct {
	// A Set of Permissions. Valid Permission Values:
	Permissions []string `pulumi:"permissions"`
	// A Role ID or the Org ID of the account
	SubjectId string `pulumi:"subjectId"`
	// Valid values:
	SubjectType string `pulumi:"subjectType"`
}

// MonitorObjPermissionInput is an input type that accepts MonitorObjPermissionArgs and MonitorObjPermissionOutput values.
// You can construct a concrete instance of `MonitorObjPermissionInput` via:
//
//	MonitorObjPermissionArgs{...}
type MonitorObjPermissionInput interface {
	pulumi.Input

	ToMonitorObjPermissionOutput() MonitorObjPermissionOutput
	ToMonitorObjPermissionOutputWithContext(context.Context) MonitorObjPermissionOutput
}

type MonitorObjPermissionArgs struct {
	// A Set of Permissions. Valid Permission Values:
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// A Role ID or the Org ID of the account
	SubjectId pulumi.StringInput `pulumi:"subjectId"`
	// Valid values:
	SubjectType pulumi.StringInput `pulumi:"subjectType"`
}

func (MonitorObjPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorObjPermission)(nil)).Elem()
}

func (i MonitorObjPermissionArgs) ToMonitorObjPermissionOutput() MonitorObjPermissionOutput {
	return i.ToMonitorObjPermissionOutputWithContext(context.Background())
}

func (i MonitorObjPermissionArgs) ToMonitorObjPermissionOutputWithContext(ctx context.Context) MonitorObjPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorObjPermissionOutput)
}

// MonitorObjPermissionArrayInput is an input type that accepts MonitorObjPermissionArray and MonitorObjPermissionArrayOutput values.
// You can construct a concrete instance of `MonitorObjPermissionArrayInput` via:
//
//	MonitorObjPermissionArray{ MonitorObjPermissionArgs{...} }
type MonitorObjPermissionArrayInput interface {
	pulumi.Input

	ToMonitorObjPermissionArrayOutput() MonitorObjPermissionArrayOutput
	ToMonitorObjPermissionArrayOutputWithContext(context.Context) MonitorObjPermissionArrayOutput
}

type MonitorObjPermissionArray []MonitorObjPermissionInput

func (MonitorObjPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorObjPermission)(nil)).Elem()
}

func (i MonitorObjPermissionArray) ToMonitorObjPermissionArrayOutput() MonitorObjPermissionArrayOutput {
	return i.ToMonitorObjPermissionArrayOutputWithContext(context.Background())
}

func (i MonitorObjPermissionArray) ToMonitorObjPermissionArrayOutputWithContext(ctx context.Context) MonitorObjPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorObjPermissionArrayOutput)
}

type MonitorObjPermissionOutput struct{ *pulumi.OutputState }

func (MonitorObjPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorObjPermission)(nil)).Elem()
}

func (o MonitorObjPermissionOutput) ToMonitorObjPermissionOutput() MonitorObjPermissionOutput {
	return o
}

func (o MonitorObjPermissionOutput) ToMonitorObjPermissionOutputWithContext(ctx context.Context) MonitorObjPermissionOutput {
	return o
}

// A Set of Permissions. Valid Permission Values:
func (o MonitorObjPermissionOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorObjPermission) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// A Role ID or the Org ID of the account
func (o MonitorObjPermissionOutput) SubjectId() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorObjPermission) string { return v.SubjectId }).(pulumi.StringOutput)
}

// Valid values:
func (o MonitorObjPermissionOutput) SubjectType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorObjPermission) string { return v.SubjectType }).(pulumi.StringOutput)
}

type MonitorObjPermissionArrayOutput struct{ *pulumi.OutputState }

func (MonitorObjPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorObjPermission)(nil)).Elem()
}

func (o MonitorObjPermissionArrayOutput) ToMonitorObjPermissionArrayOutput() MonitorObjPermissionArrayOutput {
	return o
}

func (o MonitorObjPermissionArrayOutput) ToMonitorObjPermissionArrayOutputWithContext(ctx context.Context) MonitorObjPermissionArrayOutput {
	return o
}

func (o MonitorObjPermissionArrayOutput) Index(i pulumi.IntInput) MonitorObjPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorObjPermission {
		return vs[0].([]MonitorObjPermission)[vs[1].(int)]
	}).(MonitorObjPermissionOutput)
}

type MonitorQuery struct {
	Query string `pulumi:"query"`
	RowId string `pulumi:"rowId"`
}

// MonitorQueryInput is an input type that accepts MonitorQueryArgs and MonitorQueryOutput values.
// You can construct a concrete instance of `MonitorQueryInput` via:
//
//	MonitorQueryArgs{...}
type MonitorQueryInput interface {
	pulumi.Input

	ToMonitorQueryOutput() MonitorQueryOutput
	ToMonitorQueryOutputWithContext(context.Context) MonitorQueryOutput
}

type MonitorQueryArgs struct {
	Query pulumi.StringInput `pulumi:"query"`
	RowId pulumi.StringInput `pulumi:"rowId"`
}

func (MonitorQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorQuery)(nil)).Elem()
}

func (i MonitorQueryArgs) ToMonitorQueryOutput() MonitorQueryOutput {
	return i.ToMonitorQueryOutputWithContext(context.Background())
}

func (i MonitorQueryArgs) ToMonitorQueryOutputWithContext(ctx context.Context) MonitorQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorQueryOutput)
}

// MonitorQueryArrayInput is an input type that accepts MonitorQueryArray and MonitorQueryArrayOutput values.
// You can construct a concrete instance of `MonitorQueryArrayInput` via:
//
//	MonitorQueryArray{ MonitorQueryArgs{...} }
type MonitorQueryArrayInput interface {
	pulumi.Input

	ToMonitorQueryArrayOutput() MonitorQueryArrayOutput
	ToMonitorQueryArrayOutputWithContext(context.Context) MonitorQueryArrayOutput
}

type MonitorQueryArray []MonitorQueryInput

func (MonitorQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorQuery)(nil)).Elem()
}

func (i MonitorQueryArray) ToMonitorQueryArrayOutput() MonitorQueryArrayOutput {
	return i.ToMonitorQueryArrayOutputWithContext(context.Background())
}

func (i MonitorQueryArray) ToMonitorQueryArrayOutputWithContext(ctx context.Context) MonitorQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorQueryArrayOutput)
}

type MonitorQueryOutput struct{ *pulumi.OutputState }

func (MonitorQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorQuery)(nil)).Elem()
}

func (o MonitorQueryOutput) ToMonitorQueryOutput() MonitorQueryOutput {
	return o
}

func (o MonitorQueryOutput) ToMonitorQueryOutputWithContext(ctx context.Context) MonitorQueryOutput {
	return o
}

func (o MonitorQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorQuery) string { return v.Query }).(pulumi.StringOutput)
}

func (o MonitorQueryOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorQuery) string { return v.RowId }).(pulumi.StringOutput)
}

type MonitorQueryArrayOutput struct{ *pulumi.OutputState }

func (MonitorQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorQuery)(nil)).Elem()
}

func (o MonitorQueryArrayOutput) ToMonitorQueryArrayOutput() MonitorQueryArrayOutput {
	return o
}

func (o MonitorQueryArrayOutput) ToMonitorQueryArrayOutputWithContext(ctx context.Context) MonitorQueryArrayOutput {
	return o
}

func (o MonitorQueryArrayOutput) Index(i pulumi.IntInput) MonitorQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorQuery {
		return vs[0].([]MonitorQuery)[vs[1].(int)]
	}).(MonitorQueryOutput)
}

type MonitorTrigger struct {
	DetectionMethod *string `pulumi:"detectionMethod"`
	OccurrenceType  *string `pulumi:"occurrenceType"`
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow *string  `pulumi:"resolutionWindow"`
	Threshold        *float64 `pulumi:"threshold"`
	ThresholdType    *string  `pulumi:"thresholdType"`
	TimeRange        *string  `pulumi:"timeRange"`
	TriggerSource    *string  `pulumi:"triggerSource"`
	TriggerType      *string  `pulumi:"triggerType"`
}

// MonitorTriggerInput is an input type that accepts MonitorTriggerArgs and MonitorTriggerOutput values.
// You can construct a concrete instance of `MonitorTriggerInput` via:
//
//	MonitorTriggerArgs{...}
type MonitorTriggerInput interface {
	pulumi.Input

	ToMonitorTriggerOutput() MonitorTriggerOutput
	ToMonitorTriggerOutputWithContext(context.Context) MonitorTriggerOutput
}

type MonitorTriggerArgs struct {
	DetectionMethod pulumi.StringPtrInput `pulumi:"detectionMethod"`
	OccurrenceType  pulumi.StringPtrInput `pulumi:"occurrenceType"`
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow pulumi.StringPtrInput  `pulumi:"resolutionWindow"`
	Threshold        pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType    pulumi.StringPtrInput  `pulumi:"thresholdType"`
	TimeRange        pulumi.StringPtrInput  `pulumi:"timeRange"`
	TriggerSource    pulumi.StringPtrInput  `pulumi:"triggerSource"`
	TriggerType      pulumi.StringPtrInput  `pulumi:"triggerType"`
}

func (MonitorTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTrigger)(nil)).Elem()
}

func (i MonitorTriggerArgs) ToMonitorTriggerOutput() MonitorTriggerOutput {
	return i.ToMonitorTriggerOutputWithContext(context.Background())
}

func (i MonitorTriggerArgs) ToMonitorTriggerOutputWithContext(ctx context.Context) MonitorTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerOutput)
}

// MonitorTriggerArrayInput is an input type that accepts MonitorTriggerArray and MonitorTriggerArrayOutput values.
// You can construct a concrete instance of `MonitorTriggerArrayInput` via:
//
//	MonitorTriggerArray{ MonitorTriggerArgs{...} }
type MonitorTriggerArrayInput interface {
	pulumi.Input

	ToMonitorTriggerArrayOutput() MonitorTriggerArrayOutput
	ToMonitorTriggerArrayOutputWithContext(context.Context) MonitorTriggerArrayOutput
}

type MonitorTriggerArray []MonitorTriggerInput

func (MonitorTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTrigger)(nil)).Elem()
}

func (i MonitorTriggerArray) ToMonitorTriggerArrayOutput() MonitorTriggerArrayOutput {
	return i.ToMonitorTriggerArrayOutputWithContext(context.Background())
}

func (i MonitorTriggerArray) ToMonitorTriggerArrayOutputWithContext(ctx context.Context) MonitorTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerArrayOutput)
}

type MonitorTriggerOutput struct{ *pulumi.OutputState }

func (MonitorTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTrigger)(nil)).Elem()
}

func (o MonitorTriggerOutput) ToMonitorTriggerOutput() MonitorTriggerOutput {
	return o
}

func (o MonitorTriggerOutput) ToMonitorTriggerOutputWithContext(ctx context.Context) MonitorTriggerOutput {
	return o
}

func (o MonitorTriggerOutput) DetectionMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.DetectionMethod }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.OccurrenceType }).(pulumi.StringPtrOutput)
}

// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
func (o MonitorTriggerOutput) ResolutionWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.ResolutionWindow }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.TimeRange }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerOutput) TriggerSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.TriggerSource }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTrigger) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerArrayOutput struct{ *pulumi.OutputState }

func (MonitorTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitorTrigger)(nil)).Elem()
}

func (o MonitorTriggerArrayOutput) ToMonitorTriggerArrayOutput() MonitorTriggerArrayOutput {
	return o
}

func (o MonitorTriggerArrayOutput) ToMonitorTriggerArrayOutputWithContext(ctx context.Context) MonitorTriggerArrayOutput {
	return o
}

func (o MonitorTriggerArrayOutput) Index(i pulumi.IntInput) MonitorTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitorTrigger {
		return vs[0].([]MonitorTrigger)[vs[1].(int)]
	}).(MonitorTriggerOutput)
}

type MonitorTriggerConditions struct {
	LogsMissingDataCondition    *MonitorTriggerConditionsLogsMissingDataCondition    `pulumi:"logsMissingDataCondition"`
	LogsOutlierCondition        *MonitorTriggerConditionsLogsOutlierCondition        `pulumi:"logsOutlierCondition"`
	LogsStaticCondition         *MonitorTriggerConditionsLogsStaticCondition         `pulumi:"logsStaticCondition"`
	MetricsMissingDataCondition *MonitorTriggerConditionsMetricsMissingDataCondition `pulumi:"metricsMissingDataCondition"`
	MetricsOutlierCondition     *MonitorTriggerConditionsMetricsOutlierCondition     `pulumi:"metricsOutlierCondition"`
	MetricsStaticCondition      *MonitorTriggerConditionsMetricsStaticCondition      `pulumi:"metricsStaticCondition"`
	SloBurnRateCondition        *MonitorTriggerConditionsSloBurnRateCondition        `pulumi:"sloBurnRateCondition"`
	SloSliCondition             *MonitorTriggerConditionsSloSliCondition             `pulumi:"sloSliCondition"`
}

// MonitorTriggerConditionsInput is an input type that accepts MonitorTriggerConditionsArgs and MonitorTriggerConditionsOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsInput` via:
//
//	MonitorTriggerConditionsArgs{...}
type MonitorTriggerConditionsInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsOutput() MonitorTriggerConditionsOutput
	ToMonitorTriggerConditionsOutputWithContext(context.Context) MonitorTriggerConditionsOutput
}

type MonitorTriggerConditionsArgs struct {
	LogsMissingDataCondition    MonitorTriggerConditionsLogsMissingDataConditionPtrInput    `pulumi:"logsMissingDataCondition"`
	LogsOutlierCondition        MonitorTriggerConditionsLogsOutlierConditionPtrInput        `pulumi:"logsOutlierCondition"`
	LogsStaticCondition         MonitorTriggerConditionsLogsStaticConditionPtrInput         `pulumi:"logsStaticCondition"`
	MetricsMissingDataCondition MonitorTriggerConditionsMetricsMissingDataConditionPtrInput `pulumi:"metricsMissingDataCondition"`
	MetricsOutlierCondition     MonitorTriggerConditionsMetricsOutlierConditionPtrInput     `pulumi:"metricsOutlierCondition"`
	MetricsStaticCondition      MonitorTriggerConditionsMetricsStaticConditionPtrInput      `pulumi:"metricsStaticCondition"`
	SloBurnRateCondition        MonitorTriggerConditionsSloBurnRateConditionPtrInput        `pulumi:"sloBurnRateCondition"`
	SloSliCondition             MonitorTriggerConditionsSloSliConditionPtrInput             `pulumi:"sloSliCondition"`
}

func (MonitorTriggerConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditions)(nil)).Elem()
}

func (i MonitorTriggerConditionsArgs) ToMonitorTriggerConditionsOutput() MonitorTriggerConditionsOutput {
	return i.ToMonitorTriggerConditionsOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsArgs) ToMonitorTriggerConditionsOutputWithContext(ctx context.Context) MonitorTriggerConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsOutput)
}

func (i MonitorTriggerConditionsArgs) ToMonitorTriggerConditionsPtrOutput() MonitorTriggerConditionsPtrOutput {
	return i.ToMonitorTriggerConditionsPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsArgs) ToMonitorTriggerConditionsPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsOutput).ToMonitorTriggerConditionsPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsPtrInput is an input type that accepts MonitorTriggerConditionsArgs, MonitorTriggerConditionsPtr and MonitorTriggerConditionsPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsPtrInput` via:
//
//	        MonitorTriggerConditionsArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsPtrOutput() MonitorTriggerConditionsPtrOutput
	ToMonitorTriggerConditionsPtrOutputWithContext(context.Context) MonitorTriggerConditionsPtrOutput
}

type monitorTriggerConditionsPtrType MonitorTriggerConditionsArgs

func MonitorTriggerConditionsPtr(v *MonitorTriggerConditionsArgs) MonitorTriggerConditionsPtrInput {
	return (*monitorTriggerConditionsPtrType)(v)
}

func (*monitorTriggerConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditions)(nil)).Elem()
}

func (i *monitorTriggerConditionsPtrType) ToMonitorTriggerConditionsPtrOutput() MonitorTriggerConditionsPtrOutput {
	return i.ToMonitorTriggerConditionsPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsPtrType) ToMonitorTriggerConditionsPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsPtrOutput)
}

type MonitorTriggerConditionsOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditions)(nil)).Elem()
}

func (o MonitorTriggerConditionsOutput) ToMonitorTriggerConditionsOutput() MonitorTriggerConditionsOutput {
	return o
}

func (o MonitorTriggerConditionsOutput) ToMonitorTriggerConditionsOutputWithContext(ctx context.Context) MonitorTriggerConditionsOutput {
	return o
}

func (o MonitorTriggerConditionsOutput) ToMonitorTriggerConditionsPtrOutput() MonitorTriggerConditionsPtrOutput {
	return o.ToMonitorTriggerConditionsPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsOutput) ToMonitorTriggerConditionsPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditions) *MonitorTriggerConditions {
		return &v
	}).(MonitorTriggerConditionsPtrOutput)
}

func (o MonitorTriggerConditionsOutput) LogsMissingDataCondition() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsLogsMissingDataCondition {
		return v.LogsMissingDataCondition
	}).(MonitorTriggerConditionsLogsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) LogsOutlierCondition() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsLogsOutlierCondition {
		return v.LogsOutlierCondition
	}).(MonitorTriggerConditionsLogsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) LogsStaticCondition() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsLogsStaticCondition {
		return v.LogsStaticCondition
	}).(MonitorTriggerConditionsLogsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) MetricsMissingDataCondition() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsMetricsMissingDataCondition {
		return v.MetricsMissingDataCondition
	}).(MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) MetricsOutlierCondition() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsMetricsOutlierCondition {
		return v.MetricsOutlierCondition
	}).(MonitorTriggerConditionsMetricsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) MetricsStaticCondition() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsMetricsStaticCondition {
		return v.MetricsStaticCondition
	}).(MonitorTriggerConditionsMetricsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) SloBurnRateCondition() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsSloBurnRateCondition {
		return v.SloBurnRateCondition
	}).(MonitorTriggerConditionsSloBurnRateConditionPtrOutput)
}

func (o MonitorTriggerConditionsOutput) SloSliCondition() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditions) *MonitorTriggerConditionsSloSliCondition { return v.SloSliCondition }).(MonitorTriggerConditionsSloSliConditionPtrOutput)
}

type MonitorTriggerConditionsPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditions)(nil)).Elem()
}

func (o MonitorTriggerConditionsPtrOutput) ToMonitorTriggerConditionsPtrOutput() MonitorTriggerConditionsPtrOutput {
	return o
}

func (o MonitorTriggerConditionsPtrOutput) ToMonitorTriggerConditionsPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsPtrOutput {
	return o
}

func (o MonitorTriggerConditionsPtrOutput) Elem() MonitorTriggerConditionsOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) MonitorTriggerConditions {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditions
		return ret
	}).(MonitorTriggerConditionsOutput)
}

func (o MonitorTriggerConditionsPtrOutput) LogsMissingDataCondition() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsLogsMissingDataCondition {
		if v == nil {
			return nil
		}
		return v.LogsMissingDataCondition
	}).(MonitorTriggerConditionsLogsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) LogsOutlierCondition() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsLogsOutlierCondition {
		if v == nil {
			return nil
		}
		return v.LogsOutlierCondition
	}).(MonitorTriggerConditionsLogsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) LogsStaticCondition() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsLogsStaticCondition {
		if v == nil {
			return nil
		}
		return v.LogsStaticCondition
	}).(MonitorTriggerConditionsLogsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) MetricsMissingDataCondition() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsMetricsMissingDataCondition {
		if v == nil {
			return nil
		}
		return v.MetricsMissingDataCondition
	}).(MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) MetricsOutlierCondition() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsMetricsOutlierCondition {
		if v == nil {
			return nil
		}
		return v.MetricsOutlierCondition
	}).(MonitorTriggerConditionsMetricsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) MetricsStaticCondition() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsMetricsStaticCondition {
		if v == nil {
			return nil
		}
		return v.MetricsStaticCondition
	}).(MonitorTriggerConditionsMetricsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) SloBurnRateCondition() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsSloBurnRateCondition {
		if v == nil {
			return nil
		}
		return v.SloBurnRateCondition
	}).(MonitorTriggerConditionsSloBurnRateConditionPtrOutput)
}

func (o MonitorTriggerConditionsPtrOutput) SloSliCondition() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditions) *MonitorTriggerConditionsSloSliCondition {
		if v == nil {
			return nil
		}
		return v.SloSliCondition
	}).(MonitorTriggerConditionsSloSliConditionPtrOutput)
}

type MonitorTriggerConditionsLogsMissingDataCondition struct {
	TimeRange string `pulumi:"timeRange"`
}

// MonitorTriggerConditionsLogsMissingDataConditionInput is an input type that accepts MonitorTriggerConditionsLogsMissingDataConditionArgs and MonitorTriggerConditionsLogsMissingDataConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsMissingDataConditionInput` via:
//
//	MonitorTriggerConditionsLogsMissingDataConditionArgs{...}
type MonitorTriggerConditionsLogsMissingDataConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsMissingDataConditionOutput() MonitorTriggerConditionsLogsMissingDataConditionOutput
	ToMonitorTriggerConditionsLogsMissingDataConditionOutputWithContext(context.Context) MonitorTriggerConditionsLogsMissingDataConditionOutput
}

type MonitorTriggerConditionsLogsMissingDataConditionArgs struct {
	TimeRange pulumi.StringInput `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsLogsMissingDataConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsMissingDataCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsMissingDataConditionArgs) ToMonitorTriggerConditionsLogsMissingDataConditionOutput() MonitorTriggerConditionsLogsMissingDataConditionOutput {
	return i.ToMonitorTriggerConditionsLogsMissingDataConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsMissingDataConditionArgs) ToMonitorTriggerConditionsLogsMissingDataConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsMissingDataConditionOutput)
}

func (i MonitorTriggerConditionsLogsMissingDataConditionArgs) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutput() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsMissingDataConditionArgs) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsMissingDataConditionOutput).ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsMissingDataConditionPtrInput is an input type that accepts MonitorTriggerConditionsLogsMissingDataConditionArgs, MonitorTriggerConditionsLogsMissingDataConditionPtr and MonitorTriggerConditionsLogsMissingDataConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsMissingDataConditionPtrInput` via:
//
//	        MonitorTriggerConditionsLogsMissingDataConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsMissingDataConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutput() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput
	ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsMissingDataConditionPtrOutput
}

type monitorTriggerConditionsLogsMissingDataConditionPtrType MonitorTriggerConditionsLogsMissingDataConditionArgs

func MonitorTriggerConditionsLogsMissingDataConditionPtr(v *MonitorTriggerConditionsLogsMissingDataConditionArgs) MonitorTriggerConditionsLogsMissingDataConditionPtrInput {
	return (*monitorTriggerConditionsLogsMissingDataConditionPtrType)(v)
}

func (*monitorTriggerConditionsLogsMissingDataConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsMissingDataCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsMissingDataConditionPtrType) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutput() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsMissingDataConditionPtrType) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsMissingDataConditionPtrOutput)
}

type MonitorTriggerConditionsLogsMissingDataConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsMissingDataConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsMissingDataCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsMissingDataConditionOutput) ToMonitorTriggerConditionsLogsMissingDataConditionOutput() MonitorTriggerConditionsLogsMissingDataConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsMissingDataConditionOutput) ToMonitorTriggerConditionsLogsMissingDataConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsMissingDataConditionOutput) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutput() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o.ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsMissingDataConditionOutput) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsMissingDataCondition) *MonitorTriggerConditionsLogsMissingDataCondition {
		return &v
	}).(MonitorTriggerConditionsLogsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsLogsMissingDataConditionOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsMissingDataCondition) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsLogsMissingDataConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsMissingDataConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsMissingDataCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsMissingDataConditionPtrOutput) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutput() MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsMissingDataConditionPtrOutput) ToMonitorTriggerConditionsLogsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsMissingDataConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsMissingDataConditionPtrOutput) Elem() MonitorTriggerConditionsLogsMissingDataConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsMissingDataCondition) MonitorTriggerConditionsLogsMissingDataCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsMissingDataCondition
		return ret
	}).(MonitorTriggerConditionsLogsMissingDataConditionOutput)
}

func (o MonitorTriggerConditionsLogsMissingDataConditionPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsMissingDataCondition) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierCondition struct {
	Critical  *MonitorTriggerConditionsLogsOutlierConditionCritical `pulumi:"critical"`
	Direction *string                                               `pulumi:"direction"`
	Field     *string                                               `pulumi:"field"`
	Warning   *MonitorTriggerConditionsLogsOutlierConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsLogsOutlierConditionInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionArgs and MonitorTriggerConditionsLogsOutlierConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionInput` via:
//
//	MonitorTriggerConditionsLogsOutlierConditionArgs{...}
type MonitorTriggerConditionsLogsOutlierConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionOutput() MonitorTriggerConditionsLogsOutlierConditionOutput
	ToMonitorTriggerConditionsLogsOutlierConditionOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionOutput
}

type MonitorTriggerConditionsLogsOutlierConditionArgs struct {
	Critical  MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput `pulumi:"critical"`
	Direction pulumi.StringPtrInput                                        `pulumi:"direction"`
	Field     pulumi.StringPtrInput                                        `pulumi:"field"`
	Warning   MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsLogsOutlierConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsOutlierConditionArgs) ToMonitorTriggerConditionsLogsOutlierConditionOutput() MonitorTriggerConditionsLogsOutlierConditionOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionArgs) ToMonitorTriggerConditionsLogsOutlierConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionOutput)
}

func (i MonitorTriggerConditionsLogsOutlierConditionArgs) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutput() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionArgs) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionOutput).ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsOutlierConditionPtrInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionArgs, MonitorTriggerConditionsLogsOutlierConditionPtr and MonitorTriggerConditionsLogsOutlierConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionPtrInput` via:
//
//	        MonitorTriggerConditionsLogsOutlierConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsOutlierConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionPtrOutput() MonitorTriggerConditionsLogsOutlierConditionPtrOutput
	ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionPtrOutput
}

type monitorTriggerConditionsLogsOutlierConditionPtrType MonitorTriggerConditionsLogsOutlierConditionArgs

func MonitorTriggerConditionsLogsOutlierConditionPtr(v *MonitorTriggerConditionsLogsOutlierConditionArgs) MonitorTriggerConditionsLogsOutlierConditionPtrInput {
	return (*monitorTriggerConditionsLogsOutlierConditionPtrType)(v)
}

func (*monitorTriggerConditionsLogsOutlierConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsOutlierConditionPtrType) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutput() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsOutlierConditionPtrType) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) ToMonitorTriggerConditionsLogsOutlierConditionOutput() MonitorTriggerConditionsLogsOutlierConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) ToMonitorTriggerConditionsLogsOutlierConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutput() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o.ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsOutlierCondition) *MonitorTriggerConditionsLogsOutlierCondition {
		return &v
	}).(MonitorTriggerConditionsLogsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) Critical() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierCondition) *MonitorTriggerConditionsLogsOutlierConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierCondition) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierCondition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionOutput) Warning() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierCondition) *MonitorTriggerConditionsLogsOutlierConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutput() MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) Elem() MonitorTriggerConditionsLogsOutlierConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierCondition) MonitorTriggerConditionsLogsOutlierCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsOutlierCondition
		return ret
	}).(MonitorTriggerConditionsLogsOutlierConditionOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) Critical() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierCondition) *MonitorTriggerConditionsLogsOutlierConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierCondition) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierCondition) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionPtrOutput) Warning() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierCondition) *MonitorTriggerConditionsLogsOutlierConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionCritical struct {
	Consecutive *int     `pulumi:"consecutive"`
	Threshold   *float64 `pulumi:"threshold"`
	Window      *int     `pulumi:"window"`
}

// MonitorTriggerConditionsLogsOutlierConditionCriticalInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionCriticalArgs and MonitorTriggerConditionsLogsOutlierConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionCriticalInput` via:
//
//	MonitorTriggerConditionsLogsOutlierConditionCriticalArgs{...}
type MonitorTriggerConditionsLogsOutlierConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalOutput
	ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalOutput
}

type MonitorTriggerConditionsLogsOutlierConditionCriticalArgs struct {
	Consecutive pulumi.IntPtrInput     `pulumi:"consecutive"`
	Threshold   pulumi.Float64PtrInput `pulumi:"threshold"`
	Window      pulumi.IntPtrInput     `pulumi:"window"`
}

func (MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionCriticalOutput)
}

func (i MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionCriticalOutput).ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionCriticalArgs, MonitorTriggerConditionsLogsOutlierConditionCriticalPtr and MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsLogsOutlierConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput
	ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput
}

type monitorTriggerConditionsLogsOutlierConditionCriticalPtrType MonitorTriggerConditionsLogsOutlierConditionCriticalArgs

func MonitorTriggerConditionsLogsOutlierConditionCriticalPtr(v *MonitorTriggerConditionsLogsOutlierConditionCriticalArgs) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput {
	return (*monitorTriggerConditionsLogsOutlierConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsLogsOutlierConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsOutlierConditionCriticalPtrType) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsOutlierConditionCriticalPtrType) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsOutlierConditionCritical) *MonitorTriggerConditionsLogsOutlierConditionCritical {
		return &v
	}).(MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) Consecutive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionCritical) *int { return v.Consecutive }).(pulumi.IntPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionCritical) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionCritical) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsLogsOutlierConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionCritical) MonitorTriggerConditionsLogsOutlierConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsOutlierConditionCritical
		return ret
	}).(MonitorTriggerConditionsLogsOutlierConditionCriticalOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) Consecutive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive
	}).(pulumi.IntPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionCritical) *int {
		if v == nil {
			return nil
		}
		return v.Window
	}).(pulumi.IntPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionWarning struct {
	Consecutive *int     `pulumi:"consecutive"`
	Threshold   *float64 `pulumi:"threshold"`
	Window      *int     `pulumi:"window"`
}

// MonitorTriggerConditionsLogsOutlierConditionWarningInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionWarningArgs and MonitorTriggerConditionsLogsOutlierConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionWarningInput` via:
//
//	MonitorTriggerConditionsLogsOutlierConditionWarningArgs{...}
type MonitorTriggerConditionsLogsOutlierConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionWarningOutput() MonitorTriggerConditionsLogsOutlierConditionWarningOutput
	ToMonitorTriggerConditionsLogsOutlierConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningOutput
}

type MonitorTriggerConditionsLogsOutlierConditionWarningArgs struct {
	Consecutive pulumi.IntPtrInput     `pulumi:"consecutive"`
	Threshold   pulumi.Float64PtrInput `pulumi:"threshold"`
	Window      pulumi.IntPtrInput     `pulumi:"window"`
}

func (MonitorTriggerConditionsLogsOutlierConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsOutlierConditionWarningArgs) ToMonitorTriggerConditionsLogsOutlierConditionWarningOutput() MonitorTriggerConditionsLogsOutlierConditionWarningOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionWarningArgs) ToMonitorTriggerConditionsLogsOutlierConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionWarningOutput)
}

func (i MonitorTriggerConditionsLogsOutlierConditionWarningArgs) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsOutlierConditionWarningArgs) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionWarningOutput).ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsLogsOutlierConditionWarningArgs, MonitorTriggerConditionsLogsOutlierConditionWarningPtr and MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsLogsOutlierConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput
	ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput
}

type monitorTriggerConditionsLogsOutlierConditionWarningPtrType MonitorTriggerConditionsLogsOutlierConditionWarningArgs

func MonitorTriggerConditionsLogsOutlierConditionWarningPtr(v *MonitorTriggerConditionsLogsOutlierConditionWarningArgs) MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput {
	return (*monitorTriggerConditionsLogsOutlierConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsLogsOutlierConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsOutlierConditionWarningPtrType) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsOutlierConditionWarningPtrType) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningOutput() MonitorTriggerConditionsLogsOutlierConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsOutlierConditionWarning) *MonitorTriggerConditionsLogsOutlierConditionWarning {
		return &v
	}).(MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) Consecutive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionWarning) *int { return v.Consecutive }).(pulumi.IntPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionWarning) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsOutlierConditionWarning) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsOutlierConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) ToMonitorTriggerConditionsLogsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) Elem() MonitorTriggerConditionsLogsOutlierConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionWarning) MonitorTriggerConditionsLogsOutlierConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsOutlierConditionWarning
		return ret
	}).(MonitorTriggerConditionsLogsOutlierConditionWarningOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) Consecutive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive
	}).(pulumi.IntPtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsOutlierConditionWarning) *int {
		if v == nil {
			return nil
		}
		return v.Window
	}).(pulumi.IntPtrOutput)
}

type MonitorTriggerConditionsLogsStaticCondition struct {
	Critical *MonitorTriggerConditionsLogsStaticConditionCritical `pulumi:"critical"`
	Field    *string                                              `pulumi:"field"`
	Warning  *MonitorTriggerConditionsLogsStaticConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsLogsStaticConditionInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionArgs and MonitorTriggerConditionsLogsStaticConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionArgs{...}
type MonitorTriggerConditionsLogsStaticConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionOutput() MonitorTriggerConditionsLogsStaticConditionOutput
	ToMonitorTriggerConditionsLogsStaticConditionOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionOutput
}

type MonitorTriggerConditionsLogsStaticConditionArgs struct {
	Critical MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput `pulumi:"critical"`
	Field    pulumi.StringPtrInput                                       `pulumi:"field"`
	Warning  MonitorTriggerConditionsLogsStaticConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsLogsStaticConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionArgs) ToMonitorTriggerConditionsLogsStaticConditionOutput() MonitorTriggerConditionsLogsStaticConditionOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionArgs) ToMonitorTriggerConditionsLogsStaticConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionArgs) ToMonitorTriggerConditionsLogsStaticConditionPtrOutput() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionArgs) ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionOutput).ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionArgs, MonitorTriggerConditionsLogsStaticConditionPtr and MonitorTriggerConditionsLogsStaticConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionPtrOutput() MonitorTriggerConditionsLogsStaticConditionPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionPtrType MonitorTriggerConditionsLogsStaticConditionArgs

func MonitorTriggerConditionsLogsStaticConditionPtr(v *MonitorTriggerConditionsLogsStaticConditionArgs) MonitorTriggerConditionsLogsStaticConditionPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionPtrType) ToMonitorTriggerConditionsLogsStaticConditionPtrOutput() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionPtrType) ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) ToMonitorTriggerConditionsLogsStaticConditionOutput() MonitorTriggerConditionsLogsStaticConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) ToMonitorTriggerConditionsLogsStaticConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) ToMonitorTriggerConditionsLogsStaticConditionPtrOutput() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticCondition) *MonitorTriggerConditionsLogsStaticCondition {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) Critical() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticCondition) *MonitorTriggerConditionsLogsStaticConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticCondition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionOutput) Warning() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticCondition) *MonitorTriggerConditionsLogsStaticConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionPtrOutput() MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticCondition) MonitorTriggerConditionsLogsStaticCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticCondition
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) Critical() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticCondition) *MonitorTriggerConditionsLogsStaticConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticCondition) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionPtrOutput) Warning() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticCondition) *MonitorTriggerConditionsLogsStaticConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCritical struct {
	Alert      MonitorTriggerConditionsLogsStaticConditionCriticalAlert      `pulumi:"alert"`
	Resolution MonitorTriggerConditionsLogsStaticConditionCriticalResolution `pulumi:"resolution"`
	TimeRange  string                                                        `pulumi:"timeRange"`
}

// MonitorTriggerConditionsLogsStaticConditionCriticalInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalArgs and MonitorTriggerConditionsLogsStaticConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionCriticalArgs{...}
type MonitorTriggerConditionsLogsStaticConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalOutput() MonitorTriggerConditionsLogsStaticConditionCriticalOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalOutput
}

type MonitorTriggerConditionsLogsStaticConditionCriticalArgs struct {
	Alert      MonitorTriggerConditionsLogsStaticConditionCriticalAlertInput      `pulumi:"alert"`
	Resolution MonitorTriggerConditionsLogsStaticConditionCriticalResolutionInput `pulumi:"resolution"`
	TimeRange  pulumi.StringInput                                                 `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsLogsStaticConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalOutput() MonitorTriggerConditionsLogsStaticConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalOutput).ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalArgs, MonitorTriggerConditionsLogsStaticConditionCriticalPtr and MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionCriticalPtrType MonitorTriggerConditionsLogsStaticConditionCriticalArgs

func MonitorTriggerConditionsLogsStaticConditionCriticalPtr(v *MonitorTriggerConditionsLogsStaticConditionCriticalArgs) MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalOutput() MonitorTriggerConditionsLogsStaticConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionCritical) *MonitorTriggerConditionsLogsStaticConditionCritical {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) Alert() MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCritical) MonitorTriggerConditionsLogsStaticConditionCriticalAlert {
		return v.Alert
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) Resolution() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCritical) MonitorTriggerConditionsLogsStaticConditionCriticalResolution {
		return v.Resolution
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCritical) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCritical) MonitorTriggerConditionsLogsStaticConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionCritical
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) Alert() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCritical) *MonitorTriggerConditionsLogsStaticConditionCriticalAlert {
		if v == nil {
			return nil
		}
		return &v.Alert
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) Resolution() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCritical) *MonitorTriggerConditionsLogsStaticConditionCriticalResolution {
		if v == nil {
			return nil
		}
		return &v.Resolution
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCritical) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalAlert struct {
	Threshold     *float64 `pulumi:"threshold"`
	ThresholdType *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsLogsStaticConditionCriticalAlertInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs and MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalAlertInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs{...}
type MonitorTriggerConditionsLogsStaticConditionCriticalAlertInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput
}

type MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs struct {
	Threshold     pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalAlert)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput).ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs, MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtr and MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionCriticalAlertPtrType MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs

func MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtr(v *MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionCriticalAlertPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionCriticalAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCriticalAlert)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalAlertPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalAlertPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionCriticalAlert) *MonitorTriggerConditionsLogsStaticConditionCriticalAlert {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCriticalAlert) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCriticalAlert) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCriticalAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalAlert) MonitorTriggerConditionsLogsStaticConditionCriticalAlert {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionCriticalAlert
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalAlert) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalAlert) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalResolution struct {
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow *string  `pulumi:"resolutionWindow"`
	Threshold        *float64 `pulumi:"threshold"`
	ThresholdType    *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsLogsStaticConditionCriticalResolutionInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs and MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalResolutionInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs{...}
type MonitorTriggerConditionsLogsStaticConditionCriticalResolutionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput
}

type MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs struct {
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow pulumi.StringPtrInput  `pulumi:"resolutionWindow"`
	Threshold        pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType    pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalResolution)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput).ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs, MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtr and MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrType MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs

func MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtr(v *MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCriticalResolution)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrType) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *MonitorTriggerConditionsLogsStaticConditionCriticalResolution {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput)
}

// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ResolutionWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *string {
		return v.ResolutionWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionCriticalResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalResolution) MonitorTriggerConditionsLogsStaticConditionCriticalResolution {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionCriticalResolution
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput)
}

// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) ResolutionWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *string {
		if v == nil {
			return nil
		}
		return v.ResolutionWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionCriticalResolution) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarning struct {
	Alert      MonitorTriggerConditionsLogsStaticConditionWarningAlert      `pulumi:"alert"`
	Resolution MonitorTriggerConditionsLogsStaticConditionWarningResolution `pulumi:"resolution"`
	TimeRange  string                                                       `pulumi:"timeRange"`
}

// MonitorTriggerConditionsLogsStaticConditionWarningInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningArgs and MonitorTriggerConditionsLogsStaticConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionWarningArgs{...}
type MonitorTriggerConditionsLogsStaticConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningOutput() MonitorTriggerConditionsLogsStaticConditionWarningOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningOutput
}

type MonitorTriggerConditionsLogsStaticConditionWarningArgs struct {
	Alert      MonitorTriggerConditionsLogsStaticConditionWarningAlertInput      `pulumi:"alert"`
	Resolution MonitorTriggerConditionsLogsStaticConditionWarningResolutionInput `pulumi:"resolution"`
	TimeRange  pulumi.StringInput                                                `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsLogsStaticConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningOutput() MonitorTriggerConditionsLogsStaticConditionWarningOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningOutput).ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningArgs, MonitorTriggerConditionsLogsStaticConditionWarningPtr and MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionWarningPtrType MonitorTriggerConditionsLogsStaticConditionWarningArgs

func MonitorTriggerConditionsLogsStaticConditionWarningPtr(v *MonitorTriggerConditionsLogsStaticConditionWarningArgs) MonitorTriggerConditionsLogsStaticConditionWarningPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningOutput() MonitorTriggerConditionsLogsStaticConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionWarning) *MonitorTriggerConditionsLogsStaticConditionWarning {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) Alert() MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarning) MonitorTriggerConditionsLogsStaticConditionWarningAlert {
		return v.Alert
	}).(MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) Resolution() MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarning) MonitorTriggerConditionsLogsStaticConditionWarningResolution {
		return v.Resolution
	}).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarning) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarning) MonitorTriggerConditionsLogsStaticConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionWarning
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionWarningOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) Alert() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarning) *MonitorTriggerConditionsLogsStaticConditionWarningAlert {
		if v == nil {
			return nil
		}
		return &v.Alert
	}).(MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) Resolution() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarning) *MonitorTriggerConditionsLogsStaticConditionWarningResolution {
		if v == nil {
			return nil
		}
		return &v.Resolution
	}).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarning) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningAlert struct {
	Threshold     *float64 `pulumi:"threshold"`
	ThresholdType *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsLogsStaticConditionWarningAlertInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs and MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningAlertInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs{...}
type MonitorTriggerConditionsLogsStaticConditionWarningAlertInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput
}

type MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs struct {
	Threshold     pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningAlert)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput).ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs, MonitorTriggerConditionsLogsStaticConditionWarningAlertPtr and MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionWarningAlertPtrType MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs

func MonitorTriggerConditionsLogsStaticConditionWarningAlertPtr(v *MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionWarningAlertPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionWarningAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarningAlert)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningAlertPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningAlertPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionWarningAlert) *MonitorTriggerConditionsLogsStaticConditionWarningAlert {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarningAlert) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarningAlert) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarningAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningAlert) MonitorTriggerConditionsLogsStaticConditionWarningAlert {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionWarningAlert
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningAlert) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningAlert) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningResolution struct {
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow *string  `pulumi:"resolutionWindow"`
	Threshold        *float64 `pulumi:"threshold"`
	ThresholdType    *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsLogsStaticConditionWarningResolutionInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs and MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningResolutionInput` via:
//
//	MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs{...}
type MonitorTriggerConditionsLogsStaticConditionWarningResolutionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput
}

type MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs struct {
	// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
	ResolutionWindow pulumi.StringPtrInput  `pulumi:"resolutionWindow"`
	Threshold        pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType    pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningResolution)(nil)).Elem()
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput)
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput).ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrInput is an input type that accepts MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs, MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtr and MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrInput` via:
//
//	        MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput
	ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput
}

type monitorTriggerConditionsLogsStaticConditionWarningResolutionPtrType MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs

func MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtr(v *MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrInput {
	return (*monitorTriggerConditionsLogsStaticConditionWarningResolutionPtrType)(v)
}

func (*monitorTriggerConditionsLogsStaticConditionWarningResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarningResolution)(nil)).Elem()
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningResolutionPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsLogsStaticConditionWarningResolutionPtrType) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return o.ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsLogsStaticConditionWarningResolution) *MonitorTriggerConditionsLogsStaticConditionWarningResolution {
		return &v
	}).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput)
}

// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ResolutionWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarningResolution) *string {
		return v.ResolutionWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarningResolution) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsLogsStaticConditionWarningResolution) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsLogsStaticConditionWarningResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) ToMonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) Elem() MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningResolution) MonitorTriggerConditionsLogsStaticConditionWarningResolution {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsLogsStaticConditionWarningResolution
		return ret
	}).(MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput)
}

// The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) ResolutionWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningResolution) *string {
		if v == nil {
			return nil
		}
		return v.ResolutionWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningResolution) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsLogsStaticConditionWarningResolution) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsMissingDataCondition struct {
	TimeRange     string `pulumi:"timeRange"`
	TriggerSource string `pulumi:"triggerSource"`
}

// MonitorTriggerConditionsMetricsMissingDataConditionInput is an input type that accepts MonitorTriggerConditionsMetricsMissingDataConditionArgs and MonitorTriggerConditionsMetricsMissingDataConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsMissingDataConditionInput` via:
//
//	MonitorTriggerConditionsMetricsMissingDataConditionArgs{...}
type MonitorTriggerConditionsMetricsMissingDataConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsMissingDataConditionOutput() MonitorTriggerConditionsMetricsMissingDataConditionOutput
	ToMonitorTriggerConditionsMetricsMissingDataConditionOutputWithContext(context.Context) MonitorTriggerConditionsMetricsMissingDataConditionOutput
}

type MonitorTriggerConditionsMetricsMissingDataConditionArgs struct {
	TimeRange     pulumi.StringInput `pulumi:"timeRange"`
	TriggerSource pulumi.StringInput `pulumi:"triggerSource"`
}

func (MonitorTriggerConditionsMetricsMissingDataConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsMissingDataCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsMissingDataConditionArgs) ToMonitorTriggerConditionsMetricsMissingDataConditionOutput() MonitorTriggerConditionsMetricsMissingDataConditionOutput {
	return i.ToMonitorTriggerConditionsMetricsMissingDataConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsMissingDataConditionArgs) ToMonitorTriggerConditionsMetricsMissingDataConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsMissingDataConditionOutput)
}

func (i MonitorTriggerConditionsMetricsMissingDataConditionArgs) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutput() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsMissingDataConditionArgs) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsMissingDataConditionOutput).ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsMissingDataConditionPtrInput is an input type that accepts MonitorTriggerConditionsMetricsMissingDataConditionArgs, MonitorTriggerConditionsMetricsMissingDataConditionPtr and MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsMissingDataConditionPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsMissingDataConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsMissingDataConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutput() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput
	ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput
}

type monitorTriggerConditionsMetricsMissingDataConditionPtrType MonitorTriggerConditionsMetricsMissingDataConditionArgs

func MonitorTriggerConditionsMetricsMissingDataConditionPtr(v *MonitorTriggerConditionsMetricsMissingDataConditionArgs) MonitorTriggerConditionsMetricsMissingDataConditionPtrInput {
	return (*monitorTriggerConditionsMetricsMissingDataConditionPtrType)(v)
}

func (*monitorTriggerConditionsMetricsMissingDataConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsMissingDataCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsMissingDataConditionPtrType) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutput() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsMissingDataConditionPtrType) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput)
}

type MonitorTriggerConditionsMetricsMissingDataConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsMissingDataConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsMissingDataCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionOutput() MonitorTriggerConditionsMetricsMissingDataConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutput() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsMissingDataCondition) *MonitorTriggerConditionsMetricsMissingDataCondition {
		return &v
	}).(MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsMissingDataCondition) string { return v.TimeRange }).(pulumi.StringOutput)
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionOutput) TriggerSource() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsMissingDataCondition) string { return v.TriggerSource }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsMissingDataCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutput() MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) ToMonitorTriggerConditionsMetricsMissingDataConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) Elem() MonitorTriggerConditionsMetricsMissingDataConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsMissingDataCondition) MonitorTriggerConditionsMetricsMissingDataCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsMissingDataCondition
		return ret
	}).(MonitorTriggerConditionsMetricsMissingDataConditionOutput)
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsMissingDataCondition) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput) TriggerSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsMissingDataCondition) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerSource
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierCondition struct {
	Critical  *MonitorTriggerConditionsMetricsOutlierConditionCritical `pulumi:"critical"`
	Direction *string                                                  `pulumi:"direction"`
	Warning   *MonitorTriggerConditionsMetricsOutlierConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsMetricsOutlierConditionInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionArgs and MonitorTriggerConditionsMetricsOutlierConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionInput` via:
//
//	MonitorTriggerConditionsMetricsOutlierConditionArgs{...}
type MonitorTriggerConditionsMetricsOutlierConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionOutput() MonitorTriggerConditionsMetricsOutlierConditionOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionOutput
}

type MonitorTriggerConditionsMetricsOutlierConditionArgs struct {
	Critical  MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput `pulumi:"critical"`
	Direction pulumi.StringPtrInput                                           `pulumi:"direction"`
	Warning   MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsMetricsOutlierConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsOutlierConditionArgs) ToMonitorTriggerConditionsMetricsOutlierConditionOutput() MonitorTriggerConditionsMetricsOutlierConditionOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionArgs) ToMonitorTriggerConditionsMetricsOutlierConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionOutput)
}

func (i MonitorTriggerConditionsMetricsOutlierConditionArgs) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionArgs) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionOutput).ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsOutlierConditionPtrInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionArgs, MonitorTriggerConditionsMetricsOutlierConditionPtr and MonitorTriggerConditionsMetricsOutlierConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsOutlierConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsOutlierConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionPtrOutput
}

type monitorTriggerConditionsMetricsOutlierConditionPtrType MonitorTriggerConditionsMetricsOutlierConditionArgs

func MonitorTriggerConditionsMetricsOutlierConditionPtr(v *MonitorTriggerConditionsMetricsOutlierConditionArgs) MonitorTriggerConditionsMetricsOutlierConditionPtrInput {
	return (*monitorTriggerConditionsMetricsOutlierConditionPtrType)(v)
}

func (*monitorTriggerConditionsMetricsOutlierConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsOutlierConditionPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsOutlierConditionPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) ToMonitorTriggerConditionsMetricsOutlierConditionOutput() MonitorTriggerConditionsMetricsOutlierConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) ToMonitorTriggerConditionsMetricsOutlierConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsOutlierCondition) *MonitorTriggerConditionsMetricsOutlierCondition {
		return &v
	}).(MonitorTriggerConditionsMetricsOutlierConditionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) Critical() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierCondition) *MonitorTriggerConditionsMetricsOutlierConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierCondition) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionOutput) Warning() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierCondition) *MonitorTriggerConditionsMetricsOutlierConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) Elem() MonitorTriggerConditionsMetricsOutlierConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierCondition) MonitorTriggerConditionsMetricsOutlierCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsOutlierCondition
		return ret
	}).(MonitorTriggerConditionsMetricsOutlierConditionOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) Critical() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierCondition) *MonitorTriggerConditionsMetricsOutlierConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierCondition) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionPtrOutput) Warning() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierCondition) *MonitorTriggerConditionsMetricsOutlierConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionCritical struct {
	BaselineWindow *string  `pulumi:"baselineWindow"`
	Threshold      *float64 `pulumi:"threshold"`
}

// MonitorTriggerConditionsMetricsOutlierConditionCriticalInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs and MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionCriticalInput` via:
//
//	MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs{...}
type MonitorTriggerConditionsMetricsOutlierConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput
}

type MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs struct {
	BaselineWindow pulumi.StringPtrInput  `pulumi:"baselineWindow"`
	Threshold      pulumi.Float64PtrInput `pulumi:"threshold"`
}

func (MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput)
}

func (i MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput).ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs, MonitorTriggerConditionsMetricsOutlierConditionCriticalPtr and MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput
}

type monitorTriggerConditionsMetricsOutlierConditionCriticalPtrType MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs

func MonitorTriggerConditionsMetricsOutlierConditionCriticalPtr(v *MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput {
	return (*monitorTriggerConditionsMetricsOutlierConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsMetricsOutlierConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsOutlierConditionCriticalPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsOutlierConditionCriticalPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsOutlierConditionCritical) *MonitorTriggerConditionsMetricsOutlierConditionCritical {
		return &v
	}).(MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) BaselineWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierConditionCritical) *string { return v.BaselineWindow }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierConditionCritical) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionCritical) MonitorTriggerConditionsMetricsOutlierConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsOutlierConditionCritical
		return ret
	}).(MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) BaselineWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionCritical) *string {
		if v == nil {
			return nil
		}
		return v.BaselineWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionWarning struct {
	BaselineWindow *string  `pulumi:"baselineWindow"`
	Threshold      *float64 `pulumi:"threshold"`
}

// MonitorTriggerConditionsMetricsOutlierConditionWarningInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionWarningArgs and MonitorTriggerConditionsMetricsOutlierConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionWarningInput` via:
//
//	MonitorTriggerConditionsMetricsOutlierConditionWarningArgs{...}
type MonitorTriggerConditionsMetricsOutlierConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningOutput
}

type MonitorTriggerConditionsMetricsOutlierConditionWarningArgs struct {
	BaselineWindow pulumi.StringPtrInput  `pulumi:"baselineWindow"`
	Threshold      pulumi.Float64PtrInput `pulumi:"threshold"`
}

func (MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionWarningOutput)
}

func (i MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionWarningOutput).ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsMetricsOutlierConditionWarningArgs, MonitorTriggerConditionsMetricsOutlierConditionWarningPtr and MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsOutlierConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput
	ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput
}

type monitorTriggerConditionsMetricsOutlierConditionWarningPtrType MonitorTriggerConditionsMetricsOutlierConditionWarningArgs

func MonitorTriggerConditionsMetricsOutlierConditionWarningPtr(v *MonitorTriggerConditionsMetricsOutlierConditionWarningArgs) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput {
	return (*monitorTriggerConditionsMetricsOutlierConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsMetricsOutlierConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsOutlierConditionWarningPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsOutlierConditionWarningPtrType) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsOutlierConditionWarning) *MonitorTriggerConditionsMetricsOutlierConditionWarning {
		return &v
	}).(MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) BaselineWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierConditionWarning) *string { return v.BaselineWindow }).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsOutlierConditionWarning) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

type MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsOutlierConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput() MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) ToMonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) Elem() MonitorTriggerConditionsMetricsOutlierConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionWarning) MonitorTriggerConditionsMetricsOutlierConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsOutlierConditionWarning
		return ret
	}).(MonitorTriggerConditionsMetricsOutlierConditionWarningOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) BaselineWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionWarning) *string {
		if v == nil {
			return nil
		}
		return v.BaselineWindow
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsOutlierConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type MonitorTriggerConditionsMetricsStaticCondition struct {
	Critical *MonitorTriggerConditionsMetricsStaticConditionCritical `pulumi:"critical"`
	Warning  *MonitorTriggerConditionsMetricsStaticConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsMetricsStaticConditionInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionArgs and MonitorTriggerConditionsMetricsStaticConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionOutput() MonitorTriggerConditionsMetricsStaticConditionOutput
	ToMonitorTriggerConditionsMetricsStaticConditionOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionOutput
}

type MonitorTriggerConditionsMetricsStaticConditionArgs struct {
	Critical MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput `pulumi:"critical"`
	Warning  MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsMetricsStaticConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionArgs) ToMonitorTriggerConditionsMetricsStaticConditionOutput() MonitorTriggerConditionsMetricsStaticConditionOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionArgs) ToMonitorTriggerConditionsMetricsStaticConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionArgs) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionArgs) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionOutput).ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionArgs, MonitorTriggerConditionsMetricsStaticConditionPtr and MonitorTriggerConditionsMetricsStaticConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionPtrType MonitorTriggerConditionsMetricsStaticConditionArgs

func MonitorTriggerConditionsMetricsStaticConditionPtr(v *MonitorTriggerConditionsMetricsStaticConditionArgs) MonitorTriggerConditionsMetricsStaticConditionPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) ToMonitorTriggerConditionsMetricsStaticConditionOutput() MonitorTriggerConditionsMetricsStaticConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) ToMonitorTriggerConditionsMetricsStaticConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticCondition) *MonitorTriggerConditionsMetricsStaticCondition {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) Critical() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticCondition) *MonitorTriggerConditionsMetricsStaticConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionOutput) Warning() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticCondition) *MonitorTriggerConditionsMetricsStaticConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticCondition) MonitorTriggerConditionsMetricsStaticCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticCondition
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionPtrOutput) Critical() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticCondition) *MonitorTriggerConditionsMetricsStaticConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionPtrOutput) Warning() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticCondition) *MonitorTriggerConditionsMetricsStaticConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCritical struct {
	Alert          MonitorTriggerConditionsMetricsStaticConditionCriticalAlert      `pulumi:"alert"`
	OccurrenceType string                                                           `pulumi:"occurrenceType"`
	Resolution     MonitorTriggerConditionsMetricsStaticConditionCriticalResolution `pulumi:"resolution"`
	TimeRange      string                                                           `pulumi:"timeRange"`
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalArgs and MonitorTriggerConditionsMetricsStaticConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionCriticalArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalOutput
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalArgs struct {
	Alert          MonitorTriggerConditionsMetricsStaticConditionCriticalAlertInput      `pulumi:"alert"`
	OccurrenceType pulumi.StringInput                                                    `pulumi:"occurrenceType"`
	Resolution     MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionInput `pulumi:"resolution"`
	TimeRange      pulumi.StringInput                                                    `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalOutput).ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalArgs, MonitorTriggerConditionsMetricsStaticConditionCriticalPtr and MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionCriticalPtrType MonitorTriggerConditionsMetricsStaticConditionCriticalArgs

func MonitorTriggerConditionsMetricsStaticConditionCriticalPtr(v *MonitorTriggerConditionsMetricsStaticConditionCriticalArgs) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionCritical) *MonitorTriggerConditionsMetricsStaticConditionCritical {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) Alert() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCritical) MonitorTriggerConditionsMetricsStaticConditionCriticalAlert {
		return v.Alert
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) OccurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCritical) string { return v.OccurrenceType }).(pulumi.StringOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) Resolution() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCritical) MonitorTriggerConditionsMetricsStaticConditionCriticalResolution {
		return v.Resolution
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCritical) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCritical) MonitorTriggerConditionsMetricsStaticConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionCritical
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) Alert() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCritical) *MonitorTriggerConditionsMetricsStaticConditionCriticalAlert {
		if v == nil {
			return nil
		}
		return &v.Alert
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCritical) *string {
		if v == nil {
			return nil
		}
		return &v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) Resolution() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCritical) *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution {
		if v == nil {
			return nil
		}
		return &v.Resolution
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCritical) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalAlert struct {
	Threshold     *float64 `pulumi:"threshold"`
	ThresholdType *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalAlertInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs and MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalAlertInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionCriticalAlertInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs struct {
	Threshold     pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalAlert)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput).ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs, MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtr and MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrType MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs

func MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtr(v *MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCriticalAlert)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) *MonitorTriggerConditionsMetricsStaticConditionCriticalAlert {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCriticalAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) MonitorTriggerConditionsMetricsStaticConditionCriticalAlert {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionCriticalAlert
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalAlert) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalResolution struct {
	OccurrenceType *string  `pulumi:"occurrenceType"`
	Threshold      *float64 `pulumi:"threshold"`
	ThresholdType  *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs and MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs struct {
	OccurrenceType pulumi.StringPtrInput  `pulumi:"occurrenceType"`
	Threshold      pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType  pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalResolution)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput).ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs, MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtr and MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrType MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs

func MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtr(v *MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCriticalResolution)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *string {
		return v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *string {
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionCriticalResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) MonitorTriggerConditionsMetricsStaticConditionCriticalResolution {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionCriticalResolution
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *string {
		if v == nil {
			return nil
		}
		return v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionCriticalResolution) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarning struct {
	Alert          MonitorTriggerConditionsMetricsStaticConditionWarningAlert      `pulumi:"alert"`
	OccurrenceType string                                                          `pulumi:"occurrenceType"`
	Resolution     MonitorTriggerConditionsMetricsStaticConditionWarningResolution `pulumi:"resolution"`
	TimeRange      string                                                          `pulumi:"timeRange"`
}

// MonitorTriggerConditionsMetricsStaticConditionWarningInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningArgs and MonitorTriggerConditionsMetricsStaticConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionWarningArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningOutput() MonitorTriggerConditionsMetricsStaticConditionWarningOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningOutput
}

type MonitorTriggerConditionsMetricsStaticConditionWarningArgs struct {
	Alert          MonitorTriggerConditionsMetricsStaticConditionWarningAlertInput      `pulumi:"alert"`
	OccurrenceType pulumi.StringInput                                                   `pulumi:"occurrenceType"`
	Resolution     MonitorTriggerConditionsMetricsStaticConditionWarningResolutionInput `pulumi:"resolution"`
	TimeRange      pulumi.StringInput                                                   `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsMetricsStaticConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningOutput() MonitorTriggerConditionsMetricsStaticConditionWarningOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningOutput).ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningArgs, MonitorTriggerConditionsMetricsStaticConditionWarningPtr and MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionWarningPtrType MonitorTriggerConditionsMetricsStaticConditionWarningArgs

func MonitorTriggerConditionsMetricsStaticConditionWarningPtr(v *MonitorTriggerConditionsMetricsStaticConditionWarningArgs) MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningOutput() MonitorTriggerConditionsMetricsStaticConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionWarning) *MonitorTriggerConditionsMetricsStaticConditionWarning {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) Alert() MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarning) MonitorTriggerConditionsMetricsStaticConditionWarningAlert {
		return v.Alert
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) OccurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarning) string { return v.OccurrenceType }).(pulumi.StringOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) Resolution() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarning) MonitorTriggerConditionsMetricsStaticConditionWarningResolution {
		return v.Resolution
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarning) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarning) MonitorTriggerConditionsMetricsStaticConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionWarning
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) Alert() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarning) *MonitorTriggerConditionsMetricsStaticConditionWarningAlert {
		if v == nil {
			return nil
		}
		return &v.Alert
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarning) *string {
		if v == nil {
			return nil
		}
		return &v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) Resolution() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarning) *MonitorTriggerConditionsMetricsStaticConditionWarningResolution {
		if v == nil {
			return nil
		}
		return &v.Resolution
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarning) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningAlert struct {
	Threshold     *float64 `pulumi:"threshold"`
	ThresholdType *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsMetricsStaticConditionWarningAlertInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs and MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningAlertInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionWarningAlertInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput
}

type MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs struct {
	Threshold     pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningAlert)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput).ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs, MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtr and MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionWarningAlertPtrType MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs

func MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtr(v *MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionWarningAlertPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionWarningAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarningAlert)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningAlertPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningAlertPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionWarningAlert) *MonitorTriggerConditionsMetricsStaticConditionWarningAlert {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarningAlert) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarningAlert) *string { return v.ThresholdType }).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarningAlert)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningAlert) MonitorTriggerConditionsMetricsStaticConditionWarningAlert {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionWarningAlert
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningAlert) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningAlert) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningResolution struct {
	OccurrenceType *string  `pulumi:"occurrenceType"`
	Threshold      *float64 `pulumi:"threshold"`
	ThresholdType  *string  `pulumi:"thresholdType"`
}

// MonitorTriggerConditionsMetricsStaticConditionWarningResolutionInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs and MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningResolutionInput` via:
//
//	MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs{...}
type MonitorTriggerConditionsMetricsStaticConditionWarningResolutionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput
}

type MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs struct {
	OccurrenceType pulumi.StringPtrInput  `pulumi:"occurrenceType"`
	Threshold      pulumi.Float64PtrInput `pulumi:"threshold"`
	ThresholdType  pulumi.StringPtrInput  `pulumi:"thresholdType"`
}

func (MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningResolution)(nil)).Elem()
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput)
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput).ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrInput is an input type that accepts MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs, MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtr and MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrInput` via:
//
//	        MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput
	ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput
}

type monitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrType MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs

func MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtr(v *MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrInput {
	return (*monitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrType)(v)
}

func (*monitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarningResolution)(nil)).Elem()
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return i.ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrType) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return o.ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *MonitorTriggerConditionsMetricsStaticConditionWarningResolution {
		return &v
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *string {
		return v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *string {
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsMetricsStaticConditionWarningResolution)(nil)).Elem()
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) ToMonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) Elem() MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningResolution) MonitorTriggerConditionsMetricsStaticConditionWarningResolution {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsMetricsStaticConditionWarningResolution
		return ret
	}).(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) OccurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *string {
		if v == nil {
			return nil
		}
		return v.OccurrenceType
	}).(pulumi.StringPtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput) ThresholdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsMetricsStaticConditionWarningResolution) *string {
		if v == nil {
			return nil
		}
		return v.ThresholdType
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateCondition struct {
	Critical *MonitorTriggerConditionsSloBurnRateConditionCritical `pulumi:"critical"`
	Warning  *MonitorTriggerConditionsSloBurnRateConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsSloBurnRateConditionInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionArgs and MonitorTriggerConditionsSloBurnRateConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionInput` via:
//
//	MonitorTriggerConditionsSloBurnRateConditionArgs{...}
type MonitorTriggerConditionsSloBurnRateConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionOutput() MonitorTriggerConditionsSloBurnRateConditionOutput
	ToMonitorTriggerConditionsSloBurnRateConditionOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionOutput
}

type MonitorTriggerConditionsSloBurnRateConditionArgs struct {
	Critical MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput `pulumi:"critical"`
	Warning  MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsSloBurnRateConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloBurnRateConditionArgs) ToMonitorTriggerConditionsSloBurnRateConditionOutput() MonitorTriggerConditionsSloBurnRateConditionOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionArgs) ToMonitorTriggerConditionsSloBurnRateConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionOutput)
}

func (i MonitorTriggerConditionsSloBurnRateConditionArgs) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutput() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionArgs) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionOutput).ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloBurnRateConditionPtrInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionArgs, MonitorTriggerConditionsSloBurnRateConditionPtr and MonitorTriggerConditionsSloBurnRateConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionPtrInput` via:
//
//	        MonitorTriggerConditionsSloBurnRateConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloBurnRateConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionPtrOutput() MonitorTriggerConditionsSloBurnRateConditionPtrOutput
	ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionPtrOutput
}

type monitorTriggerConditionsSloBurnRateConditionPtrType MonitorTriggerConditionsSloBurnRateConditionArgs

func MonitorTriggerConditionsSloBurnRateConditionPtr(v *MonitorTriggerConditionsSloBurnRateConditionArgs) MonitorTriggerConditionsSloBurnRateConditionPtrInput {
	return (*monitorTriggerConditionsSloBurnRateConditionPtrType)(v)
}

func (*monitorTriggerConditionsSloBurnRateConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloBurnRateConditionPtrType) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutput() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloBurnRateConditionPtrType) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) ToMonitorTriggerConditionsSloBurnRateConditionOutput() MonitorTriggerConditionsSloBurnRateConditionOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) ToMonitorTriggerConditionsSloBurnRateConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutput() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o.ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloBurnRateCondition) *MonitorTriggerConditionsSloBurnRateCondition {
		return &v
	}).(MonitorTriggerConditionsSloBurnRateConditionPtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) Critical() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateCondition) *MonitorTriggerConditionsSloBurnRateConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionOutput) Warning() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateCondition) *MonitorTriggerConditionsSloBurnRateConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutput() MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionPtrOutput) Elem() MonitorTriggerConditionsSloBurnRateConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateCondition) MonitorTriggerConditionsSloBurnRateCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloBurnRateCondition
		return ret
	}).(MonitorTriggerConditionsSloBurnRateConditionOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionPtrOutput) Critical() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateCondition) *MonitorTriggerConditionsSloBurnRateConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionPtrOutput) Warning() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateCondition) *MonitorTriggerConditionsSloBurnRateConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionCritical struct {
	BurnRateThreshold float64 `pulumi:"burnRateThreshold"`
	TimeRange         string  `pulumi:"timeRange"`
}

// MonitorTriggerConditionsSloBurnRateConditionCriticalInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionCriticalArgs and MonitorTriggerConditionsSloBurnRateConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionCriticalInput` via:
//
//	MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{...}
type MonitorTriggerConditionsSloBurnRateConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalOutput
	ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalOutput
}

type MonitorTriggerConditionsSloBurnRateConditionCriticalArgs struct {
	BurnRateThreshold pulumi.Float64Input `pulumi:"burnRateThreshold"`
	TimeRange         pulumi.StringInput  `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionCriticalOutput)
}

func (i MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionCriticalOutput).ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionCriticalArgs, MonitorTriggerConditionsSloBurnRateConditionCriticalPtr and MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput
	ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput
}

type monitorTriggerConditionsSloBurnRateConditionCriticalPtrType MonitorTriggerConditionsSloBurnRateConditionCriticalArgs

func MonitorTriggerConditionsSloBurnRateConditionCriticalPtr(v *MonitorTriggerConditionsSloBurnRateConditionCriticalArgs) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput {
	return (*monitorTriggerConditionsSloBurnRateConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsSloBurnRateConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloBurnRateConditionCriticalPtrType) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloBurnRateConditionCriticalPtrType) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloBurnRateConditionCritical) *MonitorTriggerConditionsSloBurnRateConditionCritical {
		return &v
	}).(MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) BurnRateThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateConditionCritical) float64 { return v.BurnRateThreshold }).(pulumi.Float64Output)
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateConditionCritical) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput() MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsSloBurnRateConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionCritical) MonitorTriggerConditionsSloBurnRateConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloBurnRateConditionCritical
		return ret
	}).(MonitorTriggerConditionsSloBurnRateConditionCriticalOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) BurnRateThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return &v.BurnRateThreshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionCritical) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionWarning struct {
	BurnRateThreshold float64 `pulumi:"burnRateThreshold"`
	TimeRange         string  `pulumi:"timeRange"`
}

// MonitorTriggerConditionsSloBurnRateConditionWarningInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionWarningArgs and MonitorTriggerConditionsSloBurnRateConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionWarningInput` via:
//
//	MonitorTriggerConditionsSloBurnRateConditionWarningArgs{...}
type MonitorTriggerConditionsSloBurnRateConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionWarningOutput() MonitorTriggerConditionsSloBurnRateConditionWarningOutput
	ToMonitorTriggerConditionsSloBurnRateConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningOutput
}

type MonitorTriggerConditionsSloBurnRateConditionWarningArgs struct {
	BurnRateThreshold pulumi.Float64Input `pulumi:"burnRateThreshold"`
	TimeRange         pulumi.StringInput  `pulumi:"timeRange"`
}

func (MonitorTriggerConditionsSloBurnRateConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloBurnRateConditionWarningArgs) ToMonitorTriggerConditionsSloBurnRateConditionWarningOutput() MonitorTriggerConditionsSloBurnRateConditionWarningOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionWarningArgs) ToMonitorTriggerConditionsSloBurnRateConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionWarningOutput)
}

func (i MonitorTriggerConditionsSloBurnRateConditionWarningArgs) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloBurnRateConditionWarningArgs) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionWarningOutput).ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsSloBurnRateConditionWarningArgs, MonitorTriggerConditionsSloBurnRateConditionWarningPtr and MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsSloBurnRateConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput
	ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput
}

type monitorTriggerConditionsSloBurnRateConditionWarningPtrType MonitorTriggerConditionsSloBurnRateConditionWarningArgs

func MonitorTriggerConditionsSloBurnRateConditionWarningPtr(v *MonitorTriggerConditionsSloBurnRateConditionWarningArgs) MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput {
	return (*monitorTriggerConditionsSloBurnRateConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsSloBurnRateConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloBurnRateConditionWarningPtrType) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloBurnRateConditionWarningPtrType) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningOutput() MonitorTriggerConditionsSloBurnRateConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloBurnRateConditionWarning) *MonitorTriggerConditionsSloBurnRateConditionWarning {
		return &v
	}).(MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) BurnRateThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateConditionWarning) float64 { return v.BurnRateThreshold }).(pulumi.Float64Output)
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningOutput) TimeRange() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloBurnRateConditionWarning) string { return v.TimeRange }).(pulumi.StringOutput)
}

type MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloBurnRateConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput() MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) ToMonitorTriggerConditionsSloBurnRateConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) Elem() MonitorTriggerConditionsSloBurnRateConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionWarning) MonitorTriggerConditionsSloBurnRateConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloBurnRateConditionWarning
		return ret
	}).(MonitorTriggerConditionsSloBurnRateConditionWarningOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) BurnRateThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return &v.BurnRateThreshold
	}).(pulumi.Float64PtrOutput)
}

func (o MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloBurnRateConditionWarning) *string {
		if v == nil {
			return nil
		}
		return &v.TimeRange
	}).(pulumi.StringPtrOutput)
}

type MonitorTriggerConditionsSloSliCondition struct {
	Critical *MonitorTriggerConditionsSloSliConditionCritical `pulumi:"critical"`
	Warning  *MonitorTriggerConditionsSloSliConditionWarning  `pulumi:"warning"`
}

// MonitorTriggerConditionsSloSliConditionInput is an input type that accepts MonitorTriggerConditionsSloSliConditionArgs and MonitorTriggerConditionsSloSliConditionOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionInput` via:
//
//	MonitorTriggerConditionsSloSliConditionArgs{...}
type MonitorTriggerConditionsSloSliConditionInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionOutput() MonitorTriggerConditionsSloSliConditionOutput
	ToMonitorTriggerConditionsSloSliConditionOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionOutput
}

type MonitorTriggerConditionsSloSliConditionArgs struct {
	Critical MonitorTriggerConditionsSloSliConditionCriticalPtrInput `pulumi:"critical"`
	Warning  MonitorTriggerConditionsSloSliConditionWarningPtrInput  `pulumi:"warning"`
}

func (MonitorTriggerConditionsSloSliConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliCondition)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloSliConditionArgs) ToMonitorTriggerConditionsSloSliConditionOutput() MonitorTriggerConditionsSloSliConditionOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionArgs) ToMonitorTriggerConditionsSloSliConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionOutput)
}

func (i MonitorTriggerConditionsSloSliConditionArgs) ToMonitorTriggerConditionsSloSliConditionPtrOutput() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionArgs) ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionOutput).ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloSliConditionPtrInput is an input type that accepts MonitorTriggerConditionsSloSliConditionArgs, MonitorTriggerConditionsSloSliConditionPtr and MonitorTriggerConditionsSloSliConditionPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionPtrInput` via:
//
//	        MonitorTriggerConditionsSloSliConditionArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloSliConditionPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionPtrOutput() MonitorTriggerConditionsSloSliConditionPtrOutput
	ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionPtrOutput
}

type monitorTriggerConditionsSloSliConditionPtrType MonitorTriggerConditionsSloSliConditionArgs

func MonitorTriggerConditionsSloSliConditionPtr(v *MonitorTriggerConditionsSloSliConditionArgs) MonitorTriggerConditionsSloSliConditionPtrInput {
	return (*monitorTriggerConditionsSloSliConditionPtrType)(v)
}

func (*monitorTriggerConditionsSloSliConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliCondition)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloSliConditionPtrType) ToMonitorTriggerConditionsSloSliConditionPtrOutput() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloSliConditionPtrType) ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionPtrOutput)
}

type MonitorTriggerConditionsSloSliConditionOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionOutput) ToMonitorTriggerConditionsSloSliConditionOutput() MonitorTriggerConditionsSloSliConditionOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionOutput) ToMonitorTriggerConditionsSloSliConditionOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionOutput) ToMonitorTriggerConditionsSloSliConditionPtrOutput() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o.ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloSliConditionOutput) ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloSliCondition) *MonitorTriggerConditionsSloSliCondition {
		return &v
	}).(MonitorTriggerConditionsSloSliConditionPtrOutput)
}

func (o MonitorTriggerConditionsSloSliConditionOutput) Critical() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloSliCondition) *MonitorTriggerConditionsSloSliConditionCritical {
		return v.Critical
	}).(MonitorTriggerConditionsSloSliConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloSliConditionOutput) Warning() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o.ApplyT(func(v MonitorTriggerConditionsSloSliCondition) *MonitorTriggerConditionsSloSliConditionWarning {
		return v.Warning
	}).(MonitorTriggerConditionsSloSliConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloSliConditionPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliCondition)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionPtrOutput) ToMonitorTriggerConditionsSloSliConditionPtrOutput() MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionPtrOutput) ToMonitorTriggerConditionsSloSliConditionPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionPtrOutput) Elem() MonitorTriggerConditionsSloSliConditionOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliCondition) MonitorTriggerConditionsSloSliCondition {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloSliCondition
		return ret
	}).(MonitorTriggerConditionsSloSliConditionOutput)
}

func (o MonitorTriggerConditionsSloSliConditionPtrOutput) Critical() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliCondition) *MonitorTriggerConditionsSloSliConditionCritical {
		if v == nil {
			return nil
		}
		return v.Critical
	}).(MonitorTriggerConditionsSloSliConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloSliConditionPtrOutput) Warning() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliCondition) *MonitorTriggerConditionsSloSliConditionWarning {
		if v == nil {
			return nil
		}
		return v.Warning
	}).(MonitorTriggerConditionsSloSliConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloSliConditionCritical struct {
	SliThreshold float64 `pulumi:"sliThreshold"`
}

// MonitorTriggerConditionsSloSliConditionCriticalInput is an input type that accepts MonitorTriggerConditionsSloSliConditionCriticalArgs and MonitorTriggerConditionsSloSliConditionCriticalOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionCriticalInput` via:
//
//	MonitorTriggerConditionsSloSliConditionCriticalArgs{...}
type MonitorTriggerConditionsSloSliConditionCriticalInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionCriticalOutput() MonitorTriggerConditionsSloSliConditionCriticalOutput
	ToMonitorTriggerConditionsSloSliConditionCriticalOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionCriticalOutput
}

type MonitorTriggerConditionsSloSliConditionCriticalArgs struct {
	SliThreshold pulumi.Float64Input `pulumi:"sliThreshold"`
}

func (MonitorTriggerConditionsSloSliConditionCriticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionCritical)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloSliConditionCriticalArgs) ToMonitorTriggerConditionsSloSliConditionCriticalOutput() MonitorTriggerConditionsSloSliConditionCriticalOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionCriticalOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionCriticalArgs) ToMonitorTriggerConditionsSloSliConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionCriticalOutput)
}

func (i MonitorTriggerConditionsSloSliConditionCriticalArgs) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutput() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionCriticalArgs) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionCriticalOutput).ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloSliConditionCriticalPtrInput is an input type that accepts MonitorTriggerConditionsSloSliConditionCriticalArgs, MonitorTriggerConditionsSloSliConditionCriticalPtr and MonitorTriggerConditionsSloSliConditionCriticalPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionCriticalPtrInput` via:
//
//	        MonitorTriggerConditionsSloSliConditionCriticalArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloSliConditionCriticalPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutput() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput
	ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionCriticalPtrOutput
}

type monitorTriggerConditionsSloSliConditionCriticalPtrType MonitorTriggerConditionsSloSliConditionCriticalArgs

func MonitorTriggerConditionsSloSliConditionCriticalPtr(v *MonitorTriggerConditionsSloSliConditionCriticalArgs) MonitorTriggerConditionsSloSliConditionCriticalPtrInput {
	return (*monitorTriggerConditionsSloSliConditionCriticalPtrType)(v)
}

func (*monitorTriggerConditionsSloSliConditionCriticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliConditionCritical)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloSliConditionCriticalPtrType) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutput() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloSliConditionCriticalPtrType) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionCriticalPtrOutput)
}

type MonitorTriggerConditionsSloSliConditionCriticalOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionCriticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionCriticalOutput) ToMonitorTriggerConditionsSloSliConditionCriticalOutput() MonitorTriggerConditionsSloSliConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionCriticalOutput) ToMonitorTriggerConditionsSloSliConditionCriticalOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionCriticalOutput) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutput() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o.ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloSliConditionCriticalOutput) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloSliConditionCritical) *MonitorTriggerConditionsSloSliConditionCritical {
		return &v
	}).(MonitorTriggerConditionsSloSliConditionCriticalPtrOutput)
}

func (o MonitorTriggerConditionsSloSliConditionCriticalOutput) SliThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v MonitorTriggerConditionsSloSliConditionCritical) float64 { return v.SliThreshold }).(pulumi.Float64Output)
}

type MonitorTriggerConditionsSloSliConditionCriticalPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionCriticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliConditionCritical)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionCriticalPtrOutput) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutput() MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionCriticalPtrOutput) ToMonitorTriggerConditionsSloSliConditionCriticalPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionCriticalPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionCriticalPtrOutput) Elem() MonitorTriggerConditionsSloSliConditionCriticalOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliConditionCritical) MonitorTriggerConditionsSloSliConditionCritical {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloSliConditionCritical
		return ret
	}).(MonitorTriggerConditionsSloSliConditionCriticalOutput)
}

func (o MonitorTriggerConditionsSloSliConditionCriticalPtrOutput) SliThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliConditionCritical) *float64 {
		if v == nil {
			return nil
		}
		return &v.SliThreshold
	}).(pulumi.Float64PtrOutput)
}

type MonitorTriggerConditionsSloSliConditionWarning struct {
	SliThreshold float64 `pulumi:"sliThreshold"`
}

// MonitorTriggerConditionsSloSliConditionWarningInput is an input type that accepts MonitorTriggerConditionsSloSliConditionWarningArgs and MonitorTriggerConditionsSloSliConditionWarningOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionWarningInput` via:
//
//	MonitorTriggerConditionsSloSliConditionWarningArgs{...}
type MonitorTriggerConditionsSloSliConditionWarningInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionWarningOutput() MonitorTriggerConditionsSloSliConditionWarningOutput
	ToMonitorTriggerConditionsSloSliConditionWarningOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionWarningOutput
}

type MonitorTriggerConditionsSloSliConditionWarningArgs struct {
	SliThreshold pulumi.Float64Input `pulumi:"sliThreshold"`
}

func (MonitorTriggerConditionsSloSliConditionWarningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionWarning)(nil)).Elem()
}

func (i MonitorTriggerConditionsSloSliConditionWarningArgs) ToMonitorTriggerConditionsSloSliConditionWarningOutput() MonitorTriggerConditionsSloSliConditionWarningOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionWarningOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionWarningArgs) ToMonitorTriggerConditionsSloSliConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionWarningOutput)
}

func (i MonitorTriggerConditionsSloSliConditionWarningArgs) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutput() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(context.Background())
}

func (i MonitorTriggerConditionsSloSliConditionWarningArgs) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionWarningOutput).ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(ctx)
}

// MonitorTriggerConditionsSloSliConditionWarningPtrInput is an input type that accepts MonitorTriggerConditionsSloSliConditionWarningArgs, MonitorTriggerConditionsSloSliConditionWarningPtr and MonitorTriggerConditionsSloSliConditionWarningPtrOutput values.
// You can construct a concrete instance of `MonitorTriggerConditionsSloSliConditionWarningPtrInput` via:
//
//	        MonitorTriggerConditionsSloSliConditionWarningArgs{...}
//
//	or:
//
//	        nil
type MonitorTriggerConditionsSloSliConditionWarningPtrInput interface {
	pulumi.Input

	ToMonitorTriggerConditionsSloSliConditionWarningPtrOutput() MonitorTriggerConditionsSloSliConditionWarningPtrOutput
	ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(context.Context) MonitorTriggerConditionsSloSliConditionWarningPtrOutput
}

type monitorTriggerConditionsSloSliConditionWarningPtrType MonitorTriggerConditionsSloSliConditionWarningArgs

func MonitorTriggerConditionsSloSliConditionWarningPtr(v *MonitorTriggerConditionsSloSliConditionWarningArgs) MonitorTriggerConditionsSloSliConditionWarningPtrInput {
	return (*monitorTriggerConditionsSloSliConditionWarningPtrType)(v)
}

func (*monitorTriggerConditionsSloSliConditionWarningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliConditionWarning)(nil)).Elem()
}

func (i *monitorTriggerConditionsSloSliConditionWarningPtrType) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutput() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return i.ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(context.Background())
}

func (i *monitorTriggerConditionsSloSliConditionWarningPtrType) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorTriggerConditionsSloSliConditionWarningPtrOutput)
}

type MonitorTriggerConditionsSloSliConditionWarningOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionWarningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionWarningOutput) ToMonitorTriggerConditionsSloSliConditionWarningOutput() MonitorTriggerConditionsSloSliConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionWarningOutput) ToMonitorTriggerConditionsSloSliConditionWarningOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionWarningOutput) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutput() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o.ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(context.Background())
}

func (o MonitorTriggerConditionsSloSliConditionWarningOutput) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorTriggerConditionsSloSliConditionWarning) *MonitorTriggerConditionsSloSliConditionWarning {
		return &v
	}).(MonitorTriggerConditionsSloSliConditionWarningPtrOutput)
}

func (o MonitorTriggerConditionsSloSliConditionWarningOutput) SliThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v MonitorTriggerConditionsSloSliConditionWarning) float64 { return v.SliThreshold }).(pulumi.Float64Output)
}

type MonitorTriggerConditionsSloSliConditionWarningPtrOutput struct{ *pulumi.OutputState }

func (MonitorTriggerConditionsSloSliConditionWarningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorTriggerConditionsSloSliConditionWarning)(nil)).Elem()
}

func (o MonitorTriggerConditionsSloSliConditionWarningPtrOutput) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutput() MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionWarningPtrOutput) ToMonitorTriggerConditionsSloSliConditionWarningPtrOutputWithContext(ctx context.Context) MonitorTriggerConditionsSloSliConditionWarningPtrOutput {
	return o
}

func (o MonitorTriggerConditionsSloSliConditionWarningPtrOutput) Elem() MonitorTriggerConditionsSloSliConditionWarningOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliConditionWarning) MonitorTriggerConditionsSloSliConditionWarning {
		if v != nil {
			return *v
		}
		var ret MonitorTriggerConditionsSloSliConditionWarning
		return ret
	}).(MonitorTriggerConditionsSloSliConditionWarningOutput)
}

func (o MonitorTriggerConditionsSloSliConditionWarningPtrOutput) SliThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitorTriggerConditionsSloSliConditionWarning) *float64 {
		if v == nil {
			return nil
		}
		return &v.SliThreshold
	}).(pulumi.Float64PtrOutput)
}

type PoliciesUserConcurrentSessionsLimit struct {
	// Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
	Enabled bool `pulumi:"enabled"`
	// Maximum number of concurrent sessions a user may have. Defaults to `100`.
	MaxConcurrentSessions *int `pulumi:"maxConcurrentSessions"`
}

// PoliciesUserConcurrentSessionsLimitInput is an input type that accepts PoliciesUserConcurrentSessionsLimitArgs and PoliciesUserConcurrentSessionsLimitOutput values.
// You can construct a concrete instance of `PoliciesUserConcurrentSessionsLimitInput` via:
//
//	PoliciesUserConcurrentSessionsLimitArgs{...}
type PoliciesUserConcurrentSessionsLimitInput interface {
	pulumi.Input

	ToPoliciesUserConcurrentSessionsLimitOutput() PoliciesUserConcurrentSessionsLimitOutput
	ToPoliciesUserConcurrentSessionsLimitOutputWithContext(context.Context) PoliciesUserConcurrentSessionsLimitOutput
}

type PoliciesUserConcurrentSessionsLimitArgs struct {
	// Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Maximum number of concurrent sessions a user may have. Defaults to `100`.
	MaxConcurrentSessions pulumi.IntPtrInput `pulumi:"maxConcurrentSessions"`
}

func (PoliciesUserConcurrentSessionsLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoliciesUserConcurrentSessionsLimit)(nil)).Elem()
}

func (i PoliciesUserConcurrentSessionsLimitArgs) ToPoliciesUserConcurrentSessionsLimitOutput() PoliciesUserConcurrentSessionsLimitOutput {
	return i.ToPoliciesUserConcurrentSessionsLimitOutputWithContext(context.Background())
}

func (i PoliciesUserConcurrentSessionsLimitArgs) ToPoliciesUserConcurrentSessionsLimitOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesUserConcurrentSessionsLimitOutput)
}

func (i PoliciesUserConcurrentSessionsLimitArgs) ToPoliciesUserConcurrentSessionsLimitPtrOutput() PoliciesUserConcurrentSessionsLimitPtrOutput {
	return i.ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(context.Background())
}

func (i PoliciesUserConcurrentSessionsLimitArgs) ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesUserConcurrentSessionsLimitOutput).ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(ctx)
}

// PoliciesUserConcurrentSessionsLimitPtrInput is an input type that accepts PoliciesUserConcurrentSessionsLimitArgs, PoliciesUserConcurrentSessionsLimitPtr and PoliciesUserConcurrentSessionsLimitPtrOutput values.
// You can construct a concrete instance of `PoliciesUserConcurrentSessionsLimitPtrInput` via:
//
//	        PoliciesUserConcurrentSessionsLimitArgs{...}
//
//	or:
//
//	        nil
type PoliciesUserConcurrentSessionsLimitPtrInput interface {
	pulumi.Input

	ToPoliciesUserConcurrentSessionsLimitPtrOutput() PoliciesUserConcurrentSessionsLimitPtrOutput
	ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(context.Context) PoliciesUserConcurrentSessionsLimitPtrOutput
}

type policiesUserConcurrentSessionsLimitPtrType PoliciesUserConcurrentSessionsLimitArgs

func PoliciesUserConcurrentSessionsLimitPtr(v *PoliciesUserConcurrentSessionsLimitArgs) PoliciesUserConcurrentSessionsLimitPtrInput {
	return (*policiesUserConcurrentSessionsLimitPtrType)(v)
}

func (*policiesUserConcurrentSessionsLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoliciesUserConcurrentSessionsLimit)(nil)).Elem()
}

func (i *policiesUserConcurrentSessionsLimitPtrType) ToPoliciesUserConcurrentSessionsLimitPtrOutput() PoliciesUserConcurrentSessionsLimitPtrOutput {
	return i.ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(context.Background())
}

func (i *policiesUserConcurrentSessionsLimitPtrType) ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesUserConcurrentSessionsLimitPtrOutput)
}

type PoliciesUserConcurrentSessionsLimitOutput struct{ *pulumi.OutputState }

func (PoliciesUserConcurrentSessionsLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoliciesUserConcurrentSessionsLimit)(nil)).Elem()
}

func (o PoliciesUserConcurrentSessionsLimitOutput) ToPoliciesUserConcurrentSessionsLimitOutput() PoliciesUserConcurrentSessionsLimitOutput {
	return o
}

func (o PoliciesUserConcurrentSessionsLimitOutput) ToPoliciesUserConcurrentSessionsLimitOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitOutput {
	return o
}

func (o PoliciesUserConcurrentSessionsLimitOutput) ToPoliciesUserConcurrentSessionsLimitPtrOutput() PoliciesUserConcurrentSessionsLimitPtrOutput {
	return o.ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(context.Background())
}

func (o PoliciesUserConcurrentSessionsLimitOutput) ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoliciesUserConcurrentSessionsLimit) *PoliciesUserConcurrentSessionsLimit {
		return &v
	}).(PoliciesUserConcurrentSessionsLimitPtrOutput)
}

// Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
func (o PoliciesUserConcurrentSessionsLimitOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PoliciesUserConcurrentSessionsLimit) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Maximum number of concurrent sessions a user may have. Defaults to `100`.
func (o PoliciesUserConcurrentSessionsLimitOutput) MaxConcurrentSessions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PoliciesUserConcurrentSessionsLimit) *int { return v.MaxConcurrentSessions }).(pulumi.IntPtrOutput)
}

type PoliciesUserConcurrentSessionsLimitPtrOutput struct{ *pulumi.OutputState }

func (PoliciesUserConcurrentSessionsLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoliciesUserConcurrentSessionsLimit)(nil)).Elem()
}

func (o PoliciesUserConcurrentSessionsLimitPtrOutput) ToPoliciesUserConcurrentSessionsLimitPtrOutput() PoliciesUserConcurrentSessionsLimitPtrOutput {
	return o
}

func (o PoliciesUserConcurrentSessionsLimitPtrOutput) ToPoliciesUserConcurrentSessionsLimitPtrOutputWithContext(ctx context.Context) PoliciesUserConcurrentSessionsLimitPtrOutput {
	return o
}

func (o PoliciesUserConcurrentSessionsLimitPtrOutput) Elem() PoliciesUserConcurrentSessionsLimitOutput {
	return o.ApplyT(func(v *PoliciesUserConcurrentSessionsLimit) PoliciesUserConcurrentSessionsLimit {
		if v != nil {
			return *v
		}
		var ret PoliciesUserConcurrentSessionsLimit
		return ret
	}).(PoliciesUserConcurrentSessionsLimitOutput)
}

// Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
func (o PoliciesUserConcurrentSessionsLimitPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PoliciesUserConcurrentSessionsLimit) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum number of concurrent sessions a user may have. Defaults to `100`.
func (o PoliciesUserConcurrentSessionsLimitPtrOutput) MaxConcurrentSessions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PoliciesUserConcurrentSessionsLimit) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentSessions
	}).(pulumi.IntPtrOutput)
}

type PollingSourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey *string `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey *string `pulumi:"secretKey"`
	// This value has to be set to `TagFilters`
	Type string `pulumi:"type"`
}

// PollingSourceAuthenticationInput is an input type that accepts PollingSourceAuthenticationArgs and PollingSourceAuthenticationOutput values.
// You can construct a concrete instance of `PollingSourceAuthenticationInput` via:
//
//	PollingSourceAuthenticationArgs{...}
type PollingSourceAuthenticationInput interface {
	pulumi.Input

	ToPollingSourceAuthenticationOutput() PollingSourceAuthenticationOutput
	ToPollingSourceAuthenticationOutputWithContext(context.Context) PollingSourceAuthenticationOutput
}

type PollingSourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringInput `pulumi:"type"`
}

func (PollingSourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceAuthentication)(nil)).Elem()
}

func (i PollingSourceAuthenticationArgs) ToPollingSourceAuthenticationOutput() PollingSourceAuthenticationOutput {
	return i.ToPollingSourceAuthenticationOutputWithContext(context.Background())
}

func (i PollingSourceAuthenticationArgs) ToPollingSourceAuthenticationOutputWithContext(ctx context.Context) PollingSourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceAuthenticationOutput)
}

func (i PollingSourceAuthenticationArgs) ToPollingSourceAuthenticationPtrOutput() PollingSourceAuthenticationPtrOutput {
	return i.ToPollingSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i PollingSourceAuthenticationArgs) ToPollingSourceAuthenticationPtrOutputWithContext(ctx context.Context) PollingSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceAuthenticationOutput).ToPollingSourceAuthenticationPtrOutputWithContext(ctx)
}

// PollingSourceAuthenticationPtrInput is an input type that accepts PollingSourceAuthenticationArgs, PollingSourceAuthenticationPtr and PollingSourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `PollingSourceAuthenticationPtrInput` via:
//
//	        PollingSourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type PollingSourceAuthenticationPtrInput interface {
	pulumi.Input

	ToPollingSourceAuthenticationPtrOutput() PollingSourceAuthenticationPtrOutput
	ToPollingSourceAuthenticationPtrOutputWithContext(context.Context) PollingSourceAuthenticationPtrOutput
}

type pollingSourceAuthenticationPtrType PollingSourceAuthenticationArgs

func PollingSourceAuthenticationPtr(v *PollingSourceAuthenticationArgs) PollingSourceAuthenticationPtrInput {
	return (*pollingSourceAuthenticationPtrType)(v)
}

func (*pollingSourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSourceAuthentication)(nil)).Elem()
}

func (i *pollingSourceAuthenticationPtrType) ToPollingSourceAuthenticationPtrOutput() PollingSourceAuthenticationPtrOutput {
	return i.ToPollingSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *pollingSourceAuthenticationPtrType) ToPollingSourceAuthenticationPtrOutputWithContext(ctx context.Context) PollingSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceAuthenticationPtrOutput)
}

type PollingSourceAuthenticationOutput struct{ *pulumi.OutputState }

func (PollingSourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceAuthentication)(nil)).Elem()
}

func (o PollingSourceAuthenticationOutput) ToPollingSourceAuthenticationOutput() PollingSourceAuthenticationOutput {
	return o
}

func (o PollingSourceAuthenticationOutput) ToPollingSourceAuthenticationOutputWithContext(ctx context.Context) PollingSourceAuthenticationOutput {
	return o
}

func (o PollingSourceAuthenticationOutput) ToPollingSourceAuthenticationPtrOutput() PollingSourceAuthenticationPtrOutput {
	return o.ToPollingSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o PollingSourceAuthenticationOutput) ToPollingSourceAuthenticationPtrOutputWithContext(ctx context.Context) PollingSourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PollingSourceAuthentication) *PollingSourceAuthentication {
		return &v
	}).(PollingSourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o PollingSourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o PollingSourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o PollingSourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// This value has to be set to `TagFilters`
func (o PollingSourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type PollingSourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (PollingSourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSourceAuthentication)(nil)).Elem()
}

func (o PollingSourceAuthenticationPtrOutput) ToPollingSourceAuthenticationPtrOutput() PollingSourceAuthenticationPtrOutput {
	return o
}

func (o PollingSourceAuthenticationPtrOutput) ToPollingSourceAuthenticationPtrOutputWithContext(ctx context.Context) PollingSourceAuthenticationPtrOutput {
	return o
}

func (o PollingSourceAuthenticationPtrOutput) Elem() PollingSourceAuthenticationOutput {
	return o.ApplyT(func(v *PollingSourceAuthentication) PollingSourceAuthentication {
		if v != nil {
			return *v
		}
		var ret PollingSourceAuthentication
		return ret
	}).(PollingSourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`
func (o PollingSourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`
func (o PollingSourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`
func (o PollingSourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

// This value has to be set to `TagFilters`
func (o PollingSourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PollingSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// PollingSourceDefaultDateFormatInput is an input type that accepts PollingSourceDefaultDateFormatArgs and PollingSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `PollingSourceDefaultDateFormatInput` via:
//
//	PollingSourceDefaultDateFormatArgs{...}
type PollingSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToPollingSourceDefaultDateFormatOutput() PollingSourceDefaultDateFormatOutput
	ToPollingSourceDefaultDateFormatOutputWithContext(context.Context) PollingSourceDefaultDateFormatOutput
}

type PollingSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (PollingSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceDefaultDateFormat)(nil)).Elem()
}

func (i PollingSourceDefaultDateFormatArgs) ToPollingSourceDefaultDateFormatOutput() PollingSourceDefaultDateFormatOutput {
	return i.ToPollingSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i PollingSourceDefaultDateFormatArgs) ToPollingSourceDefaultDateFormatOutputWithContext(ctx context.Context) PollingSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceDefaultDateFormatOutput)
}

// PollingSourceDefaultDateFormatArrayInput is an input type that accepts PollingSourceDefaultDateFormatArray and PollingSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `PollingSourceDefaultDateFormatArrayInput` via:
//
//	PollingSourceDefaultDateFormatArray{ PollingSourceDefaultDateFormatArgs{...} }
type PollingSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToPollingSourceDefaultDateFormatArrayOutput() PollingSourceDefaultDateFormatArrayOutput
	ToPollingSourceDefaultDateFormatArrayOutputWithContext(context.Context) PollingSourceDefaultDateFormatArrayOutput
}

type PollingSourceDefaultDateFormatArray []PollingSourceDefaultDateFormatInput

func (PollingSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourceDefaultDateFormat)(nil)).Elem()
}

func (i PollingSourceDefaultDateFormatArray) ToPollingSourceDefaultDateFormatArrayOutput() PollingSourceDefaultDateFormatArrayOutput {
	return i.ToPollingSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i PollingSourceDefaultDateFormatArray) ToPollingSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) PollingSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceDefaultDateFormatArrayOutput)
}

type PollingSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (PollingSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceDefaultDateFormat)(nil)).Elem()
}

func (o PollingSourceDefaultDateFormatOutput) ToPollingSourceDefaultDateFormatOutput() PollingSourceDefaultDateFormatOutput {
	return o
}

func (o PollingSourceDefaultDateFormatOutput) ToPollingSourceDefaultDateFormatOutputWithContext(ctx context.Context) PollingSourceDefaultDateFormatOutput {
	return o
}

func (o PollingSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o PollingSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type PollingSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (PollingSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourceDefaultDateFormat)(nil)).Elem()
}

func (o PollingSourceDefaultDateFormatArrayOutput) ToPollingSourceDefaultDateFormatArrayOutput() PollingSourceDefaultDateFormatArrayOutput {
	return o
}

func (o PollingSourceDefaultDateFormatArrayOutput) ToPollingSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) PollingSourceDefaultDateFormatArrayOutput {
	return o
}

func (o PollingSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) PollingSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PollingSourceDefaultDateFormat {
		return vs[0].([]PollingSourceDefaultDateFormat)[vs[1].(int)]
	}).(PollingSourceDefaultDateFormatOutput)
}

type PollingSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// PollingSourceFilterInput is an input type that accepts PollingSourceFilterArgs and PollingSourceFilterOutput values.
// You can construct a concrete instance of `PollingSourceFilterInput` via:
//
//	PollingSourceFilterArgs{...}
type PollingSourceFilterInput interface {
	pulumi.Input

	ToPollingSourceFilterOutput() PollingSourceFilterOutput
	ToPollingSourceFilterOutputWithContext(context.Context) PollingSourceFilterOutput
}

type PollingSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (PollingSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceFilter)(nil)).Elem()
}

func (i PollingSourceFilterArgs) ToPollingSourceFilterOutput() PollingSourceFilterOutput {
	return i.ToPollingSourceFilterOutputWithContext(context.Background())
}

func (i PollingSourceFilterArgs) ToPollingSourceFilterOutputWithContext(ctx context.Context) PollingSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceFilterOutput)
}

// PollingSourceFilterArrayInput is an input type that accepts PollingSourceFilterArray and PollingSourceFilterArrayOutput values.
// You can construct a concrete instance of `PollingSourceFilterArrayInput` via:
//
//	PollingSourceFilterArray{ PollingSourceFilterArgs{...} }
type PollingSourceFilterArrayInput interface {
	pulumi.Input

	ToPollingSourceFilterArrayOutput() PollingSourceFilterArrayOutput
	ToPollingSourceFilterArrayOutputWithContext(context.Context) PollingSourceFilterArrayOutput
}

type PollingSourceFilterArray []PollingSourceFilterInput

func (PollingSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourceFilter)(nil)).Elem()
}

func (i PollingSourceFilterArray) ToPollingSourceFilterArrayOutput() PollingSourceFilterArrayOutput {
	return i.ToPollingSourceFilterArrayOutputWithContext(context.Background())
}

func (i PollingSourceFilterArray) ToPollingSourceFilterArrayOutputWithContext(ctx context.Context) PollingSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourceFilterArrayOutput)
}

type PollingSourceFilterOutput struct{ *pulumi.OutputState }

func (PollingSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourceFilter)(nil)).Elem()
}

func (o PollingSourceFilterOutput) ToPollingSourceFilterOutput() PollingSourceFilterOutput {
	return o
}

func (o PollingSourceFilterOutput) ToPollingSourceFilterOutputWithContext(ctx context.Context) PollingSourceFilterOutput {
	return o
}

func (o PollingSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o PollingSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o PollingSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o PollingSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type PollingSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (PollingSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourceFilter)(nil)).Elem()
}

func (o PollingSourceFilterArrayOutput) ToPollingSourceFilterArrayOutput() PollingSourceFilterArrayOutput {
	return o
}

func (o PollingSourceFilterArrayOutput) ToPollingSourceFilterArrayOutputWithContext(ctx context.Context) PollingSourceFilterArrayOutput {
	return o
}

func (o PollingSourceFilterArrayOutput) Index(i pulumi.IntInput) PollingSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PollingSourceFilter {
		return vs[0].([]PollingSourceFilter)[vs[1].(int)]
	}).(PollingSourceFilterOutput)
}

type PollingSourcePath struct {
	// The name of the bucket. This is needed if using type `S3BucketPathExpression`.
	BucketName *string `pulumi:"bucketName"`
	// List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
	LimitToNamespaces []string `pulumi:"limitToNamespaces"`
	// List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
	LimitToRegions []string `pulumi:"limitToRegions"`
	// The path to the data. This is needed if using type `S3BucketPathExpression`.
	PathExpression *string `pulumi:"pathExpression"`
	// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
	TagFilters []PollingSourcePathTagFilter `pulumi:"tagFilters"`
	// This value has to be set to `TagFilters`
	Type string `pulumi:"type"`
}

// PollingSourcePathInput is an input type that accepts PollingSourcePathArgs and PollingSourcePathOutput values.
// You can construct a concrete instance of `PollingSourcePathInput` via:
//
//	PollingSourcePathArgs{...}
type PollingSourcePathInput interface {
	pulumi.Input

	ToPollingSourcePathOutput() PollingSourcePathOutput
	ToPollingSourcePathOutputWithContext(context.Context) PollingSourcePathOutput
}

type PollingSourcePathArgs struct {
	// The name of the bucket. This is needed if using type `S3BucketPathExpression`.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
	LimitToNamespaces pulumi.StringArrayInput `pulumi:"limitToNamespaces"`
	// List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
	LimitToRegions pulumi.StringArrayInput `pulumi:"limitToRegions"`
	// The path to the data. This is needed if using type `S3BucketPathExpression`.
	PathExpression pulumi.StringPtrInput `pulumi:"pathExpression"`
	// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
	TagFilters PollingSourcePathTagFilterArrayInput `pulumi:"tagFilters"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringInput `pulumi:"type"`
}

func (PollingSourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourcePath)(nil)).Elem()
}

func (i PollingSourcePathArgs) ToPollingSourcePathOutput() PollingSourcePathOutput {
	return i.ToPollingSourcePathOutputWithContext(context.Background())
}

func (i PollingSourcePathArgs) ToPollingSourcePathOutputWithContext(ctx context.Context) PollingSourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourcePathOutput)
}

func (i PollingSourcePathArgs) ToPollingSourcePathPtrOutput() PollingSourcePathPtrOutput {
	return i.ToPollingSourcePathPtrOutputWithContext(context.Background())
}

func (i PollingSourcePathArgs) ToPollingSourcePathPtrOutputWithContext(ctx context.Context) PollingSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourcePathOutput).ToPollingSourcePathPtrOutputWithContext(ctx)
}

// PollingSourcePathPtrInput is an input type that accepts PollingSourcePathArgs, PollingSourcePathPtr and PollingSourcePathPtrOutput values.
// You can construct a concrete instance of `PollingSourcePathPtrInput` via:
//
//	        PollingSourcePathArgs{...}
//
//	or:
//
//	        nil
type PollingSourcePathPtrInput interface {
	pulumi.Input

	ToPollingSourcePathPtrOutput() PollingSourcePathPtrOutput
	ToPollingSourcePathPtrOutputWithContext(context.Context) PollingSourcePathPtrOutput
}

type pollingSourcePathPtrType PollingSourcePathArgs

func PollingSourcePathPtr(v *PollingSourcePathArgs) PollingSourcePathPtrInput {
	return (*pollingSourcePathPtrType)(v)
}

func (*pollingSourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSourcePath)(nil)).Elem()
}

func (i *pollingSourcePathPtrType) ToPollingSourcePathPtrOutput() PollingSourcePathPtrOutput {
	return i.ToPollingSourcePathPtrOutputWithContext(context.Background())
}

func (i *pollingSourcePathPtrType) ToPollingSourcePathPtrOutputWithContext(ctx context.Context) PollingSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourcePathPtrOutput)
}

type PollingSourcePathOutput struct{ *pulumi.OutputState }

func (PollingSourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourcePath)(nil)).Elem()
}

func (o PollingSourcePathOutput) ToPollingSourcePathOutput() PollingSourcePathOutput {
	return o
}

func (o PollingSourcePathOutput) ToPollingSourcePathOutputWithContext(ctx context.Context) PollingSourcePathOutput {
	return o
}

func (o PollingSourcePathOutput) ToPollingSourcePathPtrOutput() PollingSourcePathPtrOutput {
	return o.ToPollingSourcePathPtrOutputWithContext(context.Background())
}

func (o PollingSourcePathOutput) ToPollingSourcePathPtrOutputWithContext(ctx context.Context) PollingSourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PollingSourcePath) *PollingSourcePath {
		return &v
	}).(PollingSourcePathPtrOutput)
}

// The name of the bucket. This is needed if using type `S3BucketPathExpression`.
func (o PollingSourcePathOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourcePath) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
func (o PollingSourcePathOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PollingSourcePath) []string { return v.LimitToNamespaces }).(pulumi.StringArrayOutput)
}

// List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
func (o PollingSourcePathOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PollingSourcePath) []string { return v.LimitToRegions }).(pulumi.StringArrayOutput)
}

// The path to the data. This is needed if using type `S3BucketPathExpression`.
func (o PollingSourcePathOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourcePath) *string { return v.PathExpression }).(pulumi.StringPtrOutput)
}

// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
func (o PollingSourcePathOutput) TagFilters() PollingSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v PollingSourcePath) []PollingSourcePathTagFilter { return v.TagFilters }).(PollingSourcePathTagFilterArrayOutput)
}

// This value has to be set to `TagFilters`
func (o PollingSourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PollingSourcePath) string { return v.Type }).(pulumi.StringOutput)
}

type PollingSourcePathPtrOutput struct{ *pulumi.OutputState }

func (PollingSourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PollingSourcePath)(nil)).Elem()
}

func (o PollingSourcePathPtrOutput) ToPollingSourcePathPtrOutput() PollingSourcePathPtrOutput {
	return o
}

func (o PollingSourcePathPtrOutput) ToPollingSourcePathPtrOutputWithContext(ctx context.Context) PollingSourcePathPtrOutput {
	return o
}

func (o PollingSourcePathPtrOutput) Elem() PollingSourcePathOutput {
	return o.ApplyT(func(v *PollingSourcePath) PollingSourcePath {
		if v != nil {
			return *v
		}
		var ret PollingSourcePath
		return ret
	}).(PollingSourcePathOutput)
}

// The name of the bucket. This is needed if using type `S3BucketPathExpression`.
func (o PollingSourcePathPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
func (o PollingSourcePathPtrOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PollingSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToNamespaces
	}).(pulumi.StringArrayOutput)
}

// List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
func (o PollingSourcePathPtrOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PollingSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToRegions
	}).(pulumi.StringArrayOutput)
}

// The path to the data. This is needed if using type `S3BucketPathExpression`.
func (o PollingSourcePathPtrOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.PathExpression
	}).(pulumi.StringPtrOutput)
}

// Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
func (o PollingSourcePathPtrOutput) TagFilters() PollingSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v *PollingSourcePath) []PollingSourcePathTagFilter {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(PollingSourcePathTagFilterArrayOutput)
}

// This value has to be set to `TagFilters`
func (o PollingSourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PollingSourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PollingSourcePathTagFilter struct {
	// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
	Namespace *string `pulumi:"namespace"`
	// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
	Tags []string `pulumi:"tags"`
	// This value has to be set to `TagFilters`
	Type *string `pulumi:"type"`
}

// PollingSourcePathTagFilterInput is an input type that accepts PollingSourcePathTagFilterArgs and PollingSourcePathTagFilterOutput values.
// You can construct a concrete instance of `PollingSourcePathTagFilterInput` via:
//
//	PollingSourcePathTagFilterArgs{...}
type PollingSourcePathTagFilterInput interface {
	pulumi.Input

	ToPollingSourcePathTagFilterOutput() PollingSourcePathTagFilterOutput
	ToPollingSourcePathTagFilterOutputWithContext(context.Context) PollingSourcePathTagFilterOutput
}

type PollingSourcePathTagFilterArgs struct {
	// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// This value has to be set to `TagFilters`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PollingSourcePathTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourcePathTagFilter)(nil)).Elem()
}

func (i PollingSourcePathTagFilterArgs) ToPollingSourcePathTagFilterOutput() PollingSourcePathTagFilterOutput {
	return i.ToPollingSourcePathTagFilterOutputWithContext(context.Background())
}

func (i PollingSourcePathTagFilterArgs) ToPollingSourcePathTagFilterOutputWithContext(ctx context.Context) PollingSourcePathTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourcePathTagFilterOutput)
}

// PollingSourcePathTagFilterArrayInput is an input type that accepts PollingSourcePathTagFilterArray and PollingSourcePathTagFilterArrayOutput values.
// You can construct a concrete instance of `PollingSourcePathTagFilterArrayInput` via:
//
//	PollingSourcePathTagFilterArray{ PollingSourcePathTagFilterArgs{...} }
type PollingSourcePathTagFilterArrayInput interface {
	pulumi.Input

	ToPollingSourcePathTagFilterArrayOutput() PollingSourcePathTagFilterArrayOutput
	ToPollingSourcePathTagFilterArrayOutputWithContext(context.Context) PollingSourcePathTagFilterArrayOutput
}

type PollingSourcePathTagFilterArray []PollingSourcePathTagFilterInput

func (PollingSourcePathTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourcePathTagFilter)(nil)).Elem()
}

func (i PollingSourcePathTagFilterArray) ToPollingSourcePathTagFilterArrayOutput() PollingSourcePathTagFilterArrayOutput {
	return i.ToPollingSourcePathTagFilterArrayOutputWithContext(context.Background())
}

func (i PollingSourcePathTagFilterArray) ToPollingSourcePathTagFilterArrayOutputWithContext(ctx context.Context) PollingSourcePathTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PollingSourcePathTagFilterArrayOutput)
}

type PollingSourcePathTagFilterOutput struct{ *pulumi.OutputState }

func (PollingSourcePathTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PollingSourcePathTagFilter)(nil)).Elem()
}

func (o PollingSourcePathTagFilterOutput) ToPollingSourcePathTagFilterOutput() PollingSourcePathTagFilterOutput {
	return o
}

func (o PollingSourcePathTagFilterOutput) ToPollingSourcePathTagFilterOutputWithContext(ctx context.Context) PollingSourcePathTagFilterOutput {
	return o
}

// Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
func (o PollingSourcePathTagFilterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourcePathTagFilter) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of key-value pairs of tag filters. Eg: `["k3=v3"]`
func (o PollingSourcePathTagFilterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PollingSourcePathTagFilter) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// This value has to be set to `TagFilters`
func (o PollingSourcePathTagFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PollingSourcePathTagFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PollingSourcePathTagFilterArrayOutput struct{ *pulumi.OutputState }

func (PollingSourcePathTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PollingSourcePathTagFilter)(nil)).Elem()
}

func (o PollingSourcePathTagFilterArrayOutput) ToPollingSourcePathTagFilterArrayOutput() PollingSourcePathTagFilterArrayOutput {
	return o
}

func (o PollingSourcePathTagFilterArrayOutput) ToPollingSourcePathTagFilterArrayOutputWithContext(ctx context.Context) PollingSourcePathTagFilterArrayOutput {
	return o
}

func (o PollingSourcePathTagFilterArrayOutput) Index(i pulumi.IntInput) PollingSourcePathTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PollingSourcePathTagFilter {
		return vs[0].([]PollingSourcePathTagFilter)[vs[1].(int)]
	}).(PollingSourcePathTagFilterOutput)
}

type S3AuditSourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`.
	AccessKey               *string `pulumi:"accessKey"`
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	AuthUri                 *string `pulumi:"authUri"`
	ClientEmail             *string `pulumi:"clientEmail"`
	ClientId                *string `pulumi:"clientId"`
	ClientX509CertUrl       *string `pulumi:"clientX509CertUrl"`
	PrivateKey              *string `pulumi:"privateKey"`
	PrivateKeyId            *string `pulumi:"privateKeyId"`
	ProjectId               *string `pulumi:"projectId"`
	// Your AWS Bucket region.
	Region *string `pulumi:"region"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`.
	SecretKey *string `pulumi:"secretKey"`
	TokenUri  *string `pulumi:"tokenUri"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type string `pulumi:"type"`
}

// S3AuditSourceAuthenticationInput is an input type that accepts S3AuditSourceAuthenticationArgs and S3AuditSourceAuthenticationOutput values.
// You can construct a concrete instance of `S3AuditSourceAuthenticationInput` via:
//
//	S3AuditSourceAuthenticationArgs{...}
type S3AuditSourceAuthenticationInput interface {
	pulumi.Input

	ToS3AuditSourceAuthenticationOutput() S3AuditSourceAuthenticationOutput
	ToS3AuditSourceAuthenticationOutputWithContext(context.Context) S3AuditSourceAuthenticationOutput
}

type S3AuditSourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`.
	AccessKey               pulumi.StringPtrInput `pulumi:"accessKey"`
	AuthProviderX509CertUrl pulumi.StringPtrInput `pulumi:"authProviderX509CertUrl"`
	AuthUri                 pulumi.StringPtrInput `pulumi:"authUri"`
	ClientEmail             pulumi.StringPtrInput `pulumi:"clientEmail"`
	ClientId                pulumi.StringPtrInput `pulumi:"clientId"`
	ClientX509CertUrl       pulumi.StringPtrInput `pulumi:"clientX509CertUrl"`
	PrivateKey              pulumi.StringPtrInput `pulumi:"privateKey"`
	PrivateKeyId            pulumi.StringPtrInput `pulumi:"privateKeyId"`
	ProjectId               pulumi.StringPtrInput `pulumi:"projectId"`
	// Your AWS Bucket region.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	TokenUri  pulumi.StringPtrInput `pulumi:"tokenUri"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (S3AuditSourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceAuthentication)(nil)).Elem()
}

func (i S3AuditSourceAuthenticationArgs) ToS3AuditSourceAuthenticationOutput() S3AuditSourceAuthenticationOutput {
	return i.ToS3AuditSourceAuthenticationOutputWithContext(context.Background())
}

func (i S3AuditSourceAuthenticationArgs) ToS3AuditSourceAuthenticationOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceAuthenticationOutput)
}

func (i S3AuditSourceAuthenticationArgs) ToS3AuditSourceAuthenticationPtrOutput() S3AuditSourceAuthenticationPtrOutput {
	return i.ToS3AuditSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i S3AuditSourceAuthenticationArgs) ToS3AuditSourceAuthenticationPtrOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceAuthenticationOutput).ToS3AuditSourceAuthenticationPtrOutputWithContext(ctx)
}

// S3AuditSourceAuthenticationPtrInput is an input type that accepts S3AuditSourceAuthenticationArgs, S3AuditSourceAuthenticationPtr and S3AuditSourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `S3AuditSourceAuthenticationPtrInput` via:
//
//	        S3AuditSourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type S3AuditSourceAuthenticationPtrInput interface {
	pulumi.Input

	ToS3AuditSourceAuthenticationPtrOutput() S3AuditSourceAuthenticationPtrOutput
	ToS3AuditSourceAuthenticationPtrOutputWithContext(context.Context) S3AuditSourceAuthenticationPtrOutput
}

type s3auditSourceAuthenticationPtrType S3AuditSourceAuthenticationArgs

func S3AuditSourceAuthenticationPtr(v *S3AuditSourceAuthenticationArgs) S3AuditSourceAuthenticationPtrInput {
	return (*s3auditSourceAuthenticationPtrType)(v)
}

func (*s3auditSourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSourceAuthentication)(nil)).Elem()
}

func (i *s3auditSourceAuthenticationPtrType) ToS3AuditSourceAuthenticationPtrOutput() S3AuditSourceAuthenticationPtrOutput {
	return i.ToS3AuditSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *s3auditSourceAuthenticationPtrType) ToS3AuditSourceAuthenticationPtrOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceAuthenticationPtrOutput)
}

type S3AuditSourceAuthenticationOutput struct{ *pulumi.OutputState }

func (S3AuditSourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceAuthentication)(nil)).Elem()
}

func (o S3AuditSourceAuthenticationOutput) ToS3AuditSourceAuthenticationOutput() S3AuditSourceAuthenticationOutput {
	return o
}

func (o S3AuditSourceAuthenticationOutput) ToS3AuditSourceAuthenticationOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationOutput {
	return o
}

func (o S3AuditSourceAuthenticationOutput) ToS3AuditSourceAuthenticationPtrOutput() S3AuditSourceAuthenticationPtrOutput {
	return o.ToS3AuditSourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o S3AuditSourceAuthenticationOutput) ToS3AuditSourceAuthenticationPtrOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3AuditSourceAuthentication) *S3AuditSourceAuthentication {
		return &v
	}).(S3AuditSourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`.
func (o S3AuditSourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.AuthProviderX509CertUrl }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.AuthUri }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.ClientEmail }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.ClientX509CertUrl }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.PrivateKeyId }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Your AWS Bucket region.
func (o S3AuditSourceAuthenticationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
func (o S3AuditSourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`.
func (o S3AuditSourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) *string { return v.TokenUri }).(pulumi.StringPtrOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
func (o S3AuditSourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type S3AuditSourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (S3AuditSourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSourceAuthentication)(nil)).Elem()
}

func (o S3AuditSourceAuthenticationPtrOutput) ToS3AuditSourceAuthenticationPtrOutput() S3AuditSourceAuthenticationPtrOutput {
	return o
}

func (o S3AuditSourceAuthenticationPtrOutput) ToS3AuditSourceAuthenticationPtrOutputWithContext(ctx context.Context) S3AuditSourceAuthenticationPtrOutput {
	return o
}

func (o S3AuditSourceAuthenticationPtrOutput) Elem() S3AuditSourceAuthenticationOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) S3AuditSourceAuthentication {
		if v != nil {
			return *v
		}
		var ret S3AuditSourceAuthentication
		return ret
	}).(S3AuditSourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`.
func (o S3AuditSourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AuthProviderX509CertUrl
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AuthUri
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientEmail
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientX509CertUrl
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyId
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Your AWS Bucket region.
func (o S3AuditSourceAuthenticationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
func (o S3AuditSourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`.
func (o S3AuditSourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceAuthenticationPtrOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TokenUri
	}).(pulumi.StringPtrOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
func (o S3AuditSourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type S3AuditSourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// S3AuditSourceDefaultDateFormatInput is an input type that accepts S3AuditSourceDefaultDateFormatArgs and S3AuditSourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `S3AuditSourceDefaultDateFormatInput` via:
//
//	S3AuditSourceDefaultDateFormatArgs{...}
type S3AuditSourceDefaultDateFormatInput interface {
	pulumi.Input

	ToS3AuditSourceDefaultDateFormatOutput() S3AuditSourceDefaultDateFormatOutput
	ToS3AuditSourceDefaultDateFormatOutputWithContext(context.Context) S3AuditSourceDefaultDateFormatOutput
}

type S3AuditSourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (S3AuditSourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceDefaultDateFormat)(nil)).Elem()
}

func (i S3AuditSourceDefaultDateFormatArgs) ToS3AuditSourceDefaultDateFormatOutput() S3AuditSourceDefaultDateFormatOutput {
	return i.ToS3AuditSourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i S3AuditSourceDefaultDateFormatArgs) ToS3AuditSourceDefaultDateFormatOutputWithContext(ctx context.Context) S3AuditSourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceDefaultDateFormatOutput)
}

// S3AuditSourceDefaultDateFormatArrayInput is an input type that accepts S3AuditSourceDefaultDateFormatArray and S3AuditSourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `S3AuditSourceDefaultDateFormatArrayInput` via:
//
//	S3AuditSourceDefaultDateFormatArray{ S3AuditSourceDefaultDateFormatArgs{...} }
type S3AuditSourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToS3AuditSourceDefaultDateFormatArrayOutput() S3AuditSourceDefaultDateFormatArrayOutput
	ToS3AuditSourceDefaultDateFormatArrayOutputWithContext(context.Context) S3AuditSourceDefaultDateFormatArrayOutput
}

type S3AuditSourceDefaultDateFormatArray []S3AuditSourceDefaultDateFormatInput

func (S3AuditSourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourceDefaultDateFormat)(nil)).Elem()
}

func (i S3AuditSourceDefaultDateFormatArray) ToS3AuditSourceDefaultDateFormatArrayOutput() S3AuditSourceDefaultDateFormatArrayOutput {
	return i.ToS3AuditSourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i S3AuditSourceDefaultDateFormatArray) ToS3AuditSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) S3AuditSourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceDefaultDateFormatArrayOutput)
}

type S3AuditSourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (S3AuditSourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceDefaultDateFormat)(nil)).Elem()
}

func (o S3AuditSourceDefaultDateFormatOutput) ToS3AuditSourceDefaultDateFormatOutput() S3AuditSourceDefaultDateFormatOutput {
	return o
}

func (o S3AuditSourceDefaultDateFormatOutput) ToS3AuditSourceDefaultDateFormatOutputWithContext(ctx context.Context) S3AuditSourceDefaultDateFormatOutput {
	return o
}

func (o S3AuditSourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o S3AuditSourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type S3AuditSourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourceDefaultDateFormat)(nil)).Elem()
}

func (o S3AuditSourceDefaultDateFormatArrayOutput) ToS3AuditSourceDefaultDateFormatArrayOutput() S3AuditSourceDefaultDateFormatArrayOutput {
	return o
}

func (o S3AuditSourceDefaultDateFormatArrayOutput) ToS3AuditSourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) S3AuditSourceDefaultDateFormatArrayOutput {
	return o
}

func (o S3AuditSourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) S3AuditSourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AuditSourceDefaultDateFormat {
		return vs[0].([]S3AuditSourceDefaultDateFormat)[vs[1].(int)]
	}).(S3AuditSourceDefaultDateFormatOutput)
}

type S3AuditSourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// S3AuditSourceFilterInput is an input type that accepts S3AuditSourceFilterArgs and S3AuditSourceFilterOutput values.
// You can construct a concrete instance of `S3AuditSourceFilterInput` via:
//
//	S3AuditSourceFilterArgs{...}
type S3AuditSourceFilterInput interface {
	pulumi.Input

	ToS3AuditSourceFilterOutput() S3AuditSourceFilterOutput
	ToS3AuditSourceFilterOutputWithContext(context.Context) S3AuditSourceFilterOutput
}

type S3AuditSourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (S3AuditSourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceFilter)(nil)).Elem()
}

func (i S3AuditSourceFilterArgs) ToS3AuditSourceFilterOutput() S3AuditSourceFilterOutput {
	return i.ToS3AuditSourceFilterOutputWithContext(context.Background())
}

func (i S3AuditSourceFilterArgs) ToS3AuditSourceFilterOutputWithContext(ctx context.Context) S3AuditSourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceFilterOutput)
}

// S3AuditSourceFilterArrayInput is an input type that accepts S3AuditSourceFilterArray and S3AuditSourceFilterArrayOutput values.
// You can construct a concrete instance of `S3AuditSourceFilterArrayInput` via:
//
//	S3AuditSourceFilterArray{ S3AuditSourceFilterArgs{...} }
type S3AuditSourceFilterArrayInput interface {
	pulumi.Input

	ToS3AuditSourceFilterArrayOutput() S3AuditSourceFilterArrayOutput
	ToS3AuditSourceFilterArrayOutputWithContext(context.Context) S3AuditSourceFilterArrayOutput
}

type S3AuditSourceFilterArray []S3AuditSourceFilterInput

func (S3AuditSourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourceFilter)(nil)).Elem()
}

func (i S3AuditSourceFilterArray) ToS3AuditSourceFilterArrayOutput() S3AuditSourceFilterArrayOutput {
	return i.ToS3AuditSourceFilterArrayOutputWithContext(context.Background())
}

func (i S3AuditSourceFilterArray) ToS3AuditSourceFilterArrayOutputWithContext(ctx context.Context) S3AuditSourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceFilterArrayOutput)
}

type S3AuditSourceFilterOutput struct{ *pulumi.OutputState }

func (S3AuditSourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourceFilter)(nil)).Elem()
}

func (o S3AuditSourceFilterOutput) ToS3AuditSourceFilterOutput() S3AuditSourceFilterOutput {
	return o
}

func (o S3AuditSourceFilterOutput) ToS3AuditSourceFilterOutputWithContext(ctx context.Context) S3AuditSourceFilterOutput {
	return o
}

func (o S3AuditSourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o S3AuditSourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o S3AuditSourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type S3AuditSourceFilterArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourceFilter)(nil)).Elem()
}

func (o S3AuditSourceFilterArrayOutput) ToS3AuditSourceFilterArrayOutput() S3AuditSourceFilterArrayOutput {
	return o
}

func (o S3AuditSourceFilterArrayOutput) ToS3AuditSourceFilterArrayOutputWithContext(ctx context.Context) S3AuditSourceFilterArrayOutput {
	return o
}

func (o S3AuditSourceFilterArrayOutput) Index(i pulumi.IntInput) S3AuditSourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AuditSourceFilter {
		return vs[0].([]S3AuditSourceFilter)[vs[1].(int)]
	}).(S3AuditSourceFilterOutput)
}

type S3AuditSourcePath struct {
	// The name of the bucket.
	BucketName        *string                          `pulumi:"bucketName"`
	CustomServices    []S3AuditSourcePathCustomService `pulumi:"customServices"`
	LimitToNamespaces []string                         `pulumi:"limitToNamespaces"`
	LimitToRegions    []string                         `pulumi:"limitToRegions"`
	LimitToServices   []string                         `pulumi:"limitToServices"`
	// The path to the data.
	PathExpression *string `pulumi:"pathExpression"`
	// This is a computed field for SNS topic/subscription ARN.
	SnsTopicOrSubscriptionArns []S3AuditSourcePathSnsTopicOrSubscriptionArn `pulumi:"snsTopicOrSubscriptionArns"`
	TagFilters                 []S3AuditSourcePathTagFilter                 `pulumi:"tagFilters"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type            string `pulumi:"type"`
	UseVersionedApi *bool  `pulumi:"useVersionedApi"`
}

// S3AuditSourcePathInput is an input type that accepts S3AuditSourcePathArgs and S3AuditSourcePathOutput values.
// You can construct a concrete instance of `S3AuditSourcePathInput` via:
//
//	S3AuditSourcePathArgs{...}
type S3AuditSourcePathInput interface {
	pulumi.Input

	ToS3AuditSourcePathOutput() S3AuditSourcePathOutput
	ToS3AuditSourcePathOutputWithContext(context.Context) S3AuditSourcePathOutput
}

type S3AuditSourcePathArgs struct {
	// The name of the bucket.
	BucketName        pulumi.StringPtrInput                    `pulumi:"bucketName"`
	CustomServices    S3AuditSourcePathCustomServiceArrayInput `pulumi:"customServices"`
	LimitToNamespaces pulumi.StringArrayInput                  `pulumi:"limitToNamespaces"`
	LimitToRegions    pulumi.StringArrayInput                  `pulumi:"limitToRegions"`
	LimitToServices   pulumi.StringArrayInput                  `pulumi:"limitToServices"`
	// The path to the data.
	PathExpression pulumi.StringPtrInput `pulumi:"pathExpression"`
	// This is a computed field for SNS topic/subscription ARN.
	SnsTopicOrSubscriptionArns S3AuditSourcePathSnsTopicOrSubscriptionArnArrayInput `pulumi:"snsTopicOrSubscriptionArns"`
	TagFilters                 S3AuditSourcePathTagFilterArrayInput                 `pulumi:"tagFilters"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type            pulumi.StringInput  `pulumi:"type"`
	UseVersionedApi pulumi.BoolPtrInput `pulumi:"useVersionedApi"`
}

func (S3AuditSourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePath)(nil)).Elem()
}

func (i S3AuditSourcePathArgs) ToS3AuditSourcePathOutput() S3AuditSourcePathOutput {
	return i.ToS3AuditSourcePathOutputWithContext(context.Background())
}

func (i S3AuditSourcePathArgs) ToS3AuditSourcePathOutputWithContext(ctx context.Context) S3AuditSourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathOutput)
}

func (i S3AuditSourcePathArgs) ToS3AuditSourcePathPtrOutput() S3AuditSourcePathPtrOutput {
	return i.ToS3AuditSourcePathPtrOutputWithContext(context.Background())
}

func (i S3AuditSourcePathArgs) ToS3AuditSourcePathPtrOutputWithContext(ctx context.Context) S3AuditSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathOutput).ToS3AuditSourcePathPtrOutputWithContext(ctx)
}

// S3AuditSourcePathPtrInput is an input type that accepts S3AuditSourcePathArgs, S3AuditSourcePathPtr and S3AuditSourcePathPtrOutput values.
// You can construct a concrete instance of `S3AuditSourcePathPtrInput` via:
//
//	        S3AuditSourcePathArgs{...}
//
//	or:
//
//	        nil
type S3AuditSourcePathPtrInput interface {
	pulumi.Input

	ToS3AuditSourcePathPtrOutput() S3AuditSourcePathPtrOutput
	ToS3AuditSourcePathPtrOutputWithContext(context.Context) S3AuditSourcePathPtrOutput
}

type s3auditSourcePathPtrType S3AuditSourcePathArgs

func S3AuditSourcePathPtr(v *S3AuditSourcePathArgs) S3AuditSourcePathPtrInput {
	return (*s3auditSourcePathPtrType)(v)
}

func (*s3auditSourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSourcePath)(nil)).Elem()
}

func (i *s3auditSourcePathPtrType) ToS3AuditSourcePathPtrOutput() S3AuditSourcePathPtrOutput {
	return i.ToS3AuditSourcePathPtrOutputWithContext(context.Background())
}

func (i *s3auditSourcePathPtrType) ToS3AuditSourcePathPtrOutputWithContext(ctx context.Context) S3AuditSourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathPtrOutput)
}

type S3AuditSourcePathOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePath)(nil)).Elem()
}

func (o S3AuditSourcePathOutput) ToS3AuditSourcePathOutput() S3AuditSourcePathOutput {
	return o
}

func (o S3AuditSourcePathOutput) ToS3AuditSourcePathOutputWithContext(ctx context.Context) S3AuditSourcePathOutput {
	return o
}

func (o S3AuditSourcePathOutput) ToS3AuditSourcePathPtrOutput() S3AuditSourcePathPtrOutput {
	return o.ToS3AuditSourcePathPtrOutputWithContext(context.Background())
}

func (o S3AuditSourcePathOutput) ToS3AuditSourcePathPtrOutputWithContext(ctx context.Context) S3AuditSourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3AuditSourcePath) *S3AuditSourcePath {
		return &v
	}).(S3AuditSourcePathPtrOutput)
}

// The name of the bucket.
func (o S3AuditSourcePathOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePath) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourcePathOutput) CustomServices() S3AuditSourcePathCustomServiceArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []S3AuditSourcePathCustomService { return v.CustomServices }).(S3AuditSourcePathCustomServiceArrayOutput)
}

func (o S3AuditSourcePathOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []string { return v.LimitToNamespaces }).(pulumi.StringArrayOutput)
}

func (o S3AuditSourcePathOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []string { return v.LimitToRegions }).(pulumi.StringArrayOutput)
}

func (o S3AuditSourcePathOutput) LimitToServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []string { return v.LimitToServices }).(pulumi.StringArrayOutput)
}

// The path to the data.
func (o S3AuditSourcePathOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePath) *string { return v.PathExpression }).(pulumi.StringPtrOutput)
}

// This is a computed field for SNS topic/subscription ARN.
func (o S3AuditSourcePathOutput) SnsTopicOrSubscriptionArns() S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []S3AuditSourcePathSnsTopicOrSubscriptionArn {
		return v.SnsTopicOrSubscriptionArns
	}).(S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

func (o S3AuditSourcePathOutput) TagFilters() S3AuditSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePath) []S3AuditSourcePathTagFilter { return v.TagFilters }).(S3AuditSourcePathTagFilterArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
func (o S3AuditSourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v S3AuditSourcePath) string { return v.Type }).(pulumi.StringOutput)
}

func (o S3AuditSourcePathOutput) UseVersionedApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePath) *bool { return v.UseVersionedApi }).(pulumi.BoolPtrOutput)
}

type S3AuditSourcePathPtrOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSourcePath)(nil)).Elem()
}

func (o S3AuditSourcePathPtrOutput) ToS3AuditSourcePathPtrOutput() S3AuditSourcePathPtrOutput {
	return o
}

func (o S3AuditSourcePathPtrOutput) ToS3AuditSourcePathPtrOutputWithContext(ctx context.Context) S3AuditSourcePathPtrOutput {
	return o
}

func (o S3AuditSourcePathPtrOutput) Elem() S3AuditSourcePathOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) S3AuditSourcePath {
		if v != nil {
			return *v
		}
		var ret S3AuditSourcePath
		return ret
	}).(S3AuditSourcePathOutput)
}

// The name of the bucket.
func (o S3AuditSourcePathPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourcePathPtrOutput) CustomServices() S3AuditSourcePathCustomServiceArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []S3AuditSourcePathCustomService {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(S3AuditSourcePathCustomServiceArrayOutput)
}

func (o S3AuditSourcePathPtrOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToNamespaces
	}).(pulumi.StringArrayOutput)
}

func (o S3AuditSourcePathPtrOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToRegions
	}).(pulumi.StringArrayOutput)
}

func (o S3AuditSourcePathPtrOutput) LimitToServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToServices
	}).(pulumi.StringArrayOutput)
}

// The path to the data.
func (o S3AuditSourcePathPtrOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) *string {
		if v == nil {
			return nil
		}
		return v.PathExpression
	}).(pulumi.StringPtrOutput)
}

// This is a computed field for SNS topic/subscription ARN.
func (o S3AuditSourcePathPtrOutput) SnsTopicOrSubscriptionArns() S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []S3AuditSourcePathSnsTopicOrSubscriptionArn {
		if v == nil {
			return nil
		}
		return v.SnsTopicOrSubscriptionArns
	}).(S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

func (o S3AuditSourcePathPtrOutput) TagFilters() S3AuditSourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) []S3AuditSourcePathTagFilter {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(S3AuditSourcePathTagFilterArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
func (o S3AuditSourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o S3AuditSourcePathPtrOutput) UseVersionedApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3AuditSourcePath) *bool {
		if v == nil {
			return nil
		}
		return v.UseVersionedApi
	}).(pulumi.BoolPtrOutput)
}

type S3AuditSourcePathCustomService struct {
	Prefixes    []string `pulumi:"prefixes"`
	ServiceName *string  `pulumi:"serviceName"`
}

// S3AuditSourcePathCustomServiceInput is an input type that accepts S3AuditSourcePathCustomServiceArgs and S3AuditSourcePathCustomServiceOutput values.
// You can construct a concrete instance of `S3AuditSourcePathCustomServiceInput` via:
//
//	S3AuditSourcePathCustomServiceArgs{...}
type S3AuditSourcePathCustomServiceInput interface {
	pulumi.Input

	ToS3AuditSourcePathCustomServiceOutput() S3AuditSourcePathCustomServiceOutput
	ToS3AuditSourcePathCustomServiceOutputWithContext(context.Context) S3AuditSourcePathCustomServiceOutput
}

type S3AuditSourcePathCustomServiceArgs struct {
	Prefixes    pulumi.StringArrayInput `pulumi:"prefixes"`
	ServiceName pulumi.StringPtrInput   `pulumi:"serviceName"`
}

func (S3AuditSourcePathCustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathCustomService)(nil)).Elem()
}

func (i S3AuditSourcePathCustomServiceArgs) ToS3AuditSourcePathCustomServiceOutput() S3AuditSourcePathCustomServiceOutput {
	return i.ToS3AuditSourcePathCustomServiceOutputWithContext(context.Background())
}

func (i S3AuditSourcePathCustomServiceArgs) ToS3AuditSourcePathCustomServiceOutputWithContext(ctx context.Context) S3AuditSourcePathCustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathCustomServiceOutput)
}

// S3AuditSourcePathCustomServiceArrayInput is an input type that accepts S3AuditSourcePathCustomServiceArray and S3AuditSourcePathCustomServiceArrayOutput values.
// You can construct a concrete instance of `S3AuditSourcePathCustomServiceArrayInput` via:
//
//	S3AuditSourcePathCustomServiceArray{ S3AuditSourcePathCustomServiceArgs{...} }
type S3AuditSourcePathCustomServiceArrayInput interface {
	pulumi.Input

	ToS3AuditSourcePathCustomServiceArrayOutput() S3AuditSourcePathCustomServiceArrayOutput
	ToS3AuditSourcePathCustomServiceArrayOutputWithContext(context.Context) S3AuditSourcePathCustomServiceArrayOutput
}

type S3AuditSourcePathCustomServiceArray []S3AuditSourcePathCustomServiceInput

func (S3AuditSourcePathCustomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathCustomService)(nil)).Elem()
}

func (i S3AuditSourcePathCustomServiceArray) ToS3AuditSourcePathCustomServiceArrayOutput() S3AuditSourcePathCustomServiceArrayOutput {
	return i.ToS3AuditSourcePathCustomServiceArrayOutputWithContext(context.Background())
}

func (i S3AuditSourcePathCustomServiceArray) ToS3AuditSourcePathCustomServiceArrayOutputWithContext(ctx context.Context) S3AuditSourcePathCustomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathCustomServiceArrayOutput)
}

type S3AuditSourcePathCustomServiceOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathCustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathCustomService)(nil)).Elem()
}

func (o S3AuditSourcePathCustomServiceOutput) ToS3AuditSourcePathCustomServiceOutput() S3AuditSourcePathCustomServiceOutput {
	return o
}

func (o S3AuditSourcePathCustomServiceOutput) ToS3AuditSourcePathCustomServiceOutputWithContext(ctx context.Context) S3AuditSourcePathCustomServiceOutput {
	return o
}

func (o S3AuditSourcePathCustomServiceOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePathCustomService) []string { return v.Prefixes }).(pulumi.StringArrayOutput)
}

func (o S3AuditSourcePathCustomServiceOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePathCustomService) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type S3AuditSourcePathCustomServiceArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathCustomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathCustomService)(nil)).Elem()
}

func (o S3AuditSourcePathCustomServiceArrayOutput) ToS3AuditSourcePathCustomServiceArrayOutput() S3AuditSourcePathCustomServiceArrayOutput {
	return o
}

func (o S3AuditSourcePathCustomServiceArrayOutput) ToS3AuditSourcePathCustomServiceArrayOutputWithContext(ctx context.Context) S3AuditSourcePathCustomServiceArrayOutput {
	return o
}

func (o S3AuditSourcePathCustomServiceArrayOutput) Index(i pulumi.IntInput) S3AuditSourcePathCustomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AuditSourcePathCustomService {
		return vs[0].([]S3AuditSourcePathCustomService)[vs[1].(int)]
	}).(S3AuditSourcePathCustomServiceOutput)
}

type S3AuditSourcePathSnsTopicOrSubscriptionArn struct {
	Arn       *string `pulumi:"arn"`
	IsSuccess *bool   `pulumi:"isSuccess"`
}

// S3AuditSourcePathSnsTopicOrSubscriptionArnInput is an input type that accepts S3AuditSourcePathSnsTopicOrSubscriptionArnArgs and S3AuditSourcePathSnsTopicOrSubscriptionArnOutput values.
// You can construct a concrete instance of `S3AuditSourcePathSnsTopicOrSubscriptionArnInput` via:
//
//	S3AuditSourcePathSnsTopicOrSubscriptionArnArgs{...}
type S3AuditSourcePathSnsTopicOrSubscriptionArnInput interface {
	pulumi.Input

	ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnOutput
	ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutputWithContext(context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnOutput
}

type S3AuditSourcePathSnsTopicOrSubscriptionArnArgs struct {
	Arn       pulumi.StringPtrInput `pulumi:"arn"`
	IsSuccess pulumi.BoolPtrInput   `pulumi:"isSuccess"`
}

func (S3AuditSourcePathSnsTopicOrSubscriptionArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (i S3AuditSourcePathSnsTopicOrSubscriptionArnArgs) ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnOutput {
	return i.ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutputWithContext(context.Background())
}

func (i S3AuditSourcePathSnsTopicOrSubscriptionArnArgs) ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutputWithContext(ctx context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathSnsTopicOrSubscriptionArnOutput)
}

// S3AuditSourcePathSnsTopicOrSubscriptionArnArrayInput is an input type that accepts S3AuditSourcePathSnsTopicOrSubscriptionArnArray and S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput values.
// You can construct a concrete instance of `S3AuditSourcePathSnsTopicOrSubscriptionArnArrayInput` via:
//
//	S3AuditSourcePathSnsTopicOrSubscriptionArnArray{ S3AuditSourcePathSnsTopicOrSubscriptionArnArgs{...} }
type S3AuditSourcePathSnsTopicOrSubscriptionArnArrayInput interface {
	pulumi.Input

	ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput
	ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput
}

type S3AuditSourcePathSnsTopicOrSubscriptionArnArray []S3AuditSourcePathSnsTopicOrSubscriptionArnInput

func (S3AuditSourcePathSnsTopicOrSubscriptionArnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (i S3AuditSourcePathSnsTopicOrSubscriptionArnArray) ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return i.ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(context.Background())
}

func (i S3AuditSourcePathSnsTopicOrSubscriptionArnArray) ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(ctx context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

type S3AuditSourcePathSnsTopicOrSubscriptionArnOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathSnsTopicOrSubscriptionArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnOutput) ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnOutput {
	return o
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnOutput) ToS3AuditSourcePathSnsTopicOrSubscriptionArnOutputWithContext(ctx context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnOutput {
	return o
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePathSnsTopicOrSubscriptionArn) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnOutput) IsSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePathSnsTopicOrSubscriptionArn) *bool { return v.IsSuccess }).(pulumi.BoolPtrOutput)
}

type S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput) ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput() S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput) ToS3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(ctx context.Context) S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o
}

func (o S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput) Index(i pulumi.IntInput) S3AuditSourcePathSnsTopicOrSubscriptionArnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AuditSourcePathSnsTopicOrSubscriptionArn {
		return vs[0].([]S3AuditSourcePathSnsTopicOrSubscriptionArn)[vs[1].(int)]
	}).(S3AuditSourcePathSnsTopicOrSubscriptionArnOutput)
}

type S3AuditSourcePathTagFilter struct {
	Namespace *string  `pulumi:"namespace"`
	Tags      []string `pulumi:"tags"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type *string `pulumi:"type"`
}

// S3AuditSourcePathTagFilterInput is an input type that accepts S3AuditSourcePathTagFilterArgs and S3AuditSourcePathTagFilterOutput values.
// You can construct a concrete instance of `S3AuditSourcePathTagFilterInput` via:
//
//	S3AuditSourcePathTagFilterArgs{...}
type S3AuditSourcePathTagFilterInput interface {
	pulumi.Input

	ToS3AuditSourcePathTagFilterOutput() S3AuditSourcePathTagFilterOutput
	ToS3AuditSourcePathTagFilterOutputWithContext(context.Context) S3AuditSourcePathTagFilterOutput
}

type S3AuditSourcePathTagFilterArgs struct {
	Namespace pulumi.StringPtrInput   `pulumi:"namespace"`
	Tags      pulumi.StringArrayInput `pulumi:"tags"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (S3AuditSourcePathTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathTagFilter)(nil)).Elem()
}

func (i S3AuditSourcePathTagFilterArgs) ToS3AuditSourcePathTagFilterOutput() S3AuditSourcePathTagFilterOutput {
	return i.ToS3AuditSourcePathTagFilterOutputWithContext(context.Background())
}

func (i S3AuditSourcePathTagFilterArgs) ToS3AuditSourcePathTagFilterOutputWithContext(ctx context.Context) S3AuditSourcePathTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathTagFilterOutput)
}

// S3AuditSourcePathTagFilterArrayInput is an input type that accepts S3AuditSourcePathTagFilterArray and S3AuditSourcePathTagFilterArrayOutput values.
// You can construct a concrete instance of `S3AuditSourcePathTagFilterArrayInput` via:
//
//	S3AuditSourcePathTagFilterArray{ S3AuditSourcePathTagFilterArgs{...} }
type S3AuditSourcePathTagFilterArrayInput interface {
	pulumi.Input

	ToS3AuditSourcePathTagFilterArrayOutput() S3AuditSourcePathTagFilterArrayOutput
	ToS3AuditSourcePathTagFilterArrayOutputWithContext(context.Context) S3AuditSourcePathTagFilterArrayOutput
}

type S3AuditSourcePathTagFilterArray []S3AuditSourcePathTagFilterInput

func (S3AuditSourcePathTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathTagFilter)(nil)).Elem()
}

func (i S3AuditSourcePathTagFilterArray) ToS3AuditSourcePathTagFilterArrayOutput() S3AuditSourcePathTagFilterArrayOutput {
	return i.ToS3AuditSourcePathTagFilterArrayOutputWithContext(context.Background())
}

func (i S3AuditSourcePathTagFilterArray) ToS3AuditSourcePathTagFilterArrayOutputWithContext(ctx context.Context) S3AuditSourcePathTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourcePathTagFilterArrayOutput)
}

type S3AuditSourcePathTagFilterOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3AuditSourcePathTagFilter)(nil)).Elem()
}

func (o S3AuditSourcePathTagFilterOutput) ToS3AuditSourcePathTagFilterOutput() S3AuditSourcePathTagFilterOutput {
	return o
}

func (o S3AuditSourcePathTagFilterOutput) ToS3AuditSourcePathTagFilterOutputWithContext(ctx context.Context) S3AuditSourcePathTagFilterOutput {
	return o
}

func (o S3AuditSourcePathTagFilterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePathTagFilter) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o S3AuditSourcePathTagFilterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3AuditSourcePathTagFilter) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
func (o S3AuditSourcePathTagFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3AuditSourcePathTagFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type S3AuditSourcePathTagFilterArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourcePathTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3AuditSourcePathTagFilter)(nil)).Elem()
}

func (o S3AuditSourcePathTagFilterArrayOutput) ToS3AuditSourcePathTagFilterArrayOutput() S3AuditSourcePathTagFilterArrayOutput {
	return o
}

func (o S3AuditSourcePathTagFilterArrayOutput) ToS3AuditSourcePathTagFilterArrayOutputWithContext(ctx context.Context) S3AuditSourcePathTagFilterArrayOutput {
	return o
}

func (o S3AuditSourcePathTagFilterArrayOutput) Index(i pulumi.IntInput) S3AuditSourcePathTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3AuditSourcePathTagFilter {
		return vs[0].([]S3AuditSourcePathTagFilter)[vs[1].(int)]
	}).(S3AuditSourcePathTagFilterOutput)
}

type S3SourceAuthentication struct {
	// Your AWS access key if using type `S3BucketAuthentication`.
	AccessKey               *string `pulumi:"accessKey"`
	AuthProviderX509CertUrl *string `pulumi:"authProviderX509CertUrl"`
	AuthUri                 *string `pulumi:"authUri"`
	ClientEmail             *string `pulumi:"clientEmail"`
	ClientId                *string `pulumi:"clientId"`
	ClientX509CertUrl       *string `pulumi:"clientX509CertUrl"`
	PrivateKey              *string `pulumi:"privateKey"`
	PrivateKeyId            *string `pulumi:"privateKeyId"`
	ProjectId               *string `pulumi:"projectId"`
	// Your AWS Bucket region.
	Region *string `pulumi:"region"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
	RoleArn *string `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`.
	SecretKey *string `pulumi:"secretKey"`
	TokenUri  *string `pulumi:"tokenUri"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type string `pulumi:"type"`
}

// S3SourceAuthenticationInput is an input type that accepts S3SourceAuthenticationArgs and S3SourceAuthenticationOutput values.
// You can construct a concrete instance of `S3SourceAuthenticationInput` via:
//
//	S3SourceAuthenticationArgs{...}
type S3SourceAuthenticationInput interface {
	pulumi.Input

	ToS3SourceAuthenticationOutput() S3SourceAuthenticationOutput
	ToS3SourceAuthenticationOutputWithContext(context.Context) S3SourceAuthenticationOutput
}

type S3SourceAuthenticationArgs struct {
	// Your AWS access key if using type `S3BucketAuthentication`.
	AccessKey               pulumi.StringPtrInput `pulumi:"accessKey"`
	AuthProviderX509CertUrl pulumi.StringPtrInput `pulumi:"authProviderX509CertUrl"`
	AuthUri                 pulumi.StringPtrInput `pulumi:"authUri"`
	ClientEmail             pulumi.StringPtrInput `pulumi:"clientEmail"`
	ClientId                pulumi.StringPtrInput `pulumi:"clientId"`
	ClientX509CertUrl       pulumi.StringPtrInput `pulumi:"clientX509CertUrl"`
	PrivateKey              pulumi.StringPtrInput `pulumi:"privateKey"`
	PrivateKeyId            pulumi.StringPtrInput `pulumi:"privateKeyId"`
	ProjectId               pulumi.StringPtrInput `pulumi:"projectId"`
	// Your AWS Bucket region.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// Your AWS secret key if using type `S3BucketAuthentication`.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	TokenUri  pulumi.StringPtrInput `pulumi:"tokenUri"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (S3SourceAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceAuthentication)(nil)).Elem()
}

func (i S3SourceAuthenticationArgs) ToS3SourceAuthenticationOutput() S3SourceAuthenticationOutput {
	return i.ToS3SourceAuthenticationOutputWithContext(context.Background())
}

func (i S3SourceAuthenticationArgs) ToS3SourceAuthenticationOutputWithContext(ctx context.Context) S3SourceAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceAuthenticationOutput)
}

func (i S3SourceAuthenticationArgs) ToS3SourceAuthenticationPtrOutput() S3SourceAuthenticationPtrOutput {
	return i.ToS3SourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i S3SourceAuthenticationArgs) ToS3SourceAuthenticationPtrOutputWithContext(ctx context.Context) S3SourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceAuthenticationOutput).ToS3SourceAuthenticationPtrOutputWithContext(ctx)
}

// S3SourceAuthenticationPtrInput is an input type that accepts S3SourceAuthenticationArgs, S3SourceAuthenticationPtr and S3SourceAuthenticationPtrOutput values.
// You can construct a concrete instance of `S3SourceAuthenticationPtrInput` via:
//
//	        S3SourceAuthenticationArgs{...}
//
//	or:
//
//	        nil
type S3SourceAuthenticationPtrInput interface {
	pulumi.Input

	ToS3SourceAuthenticationPtrOutput() S3SourceAuthenticationPtrOutput
	ToS3SourceAuthenticationPtrOutputWithContext(context.Context) S3SourceAuthenticationPtrOutput
}

type s3sourceAuthenticationPtrType S3SourceAuthenticationArgs

func S3SourceAuthenticationPtr(v *S3SourceAuthenticationArgs) S3SourceAuthenticationPtrInput {
	return (*s3sourceAuthenticationPtrType)(v)
}

func (*s3sourceAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3SourceAuthentication)(nil)).Elem()
}

func (i *s3sourceAuthenticationPtrType) ToS3SourceAuthenticationPtrOutput() S3SourceAuthenticationPtrOutput {
	return i.ToS3SourceAuthenticationPtrOutputWithContext(context.Background())
}

func (i *s3sourceAuthenticationPtrType) ToS3SourceAuthenticationPtrOutputWithContext(ctx context.Context) S3SourceAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceAuthenticationPtrOutput)
}

type S3SourceAuthenticationOutput struct{ *pulumi.OutputState }

func (S3SourceAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceAuthentication)(nil)).Elem()
}

func (o S3SourceAuthenticationOutput) ToS3SourceAuthenticationOutput() S3SourceAuthenticationOutput {
	return o
}

func (o S3SourceAuthenticationOutput) ToS3SourceAuthenticationOutputWithContext(ctx context.Context) S3SourceAuthenticationOutput {
	return o
}

func (o S3SourceAuthenticationOutput) ToS3SourceAuthenticationPtrOutput() S3SourceAuthenticationPtrOutput {
	return o.ToS3SourceAuthenticationPtrOutputWithContext(context.Background())
}

func (o S3SourceAuthenticationOutput) ToS3SourceAuthenticationPtrOutputWithContext(ctx context.Context) S3SourceAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3SourceAuthentication) *S3SourceAuthentication {
		return &v
	}).(S3SourceAuthenticationPtrOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`.
func (o S3SourceAuthenticationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.AuthProviderX509CertUrl }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.AuthUri }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.ClientEmail }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.ClientX509CertUrl }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.PrivateKeyId }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Your AWS Bucket region.
func (o S3SourceAuthenticationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
func (o S3SourceAuthenticationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`.
func (o S3SourceAuthenticationOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceAuthentication) *string { return v.TokenUri }).(pulumi.StringPtrOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
func (o S3SourceAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourceAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type S3SourceAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (S3SourceAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3SourceAuthentication)(nil)).Elem()
}

func (o S3SourceAuthenticationPtrOutput) ToS3SourceAuthenticationPtrOutput() S3SourceAuthenticationPtrOutput {
	return o
}

func (o S3SourceAuthenticationPtrOutput) ToS3SourceAuthenticationPtrOutputWithContext(ctx context.Context) S3SourceAuthenticationPtrOutput {
	return o
}

func (o S3SourceAuthenticationPtrOutput) Elem() S3SourceAuthenticationOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) S3SourceAuthentication {
		if v != nil {
			return *v
		}
		var ret S3SourceAuthentication
		return ret
	}).(S3SourceAuthenticationOutput)
}

// Your AWS access key if using type `S3BucketAuthentication`.
func (o S3SourceAuthenticationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) AuthProviderX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AuthProviderX509CertUrl
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) AuthUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.AuthUri
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientEmail
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) ClientX509CertUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ClientX509CertUrl
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) PrivateKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyId
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Your AWS Bucket region.
func (o S3SourceAuthenticationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
func (o S3SourceAuthenticationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// Your AWS secret key if using type `S3BucketAuthentication`.
func (o S3SourceAuthenticationPtrOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.SecretKey
	}).(pulumi.StringPtrOutput)
}

func (o S3SourceAuthenticationPtrOutput) TokenUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.TokenUri
	}).(pulumi.StringPtrOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
func (o S3SourceAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourceAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type S3SourceDefaultDateFormat struct {
	Format  string  `pulumi:"format"`
	Locator *string `pulumi:"locator"`
}

// S3SourceDefaultDateFormatInput is an input type that accepts S3SourceDefaultDateFormatArgs and S3SourceDefaultDateFormatOutput values.
// You can construct a concrete instance of `S3SourceDefaultDateFormatInput` via:
//
//	S3SourceDefaultDateFormatArgs{...}
type S3SourceDefaultDateFormatInput interface {
	pulumi.Input

	ToS3SourceDefaultDateFormatOutput() S3SourceDefaultDateFormatOutput
	ToS3SourceDefaultDateFormatOutputWithContext(context.Context) S3SourceDefaultDateFormatOutput
}

type S3SourceDefaultDateFormatArgs struct {
	Format  pulumi.StringInput    `pulumi:"format"`
	Locator pulumi.StringPtrInput `pulumi:"locator"`
}

func (S3SourceDefaultDateFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceDefaultDateFormat)(nil)).Elem()
}

func (i S3SourceDefaultDateFormatArgs) ToS3SourceDefaultDateFormatOutput() S3SourceDefaultDateFormatOutput {
	return i.ToS3SourceDefaultDateFormatOutputWithContext(context.Background())
}

func (i S3SourceDefaultDateFormatArgs) ToS3SourceDefaultDateFormatOutputWithContext(ctx context.Context) S3SourceDefaultDateFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceDefaultDateFormatOutput)
}

// S3SourceDefaultDateFormatArrayInput is an input type that accepts S3SourceDefaultDateFormatArray and S3SourceDefaultDateFormatArrayOutput values.
// You can construct a concrete instance of `S3SourceDefaultDateFormatArrayInput` via:
//
//	S3SourceDefaultDateFormatArray{ S3SourceDefaultDateFormatArgs{...} }
type S3SourceDefaultDateFormatArrayInput interface {
	pulumi.Input

	ToS3SourceDefaultDateFormatArrayOutput() S3SourceDefaultDateFormatArrayOutput
	ToS3SourceDefaultDateFormatArrayOutputWithContext(context.Context) S3SourceDefaultDateFormatArrayOutput
}

type S3SourceDefaultDateFormatArray []S3SourceDefaultDateFormatInput

func (S3SourceDefaultDateFormatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourceDefaultDateFormat)(nil)).Elem()
}

func (i S3SourceDefaultDateFormatArray) ToS3SourceDefaultDateFormatArrayOutput() S3SourceDefaultDateFormatArrayOutput {
	return i.ToS3SourceDefaultDateFormatArrayOutputWithContext(context.Background())
}

func (i S3SourceDefaultDateFormatArray) ToS3SourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) S3SourceDefaultDateFormatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceDefaultDateFormatArrayOutput)
}

type S3SourceDefaultDateFormatOutput struct{ *pulumi.OutputState }

func (S3SourceDefaultDateFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceDefaultDateFormat)(nil)).Elem()
}

func (o S3SourceDefaultDateFormatOutput) ToS3SourceDefaultDateFormatOutput() S3SourceDefaultDateFormatOutput {
	return o
}

func (o S3SourceDefaultDateFormatOutput) ToS3SourceDefaultDateFormatOutputWithContext(ctx context.Context) S3SourceDefaultDateFormatOutput {
	return o
}

func (o S3SourceDefaultDateFormatOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourceDefaultDateFormat) string { return v.Format }).(pulumi.StringOutput)
}

func (o S3SourceDefaultDateFormatOutput) Locator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceDefaultDateFormat) *string { return v.Locator }).(pulumi.StringPtrOutput)
}

type S3SourceDefaultDateFormatArrayOutput struct{ *pulumi.OutputState }

func (S3SourceDefaultDateFormatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourceDefaultDateFormat)(nil)).Elem()
}

func (o S3SourceDefaultDateFormatArrayOutput) ToS3SourceDefaultDateFormatArrayOutput() S3SourceDefaultDateFormatArrayOutput {
	return o
}

func (o S3SourceDefaultDateFormatArrayOutput) ToS3SourceDefaultDateFormatArrayOutputWithContext(ctx context.Context) S3SourceDefaultDateFormatArrayOutput {
	return o
}

func (o S3SourceDefaultDateFormatArrayOutput) Index(i pulumi.IntInput) S3SourceDefaultDateFormatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3SourceDefaultDateFormat {
		return vs[0].([]S3SourceDefaultDateFormat)[vs[1].(int)]
	}).(S3SourceDefaultDateFormatOutput)
}

type S3SourceFilter struct {
	FilterType string  `pulumi:"filterType"`
	Mask       *string `pulumi:"mask"`
	Name       string  `pulumi:"name"`
	Regexp     string  `pulumi:"regexp"`
}

// S3SourceFilterInput is an input type that accepts S3SourceFilterArgs and S3SourceFilterOutput values.
// You can construct a concrete instance of `S3SourceFilterInput` via:
//
//	S3SourceFilterArgs{...}
type S3SourceFilterInput interface {
	pulumi.Input

	ToS3SourceFilterOutput() S3SourceFilterOutput
	ToS3SourceFilterOutputWithContext(context.Context) S3SourceFilterOutput
}

type S3SourceFilterArgs struct {
	FilterType pulumi.StringInput    `pulumi:"filterType"`
	Mask       pulumi.StringPtrInput `pulumi:"mask"`
	Name       pulumi.StringInput    `pulumi:"name"`
	Regexp     pulumi.StringInput    `pulumi:"regexp"`
}

func (S3SourceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceFilter)(nil)).Elem()
}

func (i S3SourceFilterArgs) ToS3SourceFilterOutput() S3SourceFilterOutput {
	return i.ToS3SourceFilterOutputWithContext(context.Background())
}

func (i S3SourceFilterArgs) ToS3SourceFilterOutputWithContext(ctx context.Context) S3SourceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceFilterOutput)
}

// S3SourceFilterArrayInput is an input type that accepts S3SourceFilterArray and S3SourceFilterArrayOutput values.
// You can construct a concrete instance of `S3SourceFilterArrayInput` via:
//
//	S3SourceFilterArray{ S3SourceFilterArgs{...} }
type S3SourceFilterArrayInput interface {
	pulumi.Input

	ToS3SourceFilterArrayOutput() S3SourceFilterArrayOutput
	ToS3SourceFilterArrayOutputWithContext(context.Context) S3SourceFilterArrayOutput
}

type S3SourceFilterArray []S3SourceFilterInput

func (S3SourceFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourceFilter)(nil)).Elem()
}

func (i S3SourceFilterArray) ToS3SourceFilterArrayOutput() S3SourceFilterArrayOutput {
	return i.ToS3SourceFilterArrayOutputWithContext(context.Background())
}

func (i S3SourceFilterArray) ToS3SourceFilterArrayOutputWithContext(ctx context.Context) S3SourceFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourceFilterArrayOutput)
}

type S3SourceFilterOutput struct{ *pulumi.OutputState }

func (S3SourceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourceFilter)(nil)).Elem()
}

func (o S3SourceFilterOutput) ToS3SourceFilterOutput() S3SourceFilterOutput {
	return o
}

func (o S3SourceFilterOutput) ToS3SourceFilterOutputWithContext(ctx context.Context) S3SourceFilterOutput {
	return o
}

func (o S3SourceFilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourceFilter) string { return v.FilterType }).(pulumi.StringOutput)
}

func (o S3SourceFilterOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourceFilter) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

func (o S3SourceFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourceFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o S3SourceFilterOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourceFilter) string { return v.Regexp }).(pulumi.StringOutput)
}

type S3SourceFilterArrayOutput struct{ *pulumi.OutputState }

func (S3SourceFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourceFilter)(nil)).Elem()
}

func (o S3SourceFilterArrayOutput) ToS3SourceFilterArrayOutput() S3SourceFilterArrayOutput {
	return o
}

func (o S3SourceFilterArrayOutput) ToS3SourceFilterArrayOutputWithContext(ctx context.Context) S3SourceFilterArrayOutput {
	return o
}

func (o S3SourceFilterArrayOutput) Index(i pulumi.IntInput) S3SourceFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3SourceFilter {
		return vs[0].([]S3SourceFilter)[vs[1].(int)]
	}).(S3SourceFilterOutput)
}

type S3SourcePath struct {
	// The name of the bucket.
	BucketName        *string                     `pulumi:"bucketName"`
	CustomServices    []S3SourcePathCustomService `pulumi:"customServices"`
	LimitToNamespaces []string                    `pulumi:"limitToNamespaces"`
	LimitToRegions    []string                    `pulumi:"limitToRegions"`
	LimitToServices   []string                    `pulumi:"limitToServices"`
	// The path to the data.
	PathExpression *string `pulumi:"pathExpression"`
	// This is a computed field for SNS topic/subscription ARN.
	SnsTopicOrSubscriptionArns []S3SourcePathSnsTopicOrSubscriptionArn `pulumi:"snsTopicOrSubscriptionArns"`
	TagFilters                 []S3SourcePathTagFilter                 `pulumi:"tagFilters"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type string `pulumi:"type"`
	// Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
	UseVersionedApi *bool `pulumi:"useVersionedApi"`
}

// S3SourcePathInput is an input type that accepts S3SourcePathArgs and S3SourcePathOutput values.
// You can construct a concrete instance of `S3SourcePathInput` via:
//
//	S3SourcePathArgs{...}
type S3SourcePathInput interface {
	pulumi.Input

	ToS3SourcePathOutput() S3SourcePathOutput
	ToS3SourcePathOutputWithContext(context.Context) S3SourcePathOutput
}

type S3SourcePathArgs struct {
	// The name of the bucket.
	BucketName        pulumi.StringPtrInput               `pulumi:"bucketName"`
	CustomServices    S3SourcePathCustomServiceArrayInput `pulumi:"customServices"`
	LimitToNamespaces pulumi.StringArrayInput             `pulumi:"limitToNamespaces"`
	LimitToRegions    pulumi.StringArrayInput             `pulumi:"limitToRegions"`
	LimitToServices   pulumi.StringArrayInput             `pulumi:"limitToServices"`
	// The path to the data.
	PathExpression pulumi.StringPtrInput `pulumi:"pathExpression"`
	// This is a computed field for SNS topic/subscription ARN.
	SnsTopicOrSubscriptionArns S3SourcePathSnsTopicOrSubscriptionArnArrayInput `pulumi:"snsTopicOrSubscriptionArns"`
	TagFilters                 S3SourcePathTagFilterArrayInput                 `pulumi:"tagFilters"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
	UseVersionedApi pulumi.BoolPtrInput `pulumi:"useVersionedApi"`
}

func (S3SourcePathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePath)(nil)).Elem()
}

func (i S3SourcePathArgs) ToS3SourcePathOutput() S3SourcePathOutput {
	return i.ToS3SourcePathOutputWithContext(context.Background())
}

func (i S3SourcePathArgs) ToS3SourcePathOutputWithContext(ctx context.Context) S3SourcePathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathOutput)
}

func (i S3SourcePathArgs) ToS3SourcePathPtrOutput() S3SourcePathPtrOutput {
	return i.ToS3SourcePathPtrOutputWithContext(context.Background())
}

func (i S3SourcePathArgs) ToS3SourcePathPtrOutputWithContext(ctx context.Context) S3SourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathOutput).ToS3SourcePathPtrOutputWithContext(ctx)
}

// S3SourcePathPtrInput is an input type that accepts S3SourcePathArgs, S3SourcePathPtr and S3SourcePathPtrOutput values.
// You can construct a concrete instance of `S3SourcePathPtrInput` via:
//
//	        S3SourcePathArgs{...}
//
//	or:
//
//	        nil
type S3SourcePathPtrInput interface {
	pulumi.Input

	ToS3SourcePathPtrOutput() S3SourcePathPtrOutput
	ToS3SourcePathPtrOutputWithContext(context.Context) S3SourcePathPtrOutput
}

type s3sourcePathPtrType S3SourcePathArgs

func S3SourcePathPtr(v *S3SourcePathArgs) S3SourcePathPtrInput {
	return (*s3sourcePathPtrType)(v)
}

func (*s3sourcePathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**S3SourcePath)(nil)).Elem()
}

func (i *s3sourcePathPtrType) ToS3SourcePathPtrOutput() S3SourcePathPtrOutput {
	return i.ToS3SourcePathPtrOutputWithContext(context.Background())
}

func (i *s3sourcePathPtrType) ToS3SourcePathPtrOutputWithContext(ctx context.Context) S3SourcePathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathPtrOutput)
}

type S3SourcePathOutput struct{ *pulumi.OutputState }

func (S3SourcePathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePath)(nil)).Elem()
}

func (o S3SourcePathOutput) ToS3SourcePathOutput() S3SourcePathOutput {
	return o
}

func (o S3SourcePathOutput) ToS3SourcePathOutputWithContext(ctx context.Context) S3SourcePathOutput {
	return o
}

func (o S3SourcePathOutput) ToS3SourcePathPtrOutput() S3SourcePathPtrOutput {
	return o.ToS3SourcePathPtrOutputWithContext(context.Background())
}

func (o S3SourcePathOutput) ToS3SourcePathPtrOutputWithContext(ctx context.Context) S3SourcePathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v S3SourcePath) *S3SourcePath {
		return &v
	}).(S3SourcePathPtrOutput)
}

// The name of the bucket.
func (o S3SourcePathOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePath) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o S3SourcePathOutput) CustomServices() S3SourcePathCustomServiceArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []S3SourcePathCustomService { return v.CustomServices }).(S3SourcePathCustomServiceArrayOutput)
}

func (o S3SourcePathOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []string { return v.LimitToNamespaces }).(pulumi.StringArrayOutput)
}

func (o S3SourcePathOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []string { return v.LimitToRegions }).(pulumi.StringArrayOutput)
}

func (o S3SourcePathOutput) LimitToServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []string { return v.LimitToServices }).(pulumi.StringArrayOutput)
}

// The path to the data.
func (o S3SourcePathOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePath) *string { return v.PathExpression }).(pulumi.StringPtrOutput)
}

// This is a computed field for SNS topic/subscription ARN.
func (o S3SourcePathOutput) SnsTopicOrSubscriptionArns() S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []S3SourcePathSnsTopicOrSubscriptionArn { return v.SnsTopicOrSubscriptionArns }).(S3SourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

func (o S3SourcePathOutput) TagFilters() S3SourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v S3SourcePath) []S3SourcePathTagFilter { return v.TagFilters }).(S3SourcePathTagFilterArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
func (o S3SourcePathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v S3SourcePath) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
func (o S3SourcePathOutput) UseVersionedApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v S3SourcePath) *bool { return v.UseVersionedApi }).(pulumi.BoolPtrOutput)
}

type S3SourcePathPtrOutput struct{ *pulumi.OutputState }

func (S3SourcePathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3SourcePath)(nil)).Elem()
}

func (o S3SourcePathPtrOutput) ToS3SourcePathPtrOutput() S3SourcePathPtrOutput {
	return o
}

func (o S3SourcePathPtrOutput) ToS3SourcePathPtrOutputWithContext(ctx context.Context) S3SourcePathPtrOutput {
	return o
}

func (o S3SourcePathPtrOutput) Elem() S3SourcePathOutput {
	return o.ApplyT(func(v *S3SourcePath) S3SourcePath {
		if v != nil {
			return *v
		}
		var ret S3SourcePath
		return ret
	}).(S3SourcePathOutput)
}

// The name of the bucket.
func (o S3SourcePathPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourcePath) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o S3SourcePathPtrOutput) CustomServices() S3SourcePathCustomServiceArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []S3SourcePathCustomService {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(S3SourcePathCustomServiceArrayOutput)
}

func (o S3SourcePathPtrOutput) LimitToNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToNamespaces
	}).(pulumi.StringArrayOutput)
}

func (o S3SourcePathPtrOutput) LimitToRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToRegions
	}).(pulumi.StringArrayOutput)
}

func (o S3SourcePathPtrOutput) LimitToServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []string {
		if v == nil {
			return nil
		}
		return v.LimitToServices
	}).(pulumi.StringArrayOutput)
}

// The path to the data.
func (o S3SourcePathPtrOutput) PathExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourcePath) *string {
		if v == nil {
			return nil
		}
		return v.PathExpression
	}).(pulumi.StringPtrOutput)
}

// This is a computed field for SNS topic/subscription ARN.
func (o S3SourcePathPtrOutput) SnsTopicOrSubscriptionArns() S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []S3SourcePathSnsTopicOrSubscriptionArn {
		if v == nil {
			return nil
		}
		return v.SnsTopicOrSubscriptionArns
	}).(S3SourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

func (o S3SourcePathPtrOutput) TagFilters() S3SourcePathTagFilterArrayOutput {
	return o.ApplyT(func(v *S3SourcePath) []S3SourcePathTagFilter {
		if v == nil {
			return nil
		}
		return v.TagFilters
	}).(S3SourcePathTagFilterArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
func (o S3SourcePathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *S3SourcePath) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
func (o S3SourcePathPtrOutput) UseVersionedApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *S3SourcePath) *bool {
		if v == nil {
			return nil
		}
		return v.UseVersionedApi
	}).(pulumi.BoolPtrOutput)
}

type S3SourcePathCustomService struct {
	Prefixes    []string `pulumi:"prefixes"`
	ServiceName *string  `pulumi:"serviceName"`
}

// S3SourcePathCustomServiceInput is an input type that accepts S3SourcePathCustomServiceArgs and S3SourcePathCustomServiceOutput values.
// You can construct a concrete instance of `S3SourcePathCustomServiceInput` via:
//
//	S3SourcePathCustomServiceArgs{...}
type S3SourcePathCustomServiceInput interface {
	pulumi.Input

	ToS3SourcePathCustomServiceOutput() S3SourcePathCustomServiceOutput
	ToS3SourcePathCustomServiceOutputWithContext(context.Context) S3SourcePathCustomServiceOutput
}

type S3SourcePathCustomServiceArgs struct {
	Prefixes    pulumi.StringArrayInput `pulumi:"prefixes"`
	ServiceName pulumi.StringPtrInput   `pulumi:"serviceName"`
}

func (S3SourcePathCustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathCustomService)(nil)).Elem()
}

func (i S3SourcePathCustomServiceArgs) ToS3SourcePathCustomServiceOutput() S3SourcePathCustomServiceOutput {
	return i.ToS3SourcePathCustomServiceOutputWithContext(context.Background())
}

func (i S3SourcePathCustomServiceArgs) ToS3SourcePathCustomServiceOutputWithContext(ctx context.Context) S3SourcePathCustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathCustomServiceOutput)
}

// S3SourcePathCustomServiceArrayInput is an input type that accepts S3SourcePathCustomServiceArray and S3SourcePathCustomServiceArrayOutput values.
// You can construct a concrete instance of `S3SourcePathCustomServiceArrayInput` via:
//
//	S3SourcePathCustomServiceArray{ S3SourcePathCustomServiceArgs{...} }
type S3SourcePathCustomServiceArrayInput interface {
	pulumi.Input

	ToS3SourcePathCustomServiceArrayOutput() S3SourcePathCustomServiceArrayOutput
	ToS3SourcePathCustomServiceArrayOutputWithContext(context.Context) S3SourcePathCustomServiceArrayOutput
}

type S3SourcePathCustomServiceArray []S3SourcePathCustomServiceInput

func (S3SourcePathCustomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathCustomService)(nil)).Elem()
}

func (i S3SourcePathCustomServiceArray) ToS3SourcePathCustomServiceArrayOutput() S3SourcePathCustomServiceArrayOutput {
	return i.ToS3SourcePathCustomServiceArrayOutputWithContext(context.Background())
}

func (i S3SourcePathCustomServiceArray) ToS3SourcePathCustomServiceArrayOutputWithContext(ctx context.Context) S3SourcePathCustomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathCustomServiceArrayOutput)
}

type S3SourcePathCustomServiceOutput struct{ *pulumi.OutputState }

func (S3SourcePathCustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathCustomService)(nil)).Elem()
}

func (o S3SourcePathCustomServiceOutput) ToS3SourcePathCustomServiceOutput() S3SourcePathCustomServiceOutput {
	return o
}

func (o S3SourcePathCustomServiceOutput) ToS3SourcePathCustomServiceOutputWithContext(ctx context.Context) S3SourcePathCustomServiceOutput {
	return o
}

func (o S3SourcePathCustomServiceOutput) Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3SourcePathCustomService) []string { return v.Prefixes }).(pulumi.StringArrayOutput)
}

func (o S3SourcePathCustomServiceOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePathCustomService) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type S3SourcePathCustomServiceArrayOutput struct{ *pulumi.OutputState }

func (S3SourcePathCustomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathCustomService)(nil)).Elem()
}

func (o S3SourcePathCustomServiceArrayOutput) ToS3SourcePathCustomServiceArrayOutput() S3SourcePathCustomServiceArrayOutput {
	return o
}

func (o S3SourcePathCustomServiceArrayOutput) ToS3SourcePathCustomServiceArrayOutputWithContext(ctx context.Context) S3SourcePathCustomServiceArrayOutput {
	return o
}

func (o S3SourcePathCustomServiceArrayOutput) Index(i pulumi.IntInput) S3SourcePathCustomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3SourcePathCustomService {
		return vs[0].([]S3SourcePathCustomService)[vs[1].(int)]
	}).(S3SourcePathCustomServiceOutput)
}

type S3SourcePathSnsTopicOrSubscriptionArn struct {
	Arn       *string `pulumi:"arn"`
	IsSuccess *bool   `pulumi:"isSuccess"`
}

// S3SourcePathSnsTopicOrSubscriptionArnInput is an input type that accepts S3SourcePathSnsTopicOrSubscriptionArnArgs and S3SourcePathSnsTopicOrSubscriptionArnOutput values.
// You can construct a concrete instance of `S3SourcePathSnsTopicOrSubscriptionArnInput` via:
//
//	S3SourcePathSnsTopicOrSubscriptionArnArgs{...}
type S3SourcePathSnsTopicOrSubscriptionArnInput interface {
	pulumi.Input

	ToS3SourcePathSnsTopicOrSubscriptionArnOutput() S3SourcePathSnsTopicOrSubscriptionArnOutput
	ToS3SourcePathSnsTopicOrSubscriptionArnOutputWithContext(context.Context) S3SourcePathSnsTopicOrSubscriptionArnOutput
}

type S3SourcePathSnsTopicOrSubscriptionArnArgs struct {
	Arn       pulumi.StringPtrInput `pulumi:"arn"`
	IsSuccess pulumi.BoolPtrInput   `pulumi:"isSuccess"`
}

func (S3SourcePathSnsTopicOrSubscriptionArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (i S3SourcePathSnsTopicOrSubscriptionArnArgs) ToS3SourcePathSnsTopicOrSubscriptionArnOutput() S3SourcePathSnsTopicOrSubscriptionArnOutput {
	return i.ToS3SourcePathSnsTopicOrSubscriptionArnOutputWithContext(context.Background())
}

func (i S3SourcePathSnsTopicOrSubscriptionArnArgs) ToS3SourcePathSnsTopicOrSubscriptionArnOutputWithContext(ctx context.Context) S3SourcePathSnsTopicOrSubscriptionArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathSnsTopicOrSubscriptionArnOutput)
}

// S3SourcePathSnsTopicOrSubscriptionArnArrayInput is an input type that accepts S3SourcePathSnsTopicOrSubscriptionArnArray and S3SourcePathSnsTopicOrSubscriptionArnArrayOutput values.
// You can construct a concrete instance of `S3SourcePathSnsTopicOrSubscriptionArnArrayInput` via:
//
//	S3SourcePathSnsTopicOrSubscriptionArnArray{ S3SourcePathSnsTopicOrSubscriptionArnArgs{...} }
type S3SourcePathSnsTopicOrSubscriptionArnArrayInput interface {
	pulumi.Input

	ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutput() S3SourcePathSnsTopicOrSubscriptionArnArrayOutput
	ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(context.Context) S3SourcePathSnsTopicOrSubscriptionArnArrayOutput
}

type S3SourcePathSnsTopicOrSubscriptionArnArray []S3SourcePathSnsTopicOrSubscriptionArnInput

func (S3SourcePathSnsTopicOrSubscriptionArnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (i S3SourcePathSnsTopicOrSubscriptionArnArray) ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutput() S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return i.ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(context.Background())
}

func (i S3SourcePathSnsTopicOrSubscriptionArnArray) ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(ctx context.Context) S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathSnsTopicOrSubscriptionArnArrayOutput)
}

type S3SourcePathSnsTopicOrSubscriptionArnOutput struct{ *pulumi.OutputState }

func (S3SourcePathSnsTopicOrSubscriptionArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (o S3SourcePathSnsTopicOrSubscriptionArnOutput) ToS3SourcePathSnsTopicOrSubscriptionArnOutput() S3SourcePathSnsTopicOrSubscriptionArnOutput {
	return o
}

func (o S3SourcePathSnsTopicOrSubscriptionArnOutput) ToS3SourcePathSnsTopicOrSubscriptionArnOutputWithContext(ctx context.Context) S3SourcePathSnsTopicOrSubscriptionArnOutput {
	return o
}

func (o S3SourcePathSnsTopicOrSubscriptionArnOutput) Arn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePathSnsTopicOrSubscriptionArn) *string { return v.Arn }).(pulumi.StringPtrOutput)
}

func (o S3SourcePathSnsTopicOrSubscriptionArnOutput) IsSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v S3SourcePathSnsTopicOrSubscriptionArn) *bool { return v.IsSuccess }).(pulumi.BoolPtrOutput)
}

type S3SourcePathSnsTopicOrSubscriptionArnArrayOutput struct{ *pulumi.OutputState }

func (S3SourcePathSnsTopicOrSubscriptionArnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathSnsTopicOrSubscriptionArn)(nil)).Elem()
}

func (o S3SourcePathSnsTopicOrSubscriptionArnArrayOutput) ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutput() S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o
}

func (o S3SourcePathSnsTopicOrSubscriptionArnArrayOutput) ToS3SourcePathSnsTopicOrSubscriptionArnArrayOutputWithContext(ctx context.Context) S3SourcePathSnsTopicOrSubscriptionArnArrayOutput {
	return o
}

func (o S3SourcePathSnsTopicOrSubscriptionArnArrayOutput) Index(i pulumi.IntInput) S3SourcePathSnsTopicOrSubscriptionArnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3SourcePathSnsTopicOrSubscriptionArn {
		return vs[0].([]S3SourcePathSnsTopicOrSubscriptionArn)[vs[1].(int)]
	}).(S3SourcePathSnsTopicOrSubscriptionArnOutput)
}

type S3SourcePathTagFilter struct {
	Namespace *string  `pulumi:"namespace"`
	Tags      []string `pulumi:"tags"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type *string `pulumi:"type"`
}

// S3SourcePathTagFilterInput is an input type that accepts S3SourcePathTagFilterArgs and S3SourcePathTagFilterOutput values.
// You can construct a concrete instance of `S3SourcePathTagFilterInput` via:
//
//	S3SourcePathTagFilterArgs{...}
type S3SourcePathTagFilterInput interface {
	pulumi.Input

	ToS3SourcePathTagFilterOutput() S3SourcePathTagFilterOutput
	ToS3SourcePathTagFilterOutputWithContext(context.Context) S3SourcePathTagFilterOutput
}

type S3SourcePathTagFilterArgs struct {
	Namespace pulumi.StringPtrInput   `pulumi:"namespace"`
	Tags      pulumi.StringArrayInput `pulumi:"tags"`
	// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (S3SourcePathTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathTagFilter)(nil)).Elem()
}

func (i S3SourcePathTagFilterArgs) ToS3SourcePathTagFilterOutput() S3SourcePathTagFilterOutput {
	return i.ToS3SourcePathTagFilterOutputWithContext(context.Background())
}

func (i S3SourcePathTagFilterArgs) ToS3SourcePathTagFilterOutputWithContext(ctx context.Context) S3SourcePathTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathTagFilterOutput)
}

// S3SourcePathTagFilterArrayInput is an input type that accepts S3SourcePathTagFilterArray and S3SourcePathTagFilterArrayOutput values.
// You can construct a concrete instance of `S3SourcePathTagFilterArrayInput` via:
//
//	S3SourcePathTagFilterArray{ S3SourcePathTagFilterArgs{...} }
type S3SourcePathTagFilterArrayInput interface {
	pulumi.Input

	ToS3SourcePathTagFilterArrayOutput() S3SourcePathTagFilterArrayOutput
	ToS3SourcePathTagFilterArrayOutputWithContext(context.Context) S3SourcePathTagFilterArrayOutput
}

type S3SourcePathTagFilterArray []S3SourcePathTagFilterInput

func (S3SourcePathTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathTagFilter)(nil)).Elem()
}

func (i S3SourcePathTagFilterArray) ToS3SourcePathTagFilterArrayOutput() S3SourcePathTagFilterArrayOutput {
	return i.ToS3SourcePathTagFilterArrayOutputWithContext(context.Background())
}

func (i S3SourcePathTagFilterArray) ToS3SourcePathTagFilterArrayOutputWithContext(ctx context.Context) S3SourcePathTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3SourcePathTagFilterArrayOutput)
}

type S3SourcePathTagFilterOutput struct{ *pulumi.OutputState }

func (S3SourcePathTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*S3SourcePathTagFilter)(nil)).Elem()
}

func (o S3SourcePathTagFilterOutput) ToS3SourcePathTagFilterOutput() S3SourcePathTagFilterOutput {
	return o
}

func (o S3SourcePathTagFilterOutput) ToS3SourcePathTagFilterOutputWithContext(ctx context.Context) S3SourcePathTagFilterOutput {
	return o
}

func (o S3SourcePathTagFilterOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePathTagFilter) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o S3SourcePathTagFilterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v S3SourcePathTagFilter) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
func (o S3SourcePathTagFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v S3SourcePathTagFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type S3SourcePathTagFilterArrayOutput struct{ *pulumi.OutputState }

func (S3SourcePathTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]S3SourcePathTagFilter)(nil)).Elem()
}

func (o S3SourcePathTagFilterArrayOutput) ToS3SourcePathTagFilterArrayOutput() S3SourcePathTagFilterArrayOutput {
	return o
}

func (o S3SourcePathTagFilterArrayOutput) ToS3SourcePathTagFilterArrayOutputWithContext(ctx context.Context) S3SourcePathTagFilterArrayOutput {
	return o
}

func (o S3SourcePathTagFilterArrayOutput) Index(i pulumi.IntInput) S3SourcePathTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) S3SourcePathTagFilter {
		return vs[0].([]S3SourcePathTagFilter)[vs[1].(int)]
	}).(S3SourcePathTagFilterOutput)
}

type SamlConfigurationOnDemandProvisioningEnabled struct {
	// First name attribute of the new user account. Defaults to "".
	FirstNameAttribute *string `pulumi:"firstNameAttribute"`
	// Last name attribute of the new user account. Defaults to "".
	LastNameAttribute *string `pulumi:"lastNameAttribute"`
	// List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
	OnDemandProvisioningRoles []string `pulumi:"onDemandProvisioningRoles"`
}

// SamlConfigurationOnDemandProvisioningEnabledInput is an input type that accepts SamlConfigurationOnDemandProvisioningEnabledArgs and SamlConfigurationOnDemandProvisioningEnabledOutput values.
// You can construct a concrete instance of `SamlConfigurationOnDemandProvisioningEnabledInput` via:
//
//	SamlConfigurationOnDemandProvisioningEnabledArgs{...}
type SamlConfigurationOnDemandProvisioningEnabledInput interface {
	pulumi.Input

	ToSamlConfigurationOnDemandProvisioningEnabledOutput() SamlConfigurationOnDemandProvisioningEnabledOutput
	ToSamlConfigurationOnDemandProvisioningEnabledOutputWithContext(context.Context) SamlConfigurationOnDemandProvisioningEnabledOutput
}

type SamlConfigurationOnDemandProvisioningEnabledArgs struct {
	// First name attribute of the new user account. Defaults to "".
	FirstNameAttribute pulumi.StringPtrInput `pulumi:"firstNameAttribute"`
	// Last name attribute of the new user account. Defaults to "".
	LastNameAttribute pulumi.StringPtrInput `pulumi:"lastNameAttribute"`
	// List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
	OnDemandProvisioningRoles pulumi.StringArrayInput `pulumi:"onDemandProvisioningRoles"`
}

func (SamlConfigurationOnDemandProvisioningEnabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlConfigurationOnDemandProvisioningEnabled)(nil)).Elem()
}

func (i SamlConfigurationOnDemandProvisioningEnabledArgs) ToSamlConfigurationOnDemandProvisioningEnabledOutput() SamlConfigurationOnDemandProvisioningEnabledOutput {
	return i.ToSamlConfigurationOnDemandProvisioningEnabledOutputWithContext(context.Background())
}

func (i SamlConfigurationOnDemandProvisioningEnabledArgs) ToSamlConfigurationOnDemandProvisioningEnabledOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationOnDemandProvisioningEnabledOutput)
}

func (i SamlConfigurationOnDemandProvisioningEnabledArgs) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutput() SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return i.ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(context.Background())
}

func (i SamlConfigurationOnDemandProvisioningEnabledArgs) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationOnDemandProvisioningEnabledOutput).ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(ctx)
}

// SamlConfigurationOnDemandProvisioningEnabledPtrInput is an input type that accepts SamlConfigurationOnDemandProvisioningEnabledArgs, SamlConfigurationOnDemandProvisioningEnabledPtr and SamlConfigurationOnDemandProvisioningEnabledPtrOutput values.
// You can construct a concrete instance of `SamlConfigurationOnDemandProvisioningEnabledPtrInput` via:
//
//	        SamlConfigurationOnDemandProvisioningEnabledArgs{...}
//
//	or:
//
//	        nil
type SamlConfigurationOnDemandProvisioningEnabledPtrInput interface {
	pulumi.Input

	ToSamlConfigurationOnDemandProvisioningEnabledPtrOutput() SamlConfigurationOnDemandProvisioningEnabledPtrOutput
	ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(context.Context) SamlConfigurationOnDemandProvisioningEnabledPtrOutput
}

type samlConfigurationOnDemandProvisioningEnabledPtrType SamlConfigurationOnDemandProvisioningEnabledArgs

func SamlConfigurationOnDemandProvisioningEnabledPtr(v *SamlConfigurationOnDemandProvisioningEnabledArgs) SamlConfigurationOnDemandProvisioningEnabledPtrInput {
	return (*samlConfigurationOnDemandProvisioningEnabledPtrType)(v)
}

func (*samlConfigurationOnDemandProvisioningEnabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlConfigurationOnDemandProvisioningEnabled)(nil)).Elem()
}

func (i *samlConfigurationOnDemandProvisioningEnabledPtrType) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutput() SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return i.ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(context.Background())
}

func (i *samlConfigurationOnDemandProvisioningEnabledPtrType) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlConfigurationOnDemandProvisioningEnabledPtrOutput)
}

type SamlConfigurationOnDemandProvisioningEnabledOutput struct{ *pulumi.OutputState }

func (SamlConfigurationOnDemandProvisioningEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlConfigurationOnDemandProvisioningEnabled)(nil)).Elem()
}

func (o SamlConfigurationOnDemandProvisioningEnabledOutput) ToSamlConfigurationOnDemandProvisioningEnabledOutput() SamlConfigurationOnDemandProvisioningEnabledOutput {
	return o
}

func (o SamlConfigurationOnDemandProvisioningEnabledOutput) ToSamlConfigurationOnDemandProvisioningEnabledOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledOutput {
	return o
}

func (o SamlConfigurationOnDemandProvisioningEnabledOutput) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutput() SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return o.ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(context.Background())
}

func (o SamlConfigurationOnDemandProvisioningEnabledOutput) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamlConfigurationOnDemandProvisioningEnabled) *SamlConfigurationOnDemandProvisioningEnabled {
		return &v
	}).(SamlConfigurationOnDemandProvisioningEnabledPtrOutput)
}

// First name attribute of the new user account. Defaults to "".
func (o SamlConfigurationOnDemandProvisioningEnabledOutput) FirstNameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlConfigurationOnDemandProvisioningEnabled) *string { return v.FirstNameAttribute }).(pulumi.StringPtrOutput)
}

// Last name attribute of the new user account. Defaults to "".
func (o SamlConfigurationOnDemandProvisioningEnabledOutput) LastNameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SamlConfigurationOnDemandProvisioningEnabled) *string { return v.LastNameAttribute }).(pulumi.StringPtrOutput)
}

// List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
func (o SamlConfigurationOnDemandProvisioningEnabledOutput) OnDemandProvisioningRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SamlConfigurationOnDemandProvisioningEnabled) []string { return v.OnDemandProvisioningRoles }).(pulumi.StringArrayOutput)
}

type SamlConfigurationOnDemandProvisioningEnabledPtrOutput struct{ *pulumi.OutputState }

func (SamlConfigurationOnDemandProvisioningEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlConfigurationOnDemandProvisioningEnabled)(nil)).Elem()
}

func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutput() SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return o
}

func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) ToSamlConfigurationOnDemandProvisioningEnabledPtrOutputWithContext(ctx context.Context) SamlConfigurationOnDemandProvisioningEnabledPtrOutput {
	return o
}

func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) Elem() SamlConfigurationOnDemandProvisioningEnabledOutput {
	return o.ApplyT(func(v *SamlConfigurationOnDemandProvisioningEnabled) SamlConfigurationOnDemandProvisioningEnabled {
		if v != nil {
			return *v
		}
		var ret SamlConfigurationOnDemandProvisioningEnabled
		return ret
	}).(SamlConfigurationOnDemandProvisioningEnabledOutput)
}

// First name attribute of the new user account. Defaults to "".
func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) FirstNameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamlConfigurationOnDemandProvisioningEnabled) *string {
		if v == nil {
			return nil
		}
		return v.FirstNameAttribute
	}).(pulumi.StringPtrOutput)
}

// Last name attribute of the new user account. Defaults to "".
func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) LastNameAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SamlConfigurationOnDemandProvisioningEnabled) *string {
		if v == nil {
			return nil
		}
		return v.LastNameAttribute
	}).(pulumi.StringPtrOutput)
}

// List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
func (o SamlConfigurationOnDemandProvisioningEnabledPtrOutput) OnDemandProvisioningRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SamlConfigurationOnDemandProvisioningEnabled) []string {
		if v == nil {
			return nil
		}
		return v.OnDemandProvisioningRoles
	}).(pulumi.StringArrayOutput)
}

type SloCompliance struct {
	// The type of compliance to use. Valid values are `Rolling` or `Calendar`.
	ComplianceType string `pulumi:"complianceType"`
	// The size of the compliance period to use.
	// - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
	// - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
	Size string `pulumi:"size"`
	// Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
	// Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
	// For `Month` it's not required and is set to first day of the month.
	StartFrom *string `pulumi:"startFrom"`
	// Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
	Target float64 `pulumi:"target"`
	// Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	Timezone string `pulumi:"timezone"`
}

// SloComplianceInput is an input type that accepts SloComplianceArgs and SloComplianceOutput values.
// You can construct a concrete instance of `SloComplianceInput` via:
//
//	SloComplianceArgs{...}
type SloComplianceInput interface {
	pulumi.Input

	ToSloComplianceOutput() SloComplianceOutput
	ToSloComplianceOutputWithContext(context.Context) SloComplianceOutput
}

type SloComplianceArgs struct {
	// The type of compliance to use. Valid values are `Rolling` or `Calendar`.
	ComplianceType pulumi.StringInput `pulumi:"complianceType"`
	// The size of the compliance period to use.
	// - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
	// - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
	Size pulumi.StringInput `pulumi:"size"`
	// Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
	// Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
	// For `Month` it's not required and is set to first day of the month.
	StartFrom pulumi.StringPtrInput `pulumi:"startFrom"`
	// Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
	Target pulumi.Float64Input `pulumi:"target"`
	// Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	Timezone pulumi.StringInput `pulumi:"timezone"`
}

func (SloComplianceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloCompliance)(nil)).Elem()
}

func (i SloComplianceArgs) ToSloComplianceOutput() SloComplianceOutput {
	return i.ToSloComplianceOutputWithContext(context.Background())
}

func (i SloComplianceArgs) ToSloComplianceOutputWithContext(ctx context.Context) SloComplianceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloComplianceOutput)
}

// SloComplianceArrayInput is an input type that accepts SloComplianceArray and SloComplianceArrayOutput values.
// You can construct a concrete instance of `SloComplianceArrayInput` via:
//
//	SloComplianceArray{ SloComplianceArgs{...} }
type SloComplianceArrayInput interface {
	pulumi.Input

	ToSloComplianceArrayOutput() SloComplianceArrayOutput
	ToSloComplianceArrayOutputWithContext(context.Context) SloComplianceArrayOutput
}

type SloComplianceArray []SloComplianceInput

func (SloComplianceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloCompliance)(nil)).Elem()
}

func (i SloComplianceArray) ToSloComplianceArrayOutput() SloComplianceArrayOutput {
	return i.ToSloComplianceArrayOutputWithContext(context.Background())
}

func (i SloComplianceArray) ToSloComplianceArrayOutputWithContext(ctx context.Context) SloComplianceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloComplianceArrayOutput)
}

type SloComplianceOutput struct{ *pulumi.OutputState }

func (SloComplianceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloCompliance)(nil)).Elem()
}

func (o SloComplianceOutput) ToSloComplianceOutput() SloComplianceOutput {
	return o
}

func (o SloComplianceOutput) ToSloComplianceOutputWithContext(ctx context.Context) SloComplianceOutput {
	return o
}

// The type of compliance to use. Valid values are `Rolling` or `Calendar`.
func (o SloComplianceOutput) ComplianceType() pulumi.StringOutput {
	return o.ApplyT(func(v SloCompliance) string { return v.ComplianceType }).(pulumi.StringOutput)
}

// The size of the compliance period to use.
// - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
// - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
func (o SloComplianceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v SloCompliance) string { return v.Size }).(pulumi.StringOutput)
}

// Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
// Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
// For `Month` it's not required and is set to first day of the month.
func (o SloComplianceOutput) StartFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloCompliance) *string { return v.StartFrom }).(pulumi.StringPtrOutput)
}

// Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
func (o SloComplianceOutput) Target() pulumi.Float64Output {
	return o.ApplyT(func(v SloCompliance) float64 { return v.Target }).(pulumi.Float64Output)
}

// Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
func (o SloComplianceOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v SloCompliance) string { return v.Timezone }).(pulumi.StringOutput)
}

type SloComplianceArrayOutput struct{ *pulumi.OutputState }

func (SloComplianceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloCompliance)(nil)).Elem()
}

func (o SloComplianceArrayOutput) ToSloComplianceArrayOutput() SloComplianceArrayOutput {
	return o
}

func (o SloComplianceArrayOutput) ToSloComplianceArrayOutputWithContext(ctx context.Context) SloComplianceArrayOutput {
	return o
}

func (o SloComplianceArrayOutput) Index(i pulumi.IntInput) SloComplianceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloCompliance {
		return vs[0].([]SloCompliance)[vs[1].(int)]
	}).(SloComplianceOutput)
}

type SloIndicator struct {
	RequestBasedEvaluation *SloIndicatorRequestBasedEvaluation `pulumi:"requestBasedEvaluation"`
	WindowBasedEvaluation  *SloIndicatorWindowBasedEvaluation  `pulumi:"windowBasedEvaluation"`
}

// SloIndicatorInput is an input type that accepts SloIndicatorArgs and SloIndicatorOutput values.
// You can construct a concrete instance of `SloIndicatorInput` via:
//
//	SloIndicatorArgs{...}
type SloIndicatorInput interface {
	pulumi.Input

	ToSloIndicatorOutput() SloIndicatorOutput
	ToSloIndicatorOutputWithContext(context.Context) SloIndicatorOutput
}

type SloIndicatorArgs struct {
	RequestBasedEvaluation SloIndicatorRequestBasedEvaluationPtrInput `pulumi:"requestBasedEvaluation"`
	WindowBasedEvaluation  SloIndicatorWindowBasedEvaluationPtrInput  `pulumi:"windowBasedEvaluation"`
}

func (SloIndicatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicator)(nil)).Elem()
}

func (i SloIndicatorArgs) ToSloIndicatorOutput() SloIndicatorOutput {
	return i.ToSloIndicatorOutputWithContext(context.Background())
}

func (i SloIndicatorArgs) ToSloIndicatorOutputWithContext(ctx context.Context) SloIndicatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorOutput)
}

func (i SloIndicatorArgs) ToSloIndicatorPtrOutput() SloIndicatorPtrOutput {
	return i.ToSloIndicatorPtrOutputWithContext(context.Background())
}

func (i SloIndicatorArgs) ToSloIndicatorPtrOutputWithContext(ctx context.Context) SloIndicatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorOutput).ToSloIndicatorPtrOutputWithContext(ctx)
}

// SloIndicatorPtrInput is an input type that accepts SloIndicatorArgs, SloIndicatorPtr and SloIndicatorPtrOutput values.
// You can construct a concrete instance of `SloIndicatorPtrInput` via:
//
//	        SloIndicatorArgs{...}
//
//	or:
//
//	        nil
type SloIndicatorPtrInput interface {
	pulumi.Input

	ToSloIndicatorPtrOutput() SloIndicatorPtrOutput
	ToSloIndicatorPtrOutputWithContext(context.Context) SloIndicatorPtrOutput
}

type sloIndicatorPtrType SloIndicatorArgs

func SloIndicatorPtr(v *SloIndicatorArgs) SloIndicatorPtrInput {
	return (*sloIndicatorPtrType)(v)
}

func (*sloIndicatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicator)(nil)).Elem()
}

func (i *sloIndicatorPtrType) ToSloIndicatorPtrOutput() SloIndicatorPtrOutput {
	return i.ToSloIndicatorPtrOutputWithContext(context.Background())
}

func (i *sloIndicatorPtrType) ToSloIndicatorPtrOutputWithContext(ctx context.Context) SloIndicatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorPtrOutput)
}

type SloIndicatorOutput struct{ *pulumi.OutputState }

func (SloIndicatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicator)(nil)).Elem()
}

func (o SloIndicatorOutput) ToSloIndicatorOutput() SloIndicatorOutput {
	return o
}

func (o SloIndicatorOutput) ToSloIndicatorOutputWithContext(ctx context.Context) SloIndicatorOutput {
	return o
}

func (o SloIndicatorOutput) ToSloIndicatorPtrOutput() SloIndicatorPtrOutput {
	return o.ToSloIndicatorPtrOutputWithContext(context.Background())
}

func (o SloIndicatorOutput) ToSloIndicatorPtrOutputWithContext(ctx context.Context) SloIndicatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloIndicator) *SloIndicator {
		return &v
	}).(SloIndicatorPtrOutput)
}

func (o SloIndicatorOutput) RequestBasedEvaluation() SloIndicatorRequestBasedEvaluationPtrOutput {
	return o.ApplyT(func(v SloIndicator) *SloIndicatorRequestBasedEvaluation { return v.RequestBasedEvaluation }).(SloIndicatorRequestBasedEvaluationPtrOutput)
}

func (o SloIndicatorOutput) WindowBasedEvaluation() SloIndicatorWindowBasedEvaluationPtrOutput {
	return o.ApplyT(func(v SloIndicator) *SloIndicatorWindowBasedEvaluation { return v.WindowBasedEvaluation }).(SloIndicatorWindowBasedEvaluationPtrOutput)
}

type SloIndicatorPtrOutput struct{ *pulumi.OutputState }

func (SloIndicatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicator)(nil)).Elem()
}

func (o SloIndicatorPtrOutput) ToSloIndicatorPtrOutput() SloIndicatorPtrOutput {
	return o
}

func (o SloIndicatorPtrOutput) ToSloIndicatorPtrOutputWithContext(ctx context.Context) SloIndicatorPtrOutput {
	return o
}

func (o SloIndicatorPtrOutput) Elem() SloIndicatorOutput {
	return o.ApplyT(func(v *SloIndicator) SloIndicator {
		if v != nil {
			return *v
		}
		var ret SloIndicator
		return ret
	}).(SloIndicatorOutput)
}

func (o SloIndicatorPtrOutput) RequestBasedEvaluation() SloIndicatorRequestBasedEvaluationPtrOutput {
	return o.ApplyT(func(v *SloIndicator) *SloIndicatorRequestBasedEvaluation {
		if v == nil {
			return nil
		}
		return v.RequestBasedEvaluation
	}).(SloIndicatorRequestBasedEvaluationPtrOutput)
}

func (o SloIndicatorPtrOutput) WindowBasedEvaluation() SloIndicatorWindowBasedEvaluationPtrOutput {
	return o.ApplyT(func(v *SloIndicator) *SloIndicatorWindowBasedEvaluation {
		if v == nil {
			return nil
		}
		return v.WindowBasedEvaluation
	}).(SloIndicatorWindowBasedEvaluationPtrOutput)
}

type SloIndicatorRequestBasedEvaluation struct {
	// Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
	// , `GreaterThanOrEqual`.
	Op *string `pulumi:"op"`
	// The queries to use.
	Queries []SloIndicatorRequestBasedEvaluationQuery `pulumi:"queries"`
	// The type of query to use. Valid values are `Metrics` or `Logs`.
	QueryType string `pulumi:"queryType"`
	// Compared against threshold query's raw data points to determine success criteria.
	Threshold *float64 `pulumi:"threshold"`
}

// SloIndicatorRequestBasedEvaluationInput is an input type that accepts SloIndicatorRequestBasedEvaluationArgs and SloIndicatorRequestBasedEvaluationOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationInput` via:
//
//	SloIndicatorRequestBasedEvaluationArgs{...}
type SloIndicatorRequestBasedEvaluationInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationOutput() SloIndicatorRequestBasedEvaluationOutput
	ToSloIndicatorRequestBasedEvaluationOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationOutput
}

type SloIndicatorRequestBasedEvaluationArgs struct {
	// Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
	// , `GreaterThanOrEqual`.
	Op pulumi.StringPtrInput `pulumi:"op"`
	// The queries to use.
	Queries SloIndicatorRequestBasedEvaluationQueryArrayInput `pulumi:"queries"`
	// The type of query to use. Valid values are `Metrics` or `Logs`.
	QueryType pulumi.StringInput `pulumi:"queryType"`
	// Compared against threshold query's raw data points to determine success criteria.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
}

func (SloIndicatorRequestBasedEvaluationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluation)(nil)).Elem()
}

func (i SloIndicatorRequestBasedEvaluationArgs) ToSloIndicatorRequestBasedEvaluationOutput() SloIndicatorRequestBasedEvaluationOutput {
	return i.ToSloIndicatorRequestBasedEvaluationOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationArgs) ToSloIndicatorRequestBasedEvaluationOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationOutput)
}

func (i SloIndicatorRequestBasedEvaluationArgs) ToSloIndicatorRequestBasedEvaluationPtrOutput() SloIndicatorRequestBasedEvaluationPtrOutput {
	return i.ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationArgs) ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationOutput).ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(ctx)
}

// SloIndicatorRequestBasedEvaluationPtrInput is an input type that accepts SloIndicatorRequestBasedEvaluationArgs, SloIndicatorRequestBasedEvaluationPtr and SloIndicatorRequestBasedEvaluationPtrOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationPtrInput` via:
//
//	        SloIndicatorRequestBasedEvaluationArgs{...}
//
//	or:
//
//	        nil
type SloIndicatorRequestBasedEvaluationPtrInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationPtrOutput() SloIndicatorRequestBasedEvaluationPtrOutput
	ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationPtrOutput
}

type sloIndicatorRequestBasedEvaluationPtrType SloIndicatorRequestBasedEvaluationArgs

func SloIndicatorRequestBasedEvaluationPtr(v *SloIndicatorRequestBasedEvaluationArgs) SloIndicatorRequestBasedEvaluationPtrInput {
	return (*sloIndicatorRequestBasedEvaluationPtrType)(v)
}

func (*sloIndicatorRequestBasedEvaluationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicatorRequestBasedEvaluation)(nil)).Elem()
}

func (i *sloIndicatorRequestBasedEvaluationPtrType) ToSloIndicatorRequestBasedEvaluationPtrOutput() SloIndicatorRequestBasedEvaluationPtrOutput {
	return i.ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(context.Background())
}

func (i *sloIndicatorRequestBasedEvaluationPtrType) ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationPtrOutput)
}

type SloIndicatorRequestBasedEvaluationOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluation)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationOutput) ToSloIndicatorRequestBasedEvaluationOutput() SloIndicatorRequestBasedEvaluationOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationOutput) ToSloIndicatorRequestBasedEvaluationOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationOutput) ToSloIndicatorRequestBasedEvaluationPtrOutput() SloIndicatorRequestBasedEvaluationPtrOutput {
	return o.ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(context.Background())
}

func (o SloIndicatorRequestBasedEvaluationOutput) ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloIndicatorRequestBasedEvaluation) *SloIndicatorRequestBasedEvaluation {
		return &v
	}).(SloIndicatorRequestBasedEvaluationPtrOutput)
}

// Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
// , `GreaterThanOrEqual`.
func (o SloIndicatorRequestBasedEvaluationOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluation) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// The queries to use.
func (o SloIndicatorRequestBasedEvaluationOutput) Queries() SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluation) []SloIndicatorRequestBasedEvaluationQuery { return v.Queries }).(SloIndicatorRequestBasedEvaluationQueryArrayOutput)
}

// The type of query to use. Valid values are `Metrics` or `Logs`.
func (o SloIndicatorRequestBasedEvaluationOutput) QueryType() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluation) string { return v.QueryType }).(pulumi.StringOutput)
}

// Compared against threshold query's raw data points to determine success criteria.
func (o SloIndicatorRequestBasedEvaluationOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluation) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

type SloIndicatorRequestBasedEvaluationPtrOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicatorRequestBasedEvaluation)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationPtrOutput) ToSloIndicatorRequestBasedEvaluationPtrOutput() SloIndicatorRequestBasedEvaluationPtrOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationPtrOutput) ToSloIndicatorRequestBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationPtrOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationPtrOutput) Elem() SloIndicatorRequestBasedEvaluationOutput {
	return o.ApplyT(func(v *SloIndicatorRequestBasedEvaluation) SloIndicatorRequestBasedEvaluation {
		if v != nil {
			return *v
		}
		var ret SloIndicatorRequestBasedEvaluation
		return ret
	}).(SloIndicatorRequestBasedEvaluationOutput)
}

// Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
// , `GreaterThanOrEqual`.
func (o SloIndicatorRequestBasedEvaluationPtrOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorRequestBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return v.Op
	}).(pulumi.StringPtrOutput)
}

// The queries to use.
func (o SloIndicatorRequestBasedEvaluationPtrOutput) Queries() SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return o.ApplyT(func(v *SloIndicatorRequestBasedEvaluation) []SloIndicatorRequestBasedEvaluationQuery {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(SloIndicatorRequestBasedEvaluationQueryArrayOutput)
}

// The type of query to use. Valid values are `Metrics` or `Logs`.
func (o SloIndicatorRequestBasedEvaluationPtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorRequestBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return &v.QueryType
	}).(pulumi.StringPtrOutput)
}

// Compared against threshold query's raw data points to determine success criteria.
func (o SloIndicatorRequestBasedEvaluationPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloIndicatorRequestBasedEvaluation) *float64 {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type SloIndicatorRequestBasedEvaluationQuery struct {
	// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
	// , `Threshold`.
	// , `Threshold`.
	QueryGroupType string `pulumi:"queryGroupType"`
	// List of queries to use.
	QueryGroups []SloIndicatorRequestBasedEvaluationQueryQueryGroup `pulumi:"queryGroups"`
}

// SloIndicatorRequestBasedEvaluationQueryInput is an input type that accepts SloIndicatorRequestBasedEvaluationQueryArgs and SloIndicatorRequestBasedEvaluationQueryOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationQueryInput` via:
//
//	SloIndicatorRequestBasedEvaluationQueryArgs{...}
type SloIndicatorRequestBasedEvaluationQueryInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationQueryOutput() SloIndicatorRequestBasedEvaluationQueryOutput
	ToSloIndicatorRequestBasedEvaluationQueryOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationQueryOutput
}

type SloIndicatorRequestBasedEvaluationQueryArgs struct {
	// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
	// , `Threshold`.
	// , `Threshold`.
	QueryGroupType pulumi.StringInput `pulumi:"queryGroupType"`
	// List of queries to use.
	QueryGroups SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayInput `pulumi:"queryGroups"`
}

func (SloIndicatorRequestBasedEvaluationQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQuery)(nil)).Elem()
}

func (i SloIndicatorRequestBasedEvaluationQueryArgs) ToSloIndicatorRequestBasedEvaluationQueryOutput() SloIndicatorRequestBasedEvaluationQueryOutput {
	return i.ToSloIndicatorRequestBasedEvaluationQueryOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationQueryArgs) ToSloIndicatorRequestBasedEvaluationQueryOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationQueryOutput)
}

// SloIndicatorRequestBasedEvaluationQueryArrayInput is an input type that accepts SloIndicatorRequestBasedEvaluationQueryArray and SloIndicatorRequestBasedEvaluationQueryArrayOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationQueryArrayInput` via:
//
//	SloIndicatorRequestBasedEvaluationQueryArray{ SloIndicatorRequestBasedEvaluationQueryArgs{...} }
type SloIndicatorRequestBasedEvaluationQueryArrayInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationQueryArrayOutput() SloIndicatorRequestBasedEvaluationQueryArrayOutput
	ToSloIndicatorRequestBasedEvaluationQueryArrayOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationQueryArrayOutput
}

type SloIndicatorRequestBasedEvaluationQueryArray []SloIndicatorRequestBasedEvaluationQueryInput

func (SloIndicatorRequestBasedEvaluationQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorRequestBasedEvaluationQuery)(nil)).Elem()
}

func (i SloIndicatorRequestBasedEvaluationQueryArray) ToSloIndicatorRequestBasedEvaluationQueryArrayOutput() SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return i.ToSloIndicatorRequestBasedEvaluationQueryArrayOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationQueryArray) ToSloIndicatorRequestBasedEvaluationQueryArrayOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationQueryArrayOutput)
}

type SloIndicatorRequestBasedEvaluationQueryOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQuery)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationQueryOutput) ToSloIndicatorRequestBasedEvaluationQueryOutput() SloIndicatorRequestBasedEvaluationQueryOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryOutput) ToSloIndicatorRequestBasedEvaluationQueryOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryOutput {
	return o
}

// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
// , `Threshold`.
// , `Threshold`.
func (o SloIndicatorRequestBasedEvaluationQueryOutput) QueryGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQuery) string { return v.QueryGroupType }).(pulumi.StringOutput)
}

// List of queries to use.
func (o SloIndicatorRequestBasedEvaluationQueryOutput) QueryGroups() SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQuery) []SloIndicatorRequestBasedEvaluationQueryQueryGroup {
		return v.QueryGroups
	}).(SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput)
}

type SloIndicatorRequestBasedEvaluationQueryArrayOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorRequestBasedEvaluationQuery)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationQueryArrayOutput) ToSloIndicatorRequestBasedEvaluationQueryArrayOutput() SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryArrayOutput) ToSloIndicatorRequestBasedEvaluationQueryArrayOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryArrayOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryArrayOutput) Index(i pulumi.IntInput) SloIndicatorRequestBasedEvaluationQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloIndicatorRequestBasedEvaluationQuery {
		return vs[0].([]SloIndicatorRequestBasedEvaluationQuery)[vs[1].(int)]
	}).(SloIndicatorRequestBasedEvaluationQueryOutput)
}

type SloIndicatorRequestBasedEvaluationQueryQueryGroup struct {
	// Field of log query output to compare against. To be used only for logs based data
	// type when `useRowCount` is false.
	// type when `useRowCount` is false.
	Field *string `pulumi:"field"`
	// The query string to use.
	Query string `pulumi:"query"`
	// The row ID to use.
	RowId string `pulumi:"rowId"`
	// Whether to use the row count. Defaults to false.
	UseRowCount bool `pulumi:"useRowCount"`
}

// SloIndicatorRequestBasedEvaluationQueryQueryGroupInput is an input type that accepts SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs and SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationQueryQueryGroupInput` via:
//
//	SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs{...}
type SloIndicatorRequestBasedEvaluationQueryQueryGroupInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput
	ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput
}

type SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs struct {
	// Field of log query output to compare against. To be used only for logs based data
	// type when `useRowCount` is false.
	// type when `useRowCount` is false.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The query string to use.
	Query pulumi.StringInput `pulumi:"query"`
	// The row ID to use.
	RowId pulumi.StringInput `pulumi:"rowId"`
	// Whether to use the row count. Defaults to false.
	UseRowCount pulumi.BoolInput `pulumi:"useRowCount"`
}

func (SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (i SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput {
	return i.ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput)
}

// SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayInput is an input type that accepts SloIndicatorRequestBasedEvaluationQueryQueryGroupArray and SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput values.
// You can construct a concrete instance of `SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayInput` via:
//
//	SloIndicatorRequestBasedEvaluationQueryQueryGroupArray{ SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs{...} }
type SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayInput interface {
	pulumi.Input

	ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput
	ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutputWithContext(context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput
}

type SloIndicatorRequestBasedEvaluationQueryQueryGroupArray []SloIndicatorRequestBasedEvaluationQueryQueryGroupInput

func (SloIndicatorRequestBasedEvaluationQueryQueryGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorRequestBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (i SloIndicatorRequestBasedEvaluationQueryQueryGroupArray) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput {
	return i.ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutputWithContext(context.Background())
}

func (i SloIndicatorRequestBasedEvaluationQueryQueryGroupArray) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput)
}

type SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput {
	return o
}

// Field of log query output to compare against. To be used only for logs based data
// type when `useRowCount` is false.
// type when `useRowCount` is false.
func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQueryQueryGroup) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The query string to use.
func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQueryQueryGroup) string { return v.Query }).(pulumi.StringOutput)
}

// The row ID to use.
func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQueryQueryGroup) string { return v.RowId }).(pulumi.StringOutput)
}

// Whether to use the row count. Defaults to false.
func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput) UseRowCount() pulumi.BoolOutput {
	return o.ApplyT(func(v SloIndicatorRequestBasedEvaluationQueryQueryGroup) bool { return v.UseRowCount }).(pulumi.BoolOutput)
}

type SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput struct{ *pulumi.OutputState }

func (SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorRequestBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput) ToSloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutputWithContext(ctx context.Context) SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput {
	return o
}

func (o SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput) Index(i pulumi.IntInput) SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloIndicatorRequestBasedEvaluationQueryQueryGroup {
		return vs[0].([]SloIndicatorRequestBasedEvaluationQueryQueryGroup)[vs[1].(int)]
	}).(SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput)
}

type SloIndicatorWindowBasedEvaluation struct {
	// Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
	// , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
	Aggregation *string `pulumi:"aggregation"`
	// The operator used to define a successful window. Valid values are `LessThan`
	// , `LessThanOrEqual`, `GreaterThan`
	// , `GreaterThanOrEqual`.
	Op string `pulumi:"op"`
	// The queries to use.
	Queries []SloIndicatorWindowBasedEvaluationQuery `pulumi:"queries"`
	// The type of query to use. Valid values are `Metrics` or `Logs`.
	QueryType string `pulumi:"queryType"`
	// The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
	// based evaluation.
	Size string `pulumi:"size"`
	// Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
	// for `(good windows / total windows) * 100`.
	Threshold float64 `pulumi:"threshold"`
}

// SloIndicatorWindowBasedEvaluationInput is an input type that accepts SloIndicatorWindowBasedEvaluationArgs and SloIndicatorWindowBasedEvaluationOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationInput` via:
//
//	SloIndicatorWindowBasedEvaluationArgs{...}
type SloIndicatorWindowBasedEvaluationInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationOutput() SloIndicatorWindowBasedEvaluationOutput
	ToSloIndicatorWindowBasedEvaluationOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationOutput
}

type SloIndicatorWindowBasedEvaluationArgs struct {
	// Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
	// , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
	Aggregation pulumi.StringPtrInput `pulumi:"aggregation"`
	// The operator used to define a successful window. Valid values are `LessThan`
	// , `LessThanOrEqual`, `GreaterThan`
	// , `GreaterThanOrEqual`.
	Op pulumi.StringInput `pulumi:"op"`
	// The queries to use.
	Queries SloIndicatorWindowBasedEvaluationQueryArrayInput `pulumi:"queries"`
	// The type of query to use. Valid values are `Metrics` or `Logs`.
	QueryType pulumi.StringInput `pulumi:"queryType"`
	// The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
	// based evaluation.
	Size pulumi.StringInput `pulumi:"size"`
	// Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
	// for `(good windows / total windows) * 100`.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (SloIndicatorWindowBasedEvaluationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluation)(nil)).Elem()
}

func (i SloIndicatorWindowBasedEvaluationArgs) ToSloIndicatorWindowBasedEvaluationOutput() SloIndicatorWindowBasedEvaluationOutput {
	return i.ToSloIndicatorWindowBasedEvaluationOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationArgs) ToSloIndicatorWindowBasedEvaluationOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationOutput)
}

func (i SloIndicatorWindowBasedEvaluationArgs) ToSloIndicatorWindowBasedEvaluationPtrOutput() SloIndicatorWindowBasedEvaluationPtrOutput {
	return i.ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationArgs) ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationOutput).ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(ctx)
}

// SloIndicatorWindowBasedEvaluationPtrInput is an input type that accepts SloIndicatorWindowBasedEvaluationArgs, SloIndicatorWindowBasedEvaluationPtr and SloIndicatorWindowBasedEvaluationPtrOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationPtrInput` via:
//
//	        SloIndicatorWindowBasedEvaluationArgs{...}
//
//	or:
//
//	        nil
type SloIndicatorWindowBasedEvaluationPtrInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationPtrOutput() SloIndicatorWindowBasedEvaluationPtrOutput
	ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationPtrOutput
}

type sloIndicatorWindowBasedEvaluationPtrType SloIndicatorWindowBasedEvaluationArgs

func SloIndicatorWindowBasedEvaluationPtr(v *SloIndicatorWindowBasedEvaluationArgs) SloIndicatorWindowBasedEvaluationPtrInput {
	return (*sloIndicatorWindowBasedEvaluationPtrType)(v)
}

func (*sloIndicatorWindowBasedEvaluationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicatorWindowBasedEvaluation)(nil)).Elem()
}

func (i *sloIndicatorWindowBasedEvaluationPtrType) ToSloIndicatorWindowBasedEvaluationPtrOutput() SloIndicatorWindowBasedEvaluationPtrOutput {
	return i.ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(context.Background())
}

func (i *sloIndicatorWindowBasedEvaluationPtrType) ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationPtrOutput)
}

type SloIndicatorWindowBasedEvaluationOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluation)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationOutput) ToSloIndicatorWindowBasedEvaluationOutput() SloIndicatorWindowBasedEvaluationOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationOutput) ToSloIndicatorWindowBasedEvaluationOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationOutput) ToSloIndicatorWindowBasedEvaluationPtrOutput() SloIndicatorWindowBasedEvaluationPtrOutput {
	return o.ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(context.Background())
}

func (o SloIndicatorWindowBasedEvaluationOutput) ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloIndicatorWindowBasedEvaluation) *SloIndicatorWindowBasedEvaluation {
		return &v
	}).(SloIndicatorWindowBasedEvaluationPtrOutput)
}

// Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
// , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
func (o SloIndicatorWindowBasedEvaluationOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) *string { return v.Aggregation }).(pulumi.StringPtrOutput)
}

// The operator used to define a successful window. Valid values are `LessThan`
// , `LessThanOrEqual`, `GreaterThan`
// , `GreaterThanOrEqual`.
func (o SloIndicatorWindowBasedEvaluationOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) string { return v.Op }).(pulumi.StringOutput)
}

// The queries to use.
func (o SloIndicatorWindowBasedEvaluationOutput) Queries() SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) []SloIndicatorWindowBasedEvaluationQuery { return v.Queries }).(SloIndicatorWindowBasedEvaluationQueryArrayOutput)
}

// The type of query to use. Valid values are `Metrics` or `Logs`.
func (o SloIndicatorWindowBasedEvaluationOutput) QueryType() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) string { return v.QueryType }).(pulumi.StringOutput)
}

// The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
// based evaluation.
func (o SloIndicatorWindowBasedEvaluationOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) string { return v.Size }).(pulumi.StringOutput)
}

// Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
// for `(good windows / total windows) * 100`.
func (o SloIndicatorWindowBasedEvaluationOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluation) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type SloIndicatorWindowBasedEvaluationPtrOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloIndicatorWindowBasedEvaluation)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationPtrOutput) ToSloIndicatorWindowBasedEvaluationPtrOutput() SloIndicatorWindowBasedEvaluationPtrOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationPtrOutput) ToSloIndicatorWindowBasedEvaluationPtrOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationPtrOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationPtrOutput) Elem() SloIndicatorWindowBasedEvaluationOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) SloIndicatorWindowBasedEvaluation {
		if v != nil {
			return *v
		}
		var ret SloIndicatorWindowBasedEvaluation
		return ret
	}).(SloIndicatorWindowBasedEvaluationOutput)
}

// Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
// , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return v.Aggregation
	}).(pulumi.StringPtrOutput)
}

// The operator used to define a successful window. Valid values are `LessThan`
// , `LessThanOrEqual`, `GreaterThan`
// , `GreaterThanOrEqual`.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return &v.Op
	}).(pulumi.StringPtrOutput)
}

// The queries to use.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) Queries() SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) []SloIndicatorWindowBasedEvaluationQuery {
		if v == nil {
			return nil
		}
		return v.Queries
	}).(SloIndicatorWindowBasedEvaluationQueryArrayOutput)
}

// The type of query to use. Valid values are `Metrics` or `Logs`.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return &v.QueryType
	}).(pulumi.StringPtrOutput)
}

// The size of the window to use, minimum of `1m` and maximum of `1h`. Only applicable for Window
// based evaluation.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) *string {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.StringPtrOutput)
}

// Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
// for `(good windows / total windows) * 100`.
func (o SloIndicatorWindowBasedEvaluationPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SloIndicatorWindowBasedEvaluation) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type SloIndicatorWindowBasedEvaluationQuery struct {
	// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
	// , `Threshold`.
	// , `Threshold`.
	QueryGroupType string `pulumi:"queryGroupType"`
	// List of queries to use.
	QueryGroups []SloIndicatorWindowBasedEvaluationQueryQueryGroup `pulumi:"queryGroups"`
}

// SloIndicatorWindowBasedEvaluationQueryInput is an input type that accepts SloIndicatorWindowBasedEvaluationQueryArgs and SloIndicatorWindowBasedEvaluationQueryOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationQueryInput` via:
//
//	SloIndicatorWindowBasedEvaluationQueryArgs{...}
type SloIndicatorWindowBasedEvaluationQueryInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationQueryOutput() SloIndicatorWindowBasedEvaluationQueryOutput
	ToSloIndicatorWindowBasedEvaluationQueryOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationQueryOutput
}

type SloIndicatorWindowBasedEvaluationQueryArgs struct {
	// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
	// , `Threshold`.
	// , `Threshold`.
	QueryGroupType pulumi.StringInput `pulumi:"queryGroupType"`
	// List of queries to use.
	QueryGroups SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayInput `pulumi:"queryGroups"`
}

func (SloIndicatorWindowBasedEvaluationQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQuery)(nil)).Elem()
}

func (i SloIndicatorWindowBasedEvaluationQueryArgs) ToSloIndicatorWindowBasedEvaluationQueryOutput() SloIndicatorWindowBasedEvaluationQueryOutput {
	return i.ToSloIndicatorWindowBasedEvaluationQueryOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationQueryArgs) ToSloIndicatorWindowBasedEvaluationQueryOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationQueryOutput)
}

// SloIndicatorWindowBasedEvaluationQueryArrayInput is an input type that accepts SloIndicatorWindowBasedEvaluationQueryArray and SloIndicatorWindowBasedEvaluationQueryArrayOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationQueryArrayInput` via:
//
//	SloIndicatorWindowBasedEvaluationQueryArray{ SloIndicatorWindowBasedEvaluationQueryArgs{...} }
type SloIndicatorWindowBasedEvaluationQueryArrayInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationQueryArrayOutput() SloIndicatorWindowBasedEvaluationQueryArrayOutput
	ToSloIndicatorWindowBasedEvaluationQueryArrayOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationQueryArrayOutput
}

type SloIndicatorWindowBasedEvaluationQueryArray []SloIndicatorWindowBasedEvaluationQueryInput

func (SloIndicatorWindowBasedEvaluationQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorWindowBasedEvaluationQuery)(nil)).Elem()
}

func (i SloIndicatorWindowBasedEvaluationQueryArray) ToSloIndicatorWindowBasedEvaluationQueryArrayOutput() SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return i.ToSloIndicatorWindowBasedEvaluationQueryArrayOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationQueryArray) ToSloIndicatorWindowBasedEvaluationQueryArrayOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationQueryArrayOutput)
}

type SloIndicatorWindowBasedEvaluationQueryOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQuery)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationQueryOutput) ToSloIndicatorWindowBasedEvaluationQueryOutput() SloIndicatorWindowBasedEvaluationQueryOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryOutput) ToSloIndicatorWindowBasedEvaluationQueryOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryOutput {
	return o
}

// The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
// , `Threshold`.
// , `Threshold`.
func (o SloIndicatorWindowBasedEvaluationQueryOutput) QueryGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQuery) string { return v.QueryGroupType }).(pulumi.StringOutput)
}

// List of queries to use.
func (o SloIndicatorWindowBasedEvaluationQueryOutput) QueryGroups() SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQuery) []SloIndicatorWindowBasedEvaluationQueryQueryGroup {
		return v.QueryGroups
	}).(SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput)
}

type SloIndicatorWindowBasedEvaluationQueryArrayOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorWindowBasedEvaluationQuery)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationQueryArrayOutput) ToSloIndicatorWindowBasedEvaluationQueryArrayOutput() SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryArrayOutput) ToSloIndicatorWindowBasedEvaluationQueryArrayOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryArrayOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryArrayOutput) Index(i pulumi.IntInput) SloIndicatorWindowBasedEvaluationQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloIndicatorWindowBasedEvaluationQuery {
		return vs[0].([]SloIndicatorWindowBasedEvaluationQuery)[vs[1].(int)]
	}).(SloIndicatorWindowBasedEvaluationQueryOutput)
}

type SloIndicatorWindowBasedEvaluationQueryQueryGroup struct {
	// Field of log query output to compare against. To be used only for logs based data
	// type when `useRowCount` is false.
	// type when `useRowCount` is false.
	Field *string `pulumi:"field"`
	// The query string to use.
	Query string `pulumi:"query"`
	// The row ID to use.
	RowId string `pulumi:"rowId"`
	// Whether to use the row count. Defaults to false.
	UseRowCount bool `pulumi:"useRowCount"`
}

// SloIndicatorWindowBasedEvaluationQueryQueryGroupInput is an input type that accepts SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs and SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationQueryQueryGroupInput` via:
//
//	SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs{...}
type SloIndicatorWindowBasedEvaluationQueryQueryGroupInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput
	ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput
}

type SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs struct {
	// Field of log query output to compare against. To be used only for logs based data
	// type when `useRowCount` is false.
	// type when `useRowCount` is false.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// The query string to use.
	Query pulumi.StringInput `pulumi:"query"`
	// The row ID to use.
	RowId pulumi.StringInput `pulumi:"rowId"`
	// Whether to use the row count. Defaults to false.
	UseRowCount pulumi.BoolInput `pulumi:"useRowCount"`
}

func (SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (i SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput {
	return i.ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput)
}

// SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayInput is an input type that accepts SloIndicatorWindowBasedEvaluationQueryQueryGroupArray and SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput values.
// You can construct a concrete instance of `SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayInput` via:
//
//	SloIndicatorWindowBasedEvaluationQueryQueryGroupArray{ SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs{...} }
type SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayInput interface {
	pulumi.Input

	ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput
	ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutputWithContext(context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput
}

type SloIndicatorWindowBasedEvaluationQueryQueryGroupArray []SloIndicatorWindowBasedEvaluationQueryQueryGroupInput

func (SloIndicatorWindowBasedEvaluationQueryQueryGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorWindowBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (i SloIndicatorWindowBasedEvaluationQueryQueryGroupArray) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput {
	return i.ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutputWithContext(context.Background())
}

func (i SloIndicatorWindowBasedEvaluationQueryQueryGroupArray) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput)
}

type SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput {
	return o
}

// Field of log query output to compare against. To be used only for logs based data
// type when `useRowCount` is false.
// type when `useRowCount` is false.
func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQueryQueryGroup) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// The query string to use.
func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQueryQueryGroup) string { return v.Query }).(pulumi.StringOutput)
}

// The row ID to use.
func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) RowId() pulumi.StringOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQueryQueryGroup) string { return v.RowId }).(pulumi.StringOutput)
}

// Whether to use the row count. Defaults to false.
func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput) UseRowCount() pulumi.BoolOutput {
	return o.ApplyT(func(v SloIndicatorWindowBasedEvaluationQueryQueryGroup) bool { return v.UseRowCount }).(pulumi.BoolOutput)
}

type SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput struct{ *pulumi.OutputState }

func (SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloIndicatorWindowBasedEvaluationQueryQueryGroup)(nil)).Elem()
}

func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput() SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput) ToSloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutputWithContext(ctx context.Context) SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput {
	return o
}

func (o SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput) Index(i pulumi.IntInput) SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloIndicatorWindowBasedEvaluationQueryQueryGroup {
		return vs[0].([]SloIndicatorWindowBasedEvaluationQueryQueryGroup)[vs[1].(int)]
	}).(SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelInput)(nil)).Elem(), HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpSourceDefaultDateFormatInput)(nil)).Elem(), HttpSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpSourceDefaultDateFormatArrayInput)(nil)).Elem(), HttpSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpSourceFilterInput)(nil)).Elem(), HttpSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpSourceFilterArrayInput)(nil)).Elem(), HttpSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceAuthenticationInput)(nil)).Elem(), KineisLogSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceAuthenticationPtrInput)(nil)).Elem(), KineisLogSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceDefaultDateFormatInput)(nil)).Elem(), KineisLogSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceDefaultDateFormatArrayInput)(nil)).Elem(), KineisLogSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceFilterInput)(nil)).Elem(), KineisLogSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceFilterArrayInput)(nil)).Elem(), KineisLogSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourcePathInput)(nil)).Elem(), KineisLogSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourcePathPtrInput)(nil)).Elem(), KineisLogSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceAuthenticationInput)(nil)).Elem(), KinesisMetricsSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceAuthenticationPtrInput)(nil)).Elem(), KinesisMetricsSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceDefaultDateFormatInput)(nil)).Elem(), KinesisMetricsSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceDefaultDateFormatArrayInput)(nil)).Elem(), KinesisMetricsSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceFilterInput)(nil)).Elem(), KinesisMetricsSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceFilterArrayInput)(nil)).Elem(), KinesisMetricsSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourcePathInput)(nil)).Elem(), KinesisMetricsSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourcePathPtrInput)(nil)).Elem(), KinesisMetricsSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourcePathTagFilterInput)(nil)).Elem(), KinesisMetricsSourcePathTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourcePathTagFilterArrayInput)(nil)).Elem(), KinesisMetricsSourcePathTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LookupTableFieldInput)(nil)).Elem(), LookupTableFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LookupTableFieldArrayInput)(nil)).Elem(), LookupTableFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceAuthenticationInput)(nil)).Elem(), MetadataSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceAuthenticationPtrInput)(nil)).Elem(), MetadataSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceDefaultDateFormatInput)(nil)).Elem(), MetadataSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceDefaultDateFormatArrayInput)(nil)).Elem(), MetadataSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceFilterInput)(nil)).Elem(), MetadataSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourceFilterArrayInput)(nil)).Elem(), MetadataSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourcePathInput)(nil)).Elem(), MetadataSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataSourcePathPtrInput)(nil)).Elem(), MetadataSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorFolderObjPermissionInput)(nil)).Elem(), MonitorFolderObjPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorFolderObjPermissionArrayInput)(nil)).Elem(), MonitorFolderObjPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationInput)(nil)).Elem(), MonitorNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationArrayInput)(nil)).Elem(), MonitorNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorNotificationNotificationInput)(nil)).Elem(), MonitorNotificationNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorObjPermissionInput)(nil)).Elem(), MonitorObjPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorObjPermissionArrayInput)(nil)).Elem(), MonitorObjPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorQueryInput)(nil)).Elem(), MonitorQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorQueryArrayInput)(nil)).Elem(), MonitorQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerInput)(nil)).Elem(), MonitorTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerArrayInput)(nil)).Elem(), MonitorTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsInput)(nil)).Elem(), MonitorTriggerConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsPtrInput)(nil)).Elem(), MonitorTriggerConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsMissingDataConditionInput)(nil)).Elem(), MonitorTriggerConditionsLogsMissingDataConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsMissingDataConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsMissingDataConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsOutlierConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsOutlierConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalAlertInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalResolutionInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionCriticalResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningAlertInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningResolutionInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrInput)(nil)).Elem(), MonitorTriggerConditionsLogsStaticConditionWarningResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsMissingDataConditionInput)(nil)).Elem(), MonitorTriggerConditionsMetricsMissingDataConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsMissingDataConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsMissingDataConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsOutlierConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsOutlierConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalAlertInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningAlertInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningResolutionInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrInput)(nil)).Elem(), MonitorTriggerConditionsMetricsStaticConditionWarningResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloBurnRateConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloBurnRateConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionCriticalInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionCriticalPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionCriticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionWarningInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorTriggerConditionsSloSliConditionWarningPtrInput)(nil)).Elem(), MonitorTriggerConditionsSloSliConditionWarningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoliciesUserConcurrentSessionsLimitInput)(nil)).Elem(), PoliciesUserConcurrentSessionsLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoliciesUserConcurrentSessionsLimitPtrInput)(nil)).Elem(), PoliciesUserConcurrentSessionsLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceAuthenticationInput)(nil)).Elem(), PollingSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceAuthenticationPtrInput)(nil)).Elem(), PollingSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceDefaultDateFormatInput)(nil)).Elem(), PollingSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceDefaultDateFormatArrayInput)(nil)).Elem(), PollingSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceFilterInput)(nil)).Elem(), PollingSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourceFilterArrayInput)(nil)).Elem(), PollingSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourcePathInput)(nil)).Elem(), PollingSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourcePathPtrInput)(nil)).Elem(), PollingSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourcePathTagFilterInput)(nil)).Elem(), PollingSourcePathTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PollingSourcePathTagFilterArrayInput)(nil)).Elem(), PollingSourcePathTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceAuthenticationInput)(nil)).Elem(), S3AuditSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceAuthenticationPtrInput)(nil)).Elem(), S3AuditSourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceDefaultDateFormatInput)(nil)).Elem(), S3AuditSourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceDefaultDateFormatArrayInput)(nil)).Elem(), S3AuditSourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceFilterInput)(nil)).Elem(), S3AuditSourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceFilterArrayInput)(nil)).Elem(), S3AuditSourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathInput)(nil)).Elem(), S3AuditSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathPtrInput)(nil)).Elem(), S3AuditSourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathCustomServiceInput)(nil)).Elem(), S3AuditSourcePathCustomServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathCustomServiceArrayInput)(nil)).Elem(), S3AuditSourcePathCustomServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathSnsTopicOrSubscriptionArnInput)(nil)).Elem(), S3AuditSourcePathSnsTopicOrSubscriptionArnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathSnsTopicOrSubscriptionArnArrayInput)(nil)).Elem(), S3AuditSourcePathSnsTopicOrSubscriptionArnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathTagFilterInput)(nil)).Elem(), S3AuditSourcePathTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourcePathTagFilterArrayInput)(nil)).Elem(), S3AuditSourcePathTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceAuthenticationInput)(nil)).Elem(), S3SourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceAuthenticationPtrInput)(nil)).Elem(), S3SourceAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceDefaultDateFormatInput)(nil)).Elem(), S3SourceDefaultDateFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceDefaultDateFormatArrayInput)(nil)).Elem(), S3SourceDefaultDateFormatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceFilterInput)(nil)).Elem(), S3SourceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourceFilterArrayInput)(nil)).Elem(), S3SourceFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathInput)(nil)).Elem(), S3SourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathPtrInput)(nil)).Elem(), S3SourcePathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathCustomServiceInput)(nil)).Elem(), S3SourcePathCustomServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathCustomServiceArrayInput)(nil)).Elem(), S3SourcePathCustomServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathSnsTopicOrSubscriptionArnInput)(nil)).Elem(), S3SourcePathSnsTopicOrSubscriptionArnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathSnsTopicOrSubscriptionArnArrayInput)(nil)).Elem(), S3SourcePathSnsTopicOrSubscriptionArnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathTagFilterInput)(nil)).Elem(), S3SourcePathTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3SourcePathTagFilterArrayInput)(nil)).Elem(), S3SourcePathTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlConfigurationOnDemandProvisioningEnabledInput)(nil)).Elem(), SamlConfigurationOnDemandProvisioningEnabledArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SamlConfigurationOnDemandProvisioningEnabledPtrInput)(nil)).Elem(), SamlConfigurationOnDemandProvisioningEnabledArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloComplianceInput)(nil)).Elem(), SloComplianceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloComplianceArrayInput)(nil)).Elem(), SloComplianceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorInput)(nil)).Elem(), SloIndicatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorPtrInput)(nil)).Elem(), SloIndicatorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationPtrInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryArrayInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryQueryGroupInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayInput)(nil)).Elem(), SloIndicatorRequestBasedEvaluationQueryQueryGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationPtrInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryArrayInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryQueryGroupInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayInput)(nil)).Elem(), SloIndicatorWindowBasedEvaluationQueryQueryGroupArray{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelOutput{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelPtrOutput{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionOutput{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArrayOutput{})
	pulumi.RegisterOutputType(HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelOutput{})
	pulumi.RegisterOutputType(HttpSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(HttpSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(HttpSourceFilterOutput{})
	pulumi.RegisterOutputType(HttpSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(KineisLogSourceAuthenticationOutput{})
	pulumi.RegisterOutputType(KineisLogSourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KineisLogSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(KineisLogSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(KineisLogSourceFilterOutput{})
	pulumi.RegisterOutputType(KineisLogSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(KineisLogSourcePathOutput{})
	pulumi.RegisterOutputType(KineisLogSourcePathPtrOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceAuthenticationOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceFilterOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourcePathOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourcePathPtrOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourcePathTagFilterOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourcePathTagFilterArrayOutput{})
	pulumi.RegisterOutputType(LookupTableFieldOutput{})
	pulumi.RegisterOutputType(LookupTableFieldArrayOutput{})
	pulumi.RegisterOutputType(MetadataSourceAuthenticationOutput{})
	pulumi.RegisterOutputType(MetadataSourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(MetadataSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(MetadataSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(MetadataSourceFilterOutput{})
	pulumi.RegisterOutputType(MetadataSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(MetadataSourcePathOutput{})
	pulumi.RegisterOutputType(MetadataSourcePathPtrOutput{})
	pulumi.RegisterOutputType(MonitorFolderObjPermissionOutput{})
	pulumi.RegisterOutputType(MonitorFolderObjPermissionArrayOutput{})
	pulumi.RegisterOutputType(MonitorNotificationOutput{})
	pulumi.RegisterOutputType(MonitorNotificationArrayOutput{})
	pulumi.RegisterOutputType(MonitorNotificationNotificationOutput{})
	pulumi.RegisterOutputType(MonitorObjPermissionOutput{})
	pulumi.RegisterOutputType(MonitorObjPermissionArrayOutput{})
	pulumi.RegisterOutputType(MonitorQueryOutput{})
	pulumi.RegisterOutputType(MonitorQueryArrayOutput{})
	pulumi.RegisterOutputType(MonitorTriggerOutput{})
	pulumi.RegisterOutputType(MonitorTriggerArrayOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsMissingDataConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsMissingDataConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsOutlierConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalAlertOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalAlertPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionCriticalResolutionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningAlertOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningAlertPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningResolutionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsLogsStaticConditionWarningResolutionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsMissingDataConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsMissingDataConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsOutlierConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalAlertPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionCriticalResolutionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningAlertOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningAlertPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsMetricsStaticConditionWarningResolutionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloBurnRateConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionCriticalOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionCriticalPtrOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionWarningOutput{})
	pulumi.RegisterOutputType(MonitorTriggerConditionsSloSliConditionWarningPtrOutput{})
	pulumi.RegisterOutputType(PoliciesUserConcurrentSessionsLimitOutput{})
	pulumi.RegisterOutputType(PoliciesUserConcurrentSessionsLimitPtrOutput{})
	pulumi.RegisterOutputType(PollingSourceAuthenticationOutput{})
	pulumi.RegisterOutputType(PollingSourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(PollingSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(PollingSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(PollingSourceFilterOutput{})
	pulumi.RegisterOutputType(PollingSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(PollingSourcePathOutput{})
	pulumi.RegisterOutputType(PollingSourcePathPtrOutput{})
	pulumi.RegisterOutputType(PollingSourcePathTagFilterOutput{})
	pulumi.RegisterOutputType(PollingSourcePathTagFilterArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourceAuthenticationOutput{})
	pulumi.RegisterOutputType(S3AuditSourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(S3AuditSourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(S3AuditSourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourceFilterOutput{})
	pulumi.RegisterOutputType(S3AuditSourceFilterArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathPtrOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathCustomServiceOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathCustomServiceArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathSnsTopicOrSubscriptionArnOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathSnsTopicOrSubscriptionArnArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathTagFilterOutput{})
	pulumi.RegisterOutputType(S3AuditSourcePathTagFilterArrayOutput{})
	pulumi.RegisterOutputType(S3SourceAuthenticationOutput{})
	pulumi.RegisterOutputType(S3SourceAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(S3SourceDefaultDateFormatOutput{})
	pulumi.RegisterOutputType(S3SourceDefaultDateFormatArrayOutput{})
	pulumi.RegisterOutputType(S3SourceFilterOutput{})
	pulumi.RegisterOutputType(S3SourceFilterArrayOutput{})
	pulumi.RegisterOutputType(S3SourcePathOutput{})
	pulumi.RegisterOutputType(S3SourcePathPtrOutput{})
	pulumi.RegisterOutputType(S3SourcePathCustomServiceOutput{})
	pulumi.RegisterOutputType(S3SourcePathCustomServiceArrayOutput{})
	pulumi.RegisterOutputType(S3SourcePathSnsTopicOrSubscriptionArnOutput{})
	pulumi.RegisterOutputType(S3SourcePathSnsTopicOrSubscriptionArnArrayOutput{})
	pulumi.RegisterOutputType(S3SourcePathTagFilterOutput{})
	pulumi.RegisterOutputType(S3SourcePathTagFilterArrayOutput{})
	pulumi.RegisterOutputType(SamlConfigurationOnDemandProvisioningEnabledOutput{})
	pulumi.RegisterOutputType(SamlConfigurationOnDemandProvisioningEnabledPtrOutput{})
	pulumi.RegisterOutputType(SloComplianceOutput{})
	pulumi.RegisterOutputType(SloComplianceArrayOutput{})
	pulumi.RegisterOutputType(SloIndicatorOutput{})
	pulumi.RegisterOutputType(SloIndicatorPtrOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationPtrOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationQueryOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationQueryArrayOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationQueryQueryGroupOutput{})
	pulumi.RegisterOutputType(SloIndicatorRequestBasedEvaluationQueryQueryGroupArrayOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationPtrOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationQueryOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationQueryArrayOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationQueryQueryGroupOutput{})
	pulumi.RegisterOutputType(SloIndicatorWindowBasedEvaluationQueryQueryGroupArrayOutput{})
}
