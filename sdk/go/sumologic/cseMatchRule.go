// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE [Match Rule](https://help.sumologic.com/Cloud_SIEM_Enterprise/CSE_Rules/03_Write_a_Match_Rule).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseMatchRule(ctx, "matchRule", &sumologic.CseMatchRuleArgs{
//				DescriptionExpression: pulumi.String("Signal description"),
//				Enabled:               pulumi.Bool(true),
//				EntitySelectors: CseMatchRuleEntitySelectorArray{
//					&CseMatchRuleEntitySelectorArgs{
//						EntityType: pulumi.String("_ip"),
//						Expression: pulumi.String("srcDevice_ip"),
//					},
//				},
//				Expression:     pulumi.String("objectType = \"Network\""),
//				IsPrototype:    pulumi.Bool(false),
//				NameExpression: pulumi.String("Signal name"),
//				SeverityMapping: &CseMatchRuleSeverityMappingArgs{
//					Default: pulumi.Int(5),
//					Type:    pulumi.String("constant"),
//				},
//				SummaryExpression: pulumi.String("Signal summary"),
//				Tags: pulumi.StringArray{
//					pulumi.String("_mitreAttackTactic:TA0009"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Match Rules can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseMatchRule:CseMatchRule match_rule id
//
// ```
type CseMatchRule struct {
	pulumi.CustomResourceState

	// The description of the generated Signals
	DescriptionExpression pulumi.StringOutput `pulumi:"descriptionExpression"`
	// Whether the rule should generate Signals
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors CseMatchRuleEntitySelectorArrayOutput `pulumi:"entitySelectors"`
	// The expression for which records to match on
	Expression pulumi.StringOutput `pulumi:"expression"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrOutput `pulumi:"isPrototype"`
	// The name of the Rule
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the generated Signals
	NameExpression pulumi.StringOutput `pulumi:"nameExpression"`
	// The configuration of how the severity of the Signals should be mapped from the Records
	SeverityMapping CseMatchRuleSeverityMappingOutput `pulumi:"severityMapping"`
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrOutput `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewCseMatchRule registers a new resource with the given unique name, arguments, and options.
func NewCseMatchRule(ctx *pulumi.Context,
	name string, args *CseMatchRuleArgs, opts ...pulumi.ResourceOption) (*CseMatchRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DescriptionExpression == nil {
		return nil, errors.New("invalid value for required argument 'DescriptionExpression'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EntitySelectors == nil {
		return nil, errors.New("invalid value for required argument 'EntitySelectors'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.NameExpression == nil {
		return nil, errors.New("invalid value for required argument 'NameExpression'")
	}
	if args.SeverityMapping == nil {
		return nil, errors.New("invalid value for required argument 'SeverityMapping'")
	}
	var resource CseMatchRule
	err := ctx.RegisterResource("sumologic:index/cseMatchRule:CseMatchRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseMatchRule gets an existing CseMatchRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseMatchRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseMatchRuleState, opts ...pulumi.ResourceOption) (*CseMatchRule, error) {
	var resource CseMatchRule
	err := ctx.ReadResource("sumologic:index/cseMatchRule:CseMatchRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseMatchRule resources.
type cseMatchRuleState struct {
	// The description of the generated Signals
	DescriptionExpression *string `pulumi:"descriptionExpression"`
	// Whether the rule should generate Signals
	Enabled *bool `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors []CseMatchRuleEntitySelector `pulumi:"entitySelectors"`
	// The expression for which records to match on
	Expression *string `pulumi:"expression"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype *bool `pulumi:"isPrototype"`
	// The name of the Rule
	Name *string `pulumi:"name"`
	// The name of the generated Signals
	NameExpression *string `pulumi:"nameExpression"`
	// The configuration of how the severity of the Signals should be mapped from the Records
	SeverityMapping *CseMatchRuleSeverityMapping `pulumi:"severityMapping"`
	// The summary of the generated Signals
	SummaryExpression *string `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags []string `pulumi:"tags"`
}

type CseMatchRuleState struct {
	// The description of the generated Signals
	DescriptionExpression pulumi.StringPtrInput
	// Whether the rule should generate Signals
	Enabled pulumi.BoolPtrInput
	// The entities to generate Signals on
	EntitySelectors CseMatchRuleEntitySelectorArrayInput
	// The expression for which records to match on
	Expression pulumi.StringPtrInput
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrInput
	// The name of the Rule
	Name pulumi.StringPtrInput
	// The name of the generated Signals
	NameExpression pulumi.StringPtrInput
	// The configuration of how the severity of the Signals should be mapped from the Records
	SeverityMapping CseMatchRuleSeverityMappingPtrInput
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrInput
	// The tags of the generated Signals
	Tags pulumi.StringArrayInput
}

func (CseMatchRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchRuleState)(nil)).Elem()
}

type cseMatchRuleArgs struct {
	// The description of the generated Signals
	DescriptionExpression string `pulumi:"descriptionExpression"`
	// Whether the rule should generate Signals
	Enabled bool `pulumi:"enabled"`
	// The entities to generate Signals on
	EntitySelectors []CseMatchRuleEntitySelector `pulumi:"entitySelectors"`
	// The expression for which records to match on
	Expression string `pulumi:"expression"`
	// Whether the generated Signals should be prototype Signals
	IsPrototype *bool `pulumi:"isPrototype"`
	// The name of the Rule
	Name *string `pulumi:"name"`
	// The name of the generated Signals
	NameExpression string `pulumi:"nameExpression"`
	// The configuration of how the severity of the Signals should be mapped from the Records
	SeverityMapping CseMatchRuleSeverityMapping `pulumi:"severityMapping"`
	// The summary of the generated Signals
	SummaryExpression *string `pulumi:"summaryExpression"`
	// The tags of the generated Signals
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a CseMatchRule resource.
type CseMatchRuleArgs struct {
	// The description of the generated Signals
	DescriptionExpression pulumi.StringInput
	// Whether the rule should generate Signals
	Enabled pulumi.BoolInput
	// The entities to generate Signals on
	EntitySelectors CseMatchRuleEntitySelectorArrayInput
	// The expression for which records to match on
	Expression pulumi.StringInput
	// Whether the generated Signals should be prototype Signals
	IsPrototype pulumi.BoolPtrInput
	// The name of the Rule
	Name pulumi.StringPtrInput
	// The name of the generated Signals
	NameExpression pulumi.StringInput
	// The configuration of how the severity of the Signals should be mapped from the Records
	SeverityMapping CseMatchRuleSeverityMappingInput
	// The summary of the generated Signals
	SummaryExpression pulumi.StringPtrInput
	// The tags of the generated Signals
	Tags pulumi.StringArrayInput
}

func (CseMatchRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchRuleArgs)(nil)).Elem()
}

type CseMatchRuleInput interface {
	pulumi.Input

	ToCseMatchRuleOutput() CseMatchRuleOutput
	ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput
}

func (*CseMatchRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchRule)(nil)).Elem()
}

func (i *CseMatchRule) ToCseMatchRuleOutput() CseMatchRuleOutput {
	return i.ToCseMatchRuleOutputWithContext(context.Background())
}

func (i *CseMatchRule) ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleOutput)
}

// CseMatchRuleArrayInput is an input type that accepts CseMatchRuleArray and CseMatchRuleArrayOutput values.
// You can construct a concrete instance of `CseMatchRuleArrayInput` via:
//
//	CseMatchRuleArray{ CseMatchRuleArgs{...} }
type CseMatchRuleArrayInput interface {
	pulumi.Input

	ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput
	ToCseMatchRuleArrayOutputWithContext(context.Context) CseMatchRuleArrayOutput
}

type CseMatchRuleArray []CseMatchRuleInput

func (CseMatchRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseMatchRule)(nil)).Elem()
}

func (i CseMatchRuleArray) ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput {
	return i.ToCseMatchRuleArrayOutputWithContext(context.Background())
}

func (i CseMatchRuleArray) ToCseMatchRuleArrayOutputWithContext(ctx context.Context) CseMatchRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleArrayOutput)
}

// CseMatchRuleMapInput is an input type that accepts CseMatchRuleMap and CseMatchRuleMapOutput values.
// You can construct a concrete instance of `CseMatchRuleMapInput` via:
//
//	CseMatchRuleMap{ "key": CseMatchRuleArgs{...} }
type CseMatchRuleMapInput interface {
	pulumi.Input

	ToCseMatchRuleMapOutput() CseMatchRuleMapOutput
	ToCseMatchRuleMapOutputWithContext(context.Context) CseMatchRuleMapOutput
}

type CseMatchRuleMap map[string]CseMatchRuleInput

func (CseMatchRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseMatchRule)(nil)).Elem()
}

func (i CseMatchRuleMap) ToCseMatchRuleMapOutput() CseMatchRuleMapOutput {
	return i.ToCseMatchRuleMapOutputWithContext(context.Background())
}

func (i CseMatchRuleMap) ToCseMatchRuleMapOutputWithContext(ctx context.Context) CseMatchRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchRuleMapOutput)
}

type CseMatchRuleOutput struct{ *pulumi.OutputState }

func (CseMatchRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchRule)(nil)).Elem()
}

func (o CseMatchRuleOutput) ToCseMatchRuleOutput() CseMatchRuleOutput {
	return o
}

func (o CseMatchRuleOutput) ToCseMatchRuleOutputWithContext(ctx context.Context) CseMatchRuleOutput {
	return o
}

// The description of the generated Signals
func (o CseMatchRuleOutput) DescriptionExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringOutput { return v.DescriptionExpression }).(pulumi.StringOutput)
}

// Whether the rule should generate Signals
func (o CseMatchRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The entities to generate Signals on
func (o CseMatchRuleOutput) EntitySelectors() CseMatchRuleEntitySelectorArrayOutput {
	return o.ApplyT(func(v *CseMatchRule) CseMatchRuleEntitySelectorArrayOutput { return v.EntitySelectors }).(CseMatchRuleEntitySelectorArrayOutput)
}

// The expression for which records to match on
func (o CseMatchRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

// Whether the generated Signals should be prototype Signals
func (o CseMatchRuleOutput) IsPrototype() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.BoolPtrOutput { return v.IsPrototype }).(pulumi.BoolPtrOutput)
}

// The name of the Rule
func (o CseMatchRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the generated Signals
func (o CseMatchRuleOutput) NameExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringOutput { return v.NameExpression }).(pulumi.StringOutput)
}

// The configuration of how the severity of the Signals should be mapped from the Records
func (o CseMatchRuleOutput) SeverityMapping() CseMatchRuleSeverityMappingOutput {
	return o.ApplyT(func(v *CseMatchRule) CseMatchRuleSeverityMappingOutput { return v.SeverityMapping }).(CseMatchRuleSeverityMappingOutput)
}

// The summary of the generated Signals
func (o CseMatchRuleOutput) SummaryExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringPtrOutput { return v.SummaryExpression }).(pulumi.StringPtrOutput)
}

// The tags of the generated Signals
func (o CseMatchRuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CseMatchRule) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type CseMatchRuleArrayOutput struct{ *pulumi.OutputState }

func (CseMatchRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseMatchRule)(nil)).Elem()
}

func (o CseMatchRuleArrayOutput) ToCseMatchRuleArrayOutput() CseMatchRuleArrayOutput {
	return o
}

func (o CseMatchRuleArrayOutput) ToCseMatchRuleArrayOutputWithContext(ctx context.Context) CseMatchRuleArrayOutput {
	return o
}

func (o CseMatchRuleArrayOutput) Index(i pulumi.IntInput) CseMatchRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseMatchRule {
		return vs[0].([]*CseMatchRule)[vs[1].(int)]
	}).(CseMatchRuleOutput)
}

type CseMatchRuleMapOutput struct{ *pulumi.OutputState }

func (CseMatchRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseMatchRule)(nil)).Elem()
}

func (o CseMatchRuleMapOutput) ToCseMatchRuleMapOutput() CseMatchRuleMapOutput {
	return o
}

func (o CseMatchRuleMapOutput) ToCseMatchRuleMapOutputWithContext(ctx context.Context) CseMatchRuleMapOutput {
	return o
}

func (o CseMatchRuleMapOutput) MapIndex(k pulumi.StringInput) CseMatchRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseMatchRule {
		return vs[0].(map[string]*CseMatchRule)[vs[1].(string)]
	}).(CseMatchRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleInput)(nil)).Elem(), &CseMatchRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleArrayInput)(nil)).Elem(), CseMatchRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchRuleMapInput)(nil)).Elem(), CseMatchRuleMap{})
	pulumi.RegisterOutputType(CseMatchRuleOutput{})
	pulumi.RegisterOutputType(CseMatchRuleArrayOutput{})
	pulumi.RegisterOutputType(CseMatchRuleMapOutput{})
}
