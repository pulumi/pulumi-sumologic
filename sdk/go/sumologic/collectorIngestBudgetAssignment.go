// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deprecated: Use Collector.fields instead to assign an ingest bucket.
type CollectorIngestBudgetAssignment struct {
	pulumi.CustomResourceState

	CollectorId    pulumi.StringOutput `pulumi:"collectorId"`
	IngestBudgetId pulumi.StringOutput `pulumi:"ingestBudgetId"`
}

// NewCollectorIngestBudgetAssignment registers a new resource with the given unique name, arguments, and options.
func NewCollectorIngestBudgetAssignment(ctx *pulumi.Context,
	name string, args *CollectorIngestBudgetAssignmentArgs, opts ...pulumi.ResourceOption) (*CollectorIngestBudgetAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.IngestBudgetId == nil {
		return nil, errors.New("invalid value for required argument 'IngestBudgetId'")
	}
	var resource CollectorIngestBudgetAssignment
	err := ctx.RegisterResource("sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollectorIngestBudgetAssignment gets an existing CollectorIngestBudgetAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollectorIngestBudgetAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectorIngestBudgetAssignmentState, opts ...pulumi.ResourceOption) (*CollectorIngestBudgetAssignment, error) {
	var resource CollectorIngestBudgetAssignment
	err := ctx.ReadResource("sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CollectorIngestBudgetAssignment resources.
type collectorIngestBudgetAssignmentState struct {
	CollectorId    *string `pulumi:"collectorId"`
	IngestBudgetId *string `pulumi:"ingestBudgetId"`
}

type CollectorIngestBudgetAssignmentState struct {
	CollectorId    pulumi.StringPtrInput
	IngestBudgetId pulumi.StringPtrInput
}

func (CollectorIngestBudgetAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorIngestBudgetAssignmentState)(nil)).Elem()
}

type collectorIngestBudgetAssignmentArgs struct {
	CollectorId    string `pulumi:"collectorId"`
	IngestBudgetId string `pulumi:"ingestBudgetId"`
}

// The set of arguments for constructing a CollectorIngestBudgetAssignment resource.
type CollectorIngestBudgetAssignmentArgs struct {
	CollectorId    pulumi.StringInput
	IngestBudgetId pulumi.StringInput
}

func (CollectorIngestBudgetAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorIngestBudgetAssignmentArgs)(nil)).Elem()
}

type CollectorIngestBudgetAssignmentInput interface {
	pulumi.Input

	ToCollectorIngestBudgetAssignmentOutput() CollectorIngestBudgetAssignmentOutput
	ToCollectorIngestBudgetAssignmentOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentOutput
}

func (*CollectorIngestBudgetAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (i *CollectorIngestBudgetAssignment) ToCollectorIngestBudgetAssignmentOutput() CollectorIngestBudgetAssignmentOutput {
	return i.ToCollectorIngestBudgetAssignmentOutputWithContext(context.Background())
}

func (i *CollectorIngestBudgetAssignment) ToCollectorIngestBudgetAssignmentOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorIngestBudgetAssignmentOutput)
}

// CollectorIngestBudgetAssignmentArrayInput is an input type that accepts CollectorIngestBudgetAssignmentArray and CollectorIngestBudgetAssignmentArrayOutput values.
// You can construct a concrete instance of `CollectorIngestBudgetAssignmentArrayInput` via:
//
//          CollectorIngestBudgetAssignmentArray{ CollectorIngestBudgetAssignmentArgs{...} }
type CollectorIngestBudgetAssignmentArrayInput interface {
	pulumi.Input

	ToCollectorIngestBudgetAssignmentArrayOutput() CollectorIngestBudgetAssignmentArrayOutput
	ToCollectorIngestBudgetAssignmentArrayOutputWithContext(context.Context) CollectorIngestBudgetAssignmentArrayOutput
}

type CollectorIngestBudgetAssignmentArray []CollectorIngestBudgetAssignmentInput

func (CollectorIngestBudgetAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (i CollectorIngestBudgetAssignmentArray) ToCollectorIngestBudgetAssignmentArrayOutput() CollectorIngestBudgetAssignmentArrayOutput {
	return i.ToCollectorIngestBudgetAssignmentArrayOutputWithContext(context.Background())
}

func (i CollectorIngestBudgetAssignmentArray) ToCollectorIngestBudgetAssignmentArrayOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorIngestBudgetAssignmentArrayOutput)
}

// CollectorIngestBudgetAssignmentMapInput is an input type that accepts CollectorIngestBudgetAssignmentMap and CollectorIngestBudgetAssignmentMapOutput values.
// You can construct a concrete instance of `CollectorIngestBudgetAssignmentMapInput` via:
//
//          CollectorIngestBudgetAssignmentMap{ "key": CollectorIngestBudgetAssignmentArgs{...} }
type CollectorIngestBudgetAssignmentMapInput interface {
	pulumi.Input

	ToCollectorIngestBudgetAssignmentMapOutput() CollectorIngestBudgetAssignmentMapOutput
	ToCollectorIngestBudgetAssignmentMapOutputWithContext(context.Context) CollectorIngestBudgetAssignmentMapOutput
}

type CollectorIngestBudgetAssignmentMap map[string]CollectorIngestBudgetAssignmentInput

func (CollectorIngestBudgetAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (i CollectorIngestBudgetAssignmentMap) ToCollectorIngestBudgetAssignmentMapOutput() CollectorIngestBudgetAssignmentMapOutput {
	return i.ToCollectorIngestBudgetAssignmentMapOutputWithContext(context.Background())
}

func (i CollectorIngestBudgetAssignmentMap) ToCollectorIngestBudgetAssignmentMapOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorIngestBudgetAssignmentMapOutput)
}

type CollectorIngestBudgetAssignmentOutput struct{ *pulumi.OutputState }

func (CollectorIngestBudgetAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (o CollectorIngestBudgetAssignmentOutput) ToCollectorIngestBudgetAssignmentOutput() CollectorIngestBudgetAssignmentOutput {
	return o
}

func (o CollectorIngestBudgetAssignmentOutput) ToCollectorIngestBudgetAssignmentOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentOutput {
	return o
}

type CollectorIngestBudgetAssignmentArrayOutput struct{ *pulumi.OutputState }

func (CollectorIngestBudgetAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (o CollectorIngestBudgetAssignmentArrayOutput) ToCollectorIngestBudgetAssignmentArrayOutput() CollectorIngestBudgetAssignmentArrayOutput {
	return o
}

func (o CollectorIngestBudgetAssignmentArrayOutput) ToCollectorIngestBudgetAssignmentArrayOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentArrayOutput {
	return o
}

func (o CollectorIngestBudgetAssignmentArrayOutput) Index(i pulumi.IntInput) CollectorIngestBudgetAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CollectorIngestBudgetAssignment {
		return vs[0].([]*CollectorIngestBudgetAssignment)[vs[1].(int)]
	}).(CollectorIngestBudgetAssignmentOutput)
}

type CollectorIngestBudgetAssignmentMapOutput struct{ *pulumi.OutputState }

func (CollectorIngestBudgetAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectorIngestBudgetAssignment)(nil)).Elem()
}

func (o CollectorIngestBudgetAssignmentMapOutput) ToCollectorIngestBudgetAssignmentMapOutput() CollectorIngestBudgetAssignmentMapOutput {
	return o
}

func (o CollectorIngestBudgetAssignmentMapOutput) ToCollectorIngestBudgetAssignmentMapOutputWithContext(ctx context.Context) CollectorIngestBudgetAssignmentMapOutput {
	return o
}

func (o CollectorIngestBudgetAssignmentMapOutput) MapIndex(k pulumi.StringInput) CollectorIngestBudgetAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CollectorIngestBudgetAssignment {
		return vs[0].(map[string]*CollectorIngestBudgetAssignment)[vs[1].(string)]
	}).(CollectorIngestBudgetAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorIngestBudgetAssignmentInput)(nil)).Elem(), &CollectorIngestBudgetAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorIngestBudgetAssignmentArrayInput)(nil)).Elem(), CollectorIngestBudgetAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorIngestBudgetAssignmentMapInput)(nil)).Elem(), CollectorIngestBudgetAssignmentMap{})
	pulumi.RegisterOutputType(CollectorIngestBudgetAssignmentOutput{})
	pulumi.RegisterOutputType(CollectorIngestBudgetAssignmentArrayOutput{})
	pulumi.RegisterOutputType(CollectorIngestBudgetAssignmentMapOutput{})
}
