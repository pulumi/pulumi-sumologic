// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [AWS S3 Audit Source][2].
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
// 			Description: pulumi.String("Just testing this"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sumologic.NewS3AuditSource(ctx, "s3Audit", &sumologic.S3AuditSourceArgs{
// 			Authentication: &S3AuditSourceAuthenticationArgs{
// 				AccessKey: pulumi.String("someKey"),
// 				SecretKey: pulumi.String("******"),
// 				Type:      pulumi.String("S3BucketAuthentication"),
// 			},
// 			Category:    pulumi.String("aws/s3audit"),
// 			CollectorId: collector.ID(),
// 			ContentType: pulumi.String("AwsS3AuditBucket"),
// 			Description: pulumi.String("My description"),
// 			Path: &S3AuditSourcePathArgs{
// 				BucketName:     pulumi.String("Bucket1"),
// 				PathExpression: pulumi.String("*"),
// 				Type:           pulumi.String("S3BucketPathExpression"),
// 			},
// 			Paused:       pulumi.Bool(false),
// 			ScanInterval: pulumi.Int(300000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// S3 Audit sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test 123/456
// ```
//
//  S3 Audit sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/s3AuditSource:S3AuditSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-S3-Audit-Source
type S3AuditSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       S3AuditSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput              `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput            `pulumi:"category"`
	CollectorId          pulumi.IntOutput                  `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                       `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                    `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                       `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         S3AuditSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                    `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                    `pulumi:"fields"`
	Filters                    S3AuditSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                      `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                    `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                    `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                      `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                       `pulumi:"name"`
	// The location to scan for new data.
	Path S3AuditSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewS3AuditSource registers a new resource with the given unique name, arguments, and options.
func NewS3AuditSource(ctx *pulumi.Context,
	name string, args *S3AuditSourceArgs, opts ...pulumi.ResourceOption) (*S3AuditSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource S3AuditSource
	err := ctx.RegisterResource("sumologic:index/s3AuditSource:S3AuditSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3AuditSource gets an existing S3AuditSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3AuditSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3AuditSourceState, opts ...pulumi.ResourceOption) (*S3AuditSource, error) {
	var resource S3AuditSource
	err := ctx.ReadResource("sumologic:index/s3AuditSource:S3AuditSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3AuditSource resources.
type s3auditSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *S3AuditSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                        `pulumi:"automaticDateParsing"`
	Category             *string                      `pulumi:"category"`
	CollectorId          *int                         `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                          `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3AuditSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []S3AuditSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path *S3AuditSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type S3AuditSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3AuditSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3AuditSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3AuditSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3AuditSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3AuditSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3auditSourceState)(nil)).Elem()
}

type s3auditSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3AuditSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                       `pulumi:"automaticDateParsing"`
	Category             *string                     `pulumi:"category"`
	CollectorId          int                         `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                           `pulumi:"contentType"`
	CutoffRelativeTime         *string                          `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                             `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []S3AuditSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                          `pulumi:"description"`
	Fields                     map[string]string                `pulumi:"fields"`
	Filters                    []S3AuditSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                            `pulumi:"forceTimezone"`
	HostName                   *string                          `pulumi:"hostName"`
	ManualPrefixRegexp         *string                          `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                            `pulumi:"multilineProcessingEnabled"`
	Name                       *string                          `pulumi:"name"`
	// The location to scan for new data.
	Path S3AuditSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a S3AuditSource resource.
type S3AuditSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       S3AuditSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         S3AuditSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    S3AuditSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path S3AuditSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (S3AuditSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3auditSourceArgs)(nil)).Elem()
}

type S3AuditSourceInput interface {
	pulumi.Input

	ToS3AuditSourceOutput() S3AuditSourceOutput
	ToS3AuditSourceOutputWithContext(ctx context.Context) S3AuditSourceOutput
}

func (*S3AuditSource) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSource)(nil)).Elem()
}

func (i *S3AuditSource) ToS3AuditSourceOutput() S3AuditSourceOutput {
	return i.ToS3AuditSourceOutputWithContext(context.Background())
}

func (i *S3AuditSource) ToS3AuditSourceOutputWithContext(ctx context.Context) S3AuditSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceOutput)
}

// S3AuditSourceArrayInput is an input type that accepts S3AuditSourceArray and S3AuditSourceArrayOutput values.
// You can construct a concrete instance of `S3AuditSourceArrayInput` via:
//
//          S3AuditSourceArray{ S3AuditSourceArgs{...} }
type S3AuditSourceArrayInput interface {
	pulumi.Input

	ToS3AuditSourceArrayOutput() S3AuditSourceArrayOutput
	ToS3AuditSourceArrayOutputWithContext(context.Context) S3AuditSourceArrayOutput
}

type S3AuditSourceArray []S3AuditSourceInput

func (S3AuditSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3AuditSource)(nil)).Elem()
}

func (i S3AuditSourceArray) ToS3AuditSourceArrayOutput() S3AuditSourceArrayOutput {
	return i.ToS3AuditSourceArrayOutputWithContext(context.Background())
}

func (i S3AuditSourceArray) ToS3AuditSourceArrayOutputWithContext(ctx context.Context) S3AuditSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceArrayOutput)
}

// S3AuditSourceMapInput is an input type that accepts S3AuditSourceMap and S3AuditSourceMapOutput values.
// You can construct a concrete instance of `S3AuditSourceMapInput` via:
//
//          S3AuditSourceMap{ "key": S3AuditSourceArgs{...} }
type S3AuditSourceMapInput interface {
	pulumi.Input

	ToS3AuditSourceMapOutput() S3AuditSourceMapOutput
	ToS3AuditSourceMapOutputWithContext(context.Context) S3AuditSourceMapOutput
}

type S3AuditSourceMap map[string]S3AuditSourceInput

func (S3AuditSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3AuditSource)(nil)).Elem()
}

func (i S3AuditSourceMap) ToS3AuditSourceMapOutput() S3AuditSourceMapOutput {
	return i.ToS3AuditSourceMapOutputWithContext(context.Background())
}

func (i S3AuditSourceMap) ToS3AuditSourceMapOutputWithContext(ctx context.Context) S3AuditSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3AuditSourceMapOutput)
}

type S3AuditSourceOutput struct{ *pulumi.OutputState }

func (S3AuditSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3AuditSource)(nil)).Elem()
}

func (o S3AuditSourceOutput) ToS3AuditSourceOutput() S3AuditSourceOutput {
	return o
}

func (o S3AuditSourceOutput) ToS3AuditSourceOutputWithContext(ctx context.Context) S3AuditSourceOutput {
	return o
}

type S3AuditSourceArrayOutput struct{ *pulumi.OutputState }

func (S3AuditSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3AuditSource)(nil)).Elem()
}

func (o S3AuditSourceArrayOutput) ToS3AuditSourceArrayOutput() S3AuditSourceArrayOutput {
	return o
}

func (o S3AuditSourceArrayOutput) ToS3AuditSourceArrayOutputWithContext(ctx context.Context) S3AuditSourceArrayOutput {
	return o
}

func (o S3AuditSourceArrayOutput) Index(i pulumi.IntInput) S3AuditSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3AuditSource {
		return vs[0].([]*S3AuditSource)[vs[1].(int)]
	}).(S3AuditSourceOutput)
}

type S3AuditSourceMapOutput struct{ *pulumi.OutputState }

func (S3AuditSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3AuditSource)(nil)).Elem()
}

func (o S3AuditSourceMapOutput) ToS3AuditSourceMapOutput() S3AuditSourceMapOutput {
	return o
}

func (o S3AuditSourceMapOutput) ToS3AuditSourceMapOutputWithContext(ctx context.Context) S3AuditSourceMapOutput {
	return o
}

func (o S3AuditSourceMapOutput) MapIndex(k pulumi.StringInput) S3AuditSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3AuditSource {
		return vs[0].(map[string]*S3AuditSource)[vs[1].(string)]
	}).(S3AuditSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceInput)(nil)).Elem(), &S3AuditSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceArrayInput)(nil)).Elem(), S3AuditSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3AuditSourceMapInput)(nil)).Elem(), S3AuditSourceMap{})
	pulumi.RegisterOutputType(S3AuditSourceOutput{})
	pulumi.RegisterOutputType(S3AuditSourceArrayOutput{})
	pulumi.RegisterOutputType(S3AuditSourceMapOutput{})
}
