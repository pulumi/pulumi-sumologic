// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Field Extraction Rule](https://help.sumologic.com/Manage/Field-Extractions).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewFieldExtractionRule(ctx, "fieldExtractionRule", &sumologic.FieldExtractionRuleArgs{
// 			Enabled:         pulumi.Bool(true),
// 			ParseExpression: pulumi.String("csv _raw extract 1 as f1"),
// 			Scope:           pulumi.String("_sourceHost=127.0.0.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// The following attributes are exported:
//
// - `id` - Unique identifier for the field extraction rule.
//
// ## Import
//
// Extraction Rules can be imported using the extraction rule id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/fieldExtractionRule:FieldExtractionRule fieldExtractionRule id
// ```
//
//  [1]https://help.sumologic.com/Manage/Field-Extractions
type FieldExtractionRule struct {
	pulumi.CustomResourceState

	// Is the field extraction rule enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Describes the fields to be parsed.
	ParseExpression pulumi.StringOutput `pulumi:"parseExpression"`
	// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewFieldExtractionRule registers a new resource with the given unique name, arguments, and options.
func NewFieldExtractionRule(ctx *pulumi.Context,
	name string, args *FieldExtractionRuleArgs, opts ...pulumi.ResourceOption) (*FieldExtractionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ParseExpression == nil {
		return nil, errors.New("invalid value for required argument 'ParseExpression'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource FieldExtractionRule
	err := ctx.RegisterResource("sumologic:index/fieldExtractionRule:FieldExtractionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFieldExtractionRule gets an existing FieldExtractionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFieldExtractionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FieldExtractionRuleState, opts ...pulumi.ResourceOption) (*FieldExtractionRule, error) {
	var resource FieldExtractionRule
	err := ctx.ReadResource("sumologic:index/fieldExtractionRule:FieldExtractionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FieldExtractionRule resources.
type fieldExtractionRuleState struct {
	// Is the field extraction rule enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
	Name *string `pulumi:"name"`
	// Describes the fields to be parsed.
	ParseExpression *string `pulumi:"parseExpression"`
	// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
	Scope *string `pulumi:"scope"`
}

type FieldExtractionRuleState struct {
	// Is the field extraction rule enabled.
	Enabled pulumi.BoolPtrInput
	// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
	Name pulumi.StringPtrInput
	// Describes the fields to be parsed.
	ParseExpression pulumi.StringPtrInput
	// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
	Scope pulumi.StringPtrInput
}

func (FieldExtractionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldExtractionRuleState)(nil)).Elem()
}

type fieldExtractionRuleArgs struct {
	// Is the field extraction rule enabled.
	Enabled bool `pulumi:"enabled"`
	// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
	Name *string `pulumi:"name"`
	// Describes the fields to be parsed.
	ParseExpression string `pulumi:"parseExpression"`
	// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a FieldExtractionRule resource.
type FieldExtractionRuleArgs struct {
	// Is the field extraction rule enabled.
	Enabled pulumi.BoolInput
	// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
	Name pulumi.StringPtrInput
	// Describes the fields to be parsed.
	ParseExpression pulumi.StringInput
	// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
	Scope pulumi.StringInput
}

func (FieldExtractionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fieldExtractionRuleArgs)(nil)).Elem()
}

type FieldExtractionRuleInput interface {
	pulumi.Input

	ToFieldExtractionRuleOutput() FieldExtractionRuleOutput
	ToFieldExtractionRuleOutputWithContext(ctx context.Context) FieldExtractionRuleOutput
}

func (*FieldExtractionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldExtractionRule)(nil)).Elem()
}

func (i *FieldExtractionRule) ToFieldExtractionRuleOutput() FieldExtractionRuleOutput {
	return i.ToFieldExtractionRuleOutputWithContext(context.Background())
}

func (i *FieldExtractionRule) ToFieldExtractionRuleOutputWithContext(ctx context.Context) FieldExtractionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldExtractionRuleOutput)
}

// FieldExtractionRuleArrayInput is an input type that accepts FieldExtractionRuleArray and FieldExtractionRuleArrayOutput values.
// You can construct a concrete instance of `FieldExtractionRuleArrayInput` via:
//
//          FieldExtractionRuleArray{ FieldExtractionRuleArgs{...} }
type FieldExtractionRuleArrayInput interface {
	pulumi.Input

	ToFieldExtractionRuleArrayOutput() FieldExtractionRuleArrayOutput
	ToFieldExtractionRuleArrayOutputWithContext(context.Context) FieldExtractionRuleArrayOutput
}

type FieldExtractionRuleArray []FieldExtractionRuleInput

func (FieldExtractionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FieldExtractionRule)(nil)).Elem()
}

func (i FieldExtractionRuleArray) ToFieldExtractionRuleArrayOutput() FieldExtractionRuleArrayOutput {
	return i.ToFieldExtractionRuleArrayOutputWithContext(context.Background())
}

func (i FieldExtractionRuleArray) ToFieldExtractionRuleArrayOutputWithContext(ctx context.Context) FieldExtractionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldExtractionRuleArrayOutput)
}

// FieldExtractionRuleMapInput is an input type that accepts FieldExtractionRuleMap and FieldExtractionRuleMapOutput values.
// You can construct a concrete instance of `FieldExtractionRuleMapInput` via:
//
//          FieldExtractionRuleMap{ "key": FieldExtractionRuleArgs{...} }
type FieldExtractionRuleMapInput interface {
	pulumi.Input

	ToFieldExtractionRuleMapOutput() FieldExtractionRuleMapOutput
	ToFieldExtractionRuleMapOutputWithContext(context.Context) FieldExtractionRuleMapOutput
}

type FieldExtractionRuleMap map[string]FieldExtractionRuleInput

func (FieldExtractionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FieldExtractionRule)(nil)).Elem()
}

func (i FieldExtractionRuleMap) ToFieldExtractionRuleMapOutput() FieldExtractionRuleMapOutput {
	return i.ToFieldExtractionRuleMapOutputWithContext(context.Background())
}

func (i FieldExtractionRuleMap) ToFieldExtractionRuleMapOutputWithContext(ctx context.Context) FieldExtractionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldExtractionRuleMapOutput)
}

type FieldExtractionRuleOutput struct{ *pulumi.OutputState }

func (FieldExtractionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FieldExtractionRule)(nil)).Elem()
}

func (o FieldExtractionRuleOutput) ToFieldExtractionRuleOutput() FieldExtractionRuleOutput {
	return o
}

func (o FieldExtractionRuleOutput) ToFieldExtractionRuleOutputWithContext(ctx context.Context) FieldExtractionRuleOutput {
	return o
}

// Is the field extraction rule enabled.
func (o FieldExtractionRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FieldExtractionRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the field extraction rule. Use a name that makes it easy to identify the rule.
func (o FieldExtractionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FieldExtractionRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Describes the fields to be parsed.
func (o FieldExtractionRuleOutput) ParseExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *FieldExtractionRule) pulumi.StringOutput { return v.ParseExpression }).(pulumi.StringOutput)
}

// Scope of the field extraction rule. This could be a sourceCategory, sourceHost, or any other metadata that describes the data you want to extract from. Think of the Scope as the first portion of an ad hoc search, before the first pipe ( | ). You'll use the Scope to run a search against the rule.
func (o FieldExtractionRuleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *FieldExtractionRule) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

type FieldExtractionRuleArrayOutput struct{ *pulumi.OutputState }

func (FieldExtractionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FieldExtractionRule)(nil)).Elem()
}

func (o FieldExtractionRuleArrayOutput) ToFieldExtractionRuleArrayOutput() FieldExtractionRuleArrayOutput {
	return o
}

func (o FieldExtractionRuleArrayOutput) ToFieldExtractionRuleArrayOutputWithContext(ctx context.Context) FieldExtractionRuleArrayOutput {
	return o
}

func (o FieldExtractionRuleArrayOutput) Index(i pulumi.IntInput) FieldExtractionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FieldExtractionRule {
		return vs[0].([]*FieldExtractionRule)[vs[1].(int)]
	}).(FieldExtractionRuleOutput)
}

type FieldExtractionRuleMapOutput struct{ *pulumi.OutputState }

func (FieldExtractionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FieldExtractionRule)(nil)).Elem()
}

func (o FieldExtractionRuleMapOutput) ToFieldExtractionRuleMapOutput() FieldExtractionRuleMapOutput {
	return o
}

func (o FieldExtractionRuleMapOutput) ToFieldExtractionRuleMapOutputWithContext(ctx context.Context) FieldExtractionRuleMapOutput {
	return o
}

func (o FieldExtractionRuleMapOutput) MapIndex(k pulumi.StringInput) FieldExtractionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FieldExtractionRule {
		return vs[0].(map[string]*FieldExtractionRule)[vs[1].(string)]
	}).(FieldExtractionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FieldExtractionRuleInput)(nil)).Elem(), &FieldExtractionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldExtractionRuleArrayInput)(nil)).Elem(), FieldExtractionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldExtractionRuleMapInput)(nil)).Elem(), FieldExtractionRuleMap{})
	pulumi.RegisterOutputType(FieldExtractionRuleOutput{})
	pulumi.RegisterOutputType(FieldExtractionRuleArrayOutput{})
	pulumi.RegisterOutputType(FieldExtractionRuleMapOutput{})
}
