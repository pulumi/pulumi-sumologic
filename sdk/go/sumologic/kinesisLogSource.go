// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Kinesis Log source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source). This source is used to ingest log via Kinesis Firehose from AWS.
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
//				Name:        pulumi.String("my-collector"),
//				Description: pulumi.String("Just testing this"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewKinesisLogSource(ctx, "kinesis_log_access_key", &sumologic.KinesisLogSourceArgs{
//				Name:        pulumi.String("Kinesis Log"),
//				Description: pulumi.String("Description for Kinesis Log Source"),
//				Category:    pulumi.String("prod/kinesis/log"),
//				ContentType: pulumi.String("KinesisLog"),
//				CollectorId: collector.ID(),
//				Authentication: &sumologic.KinesisLogSourceAuthenticationArgs{
//					Type:      pulumi.String("S3BucketAuthentication"),
//					AccessKey: pulumi.String("someKey"),
//					SecretKey: pulumi.String("******"),
//				},
//				Path: &sumologic.KinesisLogSourcePathArgs{
//					Type:           pulumi.String("KinesisLogPath"),
//					BucketName:     pulumi.String("testBucket"),
//					PathExpression: pulumi.String("http-endpoint-failed/*"),
//					ScanInterval:   pulumi.Int(30000),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewKinesisLogSource(ctx, "kinesis_log_role_arn", &sumologic.KinesisLogSourceArgs{
//				Name:        pulumi.String("Kinesis Log"),
//				Description: pulumi.String("Description for Kinesis Log Source"),
//				Category:    pulumi.String("prod/kinesis/log"),
//				ContentType: pulumi.String("KinesisLog"),
//				CollectorId: collector.ID(),
//				Authentication: &sumologic.KinesisLogSourceAuthenticationArgs{
//					Type:    pulumi.String("AWSRoleBasedAuthentication"),
//					RoleArn: pulumi.String("arn:aws:iam::604066827510:role/cw-role-SumoRole-4AOLS73TGKYI"),
//				},
//				Path: &sumologic.KinesisLogSourcePathArgs{
//					Type:           pulumi.String("KinesisLogPath"),
//					BucketName:     pulumi.String("testBucket"),
//					PathExpression: pulumi.String("http-endpoint-failed/*"),
//					ScanInterval:   pulumi.Int(30000),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Kinesis Log sources can be imported using the collector and source IDs (`collector/source`), e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/kinesisLogSource:KinesisLogSource test 123/456
// ```
//
// HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/kinesisLogSource:KinesisLogSource test my-test-collector/my-test-source
// ```
//
// [1]: https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
// [2]: https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS_Kinesis_Firehose_for_Logs_Source
type KinesisLogSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisLogSourceAuthenticationPtrOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                    `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput                  `pulumi:"category"`
	CollectorId          pulumi.IntOutput                        `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                          `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                       `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                          `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         KinesisLogSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                       `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                       `pulumi:"fields"`
	Filters                    KinesisLogSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                         `pulumi:"forceTimezone"`
	HashAlgorithm              pulumi.StringPtrOutput                       `pulumi:"hashAlgorithm"`
	HostName                   pulumi.StringPtrOutput                       `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                       `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          pulumi.BoolPtrOutput                         `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                         `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path     KinesisLogSourcePathPtrOutput `pulumi:"path"`
	Timezone pulumi.StringPtrOutput        `pulumi:"timezone"`
	// The HTTP endpoint to be used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewKinesisLogSource registers a new resource with the given unique name, arguments, and options.
func NewKinesisLogSource(ctx *pulumi.Context,
	name string, args *KinesisLogSourceArgs, opts ...pulumi.ResourceOption) (*KinesisLogSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("sumologic:index/kineisLogSource:KineisLogSource"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KinesisLogSource
	err := ctx.RegisterResource("sumologic:index/kinesisLogSource:KinesisLogSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKinesisLogSource gets an existing KinesisLogSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKinesisLogSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KinesisLogSourceState, opts ...pulumi.ResourceOption) (*KinesisLogSource, error) {
	var resource KinesisLogSource
	err := ctx.ReadResource("sumologic:index/kinesisLogSource:KinesisLogSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KinesisLogSource resources.
type kinesisLogSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *KinesisLogSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                           `pulumi:"automaticDateParsing"`
	Category             *string                         `pulumi:"category"`
	CollectorId          *int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisLogSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []KinesisLogSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HashAlgorithm              *string                             `pulumi:"hashAlgorithm"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                               `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path     *KinesisLogSourcePath `pulumi:"path"`
	Timezone *string               `pulumi:"timezone"`
	// The HTTP endpoint to be used while creating Kinesis Firehose on AWS.
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type KinesisLogSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisLogSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisLogSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisLogSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HashAlgorithm              pulumi.StringPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location of S3 bucket for failed Kinesis log data.
	Path     KinesisLogSourcePathPtrInput
	Timezone pulumi.StringPtrInput
	// The HTTP endpoint to be used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KinesisLogSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisLogSourceState)(nil)).Elem()
}

type kinesisLogSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *KinesisLogSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                           `pulumi:"automaticDateParsing"`
	Category             *string                         `pulumi:"category"`
	CollectorId          int                             `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                              `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisLogSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []KinesisLogSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HashAlgorithm              *string                             `pulumi:"hashAlgorithm"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                               `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path                *KinesisLogSourcePath `pulumi:"path"`
	Timezone            *string               `pulumi:"timezone"`
	UseAutolineMatching *bool                 `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a KinesisLogSource resource.
type KinesisLogSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisLogSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisLogSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisLogSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HashAlgorithm              pulumi.StringPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location of S3 bucket for failed Kinesis log data.
	Path                KinesisLogSourcePathPtrInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KinesisLogSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisLogSourceArgs)(nil)).Elem()
}

type KinesisLogSourceInput interface {
	pulumi.Input

	ToKinesisLogSourceOutput() KinesisLogSourceOutput
	ToKinesisLogSourceOutputWithContext(ctx context.Context) KinesisLogSourceOutput
}

func (*KinesisLogSource) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisLogSource)(nil)).Elem()
}

func (i *KinesisLogSource) ToKinesisLogSourceOutput() KinesisLogSourceOutput {
	return i.ToKinesisLogSourceOutputWithContext(context.Background())
}

func (i *KinesisLogSource) ToKinesisLogSourceOutputWithContext(ctx context.Context) KinesisLogSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisLogSourceOutput)
}

// KinesisLogSourceArrayInput is an input type that accepts KinesisLogSourceArray and KinesisLogSourceArrayOutput values.
// You can construct a concrete instance of `KinesisLogSourceArrayInput` via:
//
//	KinesisLogSourceArray{ KinesisLogSourceArgs{...} }
type KinesisLogSourceArrayInput interface {
	pulumi.Input

	ToKinesisLogSourceArrayOutput() KinesisLogSourceArrayOutput
	ToKinesisLogSourceArrayOutputWithContext(context.Context) KinesisLogSourceArrayOutput
}

type KinesisLogSourceArray []KinesisLogSourceInput

func (KinesisLogSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisLogSource)(nil)).Elem()
}

func (i KinesisLogSourceArray) ToKinesisLogSourceArrayOutput() KinesisLogSourceArrayOutput {
	return i.ToKinesisLogSourceArrayOutputWithContext(context.Background())
}

func (i KinesisLogSourceArray) ToKinesisLogSourceArrayOutputWithContext(ctx context.Context) KinesisLogSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisLogSourceArrayOutput)
}

// KinesisLogSourceMapInput is an input type that accepts KinesisLogSourceMap and KinesisLogSourceMapOutput values.
// You can construct a concrete instance of `KinesisLogSourceMapInput` via:
//
//	KinesisLogSourceMap{ "key": KinesisLogSourceArgs{...} }
type KinesisLogSourceMapInput interface {
	pulumi.Input

	ToKinesisLogSourceMapOutput() KinesisLogSourceMapOutput
	ToKinesisLogSourceMapOutputWithContext(context.Context) KinesisLogSourceMapOutput
}

type KinesisLogSourceMap map[string]KinesisLogSourceInput

func (KinesisLogSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisLogSource)(nil)).Elem()
}

func (i KinesisLogSourceMap) ToKinesisLogSourceMapOutput() KinesisLogSourceMapOutput {
	return i.ToKinesisLogSourceMapOutputWithContext(context.Background())
}

func (i KinesisLogSourceMap) ToKinesisLogSourceMapOutputWithContext(ctx context.Context) KinesisLogSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisLogSourceMapOutput)
}

type KinesisLogSourceOutput struct{ *pulumi.OutputState }

func (KinesisLogSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisLogSource)(nil)).Elem()
}

func (o KinesisLogSourceOutput) ToKinesisLogSourceOutput() KinesisLogSourceOutput {
	return o
}

func (o KinesisLogSourceOutput) ToKinesisLogSourceOutputWithContext(ctx context.Context) KinesisLogSourceOutput {
	return o
}

// Authentication details for connecting to the S3 bucket.
func (o KinesisLogSourceOutput) Authentication() KinesisLogSourceAuthenticationPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) KinesisLogSourceAuthenticationPtrOutput { return v.Authentication }).(KinesisLogSourceAuthenticationPtrOutput)
}

func (o KinesisLogSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o KinesisLogSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o KinesisLogSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o KinesisLogSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o KinesisLogSourceOutput) DefaultDateFormats() KinesisLogSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *KinesisLogSource) KinesisLogSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(KinesisLogSourceDefaultDateFormatArrayOutput)
}

func (o KinesisLogSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o KinesisLogSourceOutput) Filters() KinesisLogSourceFilterArrayOutput {
	return o.ApplyT(func(v *KinesisLogSource) KinesisLogSourceFilterArrayOutput { return v.Filters }).(KinesisLogSourceFilterArrayOutput)
}

func (o KinesisLogSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o KinesisLogSourceOutput) HashAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.HashAlgorithm }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o KinesisLogSourceOutput) MessagePerRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.BoolPtrOutput { return v.MessagePerRequest }).(pulumi.BoolPtrOutput)
}

func (o KinesisLogSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o KinesisLogSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location of S3 bucket for failed Kinesis log data.
func (o KinesisLogSourceOutput) Path() KinesisLogSourcePathPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) KinesisLogSourcePathPtrOutput { return v.Path }).(KinesisLogSourcePathPtrOutput)
}

func (o KinesisLogSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint to be used while creating Kinesis Firehose on AWS.
func (o KinesisLogSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o KinesisLogSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisLogSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type KinesisLogSourceArrayOutput struct{ *pulumi.OutputState }

func (KinesisLogSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisLogSource)(nil)).Elem()
}

func (o KinesisLogSourceArrayOutput) ToKinesisLogSourceArrayOutput() KinesisLogSourceArrayOutput {
	return o
}

func (o KinesisLogSourceArrayOutput) ToKinesisLogSourceArrayOutputWithContext(ctx context.Context) KinesisLogSourceArrayOutput {
	return o
}

func (o KinesisLogSourceArrayOutput) Index(i pulumi.IntInput) KinesisLogSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KinesisLogSource {
		return vs[0].([]*KinesisLogSource)[vs[1].(int)]
	}).(KinesisLogSourceOutput)
}

type KinesisLogSourceMapOutput struct{ *pulumi.OutputState }

func (KinesisLogSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisLogSource)(nil)).Elem()
}

func (o KinesisLogSourceMapOutput) ToKinesisLogSourceMapOutput() KinesisLogSourceMapOutput {
	return o
}

func (o KinesisLogSourceMapOutput) ToKinesisLogSourceMapOutputWithContext(ctx context.Context) KinesisLogSourceMapOutput {
	return o
}

func (o KinesisLogSourceMapOutput) MapIndex(k pulumi.StringInput) KinesisLogSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KinesisLogSource {
		return vs[0].(map[string]*KinesisLogSource)[vs[1].(string)]
	}).(KinesisLogSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisLogSourceInput)(nil)).Elem(), &KinesisLogSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisLogSourceArrayInput)(nil)).Elem(), KinesisLogSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisLogSourceMapInput)(nil)).Elem(), KinesisLogSourceMap{})
	pulumi.RegisterOutputType(KinesisLogSourceOutput{})
	pulumi.RegisterOutputType(KinesisLogSourceArrayOutput{})
	pulumi.RegisterOutputType(KinesisLogSourceMapOutput{})
}
