// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic CloudFront source](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source).
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			collector, err := sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
//				Description: pulumi.String("Just testing this"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewCloudfrontSource(ctx, "cloudfrontSource", &sumologic.CloudfrontSourceArgs{
//				Authentication: &sumologic.CloudfrontSourceAuthenticationArgs{
//					AccessKey: pulumi.String("someKey"),
//					SecretKey: pulumi.String("******"),
//					Type:      pulumi.String("S3BucketAuthentication"),
//				},
//				Category:    pulumi.String("aws/cloudfront"),
//				CollectorId: collector.ID(),
//				ContentType: pulumi.String("AwsCloudFrontBucket"),
//				Description: pulumi.String("My description"),
//				Path: &sumologic.CloudfrontSourcePathArgs{
//					BucketName:     pulumi.String("Bucket1"),
//					PathExpression: pulumi.String("*"),
//					Type:           pulumi.String("S3BucketPathExpression"),
//				},
//				Paused:       pulumi.Bool(false),
//				ScanInterval: pulumi.Int(300000),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CloudFront sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test 123/456
//
// ```
//
//	CloudFront sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cloudfrontSource:CloudfrontSource test my-test-collector/my-test-source
//
// ```
//
//	[1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources [2]https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudFront-Source
type CloudfrontSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       CloudfrontSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                 `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput               `pulumi:"category"`
	CollectorId          pulumi.IntOutput                     `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                          `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                       `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                          `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                       `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                       `pulumi:"fields"`
	Filters                    CloudfrontSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                         `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                       `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                       `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                         `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	// The location to scan for new data.
	Path CloudfrontSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone     pulumi.StringPtrOutput `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewCloudfrontSource registers a new resource with the given unique name, arguments, and options.
func NewCloudfrontSource(ctx *pulumi.Context,
	name string, args *CloudfrontSourceArgs, opts ...pulumi.ResourceOption) (*CloudfrontSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource CloudfrontSource
	err := ctx.RegisterResource("sumologic:index/cloudfrontSource:CloudfrontSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudfrontSource gets an existing CloudfrontSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudfrontSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudfrontSourceState, opts ...pulumi.ResourceOption) (*CloudfrontSource, error) {
	var resource CloudfrontSource
	err := ctx.ReadResource("sumologic:index/cloudfrontSource:CloudfrontSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudfrontSource resources.
type cloudfrontSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *CloudfrontSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                           `pulumi:"automaticDateParsing"`
	Category             *string                         `pulumi:"category"`
	CollectorId          *int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudfrontSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudfrontSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// The location to scan for new data.
	Path *CloudfrontSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval *int    `pulumi:"scanInterval"`
	Timezone     *string `pulumi:"timezone"`
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type CloudfrontSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       CloudfrontSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudfrontSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path CloudfrontSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval pulumi.IntPtrInput
	Timezone     pulumi.StringPtrInput
	// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (CloudfrontSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfrontSourceState)(nil)).Elem()
}

type cloudfrontSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       CloudfrontSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                          `pulumi:"automaticDateParsing"`
	Category             *string                        `pulumi:"category"`
	CollectorId          int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                              `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []CloudfrontSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []CloudfrontSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// The location to scan for new data.
	Path CloudfrontSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a CloudfrontSource resource.
type CloudfrontSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       CloudfrontSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         CloudfrontSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    CloudfrontSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path CloudfrontSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (CloudfrontSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudfrontSourceArgs)(nil)).Elem()
}

type CloudfrontSourceInput interface {
	pulumi.Input

	ToCloudfrontSourceOutput() CloudfrontSourceOutput
	ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput
}

func (*CloudfrontSource) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudfrontSource)(nil)).Elem()
}

func (i *CloudfrontSource) ToCloudfrontSourceOutput() CloudfrontSourceOutput {
	return i.ToCloudfrontSourceOutputWithContext(context.Background())
}

func (i *CloudfrontSource) ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceOutput)
}

// CloudfrontSourceArrayInput is an input type that accepts CloudfrontSourceArray and CloudfrontSourceArrayOutput values.
// You can construct a concrete instance of `CloudfrontSourceArrayInput` via:
//
//	CloudfrontSourceArray{ CloudfrontSourceArgs{...} }
type CloudfrontSourceArrayInput interface {
	pulumi.Input

	ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput
	ToCloudfrontSourceArrayOutputWithContext(context.Context) CloudfrontSourceArrayOutput
}

type CloudfrontSourceArray []CloudfrontSourceInput

func (CloudfrontSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudfrontSource)(nil)).Elem()
}

func (i CloudfrontSourceArray) ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput {
	return i.ToCloudfrontSourceArrayOutputWithContext(context.Background())
}

func (i CloudfrontSourceArray) ToCloudfrontSourceArrayOutputWithContext(ctx context.Context) CloudfrontSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceArrayOutput)
}

// CloudfrontSourceMapInput is an input type that accepts CloudfrontSourceMap and CloudfrontSourceMapOutput values.
// You can construct a concrete instance of `CloudfrontSourceMapInput` via:
//
//	CloudfrontSourceMap{ "key": CloudfrontSourceArgs{...} }
type CloudfrontSourceMapInput interface {
	pulumi.Input

	ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput
	ToCloudfrontSourceMapOutputWithContext(context.Context) CloudfrontSourceMapOutput
}

type CloudfrontSourceMap map[string]CloudfrontSourceInput

func (CloudfrontSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudfrontSource)(nil)).Elem()
}

func (i CloudfrontSourceMap) ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput {
	return i.ToCloudfrontSourceMapOutputWithContext(context.Background())
}

func (i CloudfrontSourceMap) ToCloudfrontSourceMapOutputWithContext(ctx context.Context) CloudfrontSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudfrontSourceMapOutput)
}

type CloudfrontSourceOutput struct{ *pulumi.OutputState }

func (CloudfrontSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudfrontSource)(nil)).Elem()
}

func (o CloudfrontSourceOutput) ToCloudfrontSourceOutput() CloudfrontSourceOutput {
	return o
}

func (o CloudfrontSourceOutput) ToCloudfrontSourceOutputWithContext(ctx context.Context) CloudfrontSourceOutput {
	return o
}

// Authentication details for connecting to the S3 bucket.
func (o CloudfrontSourceOutput) Authentication() CloudfrontSourceAuthenticationOutput {
	return o.ApplyT(func(v *CloudfrontSource) CloudfrontSourceAuthenticationOutput { return v.Authentication }).(CloudfrontSourceAuthenticationOutput)
}

func (o CloudfrontSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o CloudfrontSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o CloudfrontSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o CloudfrontSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o CloudfrontSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o CloudfrontSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o CloudfrontSourceOutput) DefaultDateFormats() CloudfrontSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *CloudfrontSource) CloudfrontSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(CloudfrontSourceDefaultDateFormatArrayOutput)
}

func (o CloudfrontSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o CloudfrontSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o CloudfrontSourceOutput) Filters() CloudfrontSourceFilterArrayOutput {
	return o.ApplyT(func(v *CloudfrontSource) CloudfrontSourceFilterArrayOutput { return v.Filters }).(CloudfrontSourceFilterArrayOutput)
}

func (o CloudfrontSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o CloudfrontSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o CloudfrontSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o CloudfrontSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o CloudfrontSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location to scan for new data.
func (o CloudfrontSourceOutput) Path() CloudfrontSourcePathOutput {
	return o.ApplyT(func(v *CloudfrontSource) CloudfrontSourcePathOutput { return v.Path }).(CloudfrontSourcePathOutput)
}

// When set to true, the scanner is paused. To disable, set to false.
func (o CloudfrontSourceOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o CloudfrontSourceOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o CloudfrontSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint to use with [SNS to notify Sumo Logic of new files](<https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/AWS-S3-Source#Set_up_SNS_in_AWS_(Optional)>).
func (o CloudfrontSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o CloudfrontSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudfrontSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type CloudfrontSourceArrayOutput struct{ *pulumi.OutputState }

func (CloudfrontSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudfrontSource)(nil)).Elem()
}

func (o CloudfrontSourceArrayOutput) ToCloudfrontSourceArrayOutput() CloudfrontSourceArrayOutput {
	return o
}

func (o CloudfrontSourceArrayOutput) ToCloudfrontSourceArrayOutputWithContext(ctx context.Context) CloudfrontSourceArrayOutput {
	return o
}

func (o CloudfrontSourceArrayOutput) Index(i pulumi.IntInput) CloudfrontSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudfrontSource {
		return vs[0].([]*CloudfrontSource)[vs[1].(int)]
	}).(CloudfrontSourceOutput)
}

type CloudfrontSourceMapOutput struct{ *pulumi.OutputState }

func (CloudfrontSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudfrontSource)(nil)).Elem()
}

func (o CloudfrontSourceMapOutput) ToCloudfrontSourceMapOutput() CloudfrontSourceMapOutput {
	return o
}

func (o CloudfrontSourceMapOutput) ToCloudfrontSourceMapOutputWithContext(ctx context.Context) CloudfrontSourceMapOutput {
	return o
}

func (o CloudfrontSourceMapOutput) MapIndex(k pulumi.StringInput) CloudfrontSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudfrontSource {
		return vs[0].(map[string]*CloudfrontSource)[vs[1].(string)]
	}).(CloudfrontSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudfrontSourceInput)(nil)).Elem(), &CloudfrontSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudfrontSourceArrayInput)(nil)).Elem(), CloudfrontSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudfrontSourceMapInput)(nil)).Elem(), CloudfrontSourceMap{})
	pulumi.RegisterOutputType(CloudfrontSourceOutput{})
	pulumi.RegisterOutputType(CloudfrontSourceArrayOutput{})
	pulumi.RegisterOutputType(CloudfrontSourceMapOutput{})
}
