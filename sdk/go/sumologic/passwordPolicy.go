// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets the [Sumologic Password Policy](https://help.sumologic.com/Manage/Security/Set-the-Password-Policy). Since there is only a single password policy for an organization,
// please ensure that only a single instance of such resource is defined.
// The behavior for defining more than one password policy resources is undefined.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewPasswordPolicy(ctx, "examplePasswordPolicy", &sumologic.PasswordPolicyArgs{
// 			AccountLockoutDurationInMins:   pulumi.Int(30),
// 			AccountLockoutThreshold:        pulumi.Int(6),
// 			FailedLoginResetDurationInMins: pulumi.Int(10),
// 			MaxLength:                      pulumi.Int(128),
// 			MaxPasswordAgeInDays:           pulumi.Int(365),
// 			MinLength:                      pulumi.Int(8),
// 			MinUniquePasswords:             pulumi.Int(10),
// 			MustContainDigits:              pulumi.Bool(true),
// 			MustContainLowercase:           pulumi.Bool(true),
// 			MustContainSpecialChars:        pulumi.Bool(true),
// 			MustContainUppercase:           pulumi.Bool(true),
// 			RememberMfa:                    pulumi.Bool(true),
// 			RequireMfa:                     pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PasswordPolicy struct {
	pulumi.CustomResourceState

	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
	AccountLockoutDurationInMins pulumi.IntPtrOutput `pulumi:"accountLockoutDurationInMins"`
	// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
	AccountLockoutThreshold pulumi.IntPtrOutput `pulumi:"accountLockoutThreshold"`
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
	FailedLoginResetDurationInMins pulumi.IntPtrOutput `pulumi:"failedLoginResetDurationInMins"`
	// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
	MaxLength pulumi.IntPtrOutput `pulumi:"maxLength"`
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
	MaxPasswordAgeInDays pulumi.IntPtrOutput `pulumi:"maxPasswordAgeInDays"`
	// The minimum length of the password. Defaults to 8.
	MinLength pulumi.IntPtrOutput `pulumi:"minLength"`
	// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
	MinUniquePasswords pulumi.IntPtrOutput `pulumi:"minUniquePasswords"`
	// If the password must contain digits. Defaults to true.
	MustContainDigits pulumi.BoolPtrOutput `pulumi:"mustContainDigits"`
	// If the password must contain lower case characters. Defaults to true.
	MustContainLowercase pulumi.BoolPtrOutput `pulumi:"mustContainLowercase"`
	// If the password must contain special characters. Defaults to true.
	MustContainSpecialChars pulumi.BoolPtrOutput `pulumi:"mustContainSpecialChars"`
	// If the password must contain upper case characters. Defaults to true.
	MustContainUppercase pulumi.BoolPtrOutput `pulumi:"mustContainUppercase"`
	// If MFA should be remembered on the browser. Defaults to true.
	RememberMfa pulumi.BoolPtrOutput `pulumi:"rememberMfa"`
	// If MFA should be required to log in. Defaults to false.
	RequireMfa pulumi.BoolPtrOutput `pulumi:"requireMfa"`
}

// NewPasswordPolicy registers a new resource with the given unique name, arguments, and options.
func NewPasswordPolicy(ctx *pulumi.Context,
	name string, args *PasswordPolicyArgs, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	if args == nil {
		args = &PasswordPolicyArgs{}
	}

	var resource PasswordPolicy
	err := ctx.RegisterResource("sumologic:index/passwordPolicy:PasswordPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPasswordPolicy gets an existing PasswordPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPasswordPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PasswordPolicyState, opts ...pulumi.ResourceOption) (*PasswordPolicy, error) {
	var resource PasswordPolicy
	err := ctx.ReadResource("sumologic:index/passwordPolicy:PasswordPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PasswordPolicy resources.
type passwordPolicyState struct {
	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
	AccountLockoutDurationInMins *int `pulumi:"accountLockoutDurationInMins"`
	// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
	AccountLockoutThreshold *int `pulumi:"accountLockoutThreshold"`
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
	FailedLoginResetDurationInMins *int `pulumi:"failedLoginResetDurationInMins"`
	// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
	MaxLength *int `pulumi:"maxLength"`
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
	MaxPasswordAgeInDays *int `pulumi:"maxPasswordAgeInDays"`
	// The minimum length of the password. Defaults to 8.
	MinLength *int `pulumi:"minLength"`
	// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
	MinUniquePasswords *int `pulumi:"minUniquePasswords"`
	// If the password must contain digits. Defaults to true.
	MustContainDigits *bool `pulumi:"mustContainDigits"`
	// If the password must contain lower case characters. Defaults to true.
	MustContainLowercase *bool `pulumi:"mustContainLowercase"`
	// If the password must contain special characters. Defaults to true.
	MustContainSpecialChars *bool `pulumi:"mustContainSpecialChars"`
	// If the password must contain upper case characters. Defaults to true.
	MustContainUppercase *bool `pulumi:"mustContainUppercase"`
	// If MFA should be remembered on the browser. Defaults to true.
	RememberMfa *bool `pulumi:"rememberMfa"`
	// If MFA should be required to log in. Defaults to false.
	RequireMfa *bool `pulumi:"requireMfa"`
}

type PasswordPolicyState struct {
	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
	AccountLockoutDurationInMins pulumi.IntPtrInput
	// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
	AccountLockoutThreshold pulumi.IntPtrInput
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
	FailedLoginResetDurationInMins pulumi.IntPtrInput
	// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
	MaxLength pulumi.IntPtrInput
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
	MaxPasswordAgeInDays pulumi.IntPtrInput
	// The minimum length of the password. Defaults to 8.
	MinLength pulumi.IntPtrInput
	// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
	MinUniquePasswords pulumi.IntPtrInput
	// If the password must contain digits. Defaults to true.
	MustContainDigits pulumi.BoolPtrInput
	// If the password must contain lower case characters. Defaults to true.
	MustContainLowercase pulumi.BoolPtrInput
	// If the password must contain special characters. Defaults to true.
	MustContainSpecialChars pulumi.BoolPtrInput
	// If the password must contain upper case characters. Defaults to true.
	MustContainUppercase pulumi.BoolPtrInput
	// If MFA should be remembered on the browser. Defaults to true.
	RememberMfa pulumi.BoolPtrInput
	// If MFA should be required to log in. Defaults to false.
	RequireMfa pulumi.BoolPtrInput
}

func (PasswordPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyState)(nil)).Elem()
}

type passwordPolicyArgs struct {
	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
	AccountLockoutDurationInMins *int `pulumi:"accountLockoutDurationInMins"`
	// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
	AccountLockoutThreshold *int `pulumi:"accountLockoutThreshold"`
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
	FailedLoginResetDurationInMins *int `pulumi:"failedLoginResetDurationInMins"`
	// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
	MaxLength *int `pulumi:"maxLength"`
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
	MaxPasswordAgeInDays *int `pulumi:"maxPasswordAgeInDays"`
	// The minimum length of the password. Defaults to 8.
	MinLength *int `pulumi:"minLength"`
	// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
	MinUniquePasswords *int `pulumi:"minUniquePasswords"`
	// If the password must contain digits. Defaults to true.
	MustContainDigits *bool `pulumi:"mustContainDigits"`
	// If the password must contain lower case characters. Defaults to true.
	MustContainLowercase *bool `pulumi:"mustContainLowercase"`
	// If the password must contain special characters. Defaults to true.
	MustContainSpecialChars *bool `pulumi:"mustContainSpecialChars"`
	// If the password must contain upper case characters. Defaults to true.
	MustContainUppercase *bool `pulumi:"mustContainUppercase"`
	// If MFA should be remembered on the browser. Defaults to true.
	RememberMfa *bool `pulumi:"rememberMfa"`
	// If MFA should be required to log in. Defaults to false.
	RequireMfa *bool `pulumi:"requireMfa"`
}

// The set of arguments for constructing a PasswordPolicy resource.
type PasswordPolicyArgs struct {
	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
	AccountLockoutDurationInMins pulumi.IntPtrInput
	// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
	AccountLockoutThreshold pulumi.IntPtrInput
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
	FailedLoginResetDurationInMins pulumi.IntPtrInput
	// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
	MaxLength pulumi.IntPtrInput
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
	MaxPasswordAgeInDays pulumi.IntPtrInput
	// The minimum length of the password. Defaults to 8.
	MinLength pulumi.IntPtrInput
	// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
	MinUniquePasswords pulumi.IntPtrInput
	// If the password must contain digits. Defaults to true.
	MustContainDigits pulumi.BoolPtrInput
	// If the password must contain lower case characters. Defaults to true.
	MustContainLowercase pulumi.BoolPtrInput
	// If the password must contain special characters. Defaults to true.
	MustContainSpecialChars pulumi.BoolPtrInput
	// If the password must contain upper case characters. Defaults to true.
	MustContainUppercase pulumi.BoolPtrInput
	// If MFA should be remembered on the browser. Defaults to true.
	RememberMfa pulumi.BoolPtrInput
	// If MFA should be required to log in. Defaults to false.
	RequireMfa pulumi.BoolPtrInput
}

func (PasswordPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*passwordPolicyArgs)(nil)).Elem()
}

type PasswordPolicyInput interface {
	pulumi.Input

	ToPasswordPolicyOutput() PasswordPolicyOutput
	ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput
}

func (*PasswordPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (i *PasswordPolicy) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return i.ToPasswordPolicyOutputWithContext(context.Background())
}

func (i *PasswordPolicy) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyOutput)
}

// PasswordPolicyArrayInput is an input type that accepts PasswordPolicyArray and PasswordPolicyArrayOutput values.
// You can construct a concrete instance of `PasswordPolicyArrayInput` via:
//
//          PasswordPolicyArray{ PasswordPolicyArgs{...} }
type PasswordPolicyArrayInput interface {
	pulumi.Input

	ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput
	ToPasswordPolicyArrayOutputWithContext(context.Context) PasswordPolicyArrayOutput
}

type PasswordPolicyArray []PasswordPolicyInput

func (PasswordPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return i.ToPasswordPolicyArrayOutputWithContext(context.Background())
}

func (i PasswordPolicyArray) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyArrayOutput)
}

// PasswordPolicyMapInput is an input type that accepts PasswordPolicyMap and PasswordPolicyMapOutput values.
// You can construct a concrete instance of `PasswordPolicyMapInput` via:
//
//          PasswordPolicyMap{ "key": PasswordPolicyArgs{...} }
type PasswordPolicyMapInput interface {
	pulumi.Input

	ToPasswordPolicyMapOutput() PasswordPolicyMapOutput
	ToPasswordPolicyMapOutputWithContext(context.Context) PasswordPolicyMapOutput
}

type PasswordPolicyMap map[string]PasswordPolicyInput

func (PasswordPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return i.ToPasswordPolicyMapOutputWithContext(context.Background())
}

func (i PasswordPolicyMap) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordPolicyMapOutput)
}

type PasswordPolicyOutput struct{ *pulumi.OutputState }

func (PasswordPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutput() PasswordPolicyOutput {
	return o
}

func (o PasswordPolicyOutput) ToPasswordPolicyOutputWithContext(ctx context.Context) PasswordPolicyOutput {
	return o
}

// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically. Defaults to 30.
func (o PasswordPolicyOutput) AccountLockoutDurationInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.AccountLockoutDurationInMins }).(pulumi.IntPtrOutput)
}

// Number of failed login attempts allowed before account is locked-out. Defaults to 6.
func (o PasswordPolicyOutput) AccountLockoutThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.AccountLockoutThreshold }).(pulumi.IntPtrOutput)
}

// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0. Defaults to 10.
func (o PasswordPolicyOutput) FailedLoginResetDurationInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.FailedLoginResetDurationInMins }).(pulumi.IntPtrOutput)
}

// The maximum length of the password. Defaults to 128. (128 is now the only accepted value; other values are no longer supported, and this field may be deprecated in the future.)
func (o PasswordPolicyOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password. Defaults to 365.
func (o PasswordPolicyOutput) MaxPasswordAgeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MaxPasswordAgeInDays }).(pulumi.IntPtrOutput)
}

// The minimum length of the password. Defaults to 8.
func (o PasswordPolicyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MinLength }).(pulumi.IntPtrOutput)
}

// The minimum number of unique new passwords that a user must use before an old password can be reused. Defaults to 10.
func (o PasswordPolicyOutput) MinUniquePasswords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.IntPtrOutput { return v.MinUniquePasswords }).(pulumi.IntPtrOutput)
}

// If the password must contain digits. Defaults to true.
func (o PasswordPolicyOutput) MustContainDigits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.MustContainDigits }).(pulumi.BoolPtrOutput)
}

// If the password must contain lower case characters. Defaults to true.
func (o PasswordPolicyOutput) MustContainLowercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.MustContainLowercase }).(pulumi.BoolPtrOutput)
}

// If the password must contain special characters. Defaults to true.
func (o PasswordPolicyOutput) MustContainSpecialChars() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.MustContainSpecialChars }).(pulumi.BoolPtrOutput)
}

// If the password must contain upper case characters. Defaults to true.
func (o PasswordPolicyOutput) MustContainUppercase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.MustContainUppercase }).(pulumi.BoolPtrOutput)
}

// If MFA should be remembered on the browser. Defaults to true.
func (o PasswordPolicyOutput) RememberMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RememberMfa }).(pulumi.BoolPtrOutput)
}

// If MFA should be required to log in. Defaults to false.
func (o PasswordPolicyOutput) RequireMfa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordPolicy) pulumi.BoolPtrOutput { return v.RequireMfa }).(pulumi.BoolPtrOutput)
}

type PasswordPolicyArrayOutput struct{ *pulumi.OutputState }

func (PasswordPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutput() PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) ToPasswordPolicyArrayOutputWithContext(ctx context.Context) PasswordPolicyArrayOutput {
	return o
}

func (o PasswordPolicyArrayOutput) Index(i pulumi.IntInput) PasswordPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].([]*PasswordPolicy)[vs[1].(int)]
	}).(PasswordPolicyOutput)
}

type PasswordPolicyMapOutput struct{ *pulumi.OutputState }

func (PasswordPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PasswordPolicy)(nil)).Elem()
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutput() PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) ToPasswordPolicyMapOutputWithContext(ctx context.Context) PasswordPolicyMapOutput {
	return o
}

func (o PasswordPolicyMapOutput) MapIndex(k pulumi.StringInput) PasswordPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PasswordPolicy {
		return vs[0].(map[string]*PasswordPolicy)[vs[1].(string)]
	}).(PasswordPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyInput)(nil)).Elem(), &PasswordPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyArrayInput)(nil)).Elem(), PasswordPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordPolicyMapInput)(nil)).Elem(), PasswordPolicyMap{})
	pulumi.RegisterOutputType(PasswordPolicyOutput{})
	pulumi.RegisterOutputType(PasswordPolicyArrayOutput{})
	pulumi.RegisterOutputType(PasswordPolicyMapOutput{})
}
