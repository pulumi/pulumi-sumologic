// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic Rum Source.
//
// ## Import
//
// Rum sources can be imported using the collector and source IDs, e.g.:
//
//	hcl
//
// ```sh
// $ pulumi import sumologic:index/rumSource:RumSource test 123/456
// ```
//
//	Rum sources can also be imported using the collector name and source name, e.g.:
//
//	hcl
//
// ```sh
// $ pulumi import sumologic:index/rumSource:RumSource test my-test-collector/my-test-source
// ```
type RumSource struct {
	pulumi.CustomResourceState

	AutomaticDateParsing       pulumi.BoolPtrOutput                  `pulumi:"automaticDateParsing"`
	Category                   pulumi.StringPtrOutput                `pulumi:"category"`
	CollectorId                pulumi.IntOutput                      `pulumi:"collectorId"`
	ContentType                pulumi.StringPtrOutput                `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                   `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         RumSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                `pulumi:"fields"`
	Filters                    RumSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                  `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                  `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                   `pulumi:"name"`
	Path                       RumSourcePathPtrOutput                `pulumi:"path"`
	Timezone                   pulumi.StringPtrOutput                `pulumi:"timezone"`
	UseAutolineMatching        pulumi.BoolPtrOutput                  `pulumi:"useAutolineMatching"`
}

// NewRumSource registers a new resource with the given unique name, arguments, and options.
func NewRumSource(ctx *pulumi.Context,
	name string, args *RumSourceArgs, opts ...pulumi.ResourceOption) (*RumSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RumSource
	err := ctx.RegisterResource("sumologic:index/rumSource:RumSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRumSource gets an existing RumSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRumSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RumSourceState, opts ...pulumi.ResourceOption) (*RumSource, error) {
	var resource RumSource
	err := ctx.ReadResource("sumologic:index/rumSource:RumSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RumSource resources.
type rumSourceState struct {
	AutomaticDateParsing       *bool                        `pulumi:"automaticDateParsing"`
	Category                   *string                      `pulumi:"category"`
	CollectorId                *int                         `pulumi:"collectorId"`
	ContentType                *string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []RumSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []RumSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	Path                       *RumSourcePath               `pulumi:"path"`
	Timezone                   *string                      `pulumi:"timezone"`
	UseAutolineMatching        *bool                        `pulumi:"useAutolineMatching"`
}

type RumSourceState struct {
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntPtrInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         RumSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    RumSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       RumSourcePathPtrInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (RumSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rumSourceState)(nil)).Elem()
}

type rumSourceArgs struct {
	AutomaticDateParsing       *bool                        `pulumi:"automaticDateParsing"`
	Category                   *string                      `pulumi:"category"`
	CollectorId                int                          `pulumi:"collectorId"`
	ContentType                *string                      `pulumi:"contentType"`
	CutoffRelativeTime         *string                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []RumSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                      `pulumi:"description"`
	Fields                     map[string]string            `pulumi:"fields"`
	Filters                    []RumSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                        `pulumi:"forceTimezone"`
	HostName                   *string                      `pulumi:"hostName"`
	ManualPrefixRegexp         *string                      `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                        `pulumi:"multilineProcessingEnabled"`
	Name                       *string                      `pulumi:"name"`
	Path                       *RumSourcePath               `pulumi:"path"`
	Timezone                   *string                      `pulumi:"timezone"`
	UseAutolineMatching        *bool                        `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a RumSource resource.
type RumSourceArgs struct {
	AutomaticDateParsing       pulumi.BoolPtrInput
	Category                   pulumi.StringPtrInput
	CollectorId                pulumi.IntInput
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         RumSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    RumSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	Path                       RumSourcePathPtrInput
	Timezone                   pulumi.StringPtrInput
	UseAutolineMatching        pulumi.BoolPtrInput
}

func (RumSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rumSourceArgs)(nil)).Elem()
}

type RumSourceInput interface {
	pulumi.Input

	ToRumSourceOutput() RumSourceOutput
	ToRumSourceOutputWithContext(ctx context.Context) RumSourceOutput
}

func (*RumSource) ElementType() reflect.Type {
	return reflect.TypeOf((**RumSource)(nil)).Elem()
}

func (i *RumSource) ToRumSourceOutput() RumSourceOutput {
	return i.ToRumSourceOutputWithContext(context.Background())
}

func (i *RumSource) ToRumSourceOutputWithContext(ctx context.Context) RumSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumSourceOutput)
}

// RumSourceArrayInput is an input type that accepts RumSourceArray and RumSourceArrayOutput values.
// You can construct a concrete instance of `RumSourceArrayInput` via:
//
//	RumSourceArray{ RumSourceArgs{...} }
type RumSourceArrayInput interface {
	pulumi.Input

	ToRumSourceArrayOutput() RumSourceArrayOutput
	ToRumSourceArrayOutputWithContext(context.Context) RumSourceArrayOutput
}

type RumSourceArray []RumSourceInput

func (RumSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumSource)(nil)).Elem()
}

func (i RumSourceArray) ToRumSourceArrayOutput() RumSourceArrayOutput {
	return i.ToRumSourceArrayOutputWithContext(context.Background())
}

func (i RumSourceArray) ToRumSourceArrayOutputWithContext(ctx context.Context) RumSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumSourceArrayOutput)
}

// RumSourceMapInput is an input type that accepts RumSourceMap and RumSourceMapOutput values.
// You can construct a concrete instance of `RumSourceMapInput` via:
//
//	RumSourceMap{ "key": RumSourceArgs{...} }
type RumSourceMapInput interface {
	pulumi.Input

	ToRumSourceMapOutput() RumSourceMapOutput
	ToRumSourceMapOutputWithContext(context.Context) RumSourceMapOutput
}

type RumSourceMap map[string]RumSourceInput

func (RumSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumSource)(nil)).Elem()
}

func (i RumSourceMap) ToRumSourceMapOutput() RumSourceMapOutput {
	return i.ToRumSourceMapOutputWithContext(context.Background())
}

func (i RumSourceMap) ToRumSourceMapOutputWithContext(ctx context.Context) RumSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RumSourceMapOutput)
}

type RumSourceOutput struct{ *pulumi.OutputState }

func (RumSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RumSource)(nil)).Elem()
}

func (o RumSourceOutput) ToRumSourceOutput() RumSourceOutput {
	return o
}

func (o RumSourceOutput) ToRumSourceOutputWithContext(ctx context.Context) RumSourceOutput {
	return o
}

func (o RumSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o RumSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *RumSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

func (o RumSourceOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o RumSourceOutput) DefaultDateFormats() RumSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *RumSource) RumSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(RumSourceDefaultDateFormatArrayOutput)
}

func (o RumSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o RumSourceOutput) Filters() RumSourceFilterArrayOutput {
	return o.ApplyT(func(v *RumSource) RumSourceFilterArrayOutput { return v.Filters }).(RumSourceFilterArrayOutput)
}

func (o RumSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o RumSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o RumSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RumSourceOutput) Path() RumSourcePathPtrOutput {
	return o.ApplyT(func(v *RumSource) RumSourcePathPtrOutput { return v.Path }).(RumSourcePathPtrOutput)
}

func (o RumSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o RumSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RumSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type RumSourceArrayOutput struct{ *pulumi.OutputState }

func (RumSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RumSource)(nil)).Elem()
}

func (o RumSourceArrayOutput) ToRumSourceArrayOutput() RumSourceArrayOutput {
	return o
}

func (o RumSourceArrayOutput) ToRumSourceArrayOutputWithContext(ctx context.Context) RumSourceArrayOutput {
	return o
}

func (o RumSourceArrayOutput) Index(i pulumi.IntInput) RumSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RumSource {
		return vs[0].([]*RumSource)[vs[1].(int)]
	}).(RumSourceOutput)
}

type RumSourceMapOutput struct{ *pulumi.OutputState }

func (RumSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RumSource)(nil)).Elem()
}

func (o RumSourceMapOutput) ToRumSourceMapOutput() RumSourceMapOutput {
	return o
}

func (o RumSourceMapOutput) ToRumSourceMapOutputWithContext(ctx context.Context) RumSourceMapOutput {
	return o
}

func (o RumSourceMapOutput) MapIndex(k pulumi.StringInput) RumSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RumSource {
		return vs[0].(map[string]*RumSource)[vs[1].(string)]
	}).(RumSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RumSourceInput)(nil)).Elem(), &RumSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumSourceArrayInput)(nil)).Elem(), RumSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RumSourceMapInput)(nil)).Elem(), RumSourceMap{})
	pulumi.RegisterOutputType(RumSourceOutput{})
	pulumi.RegisterOutputType(RumSourceArrayOutput{})
	pulumi.RegisterOutputType(RumSourceMapOutput{})
}
