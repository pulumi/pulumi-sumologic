// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Ingest Budget](https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets). To assign an Ingest Budget to the Collector use the field `_budget` with the Field Value of the Ingest Budget to assign.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			budget, err := sumologic.NewIngestBudget(ctx, "budget", &sumologic.IngestBudgetArgs{
//				Name:          pulumi.String("testBudget"),
//				FieldValue:    pulumi.String("test"),
//				CapacityBytes: pulumi.Int(30000000000),
//				Description:   pulumi.String("For testing purposes"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewCollector(ctx, "collector", &sumologic.CollectorArgs{
//				Name: pulumi.String("testCollector"),
//				Fields: pulumi.StringMap{
//					"_budget": budget.FieldValue,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Ingest budgets can be imported using the name, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/ingestBudget:IngestBudget budget budgetName
// ```
//
// [1]: https://help.sumologic.com/Manage/Ingestion-and-Volume/Ingest_Budgets
// [2]: https://en.wikipedia.org/wiki/Tz_database
type IngestBudget struct {
	pulumi.CustomResourceState

	Action        pulumi.StringPtrOutput `pulumi:"action"`
	CapacityBytes pulumi.IntOutput       `pulumi:"capacityBytes"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	FieldValue    pulumi.StringOutput    `pulumi:"fieldValue"`
	Name          pulumi.StringOutput    `pulumi:"name"`
	ResetTime     pulumi.StringPtrOutput `pulumi:"resetTime"`
	Timezone      pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewIngestBudget registers a new resource with the given unique name, arguments, and options.
func NewIngestBudget(ctx *pulumi.Context,
	name string, args *IngestBudgetArgs, opts ...pulumi.ResourceOption) (*IngestBudget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityBytes == nil {
		return nil, errors.New("invalid value for required argument 'CapacityBytes'")
	}
	if args.FieldValue == nil {
		return nil, errors.New("invalid value for required argument 'FieldValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IngestBudget
	err := ctx.RegisterResource("sumologic:index/ingestBudget:IngestBudget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestBudget gets an existing IngestBudget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestBudget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestBudgetState, opts ...pulumi.ResourceOption) (*IngestBudget, error) {
	var resource IngestBudget
	err := ctx.ReadResource("sumologic:index/ingestBudget:IngestBudget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngestBudget resources.
type ingestBudgetState struct {
	Action        *string `pulumi:"action"`
	CapacityBytes *int    `pulumi:"capacityBytes"`
	Description   *string `pulumi:"description"`
	FieldValue    *string `pulumi:"fieldValue"`
	Name          *string `pulumi:"name"`
	ResetTime     *string `pulumi:"resetTime"`
	Timezone      *string `pulumi:"timezone"`
}

type IngestBudgetState struct {
	Action        pulumi.StringPtrInput
	CapacityBytes pulumi.IntPtrInput
	Description   pulumi.StringPtrInput
	FieldValue    pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	ResetTime     pulumi.StringPtrInput
	Timezone      pulumi.StringPtrInput
}

func (IngestBudgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestBudgetState)(nil)).Elem()
}

type ingestBudgetArgs struct {
	Action        *string `pulumi:"action"`
	CapacityBytes int     `pulumi:"capacityBytes"`
	Description   *string `pulumi:"description"`
	FieldValue    string  `pulumi:"fieldValue"`
	Name          *string `pulumi:"name"`
	ResetTime     *string `pulumi:"resetTime"`
	Timezone      *string `pulumi:"timezone"`
}

// The set of arguments for constructing a IngestBudget resource.
type IngestBudgetArgs struct {
	Action        pulumi.StringPtrInput
	CapacityBytes pulumi.IntInput
	Description   pulumi.StringPtrInput
	FieldValue    pulumi.StringInput
	Name          pulumi.StringPtrInput
	ResetTime     pulumi.StringPtrInput
	Timezone      pulumi.StringPtrInput
}

func (IngestBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestBudgetArgs)(nil)).Elem()
}

type IngestBudgetInput interface {
	pulumi.Input

	ToIngestBudgetOutput() IngestBudgetOutput
	ToIngestBudgetOutputWithContext(ctx context.Context) IngestBudgetOutput
}

func (*IngestBudget) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestBudget)(nil)).Elem()
}

func (i *IngestBudget) ToIngestBudgetOutput() IngestBudgetOutput {
	return i.ToIngestBudgetOutputWithContext(context.Background())
}

func (i *IngestBudget) ToIngestBudgetOutputWithContext(ctx context.Context) IngestBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestBudgetOutput)
}

// IngestBudgetArrayInput is an input type that accepts IngestBudgetArray and IngestBudgetArrayOutput values.
// You can construct a concrete instance of `IngestBudgetArrayInput` via:
//
//	IngestBudgetArray{ IngestBudgetArgs{...} }
type IngestBudgetArrayInput interface {
	pulumi.Input

	ToIngestBudgetArrayOutput() IngestBudgetArrayOutput
	ToIngestBudgetArrayOutputWithContext(context.Context) IngestBudgetArrayOutput
}

type IngestBudgetArray []IngestBudgetInput

func (IngestBudgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestBudget)(nil)).Elem()
}

func (i IngestBudgetArray) ToIngestBudgetArrayOutput() IngestBudgetArrayOutput {
	return i.ToIngestBudgetArrayOutputWithContext(context.Background())
}

func (i IngestBudgetArray) ToIngestBudgetArrayOutputWithContext(ctx context.Context) IngestBudgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestBudgetArrayOutput)
}

// IngestBudgetMapInput is an input type that accepts IngestBudgetMap and IngestBudgetMapOutput values.
// You can construct a concrete instance of `IngestBudgetMapInput` via:
//
//	IngestBudgetMap{ "key": IngestBudgetArgs{...} }
type IngestBudgetMapInput interface {
	pulumi.Input

	ToIngestBudgetMapOutput() IngestBudgetMapOutput
	ToIngestBudgetMapOutputWithContext(context.Context) IngestBudgetMapOutput
}

type IngestBudgetMap map[string]IngestBudgetInput

func (IngestBudgetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestBudget)(nil)).Elem()
}

func (i IngestBudgetMap) ToIngestBudgetMapOutput() IngestBudgetMapOutput {
	return i.ToIngestBudgetMapOutputWithContext(context.Background())
}

func (i IngestBudgetMap) ToIngestBudgetMapOutputWithContext(ctx context.Context) IngestBudgetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestBudgetMapOutput)
}

type IngestBudgetOutput struct{ *pulumi.OutputState }

func (IngestBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestBudget)(nil)).Elem()
}

func (o IngestBudgetOutput) ToIngestBudgetOutput() IngestBudgetOutput {
	return o
}

func (o IngestBudgetOutput) ToIngestBudgetOutputWithContext(ctx context.Context) IngestBudgetOutput {
	return o
}

func (o IngestBudgetOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

func (o IngestBudgetOutput) CapacityBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.IntOutput { return v.CapacityBytes }).(pulumi.IntOutput)
}

func (o IngestBudgetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IngestBudgetOutput) FieldValue() pulumi.StringOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringOutput { return v.FieldValue }).(pulumi.StringOutput)
}

func (o IngestBudgetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IngestBudgetOutput) ResetTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringPtrOutput { return v.ResetTime }).(pulumi.StringPtrOutput)
}

func (o IngestBudgetOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngestBudget) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type IngestBudgetArrayOutput struct{ *pulumi.OutputState }

func (IngestBudgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestBudget)(nil)).Elem()
}

func (o IngestBudgetArrayOutput) ToIngestBudgetArrayOutput() IngestBudgetArrayOutput {
	return o
}

func (o IngestBudgetArrayOutput) ToIngestBudgetArrayOutputWithContext(ctx context.Context) IngestBudgetArrayOutput {
	return o
}

func (o IngestBudgetArrayOutput) Index(i pulumi.IntInput) IngestBudgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IngestBudget {
		return vs[0].([]*IngestBudget)[vs[1].(int)]
	}).(IngestBudgetOutput)
}

type IngestBudgetMapOutput struct{ *pulumi.OutputState }

func (IngestBudgetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestBudget)(nil)).Elem()
}

func (o IngestBudgetMapOutput) ToIngestBudgetMapOutput() IngestBudgetMapOutput {
	return o
}

func (o IngestBudgetMapOutput) ToIngestBudgetMapOutputWithContext(ctx context.Context) IngestBudgetMapOutput {
	return o
}

func (o IngestBudgetMapOutput) MapIndex(k pulumi.StringInput) IngestBudgetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IngestBudget {
		return vs[0].(map[string]*IngestBudget)[vs[1].(string)]
	}).(IngestBudgetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngestBudgetInput)(nil)).Elem(), &IngestBudget{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestBudgetArrayInput)(nil)).Elem(), IngestBudgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestBudgetMapInput)(nil)).Elem(), IngestBudgetMap{})
	pulumi.RegisterOutputType(IngestBudgetOutput{})
	pulumi.RegisterOutputType(IngestBudgetArrayOutput{})
	pulumi.RegisterOutputType(IngestBudgetMapOutput{})
}
