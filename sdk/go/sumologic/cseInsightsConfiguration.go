// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the Sumologic CSE Insights Configuration for the whole organization. There can be only one configuration per organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseInsightsConfiguration(ctx, "insightsConfiguration", &sumologic.CseInsightsConfigurationArgs{
// 			LookbackDays: pulumi.Float64(13),
// 			Threshold:    pulumi.Float64(12),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Insights Configuration can be imported using the id `cse-insights-configuration`hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration insights_configuration cse-insights-configuration
// ```
type CseInsightsConfiguration struct {
	pulumi.CustomResourceState

	// Detection window expressed in days.
	LookbackDays pulumi.Float64PtrOutput `pulumi:"lookbackDays"`
	// Detection threshold activity score.
	Threshold pulumi.Float64PtrOutput `pulumi:"threshold"`
}

// NewCseInsightsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewCseInsightsConfiguration(ctx *pulumi.Context,
	name string, args *CseInsightsConfigurationArgs, opts ...pulumi.ResourceOption) (*CseInsightsConfiguration, error) {
	if args == nil {
		args = &CseInsightsConfigurationArgs{}
	}

	var resource CseInsightsConfiguration
	err := ctx.RegisterResource("sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseInsightsConfiguration gets an existing CseInsightsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseInsightsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseInsightsConfigurationState, opts ...pulumi.ResourceOption) (*CseInsightsConfiguration, error) {
	var resource CseInsightsConfiguration
	err := ctx.ReadResource("sumologic:index/cseInsightsConfiguration:CseInsightsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseInsightsConfiguration resources.
type cseInsightsConfigurationState struct {
	// Detection window expressed in days.
	LookbackDays *float64 `pulumi:"lookbackDays"`
	// Detection threshold activity score.
	Threshold *float64 `pulumi:"threshold"`
}

type CseInsightsConfigurationState struct {
	// Detection window expressed in days.
	LookbackDays pulumi.Float64PtrInput
	// Detection threshold activity score.
	Threshold pulumi.Float64PtrInput
}

func (CseInsightsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsConfigurationState)(nil)).Elem()
}

type cseInsightsConfigurationArgs struct {
	// Detection window expressed in days.
	LookbackDays *float64 `pulumi:"lookbackDays"`
	// Detection threshold activity score.
	Threshold *float64 `pulumi:"threshold"`
}

// The set of arguments for constructing a CseInsightsConfiguration resource.
type CseInsightsConfigurationArgs struct {
	// Detection window expressed in days.
	LookbackDays pulumi.Float64PtrInput
	// Detection threshold activity score.
	Threshold pulumi.Float64PtrInput
}

func (CseInsightsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseInsightsConfigurationArgs)(nil)).Elem()
}

type CseInsightsConfigurationInput interface {
	pulumi.Input

	ToCseInsightsConfigurationOutput() CseInsightsConfigurationOutput
	ToCseInsightsConfigurationOutputWithContext(ctx context.Context) CseInsightsConfigurationOutput
}

func (*CseInsightsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsConfiguration)(nil)).Elem()
}

func (i *CseInsightsConfiguration) ToCseInsightsConfigurationOutput() CseInsightsConfigurationOutput {
	return i.ToCseInsightsConfigurationOutputWithContext(context.Background())
}

func (i *CseInsightsConfiguration) ToCseInsightsConfigurationOutputWithContext(ctx context.Context) CseInsightsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsConfigurationOutput)
}

// CseInsightsConfigurationArrayInput is an input type that accepts CseInsightsConfigurationArray and CseInsightsConfigurationArrayOutput values.
// You can construct a concrete instance of `CseInsightsConfigurationArrayInput` via:
//
//          CseInsightsConfigurationArray{ CseInsightsConfigurationArgs{...} }
type CseInsightsConfigurationArrayInput interface {
	pulumi.Input

	ToCseInsightsConfigurationArrayOutput() CseInsightsConfigurationArrayOutput
	ToCseInsightsConfigurationArrayOutputWithContext(context.Context) CseInsightsConfigurationArrayOutput
}

type CseInsightsConfigurationArray []CseInsightsConfigurationInput

func (CseInsightsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseInsightsConfiguration)(nil)).Elem()
}

func (i CseInsightsConfigurationArray) ToCseInsightsConfigurationArrayOutput() CseInsightsConfigurationArrayOutput {
	return i.ToCseInsightsConfigurationArrayOutputWithContext(context.Background())
}

func (i CseInsightsConfigurationArray) ToCseInsightsConfigurationArrayOutputWithContext(ctx context.Context) CseInsightsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsConfigurationArrayOutput)
}

// CseInsightsConfigurationMapInput is an input type that accepts CseInsightsConfigurationMap and CseInsightsConfigurationMapOutput values.
// You can construct a concrete instance of `CseInsightsConfigurationMapInput` via:
//
//          CseInsightsConfigurationMap{ "key": CseInsightsConfigurationArgs{...} }
type CseInsightsConfigurationMapInput interface {
	pulumi.Input

	ToCseInsightsConfigurationMapOutput() CseInsightsConfigurationMapOutput
	ToCseInsightsConfigurationMapOutputWithContext(context.Context) CseInsightsConfigurationMapOutput
}

type CseInsightsConfigurationMap map[string]CseInsightsConfigurationInput

func (CseInsightsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseInsightsConfiguration)(nil)).Elem()
}

func (i CseInsightsConfigurationMap) ToCseInsightsConfigurationMapOutput() CseInsightsConfigurationMapOutput {
	return i.ToCseInsightsConfigurationMapOutputWithContext(context.Background())
}

func (i CseInsightsConfigurationMap) ToCseInsightsConfigurationMapOutputWithContext(ctx context.Context) CseInsightsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseInsightsConfigurationMapOutput)
}

type CseInsightsConfigurationOutput struct{ *pulumi.OutputState }

func (CseInsightsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseInsightsConfiguration)(nil)).Elem()
}

func (o CseInsightsConfigurationOutput) ToCseInsightsConfigurationOutput() CseInsightsConfigurationOutput {
	return o
}

func (o CseInsightsConfigurationOutput) ToCseInsightsConfigurationOutputWithContext(ctx context.Context) CseInsightsConfigurationOutput {
	return o
}

// Detection window expressed in days.
func (o CseInsightsConfigurationOutput) LookbackDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CseInsightsConfiguration) pulumi.Float64PtrOutput { return v.LookbackDays }).(pulumi.Float64PtrOutput)
}

// Detection threshold activity score.
func (o CseInsightsConfigurationOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CseInsightsConfiguration) pulumi.Float64PtrOutput { return v.Threshold }).(pulumi.Float64PtrOutput)
}

type CseInsightsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (CseInsightsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseInsightsConfiguration)(nil)).Elem()
}

func (o CseInsightsConfigurationArrayOutput) ToCseInsightsConfigurationArrayOutput() CseInsightsConfigurationArrayOutput {
	return o
}

func (o CseInsightsConfigurationArrayOutput) ToCseInsightsConfigurationArrayOutputWithContext(ctx context.Context) CseInsightsConfigurationArrayOutput {
	return o
}

func (o CseInsightsConfigurationArrayOutput) Index(i pulumi.IntInput) CseInsightsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseInsightsConfiguration {
		return vs[0].([]*CseInsightsConfiguration)[vs[1].(int)]
	}).(CseInsightsConfigurationOutput)
}

type CseInsightsConfigurationMapOutput struct{ *pulumi.OutputState }

func (CseInsightsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseInsightsConfiguration)(nil)).Elem()
}

func (o CseInsightsConfigurationMapOutput) ToCseInsightsConfigurationMapOutput() CseInsightsConfigurationMapOutput {
	return o
}

func (o CseInsightsConfigurationMapOutput) ToCseInsightsConfigurationMapOutputWithContext(ctx context.Context) CseInsightsConfigurationMapOutput {
	return o
}

func (o CseInsightsConfigurationMapOutput) MapIndex(k pulumi.StringInput) CseInsightsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseInsightsConfiguration {
		return vs[0].(map[string]*CseInsightsConfiguration)[vs[1].(string)]
	}).(CseInsightsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsConfigurationInput)(nil)).Elem(), &CseInsightsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsConfigurationArrayInput)(nil)).Elem(), CseInsightsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseInsightsConfigurationMapInput)(nil)).Elem(), CseInsightsConfigurationMap{})
	pulumi.RegisterOutputType(CseInsightsConfigurationOutput{})
	pulumi.RegisterOutputType(CseInsightsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(CseInsightsConfigurationMapOutput{})
}
