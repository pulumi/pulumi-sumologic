// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provider to manage Sumologic Role v2
type RoleV2 struct {
	pulumi.CustomResourceState

	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
	AuditDataFilter pulumi.StringPtrOutput `pulumi:"auditDataFilter"`
	// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
	Capabilities pulumi.StringArrayOutput `pulumi:"capabilities"`
	// Description of the role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter pulumi.StringPtrOutput `pulumi:"logAnalyticsFilter"`
	// Name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter pulumi.StringPtrOutput `pulumi:"securityDataFilter"`
	// List of views with specific view level filters in accordance to the selectionType chosen.
	SelectedViews RoleV2SelectedViewArrayOutput `pulumi:"selectedViews"`
	// Describes the Permission Construct for the list of views in "selectedViews" parameter.
	SelectionType pulumi.StringPtrOutput `pulumi:"selectionType"`
}

// NewRoleV2 registers a new resource with the given unique name, arguments, and options.
func NewRoleV2(ctx *pulumi.Context,
	name string, args *RoleV2Args, opts ...pulumi.ResourceOption) (*RoleV2, error) {
	if args == nil {
		args = &RoleV2Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleV2
	err := ctx.RegisterResource("sumologic:index/roleV2:RoleV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleV2 gets an existing RoleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleV2State, opts ...pulumi.ResourceOption) (*RoleV2, error) {
	var resource RoleV2
	err := ctx.ReadResource("sumologic:index/roleV2:RoleV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleV2 resources.
type roleV2State struct {
	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
	AuditDataFilter *string `pulumi:"auditDataFilter"`
	// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
	Capabilities []string `pulumi:"capabilities"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter *string `pulumi:"logAnalyticsFilter"`
	// Name of the role.
	Name *string `pulumi:"name"`
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter *string `pulumi:"securityDataFilter"`
	// List of views with specific view level filters in accordance to the selectionType chosen.
	SelectedViews []RoleV2SelectedView `pulumi:"selectedViews"`
	// Describes the Permission Construct for the list of views in "selectedViews" parameter.
	SelectionType *string `pulumi:"selectionType"`
}

type RoleV2State struct {
	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
	AuditDataFilter pulumi.StringPtrInput
	// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
	Capabilities pulumi.StringArrayInput
	// Description of the role.
	Description pulumi.StringPtrInput
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter pulumi.StringPtrInput
	// Name of the role.
	Name pulumi.StringPtrInput
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter pulumi.StringPtrInput
	// List of views with specific view level filters in accordance to the selectionType chosen.
	SelectedViews RoleV2SelectedViewArrayInput
	// Describes the Permission Construct for the list of views in "selectedViews" parameter.
	SelectionType pulumi.StringPtrInput
}

func (RoleV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*roleV2State)(nil)).Elem()
}

type roleV2Args struct {
	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
	AuditDataFilter *string `pulumi:"auditDataFilter"`
	// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
	Capabilities []string `pulumi:"capabilities"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter *string `pulumi:"logAnalyticsFilter"`
	// Name of the role.
	Name *string `pulumi:"name"`
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter *string `pulumi:"securityDataFilter"`
	// List of views with specific view level filters in accordance to the selectionType chosen.
	SelectedViews []RoleV2SelectedView `pulumi:"selectedViews"`
	// Describes the Permission Construct for the list of views in "selectedViews" parameter.
	SelectionType *string `pulumi:"selectionType"`
}

// The set of arguments for constructing a RoleV2 resource.
type RoleV2Args struct {
	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
	AuditDataFilter pulumi.StringPtrInput
	// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
	Capabilities pulumi.StringArrayInput
	// Description of the role.
	Description pulumi.StringPtrInput
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter pulumi.StringPtrInput
	// Name of the role.
	Name pulumi.StringPtrInput
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter pulumi.StringPtrInput
	// List of views with specific view level filters in accordance to the selectionType chosen.
	SelectedViews RoleV2SelectedViewArrayInput
	// Describes the Permission Construct for the list of views in "selectedViews" parameter.
	SelectionType pulumi.StringPtrInput
}

func (RoleV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*roleV2Args)(nil)).Elem()
}

type RoleV2Input interface {
	pulumi.Input

	ToRoleV2Output() RoleV2Output
	ToRoleV2OutputWithContext(ctx context.Context) RoleV2Output
}

func (*RoleV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleV2)(nil)).Elem()
}

func (i *RoleV2) ToRoleV2Output() RoleV2Output {
	return i.ToRoleV2OutputWithContext(context.Background())
}

func (i *RoleV2) ToRoleV2OutputWithContext(ctx context.Context) RoleV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RoleV2Output)
}

// RoleV2ArrayInput is an input type that accepts RoleV2Array and RoleV2ArrayOutput values.
// You can construct a concrete instance of `RoleV2ArrayInput` via:
//
//	RoleV2Array{ RoleV2Args{...} }
type RoleV2ArrayInput interface {
	pulumi.Input

	ToRoleV2ArrayOutput() RoleV2ArrayOutput
	ToRoleV2ArrayOutputWithContext(context.Context) RoleV2ArrayOutput
}

type RoleV2Array []RoleV2Input

func (RoleV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleV2)(nil)).Elem()
}

func (i RoleV2Array) ToRoleV2ArrayOutput() RoleV2ArrayOutput {
	return i.ToRoleV2ArrayOutputWithContext(context.Background())
}

func (i RoleV2Array) ToRoleV2ArrayOutputWithContext(ctx context.Context) RoleV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleV2ArrayOutput)
}

// RoleV2MapInput is an input type that accepts RoleV2Map and RoleV2MapOutput values.
// You can construct a concrete instance of `RoleV2MapInput` via:
//
//	RoleV2Map{ "key": RoleV2Args{...} }
type RoleV2MapInput interface {
	pulumi.Input

	ToRoleV2MapOutput() RoleV2MapOutput
	ToRoleV2MapOutputWithContext(context.Context) RoleV2MapOutput
}

type RoleV2Map map[string]RoleV2Input

func (RoleV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleV2)(nil)).Elem()
}

func (i RoleV2Map) ToRoleV2MapOutput() RoleV2MapOutput {
	return i.ToRoleV2MapOutputWithContext(context.Background())
}

func (i RoleV2Map) ToRoleV2MapOutputWithContext(ctx context.Context) RoleV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleV2MapOutput)
}

type RoleV2Output struct{ *pulumi.OutputState }

func (RoleV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleV2)(nil)).Elem()
}

func (o RoleV2Output) ToRoleV2Output() RoleV2Output {
	return o
}

func (o RoleV2Output) ToRoleV2OutputWithContext(ctx context.Context) RoleV2Output {
	return o
}

// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (<https://help.sumologic.com/docs/manage/security/audit-index/)>.
func (o RoleV2Output) AuditDataFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringPtrOutput { return v.AuditDataFilter }).(pulumi.StringPtrOutput)
}

// List of [capabilities](https://help.sumologic.com/docs/manage/users-roles/roles/role-capabilities/) associated with this role.
func (o RoleV2Output) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringArrayOutput { return v.Capabilities }).(pulumi.StringArrayOutput)
}

// Description of the role.
func (o RoleV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A search filter which would be applied on partitions which belong to Log Analytics product area.
func (o RoleV2Output) LogAnalyticsFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringPtrOutput { return v.LogAnalyticsFilter }).(pulumi.StringPtrOutput)
}

// Name of the role.
func (o RoleV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A search filter which would be applied on partitions which belong to Security Data product area.
func (o RoleV2Output) SecurityDataFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringPtrOutput { return v.SecurityDataFilter }).(pulumi.StringPtrOutput)
}

// List of views with specific view level filters in accordance to the selectionType chosen.
func (o RoleV2Output) SelectedViews() RoleV2SelectedViewArrayOutput {
	return o.ApplyT(func(v *RoleV2) RoleV2SelectedViewArrayOutput { return v.SelectedViews }).(RoleV2SelectedViewArrayOutput)
}

// Describes the Permission Construct for the list of views in "selectedViews" parameter.
func (o RoleV2Output) SelectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleV2) pulumi.StringPtrOutput { return v.SelectionType }).(pulumi.StringPtrOutput)
}

type RoleV2ArrayOutput struct{ *pulumi.OutputState }

func (RoleV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleV2)(nil)).Elem()
}

func (o RoleV2ArrayOutput) ToRoleV2ArrayOutput() RoleV2ArrayOutput {
	return o
}

func (o RoleV2ArrayOutput) ToRoleV2ArrayOutputWithContext(ctx context.Context) RoleV2ArrayOutput {
	return o
}

func (o RoleV2ArrayOutput) Index(i pulumi.IntInput) RoleV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleV2 {
		return vs[0].([]*RoleV2)[vs[1].(int)]
	}).(RoleV2Output)
}

type RoleV2MapOutput struct{ *pulumi.OutputState }

func (RoleV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleV2)(nil)).Elem()
}

func (o RoleV2MapOutput) ToRoleV2MapOutput() RoleV2MapOutput {
	return o
}

func (o RoleV2MapOutput) ToRoleV2MapOutputWithContext(ctx context.Context) RoleV2MapOutput {
	return o
}

func (o RoleV2MapOutput) MapIndex(k pulumi.StringInput) RoleV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleV2 {
		return vs[0].(map[string]*RoleV2)[vs[1].(string)]
	}).(RoleV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleV2Input)(nil)).Elem(), &RoleV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleV2ArrayInput)(nil)).Elem(), RoleV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleV2MapInput)(nil)).Elem(), RoleV2Map{})
	pulumi.RegisterOutputType(RoleV2Output{})
	pulumi.RegisterOutputType(RoleV2ArrayOutput{})
	pulumi.RegisterOutputType(RoleV2MapOutput{})
}
