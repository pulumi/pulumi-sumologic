// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Dashboard (New)][1].
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		personalFolder, err := sumologic.GetPersonalFolder(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"text": map[string]interface{}{
// 				"verticalAlignment":   "top",
// 				"horizontalAlignment": "left",
// 				"fontSize":            12,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"general": map[string]interface{}{
// 				"mode":          "timeSeries",
// 				"type":          "area",
// 				"displayType":   "stacked",
// 				"markerSize":    5,
// 				"lineDashType":  "solid",
// 				"markerType":    "square",
// 				"lineThickness": 1,
// 			},
// 			"title": map[string]interface{}{
// 				"fontSize": 14,
// 			},
// 			"legend": map[string]interface{}{
// 				"enabled":       true,
// 				"verticalAlign": "bottom",
// 				"fontSize":      12,
// 				"maxHeight":     50,
// 				"showAsTable":   false,
// 				"wrap":          true,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		tmpJSON2, err := json.Marshal(map[string]interface{}{
// 			"general": map[string]interface{}{
// 				"mode":            "distribution",
// 				"type":            "pie",
// 				"displayType":     "default",
// 				"fillOpacity":     1,
// 				"startAngle":      270,
// 				"innerRadius":     fmt.Sprintf("40%v", "%"),
// 				"maxNumOfSlices":  10,
// 				"aggregationType": "sum",
// 			},
// 			"title": map[string]interface{}{
// 				"fontSize": 14,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json2 := string(tmpJSON2)
// 		tmpJSON3, err := json.Marshal(map[string]interface{}{
// 			"general": map[string]interface{}{
// 				"mode":          "timeSeries",
// 				"type":          "line",
// 				"displayType":   "smooth",
// 				"markerSize":    5,
// 				"lineDashType":  "dashDot",
// 				"markerType":    "none",
// 				"lineThickness": 1,
// 			},
// 			"title": map[string]interface{}{
// 				"fontSize": 14,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json3 := string(tmpJSON3)
// 		_, err = sumologic.NewDashboard(ctx, "api-dashboard", &sumologic.DashboardArgs{
// 			Title:           pulumi.String("Api Health Dashboard"),
// 			Description:     pulumi.String("Demo dashboard description"),
// 			FolderId:        pulumi.String(personalFolder.Id),
// 			RefreshInterval: pulumi.Int(120),
// 			Theme:           pulumi.String("Dark"),
// 			TimeRange: &DashboardTimeRangeArgs{
// 				BeginBoundedTimeRange: &DashboardTimeRangeBeginBoundedTimeRangeArgs{
// 					From: &DashboardTimeRangeBeginBoundedTimeRangeFromArgs{
// 						LiteralTimeRange: &DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs{
// 							RangeName: pulumi.String("today"),
// 						},
// 					},
// 				},
// 			},
// 			TopologyLabelMap: &DashboardTopologyLabelMapArgs{
// 				Datas: DashboardTopologyLabelMapDataArray{
// 					&DashboardTopologyLabelMapDataArgs{
// 						Label: pulumi.String("cluster"),
// 						Values: pulumi.StringArray{
// 							pulumi.String("api-prod"),
// 						},
// 					},
// 					&DashboardTopologyLabelMapDataArgs{
// 						Label: pulumi.String("namespace"),
// 						Values: pulumi.StringArray{
// 							pulumi.String("default"),
// 						},
// 					},
// 				},
// 			},
// 			Domain: pulumi.String("app"),
// 			Panels: DashboardPanelArray{
// 				&DashboardPanelArgs{
// 					TextPanel: &DashboardPanelTextPanelArgs{
// 						Key:                                    pulumi.String("text-panel-01"),
// 						Title:                                  pulumi.String("Api Health"),
// 						VisualSettings:                         pulumi.String(json0),
// 						KeepVisualSettingsConsistentWithParent: pulumi.Bool(true),
// 						Text: pulumi.String(fmt.Sprintf(`## Api Health Monitoring
//
// Use this dashboard to monitor API service health. It contains following panels:
//
// 1. API errors: Errors in last 12 hours
// 3. API 5xx: Count of 5xx response
// 3. CPU utilization: CPU utilization in last 60 mins
// `)),
// 					},
// 				},
// 				&DashboardPanelArgs{
// 					SumoSearchPanel: &DashboardPanelSumoSearchPanelArgs{
// 						Key:                                    pulumi.String("search-panel-01"),
// 						Title:                                  pulumi.String("Api Errors by Host"),
// 						Description:                            pulumi.String("Errors in api service since last 12 hours"),
// 						VisualSettings:                         pulumi.String(json1),
// 						KeepVisualSettingsConsistentWithParent: pulumi.Bool(true),
// 						Queries: DashboardPanelSumoSearchPanelQueryArray{
// 							&DashboardPanelSumoSearchPanelQueryArgs{
// 								QueryString: pulumi.String("_sourceCategory=api error | timeslice 1h | count by _timeslice, _sourceHost | transpose row _timeslice column _sourceHost"),
// 								QueryType:   pulumi.String("Logs"),
// 								QueryKey:    pulumi.String("A"),
// 							},
// 						},
// 						TimeRange: &DashboardPanelSumoSearchPanelTimeRangeArgs{
// 							BeginBoundedTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{
// 								From: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{
// 									RelativeTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs{
// 										RelativeTime: pulumi.String("-12h"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 				&DashboardPanelArgs{
// 					SumoSearchPanel: &DashboardPanelSumoSearchPanelArgs{
// 						Key:                                    pulumi.String("metrics-panel-01"),
// 						Title:                                  pulumi.String("Api 5xx Response Count"),
// 						Description:                            pulumi.String("Count of 5xx response from api service"),
// 						VisualSettings:                         pulumi.String(json2),
// 						KeepVisualSettingsConsistentWithParent: pulumi.Bool(true),
// 						Queries: DashboardPanelSumoSearchPanelQueryArray{
// 							&DashboardPanelSumoSearchPanelQueryArgs{
// 								QueryString:      pulumi.String("_sourceCategory=api metric=Api-5xx"),
// 								QueryType:        pulumi.String("Metrics"),
// 								QueryKey:         pulumi.String("A"),
// 								MetricsQueryMode: pulumi.String("Advanced"),
// 							},
// 						},
// 						TimeRange: &DashboardPanelSumoSearchPanelTimeRangeArgs{
// 							BeginBoundedTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{
// 								From: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{
// 									LiteralTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs{
// 										RangeName: pulumi.String("today"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 				&DashboardPanelArgs{
// 					SumoSearchPanel: &DashboardPanelSumoSearchPanelArgs{
// 						Key:                                    pulumi.String("metrics-panel-02"),
// 						Title:                                  pulumi.String("CPU Utilization"),
// 						Description:                            pulumi.String("CPU utilization in api service"),
// 						VisualSettings:                         pulumi.String(json3),
// 						KeepVisualSettingsConsistentWithParent: pulumi.Bool(true),
// 						Queries: DashboardPanelSumoSearchPanelQueryArray{
// 							&DashboardPanelSumoSearchPanelQueryArgs{
// 								QueryString:      pulumi.String("metric=Proc_CPU nite-api-1"),
// 								QueryType:        pulumi.String("Metrics"),
// 								QueryKey:         pulumi.String("A"),
// 								MetricsQueryMode: pulumi.String("Basic"),
// 								MetricsQueryData: &DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs{
// 									Metric: pulumi.String("Proc_CPU"),
// 									Filters: DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArray{
// 										&DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs{
// 											Key:      pulumi.String("_sourcehost"),
// 											Negation: pulumi.Bool(false),
// 											Value:    pulumi.String("nite-api-1"),
// 										},
// 									},
// 									AggregationType: pulumi.String("None"),
// 								},
// 							},
// 							&DashboardPanelSumoSearchPanelQueryArgs{
// 								QueryString:      pulumi.String("metric=Proc_CPU nite-api-2"),
// 								QueryType:        pulumi.String("Metrics"),
// 								QueryKey:         pulumi.String("B"),
// 								MetricsQueryMode: pulumi.String("Basic"),
// 								MetricsQueryData: &DashboardPanelSumoSearchPanelQueryMetricsQueryDataArgs{
// 									Metric: pulumi.String("Proc_CPU"),
// 									Filters: DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArray{
// 										&DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilterArgs{
// 											Key:      pulumi.String("_sourcehost"),
// 											Negation: pulumi.Bool(false),
// 											Value:    pulumi.String("nite-api-2"),
// 										},
// 									},
// 									AggregationType: pulumi.String("None"),
// 								},
// 							},
// 						},
// 						TimeRange: &DashboardPanelSumoSearchPanelTimeRangeArgs{
// 							BeginBoundedTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeArgs{
// 								From: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromArgs{
// 									RelativeTimeRange: &DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs{
// 										RelativeTime: pulumi.String("-1h"),
// 									},
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Layout: &DashboardLayoutArgs{
// 				Grid: &DashboardLayoutGridArgs{
// 					LayoutStructures: DashboardLayoutGridLayoutStructureArray{
// 						&DashboardLayoutGridLayoutStructureArgs{
// 							Key:       pulumi.String("text-panel-01"),
// 							Structure: pulumi.String("{\"height\":5,\"width\":24,\"x\":0,\"y\":0}"),
// 						},
// 						&DashboardLayoutGridLayoutStructureArgs{
// 							Key:       pulumi.String("search-panel-01"),
// 							Structure: pulumi.String("{\"height\":10,\"width\":12,\"x\":0,\"y\":5}"),
// 						},
// 						&DashboardLayoutGridLayoutStructureArgs{
// 							Key:       pulumi.String("metrics-panel-01"),
// 							Structure: pulumi.String("{\"height\":10,\"width\":12,\"x\":12,\"y\":5}"),
// 						},
// 						&DashboardLayoutGridLayoutStructureArgs{
// 							Key:       pulumi.String("metrics-panel-02"),
// 							Structure: pulumi.String("{\"height\":10,\"width\":24,\"x\":0,\"y\":25}"),
// 						},
// 					},
// 				},
// 			},
// 			Variables: DashboardVariableArray{
// 				&DashboardVariableArgs{
// 					Name:         pulumi.String("_sourceHost"),
// 					DisplayName:  pulumi.String("Source Host"),
// 					DefaultValue: pulumi.String("nite-api-1"),
// 					SourceDefinition: &DashboardVariableSourceDefinitionArgs{
// 						CsvVariableSourceDefinition: &DashboardVariableSourceDefinitionCsvVariableSourceDefinitionArgs{
// 							Values: pulumi.String("nite-api-1,nite-api-2"),
// 						},
// 					},
// 					AllowMultiSelect: pulumi.Bool(true),
// 					IncludeAllOption: pulumi.Bool(true),
// 					HideFromUi:       pulumi.Bool(false),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes reference
//
// In addition to all arguments above, the following attributes are exported:
//
// - `id` - The ID of the dashboard.
//
// ### Schema for `topologyLabelMap`
// - `data` - (Block List, Required) A list of blocks containing label and it's values.
//   - - `label` - (Required) The name of the topology label.
//   - - `values` - (Required) The values for the topology label.
//
// ### Schema for `timeRange`
// - `completeLiteralTimeRange` - (Block List, Max: 1, Optional) Literal time range. See
//   completeLiteralTimeRange schema for details.
// - `beginBoundedTimeRange` - (Block List, Max: 1, Optional) Bounded time range. See
//   beginBoundedTimeRange schema schema for details.
//   schema for details.
//
// ### Schema for `completeLiteralTimeRange`
// - `rangeName` - (Required) Name of complete literal time range. One of `today`, `yesterday`, `previousWeek`, `previousMonth`.
//
// ### Schema for `beginBoundedTimeRange`
// - `from` - (Block List, Max: 1, Required) Start boundary of bounded time range. See
//   timeRangeBoundary schema for details.
// - `to` - (Block List, Max: 1, Optional) End boundary of bounded time range. See
//   timeRangeBoundary schema for details.
//
// ### Schema for `timeRangeBoundary`
// - `epochTimeRange` - (Block List, Optional) Time since the epoch.
//     - `epochMillis` - (Required) Time as a number of milliseconds since the epoch.
//
// - `iso8601TimeRange` - (Block List, Optional) Time in ISO 8601 format.
//     - `iso8601Time` - (Required) Time as a string in ISO 8601 format.
//
// - `relativeTimeRange` - (Block List, Optional) Time in relative format.
//     - `relativeTime` - (Required) Relative time as a string consisting of following elements:
//       1. `-` (optional): minus sign indicates time in the past,
//       2. `<number>`: number of time units,
//       3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
//
//       Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
// `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
//
// - `literalTimeRange` - (Block List, Optional) Time in literal format.
//     - `rangeName` - (Required) One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
//
// ### Schema for `panel`
// - `textPanel` - (Block List, Max: 1, Optional) A text panel. See textPanel schema for details.
// - `sumoSearchPanel` - (Block List, Max: 1, Optional) A search panel. See sumoSearchPanel schema
//   for details.
//
// ### Schema for `textPanel`
// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
//   of the panel in the dashboard.
// - `title` - (Optional) Title of the panel.
// - `visualSettings` - (Optional) Visual settings of the panel.
// - `keepVisualSettingsConsistentWithParent` - (Optional) Keeps the visual settings, like series colors, consistent
//   with the settings of the parent panel.
// - `text` - (Required) Text to display in the panel.
//
// ### Schema for `sumoSearchPanel`
// - `key` - (Required) Key for the panel. Used to create searches for the queries in the panel and configure the layout
//   of the panel in the dashboard.
// - `title` - (Optional) Title of the panel.
// - `visualSettings` - (Optional) Visual settings of the panel.
// - `keepVisualSettingsConsistentWithParent` - (Optional) Keeps the visual settings, like series colors, consistent
//   with the settings of the parent panel.
// - `query` - (Block List, Required) A list of queries for the panel. Can be log or metric query. See
//   query schema for details.
// - `description` - (Optional) Description of the panel.
// - `timeRange` - (Block List, Max: 1, Optional) Time range of the panel. See timeRange schema
//   for details.
// - `linkedDashboard` - (Block List, Optional) A list of linked dashboards. See
//   linkedDashboard schema for details.
//
// ### Schema for `query`
// - `queryString` - (Required) The metrics or logs query.
// - `queryType` - (Required) The type of the query. One of `Metrics` or `Logs`.
// - `queryKey` - (Required) The key for metric or log query. Used as an identifier for queries.
// - `metricQueryMode` - (Optional) _Should only be specified for metric query_. The mode of the metric query.
//   One of `Basic` or `Advanced`.
// - `metricQueryData` - (Optional) _Should only be specified for metric query_. Data format for the metric query. See
//   metricQueryData schema for details.
//
// ### Schema for `metricQueryData`
// - `metric` - (Required) The metric of the query.
// - `aggregationType` - (Optional) The type of aggregation. One of `Count`, `Minimum`, `Maximum`, `Sum`, `Average`, `None`.
// - `groupBy` - The field to group the results by.
// - `filter` - (Block List, Required) A list of filters for the metrics query.
//     - `key` - (Required) The key of the metrics filter.
//     - `value` - (Required) The value of the metrics filter.
//     - `negation` - (Optional) Whether or not the metrics filter is negated.
// - `operator` - (Block List, Optional) A list of operator data for the metrics query.
//
// ### Schema for `operator`
// - `operatorName` - (Required) The name of the metrics operator.
// - `parameter` - (Block List, Required) A list of operator parameters for the operator data.
//     - `key` - (Required) The key of the operator parameter.
//     - `value` - (Required) The value of the operator parameter.
//
// ### Schema for `linkedDashboard`
// - `id` - (Required) Identifier of the linked dashboard.
// - `relativePath` - (Optional) Relative path of the linked dashboard to the dashboard of the linking panel.
// - `includeTimeRange` - (Optional) Include time range from the current dashboard to the linked dashboard. _Defaults to true_.
// - `includeVariables` - (Optional) Include variables from the current dashboard to the linked dashboard. _Defaults to true_.
//
// ### Schema for `layout`
// - `grid` - (Block List, Max: 1, Optional) Panel layout for the dashboard.
//
// ### Schema for `grid`
// - `layoutStructure` - (Block List, Required) Layout structure for the panels in the dashboard.
//     - `key` - (Required) The identifier of the panel that this structure applies to. It's same as `panel.key`.
//     - `structure` - (Required) The structure of the panel.
//
// ### Schema for `variable`
// - `name` - (Required) Name of the variable. The variable name is case-insensitive.
// - `displayName` - (Optional) Display name of the variable shown in the UI. If this field is empty, the name field will be used.
// - `defaultValue` - (Optional) Default value of the variable.
// - `sourceDefinition` - (Required) Source definition for variable values. See
//   sourceDefinition schema for details.
// - `allowMultiSelect` - (Optional) Allow multiple selections in the values dropdown.
// - `includeAllOption` - (Optional) Include an "All" option at the top of the variable's values dropdown. _Defaults to true._
// - `hideFromUi` - (Optional) Hide the variable in the dashboard UI.
//
// ### Schema for `sourceDefinition`
// - `logQueryVariableSourceDefinition` - (Optional) Variable values from a log query.
//     - `query` - (Required) A log query.
//     - `field` - (Required) A field in log query to populate the variable values
// - `metadataVariableSourceDefinition` - (Optional) Variable values from a metric query.
//     - `filter` - (Required) Filter to search the catalog.
//     - `key` - (Required) Return the values for this given key.
// - `csvVariableSourceDefinition` - (Optional) Variable values in csv format.
//     - `values` - (Required) A comma separated values for the variable.
//
// ## Import
//
// Dashboard can be imported using the dashboard id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/dashboard:Dashboard example-dashboard q0IKwAK5t2qRI4sgiANwnS87k5S4twN2sCpTuZFSsz6ZmbENPsG7PnpqZygc
// ```
//
//  [1]https://help.sumologic.com/Visualizations-and-Alerts/Dashboard_(New)
type Dashboard struct {
	pulumi.CustomResourceState

	ColoringRules DashboardColoringRuleArrayOutput `pulumi:"coloringRules"`
	// Description of the dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The identifier of the folder to save the dashboard in. By default it is saved in your
	// personal folder.
	FolderId pulumi.StringPtrOutput `pulumi:"folderId"`
	// Layout of the dashboard. See layout schema for details.
	Layout DashboardLayoutPtrOutput `pulumi:"layout"`
	// A list of panels in the dashboard. See panel schema for details.
	Panels DashboardPanelArrayOutput `pulumi:"panels"`
	// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
	RefreshInterval pulumi.IntPtrOutput `pulumi:"refreshInterval"`
	// Theme of the dashboard.
	Theme pulumi.StringPtrOutput `pulumi:"theme"`
	// Time range of the dashboard. See time range schema
	// for details.
	TimeRange DashboardTimeRangeOutput `pulumi:"timeRange"`
	// Title of the dashboard.
	Title pulumi.StringOutput `pulumi:"title"`
	// Topology labels for the dashboard. See
	// topology label map schema
	// for details.
	TopologyLabelMap DashboardTopologyLabelMapPtrOutput `pulumi:"topologyLabelMap"`
	// A list of variables for the dashboard. See variable schema
	// for details.
	Variables DashboardVariableArrayOutput `pulumi:"variables"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TimeRange == nil {
		return nil, errors.New("invalid value for required argument 'TimeRange'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	var resource Dashboard
	err := ctx.RegisterResource("sumologic:index/dashboard:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("sumologic:index/dashboard:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
	ColoringRules []DashboardColoringRule `pulumi:"coloringRules"`
	// Description of the dashboard.
	Description *string `pulumi:"description"`
	// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
	Domain *string `pulumi:"domain"`
	// The identifier of the folder to save the dashboard in. By default it is saved in your
	// personal folder.
	FolderId *string `pulumi:"folderId"`
	// Layout of the dashboard. See layout schema for details.
	Layout *DashboardLayout `pulumi:"layout"`
	// A list of panels in the dashboard. See panel schema for details.
	Panels []DashboardPanel `pulumi:"panels"`
	// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
	RefreshInterval *int `pulumi:"refreshInterval"`
	// Theme of the dashboard.
	Theme *string `pulumi:"theme"`
	// Time range of the dashboard. See time range schema
	// for details.
	TimeRange *DashboardTimeRange `pulumi:"timeRange"`
	// Title of the dashboard.
	Title *string `pulumi:"title"`
	// Topology labels for the dashboard. See
	// topology label map schema
	// for details.
	TopologyLabelMap *DashboardTopologyLabelMap `pulumi:"topologyLabelMap"`
	// A list of variables for the dashboard. See variable schema
	// for details.
	Variables []DashboardVariable `pulumi:"variables"`
}

type DashboardState struct {
	ColoringRules DashboardColoringRuleArrayInput
	// Description of the dashboard.
	Description pulumi.StringPtrInput
	// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
	Domain pulumi.StringPtrInput
	// The identifier of the folder to save the dashboard in. By default it is saved in your
	// personal folder.
	FolderId pulumi.StringPtrInput
	// Layout of the dashboard. See layout schema for details.
	Layout DashboardLayoutPtrInput
	// A list of panels in the dashboard. See panel schema for details.
	Panels DashboardPanelArrayInput
	// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
	RefreshInterval pulumi.IntPtrInput
	// Theme of the dashboard.
	Theme pulumi.StringPtrInput
	// Time range of the dashboard. See time range schema
	// for details.
	TimeRange DashboardTimeRangePtrInput
	// Title of the dashboard.
	Title pulumi.StringPtrInput
	// Topology labels for the dashboard. See
	// topology label map schema
	// for details.
	TopologyLabelMap DashboardTopologyLabelMapPtrInput
	// A list of variables for the dashboard. See variable schema
	// for details.
	Variables DashboardVariableArrayInput
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	ColoringRules []DashboardColoringRule `pulumi:"coloringRules"`
	// Description of the dashboard.
	Description *string `pulumi:"description"`
	// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
	Domain *string `pulumi:"domain"`
	// The identifier of the folder to save the dashboard in. By default it is saved in your
	// personal folder.
	FolderId *string `pulumi:"folderId"`
	// Layout of the dashboard. See layout schema for details.
	Layout *DashboardLayout `pulumi:"layout"`
	// A list of panels in the dashboard. See panel schema for details.
	Panels []DashboardPanel `pulumi:"panels"`
	// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
	RefreshInterval *int `pulumi:"refreshInterval"`
	// Theme of the dashboard.
	Theme *string `pulumi:"theme"`
	// Time range of the dashboard. See time range schema
	// for details.
	TimeRange DashboardTimeRange `pulumi:"timeRange"`
	// Title of the dashboard.
	Title string `pulumi:"title"`
	// Topology labels for the dashboard. See
	// topology label map schema
	// for details.
	TopologyLabelMap *DashboardTopologyLabelMap `pulumi:"topologyLabelMap"`
	// A list of variables for the dashboard. See variable schema
	// for details.
	Variables []DashboardVariable `pulumi:"variables"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	ColoringRules DashboardColoringRuleArrayInput
	// Description of the dashboard.
	Description pulumi.StringPtrInput
	// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
	Domain pulumi.StringPtrInput
	// The identifier of the folder to save the dashboard in. By default it is saved in your
	// personal folder.
	FolderId pulumi.StringPtrInput
	// Layout of the dashboard. See layout schema for details.
	Layout DashboardLayoutPtrInput
	// A list of panels in the dashboard. See panel schema for details.
	Panels DashboardPanelArrayInput
	// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
	RefreshInterval pulumi.IntPtrInput
	// Theme of the dashboard.
	Theme pulumi.StringPtrInput
	// Time range of the dashboard. See time range schema
	// for details.
	TimeRange DashboardTimeRangeInput
	// Title of the dashboard.
	Title pulumi.StringInput
	// Topology labels for the dashboard. See
	// topology label map schema
	// for details.
	TopologyLabelMap DashboardTopologyLabelMapPtrInput
	// A list of variables for the dashboard. See variable schema
	// for details.
	Variables DashboardVariableArrayInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

// DashboardArrayInput is an input type that accepts DashboardArray and DashboardArrayOutput values.
// You can construct a concrete instance of `DashboardArrayInput` via:
//
//          DashboardArray{ DashboardArgs{...} }
type DashboardArrayInput interface {
	pulumi.Input

	ToDashboardArrayOutput() DashboardArrayOutput
	ToDashboardArrayOutputWithContext(context.Context) DashboardArrayOutput
}

type DashboardArray []DashboardInput

func (DashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (i DashboardArray) ToDashboardArrayOutput() DashboardArrayOutput {
	return i.ToDashboardArrayOutputWithContext(context.Background())
}

func (i DashboardArray) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardArrayOutput)
}

// DashboardMapInput is an input type that accepts DashboardMap and DashboardMapOutput values.
// You can construct a concrete instance of `DashboardMapInput` via:
//
//          DashboardMap{ "key": DashboardArgs{...} }
type DashboardMapInput interface {
	pulumi.Input

	ToDashboardMapOutput() DashboardMapOutput
	ToDashboardMapOutputWithContext(context.Context) DashboardMapOutput
}

type DashboardMap map[string]DashboardInput

func (DashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (i DashboardMap) ToDashboardMapOutput() DashboardMapOutput {
	return i.ToDashboardMapOutputWithContext(context.Background())
}

func (i DashboardMap) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardMapOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

func (o DashboardOutput) ColoringRules() DashboardColoringRuleArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardColoringRuleArrayOutput { return v.ColoringRules }).(DashboardColoringRuleArrayOutput)
}

// Description of the dashboard.
func (o DashboardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Domain of the dashboard. If set denotes that the dashboard concerns a given domain.
func (o DashboardOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The identifier of the folder to save the dashboard in. By default it is saved in your
// personal folder.
func (o DashboardOutput) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.FolderId }).(pulumi.StringPtrOutput)
}

// Layout of the dashboard. See layout schema for details.
func (o DashboardOutput) Layout() DashboardLayoutPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardLayoutPtrOutput { return v.Layout }).(DashboardLayoutPtrOutput)
}

// A list of panels in the dashboard. See panel schema for details.
func (o DashboardOutput) Panels() DashboardPanelArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardPanelArrayOutput { return v.Panels }).(DashboardPanelArrayOutput)
}

// Interval of time (in seconds) to automatically refresh the dashboard. Valid values are 120,300,900,1800,3600,7200,86400.
func (o DashboardOutput) RefreshInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.IntPtrOutput { return v.RefreshInterval }).(pulumi.IntPtrOutput)
}

// Theme of the dashboard.
func (o DashboardOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringPtrOutput { return v.Theme }).(pulumi.StringPtrOutput)
}

// Time range of the dashboard. See time range schema
// for details.
func (o DashboardOutput) TimeRange() DashboardTimeRangeOutput {
	return o.ApplyT(func(v *Dashboard) DashboardTimeRangeOutput { return v.TimeRange }).(DashboardTimeRangeOutput)
}

// Title of the dashboard.
func (o DashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Topology labels for the dashboard. See
// topology label map schema
// for details.
func (o DashboardOutput) TopologyLabelMap() DashboardTopologyLabelMapPtrOutput {
	return o.ApplyT(func(v *Dashboard) DashboardTopologyLabelMapPtrOutput { return v.TopologyLabelMap }).(DashboardTopologyLabelMapPtrOutput)
}

// A list of variables for the dashboard. See variable schema
// for details.
func (o DashboardOutput) Variables() DashboardVariableArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardVariableArrayOutput { return v.Variables }).(DashboardVariableArrayOutput)
}

type DashboardArrayOutput struct{ *pulumi.OutputState }

func (DashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dashboard)(nil)).Elem()
}

func (o DashboardArrayOutput) ToDashboardArrayOutput() DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) ToDashboardArrayOutputWithContext(ctx context.Context) DashboardArrayOutput {
	return o
}

func (o DashboardArrayOutput) Index(i pulumi.IntInput) DashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].([]*Dashboard)[vs[1].(int)]
	}).(DashboardOutput)
}

type DashboardMapOutput struct{ *pulumi.OutputState }

func (DashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dashboard)(nil)).Elem()
}

func (o DashboardMapOutput) ToDashboardMapOutput() DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) ToDashboardMapOutputWithContext(ctx context.Context) DashboardMapOutput {
	return o
}

func (o DashboardMapOutput) MapIndex(k pulumi.StringInput) DashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dashboard {
		return vs[0].(map[string]*Dashboard)[vs[1].(string)]
	}).(DashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardArrayInput)(nil)).Elem(), DashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardMapInput)(nil)).Elem(), DashboardMap{})
	pulumi.RegisterOutputType(DashboardOutput{})
	pulumi.RegisterOutputType(DashboardArrayOutput{})
	pulumi.RegisterOutputType(DashboardMapOutput{})
}
