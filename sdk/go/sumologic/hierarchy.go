// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Hierarchy](https://help.sumologic.com/Visualizations-and-Alerts/Explore).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewHierarchy(ctx, "exampleHierarchy", &sumologic.HierarchyArgs{
//				Filter: &HierarchyFilterArgs{
//					Key:   pulumi.String("_origin"),
//					Value: pulumi.String("kubernetes"),
//				},
//				Levels: HierarchyLevelArray{
//					&HierarchyLevelArgs{
//						EntityType: pulumi.String("cluster"),
//						NextLevel: &HierarchyLevelNextLevelArgs{
//							EntityType: pulumi.String("node"),
//						},
//						NextLevelsWithConditions: HierarchyLevelNextLevelsWithConditionArray{
//							&HierarchyLevelNextLevelsWithConditionArgs{
//								Condition: pulumi.String("testCondition"),
//								Level: &HierarchyLevelNextLevelsWithConditionLevelArgs{
//									EntityType: pulumi.String("namespace"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Hierarchies can be imported using the id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/hierarchy:Hierarchy test id
//
// ```
//
//	[1]https://help.sumologic.com/Visualizations-and-Alerts/Explore
type Hierarchy struct {
	pulumi.CustomResourceState

	// An optional clause that a hierarchy requires to be matched.
	Filter HierarchyFilterPtrOutput  `pulumi:"filter"`
	Levels HierarchyLevelArrayOutput `pulumi:"levels"`
	// Name of the hierarchy.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewHierarchy registers a new resource with the given unique name, arguments, and options.
func NewHierarchy(ctx *pulumi.Context,
	name string, args *HierarchyArgs, opts ...pulumi.ResourceOption) (*Hierarchy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Levels == nil {
		return nil, errors.New("invalid value for required argument 'Levels'")
	}
	var resource Hierarchy
	err := ctx.RegisterResource("sumologic:index/hierarchy:Hierarchy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHierarchy gets an existing Hierarchy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHierarchy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HierarchyState, opts ...pulumi.ResourceOption) (*Hierarchy, error) {
	var resource Hierarchy
	err := ctx.ReadResource("sumologic:index/hierarchy:Hierarchy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hierarchy resources.
type hierarchyState struct {
	// An optional clause that a hierarchy requires to be matched.
	Filter *HierarchyFilter `pulumi:"filter"`
	Levels []HierarchyLevel `pulumi:"levels"`
	// Name of the hierarchy.
	Name *string `pulumi:"name"`
}

type HierarchyState struct {
	// An optional clause that a hierarchy requires to be matched.
	Filter HierarchyFilterPtrInput
	Levels HierarchyLevelArrayInput
	// Name of the hierarchy.
	Name pulumi.StringPtrInput
}

func (HierarchyState) ElementType() reflect.Type {
	return reflect.TypeOf((*hierarchyState)(nil)).Elem()
}

type hierarchyArgs struct {
	// An optional clause that a hierarchy requires to be matched.
	Filter *HierarchyFilter `pulumi:"filter"`
	Levels []HierarchyLevel `pulumi:"levels"`
	// Name of the hierarchy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Hierarchy resource.
type HierarchyArgs struct {
	// An optional clause that a hierarchy requires to be matched.
	Filter HierarchyFilterPtrInput
	Levels HierarchyLevelArrayInput
	// Name of the hierarchy.
	Name pulumi.StringPtrInput
}

func (HierarchyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hierarchyArgs)(nil)).Elem()
}

type HierarchyInput interface {
	pulumi.Input

	ToHierarchyOutput() HierarchyOutput
	ToHierarchyOutputWithContext(ctx context.Context) HierarchyOutput
}

func (*Hierarchy) ElementType() reflect.Type {
	return reflect.TypeOf((**Hierarchy)(nil)).Elem()
}

func (i *Hierarchy) ToHierarchyOutput() HierarchyOutput {
	return i.ToHierarchyOutputWithContext(context.Background())
}

func (i *Hierarchy) ToHierarchyOutputWithContext(ctx context.Context) HierarchyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyOutput)
}

// HierarchyArrayInput is an input type that accepts HierarchyArray and HierarchyArrayOutput values.
// You can construct a concrete instance of `HierarchyArrayInput` via:
//
//	HierarchyArray{ HierarchyArgs{...} }
type HierarchyArrayInput interface {
	pulumi.Input

	ToHierarchyArrayOutput() HierarchyArrayOutput
	ToHierarchyArrayOutputWithContext(context.Context) HierarchyArrayOutput
}

type HierarchyArray []HierarchyInput

func (HierarchyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hierarchy)(nil)).Elem()
}

func (i HierarchyArray) ToHierarchyArrayOutput() HierarchyArrayOutput {
	return i.ToHierarchyArrayOutputWithContext(context.Background())
}

func (i HierarchyArray) ToHierarchyArrayOutputWithContext(ctx context.Context) HierarchyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyArrayOutput)
}

// HierarchyMapInput is an input type that accepts HierarchyMap and HierarchyMapOutput values.
// You can construct a concrete instance of `HierarchyMapInput` via:
//
//	HierarchyMap{ "key": HierarchyArgs{...} }
type HierarchyMapInput interface {
	pulumi.Input

	ToHierarchyMapOutput() HierarchyMapOutput
	ToHierarchyMapOutputWithContext(context.Context) HierarchyMapOutput
}

type HierarchyMap map[string]HierarchyInput

func (HierarchyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hierarchy)(nil)).Elem()
}

func (i HierarchyMap) ToHierarchyMapOutput() HierarchyMapOutput {
	return i.ToHierarchyMapOutputWithContext(context.Background())
}

func (i HierarchyMap) ToHierarchyMapOutputWithContext(ctx context.Context) HierarchyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HierarchyMapOutput)
}

type HierarchyOutput struct{ *pulumi.OutputState }

func (HierarchyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hierarchy)(nil)).Elem()
}

func (o HierarchyOutput) ToHierarchyOutput() HierarchyOutput {
	return o
}

func (o HierarchyOutput) ToHierarchyOutputWithContext(ctx context.Context) HierarchyOutput {
	return o
}

// An optional clause that a hierarchy requires to be matched.
func (o HierarchyOutput) Filter() HierarchyFilterPtrOutput {
	return o.ApplyT(func(v *Hierarchy) HierarchyFilterPtrOutput { return v.Filter }).(HierarchyFilterPtrOutput)
}

func (o HierarchyOutput) Levels() HierarchyLevelArrayOutput {
	return o.ApplyT(func(v *Hierarchy) HierarchyLevelArrayOutput { return v.Levels }).(HierarchyLevelArrayOutput)
}

// Name of the hierarchy.
func (o HierarchyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hierarchy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type HierarchyArrayOutput struct{ *pulumi.OutputState }

func (HierarchyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hierarchy)(nil)).Elem()
}

func (o HierarchyArrayOutput) ToHierarchyArrayOutput() HierarchyArrayOutput {
	return o
}

func (o HierarchyArrayOutput) ToHierarchyArrayOutputWithContext(ctx context.Context) HierarchyArrayOutput {
	return o
}

func (o HierarchyArrayOutput) Index(i pulumi.IntInput) HierarchyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hierarchy {
		return vs[0].([]*Hierarchy)[vs[1].(int)]
	}).(HierarchyOutput)
}

type HierarchyMapOutput struct{ *pulumi.OutputState }

func (HierarchyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hierarchy)(nil)).Elem()
}

func (o HierarchyMapOutput) ToHierarchyMapOutput() HierarchyMapOutput {
	return o
}

func (o HierarchyMapOutput) ToHierarchyMapOutputWithContext(ctx context.Context) HierarchyMapOutput {
	return o
}

func (o HierarchyMapOutput) MapIndex(k pulumi.StringInput) HierarchyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hierarchy {
		return vs[0].(map[string]*Hierarchy)[vs[1].(string)]
	}).(HierarchyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyInput)(nil)).Elem(), &Hierarchy{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyArrayInput)(nil)).Elem(), HierarchyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HierarchyMapInput)(nil)).Elem(), HierarchyMap{})
	pulumi.RegisterOutputType(HierarchyOutput{})
	pulumi.RegisterOutputType(HierarchyArrayOutput{})
	pulumi.RegisterOutputType(HierarchyMapOutput{})
}
