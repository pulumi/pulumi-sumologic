// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewInstalledCollector(ctx, "installedCollector", &sumologic.InstalledCollectorArgs{
//				Category:  pulumi.String("macos/test"),
//				Ephemeral: pulumi.Bool(true),
//				Fields: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Collectors can be imported using the collector id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/installedCollector:InstalledCollector test 1234567890
//
// ```
//
//	Collectors can also be imported using the collector name, which is unique per Sumo Logic account, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/installedCollector:InstalledCollector test my_test_collector
//
// ```
//
//	[1]https://help.sumologic.com/03Send-Data/Installed-Collectors/01About-Installed-Collectors [2]https://en.wikipedia.org/wiki/Tz_database [3]https://help.sumologic.com/Manage/Fields [4]https://www.terraform.io/docs/configuration/resources.html#prevent_destroy [5]:https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral
type InstalledCollector struct {
	pulumi.CustomResourceState

	Alive pulumi.BoolOutput `pulumi:"alive"`
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category         pulumi.StringPtrOutput `pulumi:"category"`
	CollectorVersion pulumi.StringOutput    `pulumi:"collectorVersion"`
	CutoffTimestamp  pulumi.IntPtrOutput    `pulumi:"cutoffTimestamp"`
	// The description of the collector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
	Ephemeral pulumi.BoolOutput `pulumi:"ephemeral"`
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapOutput `pulumi:"fields"`
	// Host name of the Collector. The hostname can be a maximum of 128 characters.
	HostName      pulumi.StringPtrOutput `pulumi:"hostName"`
	LastSeenAlive pulumi.IntOutput       `pulumi:"lastSeenAlive"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringOutput `pulumi:"name"`
	// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
	SourceSyncMode pulumi.StringPtrOutput `pulumi:"sourceSyncMode"`
	// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
	TargetCpu pulumi.IntPtrOutput `pulumi:"targetCpu"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewInstalledCollector registers a new resource with the given unique name, arguments, and options.
func NewInstalledCollector(ctx *pulumi.Context,
	name string, args *InstalledCollectorArgs, opts ...pulumi.ResourceOption) (*InstalledCollector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ephemeral == nil {
		return nil, errors.New("invalid value for required argument 'Ephemeral'")
	}
	var resource InstalledCollector
	err := ctx.RegisterResource("sumologic:index/installedCollector:InstalledCollector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstalledCollector gets an existing InstalledCollector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstalledCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstalledCollectorState, opts ...pulumi.ResourceOption) (*InstalledCollector, error) {
	var resource InstalledCollector
	err := ctx.ReadResource("sumologic:index/installedCollector:InstalledCollector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstalledCollector resources.
type installedCollectorState struct {
	Alive *bool `pulumi:"alive"`
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category         *string `pulumi:"category"`
	CollectorVersion *string `pulumi:"collectorVersion"`
	CutoffTimestamp  *int    `pulumi:"cutoffTimestamp"`
	// The description of the collector.
	Description *string `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
	Ephemeral *bool `pulumi:"ephemeral"`
	// Map containing [key/value pairs][3].
	Fields map[string]string `pulumi:"fields"`
	// Host name of the Collector. The hostname can be a maximum of 128 characters.
	HostName      *string `pulumi:"hostName"`
	LastSeenAlive *int    `pulumi:"lastSeenAlive"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name *string `pulumi:"name"`
	// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
	SourceSyncMode *string `pulumi:"sourceSyncMode"`
	// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
	TargetCpu *int `pulumi:"targetCpu"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone *string `pulumi:"timezone"`
}

type InstalledCollectorState struct {
	Alive pulumi.BoolPtrInput
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category         pulumi.StringPtrInput
	CollectorVersion pulumi.StringPtrInput
	CutoffTimestamp  pulumi.IntPtrInput
	// The description of the collector.
	Description pulumi.StringPtrInput
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
	Ephemeral pulumi.BoolPtrInput
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapInput
	// Host name of the Collector. The hostname can be a maximum of 128 characters.
	HostName      pulumi.StringPtrInput
	LastSeenAlive pulumi.IntPtrInput
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringPtrInput
	// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
	SourceSyncMode pulumi.StringPtrInput
	// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
	TargetCpu pulumi.IntPtrInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrInput
}

func (InstalledCollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*installedCollectorState)(nil)).Elem()
}

type installedCollectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category        *string `pulumi:"category"`
	CutoffTimestamp *int    `pulumi:"cutoffTimestamp"`
	// The description of the collector.
	Description *string `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
	Ephemeral bool `pulumi:"ephemeral"`
	// Map containing [key/value pairs][3].
	Fields map[string]string `pulumi:"fields"`
	// Host name of the Collector. The hostname can be a maximum of 128 characters.
	HostName *string `pulumi:"hostName"`
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name *string `pulumi:"name"`
	// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
	SourceSyncMode *string `pulumi:"sourceSyncMode"`
	// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
	TargetCpu *int `pulumi:"targetCpu"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a InstalledCollector resource.
type InstalledCollectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category        pulumi.StringPtrInput
	CutoffTimestamp pulumi.IntPtrInput
	// The description of the collector.
	Description pulumi.StringPtrInput
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
	Ephemeral pulumi.BoolInput
	// Map containing [key/value pairs][3].
	Fields pulumi.StringMapInput
	// Host name of the Collector. The hostname can be a maximum of 128 characters.
	HostName pulumi.StringPtrInput
	// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
	Name pulumi.StringPtrInput
	// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
	SourceSyncMode pulumi.StringPtrInput
	// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
	TargetCpu pulumi.IntPtrInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	Timezone pulumi.StringPtrInput
}

func (InstalledCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*installedCollectorArgs)(nil)).Elem()
}

type InstalledCollectorInput interface {
	pulumi.Input

	ToInstalledCollectorOutput() InstalledCollectorOutput
	ToInstalledCollectorOutputWithContext(ctx context.Context) InstalledCollectorOutput
}

func (*InstalledCollector) ElementType() reflect.Type {
	return reflect.TypeOf((**InstalledCollector)(nil)).Elem()
}

func (i *InstalledCollector) ToInstalledCollectorOutput() InstalledCollectorOutput {
	return i.ToInstalledCollectorOutputWithContext(context.Background())
}

func (i *InstalledCollector) ToInstalledCollectorOutputWithContext(ctx context.Context) InstalledCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstalledCollectorOutput)
}

// InstalledCollectorArrayInput is an input type that accepts InstalledCollectorArray and InstalledCollectorArrayOutput values.
// You can construct a concrete instance of `InstalledCollectorArrayInput` via:
//
//	InstalledCollectorArray{ InstalledCollectorArgs{...} }
type InstalledCollectorArrayInput interface {
	pulumi.Input

	ToInstalledCollectorArrayOutput() InstalledCollectorArrayOutput
	ToInstalledCollectorArrayOutputWithContext(context.Context) InstalledCollectorArrayOutput
}

type InstalledCollectorArray []InstalledCollectorInput

func (InstalledCollectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstalledCollector)(nil)).Elem()
}

func (i InstalledCollectorArray) ToInstalledCollectorArrayOutput() InstalledCollectorArrayOutput {
	return i.ToInstalledCollectorArrayOutputWithContext(context.Background())
}

func (i InstalledCollectorArray) ToInstalledCollectorArrayOutputWithContext(ctx context.Context) InstalledCollectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstalledCollectorArrayOutput)
}

// InstalledCollectorMapInput is an input type that accepts InstalledCollectorMap and InstalledCollectorMapOutput values.
// You can construct a concrete instance of `InstalledCollectorMapInput` via:
//
//	InstalledCollectorMap{ "key": InstalledCollectorArgs{...} }
type InstalledCollectorMapInput interface {
	pulumi.Input

	ToInstalledCollectorMapOutput() InstalledCollectorMapOutput
	ToInstalledCollectorMapOutputWithContext(context.Context) InstalledCollectorMapOutput
}

type InstalledCollectorMap map[string]InstalledCollectorInput

func (InstalledCollectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstalledCollector)(nil)).Elem()
}

func (i InstalledCollectorMap) ToInstalledCollectorMapOutput() InstalledCollectorMapOutput {
	return i.ToInstalledCollectorMapOutputWithContext(context.Background())
}

func (i InstalledCollectorMap) ToInstalledCollectorMapOutputWithContext(ctx context.Context) InstalledCollectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstalledCollectorMapOutput)
}

type InstalledCollectorOutput struct{ *pulumi.OutputState }

func (InstalledCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstalledCollector)(nil)).Elem()
}

func (o InstalledCollectorOutput) ToInstalledCollectorOutput() InstalledCollectorOutput {
	return o
}

func (o InstalledCollectorOutput) ToInstalledCollectorOutputWithContext(ctx context.Context) InstalledCollectorOutput {
	return o
}

func (o InstalledCollectorOutput) Alive() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.BoolOutput { return v.Alive }).(pulumi.BoolOutput)
}

// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
func (o InstalledCollectorOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o InstalledCollectorOutput) CollectorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringOutput { return v.CollectorVersion }).(pulumi.StringOutput)
}

func (o InstalledCollectorOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

// The description of the collector.
func (o InstalledCollectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral][5].
func (o InstalledCollectorOutput) Ephemeral() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.BoolOutput { return v.Ephemeral }).(pulumi.BoolOutput)
}

// Map containing [key/value pairs][3].
func (o InstalledCollectorOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

// Host name of the Collector. The hostname can be a maximum of 128 characters.
func (o InstalledCollectorOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o InstalledCollectorOutput) LastSeenAlive() pulumi.IntOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.IntOutput { return v.LastSeenAlive }).(pulumi.IntOutput)
}

// The name of the collector. This is required, and has to be unique. Changing this will force recreation the collector.
func (o InstalledCollectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// For installed Collectors, whether the Collector is using local source configuration management (using a JSON file), or cloud management (using the UI)
func (o InstalledCollectorOutput) SourceSyncMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringPtrOutput { return v.SourceSyncMode }).(pulumi.StringPtrOutput)
}

// When CPU utilization exceeds this threshold, the Collector will slow down its rate of ingestion to lower its CPU utilization. Currently only Local and Remote File Sources are supported.
func (o InstalledCollectorOutput) TargetCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.IntPtrOutput { return v.TargetCpu }).(pulumi.IntPtrOutput)
}

// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
func (o InstalledCollectorOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstalledCollector) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type InstalledCollectorArrayOutput struct{ *pulumi.OutputState }

func (InstalledCollectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstalledCollector)(nil)).Elem()
}

func (o InstalledCollectorArrayOutput) ToInstalledCollectorArrayOutput() InstalledCollectorArrayOutput {
	return o
}

func (o InstalledCollectorArrayOutput) ToInstalledCollectorArrayOutputWithContext(ctx context.Context) InstalledCollectorArrayOutput {
	return o
}

func (o InstalledCollectorArrayOutput) Index(i pulumi.IntInput) InstalledCollectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstalledCollector {
		return vs[0].([]*InstalledCollector)[vs[1].(int)]
	}).(InstalledCollectorOutput)
}

type InstalledCollectorMapOutput struct{ *pulumi.OutputState }

func (InstalledCollectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstalledCollector)(nil)).Elem()
}

func (o InstalledCollectorMapOutput) ToInstalledCollectorMapOutput() InstalledCollectorMapOutput {
	return o
}

func (o InstalledCollectorMapOutput) ToInstalledCollectorMapOutputWithContext(ctx context.Context) InstalledCollectorMapOutput {
	return o
}

func (o InstalledCollectorMapOutput) MapIndex(k pulumi.StringInput) InstalledCollectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstalledCollector {
		return vs[0].(map[string]*InstalledCollector)[vs[1].(string)]
	}).(InstalledCollectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstalledCollectorInput)(nil)).Elem(), &InstalledCollector{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstalledCollectorArrayInput)(nil)).Elem(), InstalledCollectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstalledCollectorMapInput)(nil)).Elem(), InstalledCollectorMap{})
	pulumi.RegisterOutputType(InstalledCollectorOutput{})
	pulumi.RegisterOutputType(InstalledCollectorArrayOutput{})
	pulumi.RegisterOutputType(InstalledCollectorMapOutput{})
}
