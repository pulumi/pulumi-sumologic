// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a way to retrieve Sumo Logic collector details (id, names, etc) for a collector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.LookupCollector(ctx, &sumologic.LookupCollectorArgs{
//				Name: pulumi.StringRef("MyCollector"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.LookupCollector(ctx, &sumologic.LookupCollectorArgs{
//				Id: pulumi.IntRef(1234567890),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A collector can be looked up by either `id` or `name`. One of those attributes needs to be specified.
//
// If both `id` and `name` have been specified, `id` takes precedence.
// ## Attributes reference
//
// The following attributes are exported:
//
// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
// - `name` - The name of the collector.
// - `description` - The description of the collector.
// - `category` - The default source category for any source attached to this collector.
// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
func LookupCollector(ctx *pulumi.Context, args *LookupCollectorArgs, opts ...pulumi.InvokeOption) (*LookupCollectorResult, error) {
	var rv LookupCollectorResult
	err := ctx.Invoke("sumologic:index/getCollector:getCollector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCollector.
type LookupCollectorArgs struct {
	Id   *int    `pulumi:"id"`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCollector.
type LookupCollectorResult struct {
	Category    string            `pulumi:"category"`
	Description string            `pulumi:"description"`
	Fields      map[string]string `pulumi:"fields"`
	Id          int               `pulumi:"id"`
	Name        string            `pulumi:"name"`
	Timezone    string            `pulumi:"timezone"`
}

func LookupCollectorOutput(ctx *pulumi.Context, args LookupCollectorOutputArgs, opts ...pulumi.InvokeOption) LookupCollectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCollectorResult, error) {
			args := v.(LookupCollectorArgs)
			r, err := LookupCollector(ctx, &args, opts...)
			var s LookupCollectorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCollectorResultOutput)
}

// A collection of arguments for invoking getCollector.
type LookupCollectorOutputArgs struct {
	Id   pulumi.IntPtrInput    `pulumi:"id"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCollectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorArgs)(nil)).Elem()
}

// A collection of values returned by getCollector.
type LookupCollectorResultOutput struct{ *pulumi.OutputState }

func (LookupCollectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorResult)(nil)).Elem()
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutput() LookupCollectorResultOutput {
	return o
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutputWithContext(ctx context.Context) LookupCollectorResultOutput {
	return o
}

func (o LookupCollectorResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Category }).(pulumi.StringOutput)
}

func (o LookupCollectorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupCollectorResultOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCollectorResult) map[string]string { return v.Fields }).(pulumi.StringMapOutput)
}

func (o LookupCollectorResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCollectorResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupCollectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCollectorResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Timezone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCollectorResultOutput{})
}
