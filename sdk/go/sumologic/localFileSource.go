// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Local File Source](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			installedCollector, err := sumologic.NewInstalledCollector(ctx, "installed_collector", &sumologic.InstalledCollectorArgs{
//				Name:      pulumi.String("test-collector"),
//				Category:  pulumi.String("macos/test"),
//				Ephemeral: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewLocalFileSource(ctx, "local", &sumologic.LocalFileSourceArgs{
//				Name:           pulumi.String("localfile-mac"),
//				Description:    pulumi.String("test"),
//				Category:       pulumi.String("test"),
//				CollectorId:    installedCollector.ID(),
//				PathExpression: pulumi.String("/Applications/Sumo Logic Collector/logs/*.log.*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Local file sources can be imported using the collector and source IDs, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/localFileSource:LocalFileSource test 123/456
// ```
//
// Local file sources can also be imported using the collector name and source name, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/localFileSource:LocalFileSource test my-test-collector/my-test-source
// ```
//
// [1]: https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/
// [2]: https://help.sumologic.com/Manage/Fields
// [3]: https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources
type LocalFileSource struct {
	pulumi.CustomResourceState

	AutomaticDateParsing pulumi.BoolPtrOutput `pulumi:"automaticDateParsing"`
	// The default source category for the source.
	Category           pulumi.StringPtrOutput                      `pulumi:"category"`
	CollectorId        pulumi.IntOutput                            `pulumi:"collectorId"`
	ContentType        pulumi.StringPtrOutput                      `pulumi:"contentType"`
	CutoffRelativeTime pulumi.StringPtrOutput                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp    pulumi.IntPtrOutput                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats LocalFileSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	DenyLists          pulumi.StringArrayOutput                    `pulumi:"denyLists"`
	// The description of the source.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
	Encoding pulumi.StringPtrOutput `pulumi:"encoding"`
	// Map containing [key/value pairs][2].
	Fields                     pulumi.StringMapOutput           `pulumi:"fields"`
	Filters                    LocalFileSourceFilterArrayOutput `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput             `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput           `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput           `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput             `pulumi:"multilineProcessingEnabled"`
	// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
	PathExpression      pulumi.StringOutput    `pulumi:"pathExpression"`
	Timezone            pulumi.StringPtrOutput `pulumi:"timezone"`
	UseAutolineMatching pulumi.BoolPtrOutput   `pulumi:"useAutolineMatching"`
}

// NewLocalFileSource registers a new resource with the given unique name, arguments, and options.
func NewLocalFileSource(ctx *pulumi.Context,
	name string, args *LocalFileSourceArgs, opts ...pulumi.ResourceOption) (*LocalFileSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.PathExpression == nil {
		return nil, errors.New("invalid value for required argument 'PathExpression'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocalFileSource
	err := ctx.RegisterResource("sumologic:index/localFileSource:LocalFileSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalFileSource gets an existing LocalFileSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalFileSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalFileSourceState, opts ...pulumi.ResourceOption) (*LocalFileSource, error) {
	var resource LocalFileSource
	err := ctx.ReadResource("sumologic:index/localFileSource:LocalFileSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalFileSource resources.
type localFileSourceState struct {
	AutomaticDateParsing *bool `pulumi:"automaticDateParsing"`
	// The default source category for the source.
	Category           *string                            `pulumi:"category"`
	CollectorId        *int                               `pulumi:"collectorId"`
	ContentType        *string                            `pulumi:"contentType"`
	CutoffRelativeTime *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp    *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats []LocalFileSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	DenyLists          []string                           `pulumi:"denyLists"`
	// The description of the source.
	Description *string `pulumi:"description"`
	// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
	Encoding *string `pulumi:"encoding"`
	// Map containing [key/value pairs][2].
	Fields                     map[string]string       `pulumi:"fields"`
	Filters                    []LocalFileSourceFilter `pulumi:"filters"`
	ForceTimezone              *bool                   `pulumi:"forceTimezone"`
	HostName                   *string                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                 `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                   `pulumi:"multilineProcessingEnabled"`
	// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
	Name *string `pulumi:"name"`
	// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
	PathExpression      *string `pulumi:"pathExpression"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type LocalFileSourceState struct {
	AutomaticDateParsing pulumi.BoolPtrInput
	// The default source category for the source.
	Category           pulumi.StringPtrInput
	CollectorId        pulumi.IntPtrInput
	ContentType        pulumi.StringPtrInput
	CutoffRelativeTime pulumi.StringPtrInput
	CutoffTimestamp    pulumi.IntPtrInput
	DefaultDateFormats LocalFileSourceDefaultDateFormatArrayInput
	DenyLists          pulumi.StringArrayInput
	// The description of the source.
	Description pulumi.StringPtrInput
	// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
	Encoding pulumi.StringPtrInput
	// Map containing [key/value pairs][2].
	Fields                     pulumi.StringMapInput
	Filters                    LocalFileSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
	Name pulumi.StringPtrInput
	// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
	PathExpression      pulumi.StringPtrInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (LocalFileSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*localFileSourceState)(nil)).Elem()
}

type localFileSourceArgs struct {
	AutomaticDateParsing *bool `pulumi:"automaticDateParsing"`
	// The default source category for the source.
	Category           *string                            `pulumi:"category"`
	CollectorId        int                                `pulumi:"collectorId"`
	ContentType        *string                            `pulumi:"contentType"`
	CutoffRelativeTime *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp    *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats []LocalFileSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	DenyLists          []string                           `pulumi:"denyLists"`
	// The description of the source.
	Description *string `pulumi:"description"`
	// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
	Encoding *string `pulumi:"encoding"`
	// Map containing [key/value pairs][2].
	Fields                     map[string]string       `pulumi:"fields"`
	Filters                    []LocalFileSourceFilter `pulumi:"filters"`
	ForceTimezone              *bool                   `pulumi:"forceTimezone"`
	HostName                   *string                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                 `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                   `pulumi:"multilineProcessingEnabled"`
	// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
	Name *string `pulumi:"name"`
	// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
	PathExpression      string  `pulumi:"pathExpression"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a LocalFileSource resource.
type LocalFileSourceArgs struct {
	AutomaticDateParsing pulumi.BoolPtrInput
	// The default source category for the source.
	Category           pulumi.StringPtrInput
	CollectorId        pulumi.IntInput
	ContentType        pulumi.StringPtrInput
	CutoffRelativeTime pulumi.StringPtrInput
	CutoffTimestamp    pulumi.IntPtrInput
	DefaultDateFormats LocalFileSourceDefaultDateFormatArrayInput
	DenyLists          pulumi.StringArrayInput
	// The description of the source.
	Description pulumi.StringPtrInput
	// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
	Encoding pulumi.StringPtrInput
	// Map containing [key/value pairs][2].
	Fields                     pulumi.StringMapInput
	Filters                    LocalFileSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
	Name pulumi.StringPtrInput
	// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
	PathExpression      pulumi.StringInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (LocalFileSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localFileSourceArgs)(nil)).Elem()
}

type LocalFileSourceInput interface {
	pulumi.Input

	ToLocalFileSourceOutput() LocalFileSourceOutput
	ToLocalFileSourceOutputWithContext(ctx context.Context) LocalFileSourceOutput
}

func (*LocalFileSource) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalFileSource)(nil)).Elem()
}

func (i *LocalFileSource) ToLocalFileSourceOutput() LocalFileSourceOutput {
	return i.ToLocalFileSourceOutputWithContext(context.Background())
}

func (i *LocalFileSource) ToLocalFileSourceOutputWithContext(ctx context.Context) LocalFileSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalFileSourceOutput)
}

// LocalFileSourceArrayInput is an input type that accepts LocalFileSourceArray and LocalFileSourceArrayOutput values.
// You can construct a concrete instance of `LocalFileSourceArrayInput` via:
//
//	LocalFileSourceArray{ LocalFileSourceArgs{...} }
type LocalFileSourceArrayInput interface {
	pulumi.Input

	ToLocalFileSourceArrayOutput() LocalFileSourceArrayOutput
	ToLocalFileSourceArrayOutputWithContext(context.Context) LocalFileSourceArrayOutput
}

type LocalFileSourceArray []LocalFileSourceInput

func (LocalFileSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalFileSource)(nil)).Elem()
}

func (i LocalFileSourceArray) ToLocalFileSourceArrayOutput() LocalFileSourceArrayOutput {
	return i.ToLocalFileSourceArrayOutputWithContext(context.Background())
}

func (i LocalFileSourceArray) ToLocalFileSourceArrayOutputWithContext(ctx context.Context) LocalFileSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalFileSourceArrayOutput)
}

// LocalFileSourceMapInput is an input type that accepts LocalFileSourceMap and LocalFileSourceMapOutput values.
// You can construct a concrete instance of `LocalFileSourceMapInput` via:
//
//	LocalFileSourceMap{ "key": LocalFileSourceArgs{...} }
type LocalFileSourceMapInput interface {
	pulumi.Input

	ToLocalFileSourceMapOutput() LocalFileSourceMapOutput
	ToLocalFileSourceMapOutputWithContext(context.Context) LocalFileSourceMapOutput
}

type LocalFileSourceMap map[string]LocalFileSourceInput

func (LocalFileSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalFileSource)(nil)).Elem()
}

func (i LocalFileSourceMap) ToLocalFileSourceMapOutput() LocalFileSourceMapOutput {
	return i.ToLocalFileSourceMapOutputWithContext(context.Background())
}

func (i LocalFileSourceMap) ToLocalFileSourceMapOutputWithContext(ctx context.Context) LocalFileSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalFileSourceMapOutput)
}

type LocalFileSourceOutput struct{ *pulumi.OutputState }

func (LocalFileSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalFileSource)(nil)).Elem()
}

func (o LocalFileSourceOutput) ToLocalFileSourceOutput() LocalFileSourceOutput {
	return o
}

func (o LocalFileSourceOutput) ToLocalFileSourceOutputWithContext(ctx context.Context) LocalFileSourceOutput {
	return o
}

func (o LocalFileSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

// The default source category for the source.
func (o LocalFileSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

func (o LocalFileSourceOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o LocalFileSourceOutput) DefaultDateFormats() LocalFileSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *LocalFileSource) LocalFileSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(LocalFileSourceDefaultDateFormatArrayOutput)
}

func (o LocalFileSourceOutput) DenyLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringArrayOutput { return v.DenyLists }).(pulumi.StringArrayOutput)
}

// The description of the source.
func (o LocalFileSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Defines the encoding form. Default is "UTF-8". Other supported encodings are listed [here](https://help.sumologic.com/docs/send-data/installed-collectors/sources/local-file-source/#supported-encoding-for-local-file-sources).
func (o LocalFileSourceOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Map containing [key/value pairs][2].
func (o LocalFileSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o LocalFileSourceOutput) Filters() LocalFileSourceFilterArrayOutput {
	return o.ApplyT(func(v *LocalFileSource) LocalFileSourceFilterArrayOutput { return v.Filters }).(LocalFileSourceFilterArrayOutput)
}

func (o LocalFileSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o LocalFileSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
func (o LocalFileSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A valid path expression (full path) of the file to collect. For files on Windows systems (not including Windows Events), enter the absolute path including the drive letter. Escape special characters and spaces with a backslash (). If you are collecting from Windows using CIFS/SMB, see Prerequisites for Windows Log Collection. Use a single asterisk wildcard [*] for file or folder names. Example:[var/foo/*.log]. Use two asterisks [**]to recurse within directories and subdirectories. Example: [var/*/.log].
func (o LocalFileSourceOutput) PathExpression() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringOutput { return v.PathExpression }).(pulumi.StringOutput)
}

func (o LocalFileSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o LocalFileSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalFileSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type LocalFileSourceArrayOutput struct{ *pulumi.OutputState }

func (LocalFileSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalFileSource)(nil)).Elem()
}

func (o LocalFileSourceArrayOutput) ToLocalFileSourceArrayOutput() LocalFileSourceArrayOutput {
	return o
}

func (o LocalFileSourceArrayOutput) ToLocalFileSourceArrayOutputWithContext(ctx context.Context) LocalFileSourceArrayOutput {
	return o
}

func (o LocalFileSourceArrayOutput) Index(i pulumi.IntInput) LocalFileSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocalFileSource {
		return vs[0].([]*LocalFileSource)[vs[1].(int)]
	}).(LocalFileSourceOutput)
}

type LocalFileSourceMapOutput struct{ *pulumi.OutputState }

func (LocalFileSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalFileSource)(nil)).Elem()
}

func (o LocalFileSourceMapOutput) ToLocalFileSourceMapOutput() LocalFileSourceMapOutput {
	return o
}

func (o LocalFileSourceMapOutput) ToLocalFileSourceMapOutputWithContext(ctx context.Context) LocalFileSourceMapOutput {
	return o
}

func (o LocalFileSourceMapOutput) MapIndex(k pulumi.StringInput) LocalFileSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocalFileSource {
		return vs[0].(map[string]*LocalFileSource)[vs[1].(string)]
	}).(LocalFileSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalFileSourceInput)(nil)).Elem(), &LocalFileSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalFileSourceArrayInput)(nil)).Elem(), LocalFileSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalFileSourceMapInput)(nil)).Elem(), LocalFileSourceMap{})
	pulumi.RegisterOutputType(LocalFileSourceOutput{})
	pulumi.RegisterOutputType(LocalFileSourceArrayOutput{})
	pulumi.RegisterOutputType(LocalFileSourceMapOutput{})
}
