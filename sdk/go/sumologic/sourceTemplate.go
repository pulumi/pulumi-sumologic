// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SourceTemplate struct {
	pulumi.CustomResourceState

	Config    pulumi.StringOutput `pulumi:"config"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// inputJson of source template
	InputJson  pulumi.StringOutput `pulumi:"inputJson"`
	ModifiedAt pulumi.StringOutput `pulumi:"modifiedAt"`
	ModifiedBy pulumi.StringOutput `pulumi:"modifiedBy"`
	// schema reference for source template.
	SchemaRef SourceTemplateSchemaRefOutput `pulumi:"schemaRef"`
	// Agent selector conditions
	Selectors            SourceTemplateSelectorArrayOutput `pulumi:"selectors"`
	TotalCollectorLinked pulumi.IntOutput                  `pulumi:"totalCollectorLinked"`
}

// NewSourceTemplate registers a new resource with the given unique name, arguments, and options.
func NewSourceTemplate(ctx *pulumi.Context,
	name string, args *SourceTemplateArgs, opts ...pulumi.ResourceOption) (*SourceTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputJson == nil {
		return nil, errors.New("invalid value for required argument 'InputJson'")
	}
	if args.SchemaRef == nil {
		return nil, errors.New("invalid value for required argument 'SchemaRef'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SourceTemplate
	err := ctx.RegisterResource("sumologic:index/sourceTemplate:SourceTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSourceTemplate gets an existing SourceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSourceTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SourceTemplateState, opts ...pulumi.ResourceOption) (*SourceTemplate, error) {
	var resource SourceTemplate
	err := ctx.ReadResource("sumologic:index/sourceTemplate:SourceTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SourceTemplate resources.
type sourceTemplateState struct {
	Config    *string `pulumi:"config"`
	CreatedAt *string `pulumi:"createdAt"`
	CreatedBy *string `pulumi:"createdBy"`
	// inputJson of source template
	InputJson  *string `pulumi:"inputJson"`
	ModifiedAt *string `pulumi:"modifiedAt"`
	ModifiedBy *string `pulumi:"modifiedBy"`
	// schema reference for source template.
	SchemaRef *SourceTemplateSchemaRef `pulumi:"schemaRef"`
	// Agent selector conditions
	Selectors            []SourceTemplateSelector `pulumi:"selectors"`
	TotalCollectorLinked *int                     `pulumi:"totalCollectorLinked"`
}

type SourceTemplateState struct {
	Config    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// inputJson of source template
	InputJson  pulumi.StringPtrInput
	ModifiedAt pulumi.StringPtrInput
	ModifiedBy pulumi.StringPtrInput
	// schema reference for source template.
	SchemaRef SourceTemplateSchemaRefPtrInput
	// Agent selector conditions
	Selectors            SourceTemplateSelectorArrayInput
	TotalCollectorLinked pulumi.IntPtrInput
}

func (SourceTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTemplateState)(nil)).Elem()
}

type sourceTemplateArgs struct {
	// inputJson of source template
	InputJson string `pulumi:"inputJson"`
	// schema reference for source template.
	SchemaRef SourceTemplateSchemaRef `pulumi:"schemaRef"`
	// Agent selector conditions
	Selectors []SourceTemplateSelector `pulumi:"selectors"`
}

// The set of arguments for constructing a SourceTemplate resource.
type SourceTemplateArgs struct {
	// inputJson of source template
	InputJson pulumi.StringInput
	// schema reference for source template.
	SchemaRef SourceTemplateSchemaRefInput
	// Agent selector conditions
	Selectors SourceTemplateSelectorArrayInput
}

func (SourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sourceTemplateArgs)(nil)).Elem()
}

type SourceTemplateInput interface {
	pulumi.Input

	ToSourceTemplateOutput() SourceTemplateOutput
	ToSourceTemplateOutputWithContext(ctx context.Context) SourceTemplateOutput
}

func (*SourceTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTemplate)(nil)).Elem()
}

func (i *SourceTemplate) ToSourceTemplateOutput() SourceTemplateOutput {
	return i.ToSourceTemplateOutputWithContext(context.Background())
}

func (i *SourceTemplate) ToSourceTemplateOutputWithContext(ctx context.Context) SourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTemplateOutput)
}

// SourceTemplateArrayInput is an input type that accepts SourceTemplateArray and SourceTemplateArrayOutput values.
// You can construct a concrete instance of `SourceTemplateArrayInput` via:
//
//	SourceTemplateArray{ SourceTemplateArgs{...} }
type SourceTemplateArrayInput interface {
	pulumi.Input

	ToSourceTemplateArrayOutput() SourceTemplateArrayOutput
	ToSourceTemplateArrayOutputWithContext(context.Context) SourceTemplateArrayOutput
}

type SourceTemplateArray []SourceTemplateInput

func (SourceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTemplate)(nil)).Elem()
}

func (i SourceTemplateArray) ToSourceTemplateArrayOutput() SourceTemplateArrayOutput {
	return i.ToSourceTemplateArrayOutputWithContext(context.Background())
}

func (i SourceTemplateArray) ToSourceTemplateArrayOutputWithContext(ctx context.Context) SourceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTemplateArrayOutput)
}

// SourceTemplateMapInput is an input type that accepts SourceTemplateMap and SourceTemplateMapOutput values.
// You can construct a concrete instance of `SourceTemplateMapInput` via:
//
//	SourceTemplateMap{ "key": SourceTemplateArgs{...} }
type SourceTemplateMapInput interface {
	pulumi.Input

	ToSourceTemplateMapOutput() SourceTemplateMapOutput
	ToSourceTemplateMapOutputWithContext(context.Context) SourceTemplateMapOutput
}

type SourceTemplateMap map[string]SourceTemplateInput

func (SourceTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTemplate)(nil)).Elem()
}

func (i SourceTemplateMap) ToSourceTemplateMapOutput() SourceTemplateMapOutput {
	return i.ToSourceTemplateMapOutputWithContext(context.Background())
}

func (i SourceTemplateMap) ToSourceTemplateMapOutputWithContext(ctx context.Context) SourceTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceTemplateMapOutput)
}

type SourceTemplateOutput struct{ *pulumi.OutputState }

func (SourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceTemplate)(nil)).Elem()
}

func (o SourceTemplateOutput) ToSourceTemplateOutput() SourceTemplateOutput {
	return o
}

func (o SourceTemplateOutput) ToSourceTemplateOutputWithContext(ctx context.Context) SourceTemplateOutput {
	return o
}

func (o SourceTemplateOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

func (o SourceTemplateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SourceTemplateOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// inputJson of source template
func (o SourceTemplateOutput) InputJson() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.InputJson }).(pulumi.StringOutput)
}

func (o SourceTemplateOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o SourceTemplateOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// schema reference for source template.
func (o SourceTemplateOutput) SchemaRef() SourceTemplateSchemaRefOutput {
	return o.ApplyT(func(v *SourceTemplate) SourceTemplateSchemaRefOutput { return v.SchemaRef }).(SourceTemplateSchemaRefOutput)
}

// Agent selector conditions
func (o SourceTemplateOutput) Selectors() SourceTemplateSelectorArrayOutput {
	return o.ApplyT(func(v *SourceTemplate) SourceTemplateSelectorArrayOutput { return v.Selectors }).(SourceTemplateSelectorArrayOutput)
}

func (o SourceTemplateOutput) TotalCollectorLinked() pulumi.IntOutput {
	return o.ApplyT(func(v *SourceTemplate) pulumi.IntOutput { return v.TotalCollectorLinked }).(pulumi.IntOutput)
}

type SourceTemplateArrayOutput struct{ *pulumi.OutputState }

func (SourceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SourceTemplate)(nil)).Elem()
}

func (o SourceTemplateArrayOutput) ToSourceTemplateArrayOutput() SourceTemplateArrayOutput {
	return o
}

func (o SourceTemplateArrayOutput) ToSourceTemplateArrayOutputWithContext(ctx context.Context) SourceTemplateArrayOutput {
	return o
}

func (o SourceTemplateArrayOutput) Index(i pulumi.IntInput) SourceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SourceTemplate {
		return vs[0].([]*SourceTemplate)[vs[1].(int)]
	}).(SourceTemplateOutput)
}

type SourceTemplateMapOutput struct{ *pulumi.OutputState }

func (SourceTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SourceTemplate)(nil)).Elem()
}

func (o SourceTemplateMapOutput) ToSourceTemplateMapOutput() SourceTemplateMapOutput {
	return o
}

func (o SourceTemplateMapOutput) ToSourceTemplateMapOutputWithContext(ctx context.Context) SourceTemplateMapOutput {
	return o
}

func (o SourceTemplateMapOutput) MapIndex(k pulumi.StringInput) SourceTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SourceTemplate {
		return vs[0].(map[string]*SourceTemplate)[vs[1].(string)]
	}).(SourceTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTemplateInput)(nil)).Elem(), &SourceTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTemplateArrayInput)(nil)).Elem(), SourceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceTemplateMapInput)(nil)).Elem(), SourceTemplateMap{})
	pulumi.RegisterOutputType(SourceTemplateOutput{})
	pulumi.RegisterOutputType(SourceTemplateArrayOutput{})
	pulumi.RegisterOutputType(SourceTemplateMapOutput{})
}
