// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Kinesis Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test 123/456
// ```
//
//  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kinesisMetricsSource:KinesisMetricsSource test my-test-collector/my-test-source
// ```
type KinesisMetricsSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisMetricsSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                     `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput                   `pulumi:"category"`
	CollectorId          pulumi.IntOutput                         `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                              `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                           `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                              `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                           `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                           `pulumi:"fields"`
	Filters                    KinesisMetricsSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                             `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                           `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                           `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          pulumi.BoolPtrOutput                             `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                             `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                              `pulumi:"name"`
	// The location to scan for new data.
	Path     KinesisMetricsSourcePathOutput `pulumi:"path"`
	Timezone pulumi.StringPtrOutput         `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewKinesisMetricsSource registers a new resource with the given unique name, arguments, and options.
func NewKinesisMetricsSource(ctx *pulumi.Context,
	name string, args *KinesisMetricsSourceArgs, opts ...pulumi.ResourceOption) (*KinesisMetricsSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	var resource KinesisMetricsSource
	err := ctx.RegisterResource("sumologic:index/kinesisMetricsSource:KinesisMetricsSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKinesisMetricsSource gets an existing KinesisMetricsSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKinesisMetricsSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KinesisMetricsSourceState, opts ...pulumi.ResourceOption) (*KinesisMetricsSource, error) {
	var resource KinesisMetricsSource
	err := ctx.ReadResource("sumologic:index/kinesisMetricsSource:KinesisMetricsSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KinesisMetricsSource resources.
type kinesisMetricsSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *KinesisMetricsSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                               `pulumi:"automaticDateParsing"`
	Category             *string                             `pulumi:"category"`
	CollectorId          *int                                `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                                 `pulumi:"contentType"`
	CutoffRelativeTime         *string                                 `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                    `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                                 `pulumi:"description"`
	Fields                     map[string]string                       `pulumi:"fields"`
	Filters                    []KinesisMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                                   `pulumi:"forceTimezone"`
	HostName                   *string                                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                                 `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                                   `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                                   `pulumi:"multilineProcessingEnabled"`
	Name                       *string                                 `pulumi:"name"`
	// The location to scan for new data.
	Path     *KinesisMetricsSourcePath `pulumi:"path"`
	Timezone *string                   `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type KinesisMetricsSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisMetricsSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path     KinesisMetricsSourcePathPtrInput
	Timezone pulumi.StringPtrInput
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KinesisMetricsSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisMetricsSourceState)(nil)).Elem()
}

type kinesisMetricsSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisMetricsSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                              `pulumi:"automaticDateParsing"`
	Category             *string                            `pulumi:"category"`
	CollectorId          int                                `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                                  `pulumi:"contentType"`
	CutoffRelativeTime         *string                                 `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                    `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KinesisMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                                 `pulumi:"description"`
	Fields                     map[string]string                       `pulumi:"fields"`
	Filters                    []KinesisMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                                   `pulumi:"forceTimezone"`
	HostName                   *string                                 `pulumi:"hostName"`
	ManualPrefixRegexp         *string                                 `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                                   `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                                   `pulumi:"multilineProcessingEnabled"`
	Name                       *string                                 `pulumi:"name"`
	// The location to scan for new data.
	Path                KinesisMetricsSourcePath `pulumi:"path"`
	Timezone            *string                  `pulumi:"timezone"`
	UseAutolineMatching *bool                    `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a KinesisMetricsSource resource.
type KinesisMetricsSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KinesisMetricsSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KinesisMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KinesisMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location to scan for new data.
	Path                KinesisMetricsSourcePathInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KinesisMetricsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kinesisMetricsSourceArgs)(nil)).Elem()
}

type KinesisMetricsSourceInput interface {
	pulumi.Input

	ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput
	ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput
}

func (*KinesisMetricsSource) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSource)(nil)).Elem()
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput {
	return i.ToKinesisMetricsSourceOutputWithContext(context.Background())
}

func (i *KinesisMetricsSource) ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceOutput)
}

// KinesisMetricsSourceArrayInput is an input type that accepts KinesisMetricsSourceArray and KinesisMetricsSourceArrayOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceArrayInput` via:
//
//          KinesisMetricsSourceArray{ KinesisMetricsSourceArgs{...} }
type KinesisMetricsSourceArrayInput interface {
	pulumi.Input

	ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput
	ToKinesisMetricsSourceArrayOutputWithContext(context.Context) KinesisMetricsSourceArrayOutput
}

type KinesisMetricsSourceArray []KinesisMetricsSourceInput

func (KinesisMetricsSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisMetricsSource)(nil)).Elem()
}

func (i KinesisMetricsSourceArray) ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput {
	return i.ToKinesisMetricsSourceArrayOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceArray) ToKinesisMetricsSourceArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceArrayOutput)
}

// KinesisMetricsSourceMapInput is an input type that accepts KinesisMetricsSourceMap and KinesisMetricsSourceMapOutput values.
// You can construct a concrete instance of `KinesisMetricsSourceMapInput` via:
//
//          KinesisMetricsSourceMap{ "key": KinesisMetricsSourceArgs{...} }
type KinesisMetricsSourceMapInput interface {
	pulumi.Input

	ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput
	ToKinesisMetricsSourceMapOutputWithContext(context.Context) KinesisMetricsSourceMapOutput
}

type KinesisMetricsSourceMap map[string]KinesisMetricsSourceInput

func (KinesisMetricsSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisMetricsSource)(nil)).Elem()
}

func (i KinesisMetricsSourceMap) ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput {
	return i.ToKinesisMetricsSourceMapOutputWithContext(context.Background())
}

func (i KinesisMetricsSourceMap) ToKinesisMetricsSourceMapOutputWithContext(ctx context.Context) KinesisMetricsSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KinesisMetricsSourceMapOutput)
}

type KinesisMetricsSourceOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KinesisMetricsSource)(nil)).Elem()
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourceOutput() KinesisMetricsSourceOutput {
	return o
}

func (o KinesisMetricsSourceOutput) ToKinesisMetricsSourceOutputWithContext(ctx context.Context) KinesisMetricsSourceOutput {
	return o
}

// Authentication details for connecting to the S3 bucket.
func (o KinesisMetricsSourceOutput) Authentication() KinesisMetricsSourceAuthenticationOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) KinesisMetricsSourceAuthenticationOutput { return v.Authentication }).(KinesisMetricsSourceAuthenticationOutput)
}

func (o KinesisMetricsSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o KinesisMetricsSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o KinesisMetricsSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o KinesisMetricsSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o KinesisMetricsSourceOutput) DefaultDateFormats() KinesisMetricsSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) KinesisMetricsSourceDefaultDateFormatArrayOutput {
		return v.DefaultDateFormats
	}).(KinesisMetricsSourceDefaultDateFormatArrayOutput)
}

func (o KinesisMetricsSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o KinesisMetricsSourceOutput) Filters() KinesisMetricsSourceFilterArrayOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) KinesisMetricsSourceFilterArrayOutput { return v.Filters }).(KinesisMetricsSourceFilterArrayOutput)
}

func (o KinesisMetricsSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o KinesisMetricsSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o KinesisMetricsSourceOutput) MessagePerRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.BoolPtrOutput { return v.MessagePerRequest }).(pulumi.BoolPtrOutput)
}

func (o KinesisMetricsSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o KinesisMetricsSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The location to scan for new data.
func (o KinesisMetricsSourceOutput) Path() KinesisMetricsSourcePathOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) KinesisMetricsSourcePathOutput { return v.Path }).(KinesisMetricsSourcePathOutput)
}

func (o KinesisMetricsSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
func (o KinesisMetricsSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o KinesisMetricsSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KinesisMetricsSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type KinesisMetricsSourceArrayOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KinesisMetricsSource)(nil)).Elem()
}

func (o KinesisMetricsSourceArrayOutput) ToKinesisMetricsSourceArrayOutput() KinesisMetricsSourceArrayOutput {
	return o
}

func (o KinesisMetricsSourceArrayOutput) ToKinesisMetricsSourceArrayOutputWithContext(ctx context.Context) KinesisMetricsSourceArrayOutput {
	return o
}

func (o KinesisMetricsSourceArrayOutput) Index(i pulumi.IntInput) KinesisMetricsSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KinesisMetricsSource {
		return vs[0].([]*KinesisMetricsSource)[vs[1].(int)]
	}).(KinesisMetricsSourceOutput)
}

type KinesisMetricsSourceMapOutput struct{ *pulumi.OutputState }

func (KinesisMetricsSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KinesisMetricsSource)(nil)).Elem()
}

func (o KinesisMetricsSourceMapOutput) ToKinesisMetricsSourceMapOutput() KinesisMetricsSourceMapOutput {
	return o
}

func (o KinesisMetricsSourceMapOutput) ToKinesisMetricsSourceMapOutputWithContext(ctx context.Context) KinesisMetricsSourceMapOutput {
	return o
}

func (o KinesisMetricsSourceMapOutput) MapIndex(k pulumi.StringInput) KinesisMetricsSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KinesisMetricsSource {
		return vs[0].(map[string]*KinesisMetricsSource)[vs[1].(string)]
	}).(KinesisMetricsSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceInput)(nil)).Elem(), &KinesisMetricsSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceArrayInput)(nil)).Elem(), KinesisMetricsSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KinesisMetricsSourceMapInput)(nil)).Elem(), KinesisMetricsSourceMap{})
	pulumi.RegisterOutputType(KinesisMetricsSourceOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceArrayOutput{})
	pulumi.RegisterOutputType(KinesisMetricsSourceMapOutput{})
}
