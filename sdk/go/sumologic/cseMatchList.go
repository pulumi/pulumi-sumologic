// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic CSE Match List.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewCseMatchList(ctx, "matchList", &sumologic.CseMatchListArgs{
//				DefaultTtl:  pulumi.Int(10800),
//				Description: pulumi.String("Match list description"),
//				Items: sumologic.CseMatchListItemArray{
//					&sumologic.CseMatchListItemArgs{
//						Description: pulumi.String("IP address"),
//						Expiration:  pulumi.String("2022-02-27T04:00:00"),
//						Value:       pulumi.String("192.168.0.1"),
//					},
//				},
//				TargetColumn: pulumi.String("SrcIp"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Match List can be imported using the field id, e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/cseMatchList:CseMatchList match_list id
//
// ```
type CseMatchList struct {
	pulumi.CustomResourceState

	Created   pulumi.StringOutput `pulumi:"created"`
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The default time to live for match list items added through the UI. Specified in seconds.
	DefaultTtl pulumi.IntPtrOutput `pulumi:"defaultTtl"`
	// Match list description.
	Description pulumi.StringOutput `pulumi:"description"`
	// List of match list items. See matchListItem schema for details.
	Items         CseMatchListItemArrayOutput `pulumi:"items"`
	LastUpdated   pulumi.StringOutput         `pulumi:"lastUpdated"`
	LastUpdatedBy pulumi.StringOutput         `pulumi:"lastUpdatedBy"`
	// Match list name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
	TargetColumn pulumi.StringOutput `pulumi:"targetColumn"`
}

// NewCseMatchList registers a new resource with the given unique name, arguments, and options.
func NewCseMatchList(ctx *pulumi.Context,
	name string, args *CseMatchListArgs, opts ...pulumi.ResourceOption) (*CseMatchList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.TargetColumn == nil {
		return nil, errors.New("invalid value for required argument 'TargetColumn'")
	}
	var resource CseMatchList
	err := ctx.RegisterResource("sumologic:index/cseMatchList:CseMatchList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseMatchList gets an existing CseMatchList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseMatchList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseMatchListState, opts ...pulumi.ResourceOption) (*CseMatchList, error) {
	var resource CseMatchList
	err := ctx.ReadResource("sumologic:index/cseMatchList:CseMatchList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseMatchList resources.
type cseMatchListState struct {
	Created   *string `pulumi:"created"`
	CreatedBy *string `pulumi:"createdBy"`
	// The default time to live for match list items added through the UI. Specified in seconds.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Match list description.
	Description *string `pulumi:"description"`
	// List of match list items. See matchListItem schema for details.
	Items         []CseMatchListItem `pulumi:"items"`
	LastUpdated   *string            `pulumi:"lastUpdated"`
	LastUpdatedBy *string            `pulumi:"lastUpdatedBy"`
	// Match list name.
	Name *string `pulumi:"name"`
	// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
	TargetColumn *string `pulumi:"targetColumn"`
}

type CseMatchListState struct {
	Created   pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// The default time to live for match list items added through the UI. Specified in seconds.
	DefaultTtl pulumi.IntPtrInput
	// Match list description.
	Description pulumi.StringPtrInput
	// List of match list items. See matchListItem schema for details.
	Items         CseMatchListItemArrayInput
	LastUpdated   pulumi.StringPtrInput
	LastUpdatedBy pulumi.StringPtrInput
	// Match list name.
	Name pulumi.StringPtrInput
	// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
	TargetColumn pulumi.StringPtrInput
}

func (CseMatchListState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchListState)(nil)).Elem()
}

type cseMatchListArgs struct {
	// The default time to live for match list items added through the UI. Specified in seconds.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Match list description.
	Description string `pulumi:"description"`
	// List of match list items. See matchListItem schema for details.
	Items []CseMatchListItem `pulumi:"items"`
	// Match list name.
	Name *string `pulumi:"name"`
	// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
	TargetColumn string `pulumi:"targetColumn"`
}

// The set of arguments for constructing a CseMatchList resource.
type CseMatchListArgs struct {
	// The default time to live for match list items added through the UI. Specified in seconds.
	DefaultTtl pulumi.IntPtrInput
	// Match list description.
	Description pulumi.StringInput
	// List of match list items. See matchListItem schema for details.
	Items CseMatchListItemArrayInput
	// Match list name.
	Name pulumi.StringPtrInput
	// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
	TargetColumn pulumi.StringInput
}

func (CseMatchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseMatchListArgs)(nil)).Elem()
}

type CseMatchListInput interface {
	pulumi.Input

	ToCseMatchListOutput() CseMatchListOutput
	ToCseMatchListOutputWithContext(ctx context.Context) CseMatchListOutput
}

func (*CseMatchList) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchList)(nil)).Elem()
}

func (i *CseMatchList) ToCseMatchListOutput() CseMatchListOutput {
	return i.ToCseMatchListOutputWithContext(context.Background())
}

func (i *CseMatchList) ToCseMatchListOutputWithContext(ctx context.Context) CseMatchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchListOutput)
}

// CseMatchListArrayInput is an input type that accepts CseMatchListArray and CseMatchListArrayOutput values.
// You can construct a concrete instance of `CseMatchListArrayInput` via:
//
//	CseMatchListArray{ CseMatchListArgs{...} }
type CseMatchListArrayInput interface {
	pulumi.Input

	ToCseMatchListArrayOutput() CseMatchListArrayOutput
	ToCseMatchListArrayOutputWithContext(context.Context) CseMatchListArrayOutput
}

type CseMatchListArray []CseMatchListInput

func (CseMatchListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseMatchList)(nil)).Elem()
}

func (i CseMatchListArray) ToCseMatchListArrayOutput() CseMatchListArrayOutput {
	return i.ToCseMatchListArrayOutputWithContext(context.Background())
}

func (i CseMatchListArray) ToCseMatchListArrayOutputWithContext(ctx context.Context) CseMatchListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchListArrayOutput)
}

// CseMatchListMapInput is an input type that accepts CseMatchListMap and CseMatchListMapOutput values.
// You can construct a concrete instance of `CseMatchListMapInput` via:
//
//	CseMatchListMap{ "key": CseMatchListArgs{...} }
type CseMatchListMapInput interface {
	pulumi.Input

	ToCseMatchListMapOutput() CseMatchListMapOutput
	ToCseMatchListMapOutputWithContext(context.Context) CseMatchListMapOutput
}

type CseMatchListMap map[string]CseMatchListInput

func (CseMatchListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseMatchList)(nil)).Elem()
}

func (i CseMatchListMap) ToCseMatchListMapOutput() CseMatchListMapOutput {
	return i.ToCseMatchListMapOutputWithContext(context.Background())
}

func (i CseMatchListMap) ToCseMatchListMapOutputWithContext(ctx context.Context) CseMatchListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseMatchListMapOutput)
}

type CseMatchListOutput struct{ *pulumi.OutputState }

func (CseMatchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseMatchList)(nil)).Elem()
}

func (o CseMatchListOutput) ToCseMatchListOutput() CseMatchListOutput {
	return o
}

func (o CseMatchListOutput) ToCseMatchListOutputWithContext(ctx context.Context) CseMatchListOutput {
	return o
}

func (o CseMatchListOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o CseMatchListOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The default time to live for match list items added through the UI. Specified in seconds.
func (o CseMatchListOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.IntPtrOutput { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Match list description.
func (o CseMatchListOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of match list items. See matchListItem schema for details.
func (o CseMatchListOutput) Items() CseMatchListItemArrayOutput {
	return o.ApplyT(func(v *CseMatchList) CseMatchListItemArrayOutput { return v.Items }).(CseMatchListItemArrayOutput)
}

func (o CseMatchListOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

func (o CseMatchListOutput) LastUpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.LastUpdatedBy }).(pulumi.StringOutput)
}

// Match list name.
func (o CseMatchListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target column. (possible values: Hostname, FileHash, Url, SrcIp, DstIp, Domain, Username, Ip, Asn, Isp, Org, SrcAsn, SrcIsp, SrcOrg, DstAsn, DstIsp, DstOrg or any custom column.)
func (o CseMatchListOutput) TargetColumn() pulumi.StringOutput {
	return o.ApplyT(func(v *CseMatchList) pulumi.StringOutput { return v.TargetColumn }).(pulumi.StringOutput)
}

type CseMatchListArrayOutput struct{ *pulumi.OutputState }

func (CseMatchListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseMatchList)(nil)).Elem()
}

func (o CseMatchListArrayOutput) ToCseMatchListArrayOutput() CseMatchListArrayOutput {
	return o
}

func (o CseMatchListArrayOutput) ToCseMatchListArrayOutputWithContext(ctx context.Context) CseMatchListArrayOutput {
	return o
}

func (o CseMatchListArrayOutput) Index(i pulumi.IntInput) CseMatchListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseMatchList {
		return vs[0].([]*CseMatchList)[vs[1].(int)]
	}).(CseMatchListOutput)
}

type CseMatchListMapOutput struct{ *pulumi.OutputState }

func (CseMatchListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseMatchList)(nil)).Elem()
}

func (o CseMatchListMapOutput) ToCseMatchListMapOutput() CseMatchListMapOutput {
	return o
}

func (o CseMatchListMapOutput) ToCseMatchListMapOutputWithContext(ctx context.Context) CseMatchListMapOutput {
	return o
}

func (o CseMatchListMapOutput) MapIndex(k pulumi.StringInput) CseMatchListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseMatchList {
		return vs[0].(map[string]*CseMatchList)[vs[1].(string)]
	}).(CseMatchListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchListInput)(nil)).Elem(), &CseMatchList{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchListArrayInput)(nil)).Elem(), CseMatchListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseMatchListMapInput)(nil)).Elem(), CseMatchListMap{})
	pulumi.RegisterOutputType(CseMatchListOutput{})
	pulumi.RegisterOutputType(CseMatchListArrayOutput{})
	pulumi.RegisterOutputType(CseMatchListMapOutput{})
}
