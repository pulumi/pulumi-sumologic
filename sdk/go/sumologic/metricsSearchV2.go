// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a [Sumologic Metrics Search V2][1].
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			personalFolder, err := sumologic.GetPersonalFolder(ctx, &sumologic.GetPersonalFolderArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewMetricsSearchV2(ctx, "example_metrics_search", &sumologic.MetricsSearchV2Args{
//				Title:       pulumi.String("Demo Metrics Search"),
//				Description: pulumi.String("Demo search description"),
//				FolderId:    pulumi.String(personalFolder.Id),
//				Queries: sumologic.MetricsSearchV2QueryArray{
//					&sumologic.MetricsSearchV2QueryArgs{
//						QueryKey:         pulumi.String("A"),
//						QueryString:      pulumi.String("metric=cpu_idle | avg"),
//						QueryType:        pulumi.String("Metrics"),
//						MetricsQueryMode: pulumi.String("Advanced"),
//					},
//				},
//				TimeRange: &sumologic.MetricsSearchV2TimeRangeArgs{
//					BeginBoundedTimeRange: &sumologic.MetricsSearchV2TimeRangeBeginBoundedTimeRangeArgs{
//						From: &sumologic.MetricsSearchV2TimeRangeBeginBoundedTimeRangeFromArgs{
//							RelativeTimeRange: &sumologic.MetricsSearchV2TimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs{
//								RelativeTime: pulumi.String("-30m"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Attributes reference
//
// In addition to all arguments above, the following attributes are exported:
//
// - `id` - The ID of the metrics search.
//
// ## Import
//
// A metrics search can be imported using it's identifier, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/metricsSearchV2:MetricsSearchV2 example_search 0000000007FFD79D
// ```
//
// [1]: https://help.sumologic.com/docs/metrics/metrics-queries/metrics-explorer/
type MetricsSearchV2 struct {
	pulumi.CustomResourceState

	// Description of the search.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The identifier of the folder to create the metrics search in.
	FolderId pulumi.StringPtrOutput `pulumi:"folderId"`
	// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
	Queries MetricsSearchV2QueryArrayOutput `pulumi:"queries"`
	// Time range of the metrics search. See time range schema
	TimeRange MetricsSearchV2TimeRangeOutput `pulumi:"timeRange"`
	// Title of the search.
	Title          pulumi.StringOutput    `pulumi:"title"`
	VisualSettings pulumi.StringPtrOutput `pulumi:"visualSettings"`
}

// NewMetricsSearchV2 registers a new resource with the given unique name, arguments, and options.
func NewMetricsSearchV2(ctx *pulumi.Context,
	name string, args *MetricsSearchV2Args, opts ...pulumi.ResourceOption) (*MetricsSearchV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Queries == nil {
		return nil, errors.New("invalid value for required argument 'Queries'")
	}
	if args.TimeRange == nil {
		return nil, errors.New("invalid value for required argument 'TimeRange'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricsSearchV2
	err := ctx.RegisterResource("sumologic:index/metricsSearchV2:MetricsSearchV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricsSearchV2 gets an existing MetricsSearchV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricsSearchV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricsSearchV2State, opts ...pulumi.ResourceOption) (*MetricsSearchV2, error) {
	var resource MetricsSearchV2
	err := ctx.ReadResource("sumologic:index/metricsSearchV2:MetricsSearchV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricsSearchV2 resources.
type metricsSearchV2State struct {
	// Description of the search.
	Description *string `pulumi:"description"`
	// The identifier of the folder to create the metrics search in.
	FolderId *string `pulumi:"folderId"`
	// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
	Queries []MetricsSearchV2Query `pulumi:"queries"`
	// Time range of the metrics search. See time range schema
	TimeRange *MetricsSearchV2TimeRange `pulumi:"timeRange"`
	// Title of the search.
	Title          *string `pulumi:"title"`
	VisualSettings *string `pulumi:"visualSettings"`
}

type MetricsSearchV2State struct {
	// Description of the search.
	Description pulumi.StringPtrInput
	// The identifier of the folder to create the metrics search in.
	FolderId pulumi.StringPtrInput
	// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
	Queries MetricsSearchV2QueryArrayInput
	// Time range of the metrics search. See time range schema
	TimeRange MetricsSearchV2TimeRangePtrInput
	// Title of the search.
	Title          pulumi.StringPtrInput
	VisualSettings pulumi.StringPtrInput
}

func (MetricsSearchV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsSearchV2State)(nil)).Elem()
}

type metricsSearchV2Args struct {
	// Description of the search.
	Description *string `pulumi:"description"`
	// The identifier of the folder to create the metrics search in.
	FolderId *string `pulumi:"folderId"`
	// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
	Queries []MetricsSearchV2Query `pulumi:"queries"`
	// Time range of the metrics search. See time range schema
	TimeRange MetricsSearchV2TimeRange `pulumi:"timeRange"`
	// Title of the search.
	Title          string  `pulumi:"title"`
	VisualSettings *string `pulumi:"visualSettings"`
}

// The set of arguments for constructing a MetricsSearchV2 resource.
type MetricsSearchV2Args struct {
	// Description of the search.
	Description pulumi.StringPtrInput
	// The identifier of the folder to create the metrics search in.
	FolderId pulumi.StringPtrInput
	// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
	Queries MetricsSearchV2QueryArrayInput
	// Time range of the metrics search. See time range schema
	TimeRange MetricsSearchV2TimeRangeInput
	// Title of the search.
	Title          pulumi.StringInput
	VisualSettings pulumi.StringPtrInput
}

func (MetricsSearchV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*metricsSearchV2Args)(nil)).Elem()
}

type MetricsSearchV2Input interface {
	pulumi.Input

	ToMetricsSearchV2Output() MetricsSearchV2Output
	ToMetricsSearchV2OutputWithContext(ctx context.Context) MetricsSearchV2Output
}

func (*MetricsSearchV2) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsSearchV2)(nil)).Elem()
}

func (i *MetricsSearchV2) ToMetricsSearchV2Output() MetricsSearchV2Output {
	return i.ToMetricsSearchV2OutputWithContext(context.Background())
}

func (i *MetricsSearchV2) ToMetricsSearchV2OutputWithContext(ctx context.Context) MetricsSearchV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsSearchV2Output)
}

// MetricsSearchV2ArrayInput is an input type that accepts MetricsSearchV2Array and MetricsSearchV2ArrayOutput values.
// You can construct a concrete instance of `MetricsSearchV2ArrayInput` via:
//
//	MetricsSearchV2Array{ MetricsSearchV2Args{...} }
type MetricsSearchV2ArrayInput interface {
	pulumi.Input

	ToMetricsSearchV2ArrayOutput() MetricsSearchV2ArrayOutput
	ToMetricsSearchV2ArrayOutputWithContext(context.Context) MetricsSearchV2ArrayOutput
}

type MetricsSearchV2Array []MetricsSearchV2Input

func (MetricsSearchV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsSearchV2)(nil)).Elem()
}

func (i MetricsSearchV2Array) ToMetricsSearchV2ArrayOutput() MetricsSearchV2ArrayOutput {
	return i.ToMetricsSearchV2ArrayOutputWithContext(context.Background())
}

func (i MetricsSearchV2Array) ToMetricsSearchV2ArrayOutputWithContext(ctx context.Context) MetricsSearchV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsSearchV2ArrayOutput)
}

// MetricsSearchV2MapInput is an input type that accepts MetricsSearchV2Map and MetricsSearchV2MapOutput values.
// You can construct a concrete instance of `MetricsSearchV2MapInput` via:
//
//	MetricsSearchV2Map{ "key": MetricsSearchV2Args{...} }
type MetricsSearchV2MapInput interface {
	pulumi.Input

	ToMetricsSearchV2MapOutput() MetricsSearchV2MapOutput
	ToMetricsSearchV2MapOutputWithContext(context.Context) MetricsSearchV2MapOutput
}

type MetricsSearchV2Map map[string]MetricsSearchV2Input

func (MetricsSearchV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsSearchV2)(nil)).Elem()
}

func (i MetricsSearchV2Map) ToMetricsSearchV2MapOutput() MetricsSearchV2MapOutput {
	return i.ToMetricsSearchV2MapOutputWithContext(context.Background())
}

func (i MetricsSearchV2Map) ToMetricsSearchV2MapOutputWithContext(ctx context.Context) MetricsSearchV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricsSearchV2MapOutput)
}

type MetricsSearchV2Output struct{ *pulumi.OutputState }

func (MetricsSearchV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsSearchV2)(nil)).Elem()
}

func (o MetricsSearchV2Output) ToMetricsSearchV2Output() MetricsSearchV2Output {
	return o
}

func (o MetricsSearchV2Output) ToMetricsSearchV2OutputWithContext(ctx context.Context) MetricsSearchV2Output {
	return o
}

// Description of the search.
func (o MetricsSearchV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsSearchV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The identifier of the folder to create the metrics search in.
func (o MetricsSearchV2Output) FolderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsSearchV2) pulumi.StringPtrOutput { return v.FolderId }).(pulumi.StringPtrOutput)
}

// Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
func (o MetricsSearchV2Output) Queries() MetricsSearchV2QueryArrayOutput {
	return o.ApplyT(func(v *MetricsSearchV2) MetricsSearchV2QueryArrayOutput { return v.Queries }).(MetricsSearchV2QueryArrayOutput)
}

// Time range of the metrics search. See time range schema
func (o MetricsSearchV2Output) TimeRange() MetricsSearchV2TimeRangeOutput {
	return o.ApplyT(func(v *MetricsSearchV2) MetricsSearchV2TimeRangeOutput { return v.TimeRange }).(MetricsSearchV2TimeRangeOutput)
}

// Title of the search.
func (o MetricsSearchV2Output) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricsSearchV2) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

func (o MetricsSearchV2Output) VisualSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsSearchV2) pulumi.StringPtrOutput { return v.VisualSettings }).(pulumi.StringPtrOutput)
}

type MetricsSearchV2ArrayOutput struct{ *pulumi.OutputState }

func (MetricsSearchV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricsSearchV2)(nil)).Elem()
}

func (o MetricsSearchV2ArrayOutput) ToMetricsSearchV2ArrayOutput() MetricsSearchV2ArrayOutput {
	return o
}

func (o MetricsSearchV2ArrayOutput) ToMetricsSearchV2ArrayOutputWithContext(ctx context.Context) MetricsSearchV2ArrayOutput {
	return o
}

func (o MetricsSearchV2ArrayOutput) Index(i pulumi.IntInput) MetricsSearchV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricsSearchV2 {
		return vs[0].([]*MetricsSearchV2)[vs[1].(int)]
	}).(MetricsSearchV2Output)
}

type MetricsSearchV2MapOutput struct{ *pulumi.OutputState }

func (MetricsSearchV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricsSearchV2)(nil)).Elem()
}

func (o MetricsSearchV2MapOutput) ToMetricsSearchV2MapOutput() MetricsSearchV2MapOutput {
	return o
}

func (o MetricsSearchV2MapOutput) ToMetricsSearchV2MapOutputWithContext(ctx context.Context) MetricsSearchV2MapOutput {
	return o
}

func (o MetricsSearchV2MapOutput) MapIndex(k pulumi.StringInput) MetricsSearchV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricsSearchV2 {
		return vs[0].(map[string]*MetricsSearchV2)[vs[1].(string)]
	}).(MetricsSearchV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsSearchV2Input)(nil)).Elem(), &MetricsSearchV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsSearchV2ArrayInput)(nil)).Elem(), MetricsSearchV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricsSearchV2MapInput)(nil)).Elem(), MetricsSearchV2Map{})
	pulumi.RegisterOutputType(MetricsSearchV2Output{})
	pulumi.RegisterOutputType(MetricsSearchV2ArrayOutput{})
	pulumi.RegisterOutputType(MetricsSearchV2MapOutput{})
}
