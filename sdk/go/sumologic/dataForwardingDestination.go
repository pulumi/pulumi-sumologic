// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provider to manage [Sumologic Data Forwarding Destination](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#configure-an-s3-data-forwarding-destination)
type DataForwardingDestination struct {
	pulumi.CustomResourceState

	Authentication DataForwardingDestinationAuthenticationOutput `pulumi:"authentication"`
	// The name of the Amazon S3 bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Description of the S3 data forwarding destination.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the S3 data forwarding destination.
	DestinationName        pulumi.StringOutput    `pulumi:"destinationName"`
	Enabled                pulumi.BoolPtrOutput   `pulumi:"enabled"`
	S3Region               pulumi.StringPtrOutput `pulumi:"s3Region"`
	S3ServerSideEncryption pulumi.BoolPtrOutput   `pulumi:"s3ServerSideEncryption"`
}

// NewDataForwardingDestination registers a new resource with the given unique name, arguments, and options.
func NewDataForwardingDestination(ctx *pulumi.Context,
	name string, args *DataForwardingDestinationArgs, opts ...pulumi.ResourceOption) (*DataForwardingDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.DestinationName == nil {
		return nil, errors.New("invalid value for required argument 'DestinationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataForwardingDestination
	err := ctx.RegisterResource("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataForwardingDestination gets an existing DataForwardingDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataForwardingDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataForwardingDestinationState, opts ...pulumi.ResourceOption) (*DataForwardingDestination, error) {
	var resource DataForwardingDestination
	err := ctx.ReadResource("sumologic:index/dataForwardingDestination:DataForwardingDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataForwardingDestination resources.
type dataForwardingDestinationState struct {
	Authentication *DataForwardingDestinationAuthentication `pulumi:"authentication"`
	// The name of the Amazon S3 bucket.
	BucketName *string `pulumi:"bucketName"`
	// Description of the S3 data forwarding destination.
	Description *string `pulumi:"description"`
	// Name of the S3 data forwarding destination.
	DestinationName        *string `pulumi:"destinationName"`
	Enabled                *bool   `pulumi:"enabled"`
	S3Region               *string `pulumi:"s3Region"`
	S3ServerSideEncryption *bool   `pulumi:"s3ServerSideEncryption"`
}

type DataForwardingDestinationState struct {
	Authentication DataForwardingDestinationAuthenticationPtrInput
	// The name of the Amazon S3 bucket.
	BucketName pulumi.StringPtrInput
	// Description of the S3 data forwarding destination.
	Description pulumi.StringPtrInput
	// Name of the S3 data forwarding destination.
	DestinationName        pulumi.StringPtrInput
	Enabled                pulumi.BoolPtrInput
	S3Region               pulumi.StringPtrInput
	S3ServerSideEncryption pulumi.BoolPtrInput
}

func (DataForwardingDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataForwardingDestinationState)(nil)).Elem()
}

type dataForwardingDestinationArgs struct {
	Authentication DataForwardingDestinationAuthentication `pulumi:"authentication"`
	// The name of the Amazon S3 bucket.
	BucketName string `pulumi:"bucketName"`
	// Description of the S3 data forwarding destination.
	Description *string `pulumi:"description"`
	// Name of the S3 data forwarding destination.
	DestinationName        string  `pulumi:"destinationName"`
	Enabled                *bool   `pulumi:"enabled"`
	S3Region               *string `pulumi:"s3Region"`
	S3ServerSideEncryption *bool   `pulumi:"s3ServerSideEncryption"`
}

// The set of arguments for constructing a DataForwardingDestination resource.
type DataForwardingDestinationArgs struct {
	Authentication DataForwardingDestinationAuthenticationInput
	// The name of the Amazon S3 bucket.
	BucketName pulumi.StringInput
	// Description of the S3 data forwarding destination.
	Description pulumi.StringPtrInput
	// Name of the S3 data forwarding destination.
	DestinationName        pulumi.StringInput
	Enabled                pulumi.BoolPtrInput
	S3Region               pulumi.StringPtrInput
	S3ServerSideEncryption pulumi.BoolPtrInput
}

func (DataForwardingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataForwardingDestinationArgs)(nil)).Elem()
}

type DataForwardingDestinationInput interface {
	pulumi.Input

	ToDataForwardingDestinationOutput() DataForwardingDestinationOutput
	ToDataForwardingDestinationOutputWithContext(ctx context.Context) DataForwardingDestinationOutput
}

func (*DataForwardingDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**DataForwardingDestination)(nil)).Elem()
}

func (i *DataForwardingDestination) ToDataForwardingDestinationOutput() DataForwardingDestinationOutput {
	return i.ToDataForwardingDestinationOutputWithContext(context.Background())
}

func (i *DataForwardingDestination) ToDataForwardingDestinationOutputWithContext(ctx context.Context) DataForwardingDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataForwardingDestinationOutput)
}

// DataForwardingDestinationArrayInput is an input type that accepts DataForwardingDestinationArray and DataForwardingDestinationArrayOutput values.
// You can construct a concrete instance of `DataForwardingDestinationArrayInput` via:
//
//	DataForwardingDestinationArray{ DataForwardingDestinationArgs{...} }
type DataForwardingDestinationArrayInput interface {
	pulumi.Input

	ToDataForwardingDestinationArrayOutput() DataForwardingDestinationArrayOutput
	ToDataForwardingDestinationArrayOutputWithContext(context.Context) DataForwardingDestinationArrayOutput
}

type DataForwardingDestinationArray []DataForwardingDestinationInput

func (DataForwardingDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataForwardingDestination)(nil)).Elem()
}

func (i DataForwardingDestinationArray) ToDataForwardingDestinationArrayOutput() DataForwardingDestinationArrayOutput {
	return i.ToDataForwardingDestinationArrayOutputWithContext(context.Background())
}

func (i DataForwardingDestinationArray) ToDataForwardingDestinationArrayOutputWithContext(ctx context.Context) DataForwardingDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataForwardingDestinationArrayOutput)
}

// DataForwardingDestinationMapInput is an input type that accepts DataForwardingDestinationMap and DataForwardingDestinationMapOutput values.
// You can construct a concrete instance of `DataForwardingDestinationMapInput` via:
//
//	DataForwardingDestinationMap{ "key": DataForwardingDestinationArgs{...} }
type DataForwardingDestinationMapInput interface {
	pulumi.Input

	ToDataForwardingDestinationMapOutput() DataForwardingDestinationMapOutput
	ToDataForwardingDestinationMapOutputWithContext(context.Context) DataForwardingDestinationMapOutput
}

type DataForwardingDestinationMap map[string]DataForwardingDestinationInput

func (DataForwardingDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataForwardingDestination)(nil)).Elem()
}

func (i DataForwardingDestinationMap) ToDataForwardingDestinationMapOutput() DataForwardingDestinationMapOutput {
	return i.ToDataForwardingDestinationMapOutputWithContext(context.Background())
}

func (i DataForwardingDestinationMap) ToDataForwardingDestinationMapOutputWithContext(ctx context.Context) DataForwardingDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataForwardingDestinationMapOutput)
}

type DataForwardingDestinationOutput struct{ *pulumi.OutputState }

func (DataForwardingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataForwardingDestination)(nil)).Elem()
}

func (o DataForwardingDestinationOutput) ToDataForwardingDestinationOutput() DataForwardingDestinationOutput {
	return o
}

func (o DataForwardingDestinationOutput) ToDataForwardingDestinationOutputWithContext(ctx context.Context) DataForwardingDestinationOutput {
	return o
}

func (o DataForwardingDestinationOutput) Authentication() DataForwardingDestinationAuthenticationOutput {
	return o.ApplyT(func(v *DataForwardingDestination) DataForwardingDestinationAuthenticationOutput {
		return v.Authentication
	}).(DataForwardingDestinationAuthenticationOutput)
}

// The name of the Amazon S3 bucket.
func (o DataForwardingDestinationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Description of the S3 data forwarding destination.
func (o DataForwardingDestinationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the S3 data forwarding destination.
func (o DataForwardingDestinationOutput) DestinationName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.StringOutput { return v.DestinationName }).(pulumi.StringOutput)
}

func (o DataForwardingDestinationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o DataForwardingDestinationOutput) S3Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.StringPtrOutput { return v.S3Region }).(pulumi.StringPtrOutput)
}

func (o DataForwardingDestinationOutput) S3ServerSideEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataForwardingDestination) pulumi.BoolPtrOutput { return v.S3ServerSideEncryption }).(pulumi.BoolPtrOutput)
}

type DataForwardingDestinationArrayOutput struct{ *pulumi.OutputState }

func (DataForwardingDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataForwardingDestination)(nil)).Elem()
}

func (o DataForwardingDestinationArrayOutput) ToDataForwardingDestinationArrayOutput() DataForwardingDestinationArrayOutput {
	return o
}

func (o DataForwardingDestinationArrayOutput) ToDataForwardingDestinationArrayOutputWithContext(ctx context.Context) DataForwardingDestinationArrayOutput {
	return o
}

func (o DataForwardingDestinationArrayOutput) Index(i pulumi.IntInput) DataForwardingDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataForwardingDestination {
		return vs[0].([]*DataForwardingDestination)[vs[1].(int)]
	}).(DataForwardingDestinationOutput)
}

type DataForwardingDestinationMapOutput struct{ *pulumi.OutputState }

func (DataForwardingDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataForwardingDestination)(nil)).Elem()
}

func (o DataForwardingDestinationMapOutput) ToDataForwardingDestinationMapOutput() DataForwardingDestinationMapOutput {
	return o
}

func (o DataForwardingDestinationMapOutput) ToDataForwardingDestinationMapOutputWithContext(ctx context.Context) DataForwardingDestinationMapOutput {
	return o
}

func (o DataForwardingDestinationMapOutput) MapIndex(k pulumi.StringInput) DataForwardingDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataForwardingDestination {
		return vs[0].(map[string]*DataForwardingDestination)[vs[1].(string)]
	}).(DataForwardingDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataForwardingDestinationInput)(nil)).Elem(), &DataForwardingDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataForwardingDestinationArrayInput)(nil)).Elem(), DataForwardingDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataForwardingDestinationMapInput)(nil)).Elem(), DataForwardingDestinationMap{})
	pulumi.RegisterOutputType(DataForwardingDestinationOutput{})
	pulumi.RegisterOutputType(DataForwardingDestinationArrayOutput{})
	pulumi.RegisterOutputType(DataForwardingDestinationMapOutput{})
}
