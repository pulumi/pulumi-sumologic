// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewOtCollector(ctx, "example_ot_collector", &sumologic.OtCollectorArgs{
//				Description:       pulumi.String("Testing OT collector using terraform"),
//				TimeZone:          pulumi.String("UTC"),
//				Category:          pulumi.String("apache"),
//				IsRemotelyManaged: pulumi.Bool(true),
//				Ephemeral:         pulumi.Bool(false),
//				Name:              pulumi.String("test OT Collector"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OT Collectors can be imported using the collector id, e.g.:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/otCollector:OtCollector test 00005AF3107A4007
// ```
//
// [1]: https://help.sumologic.com/docs/send-data/opentelemetry-collector
// [2]: https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral
// [3]: https://help.sumologic.com/Manage/Fields
// [4]: https://en.wikipedia.org/wiki/Tz_database
type OtCollector struct {
	pulumi.CustomResourceState

	Alive pulumi.BoolOutput `pulumi:"alive"`
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category  pulumi.StringPtrOutput `pulumi:"category"`
	CreatedAt pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy pulumi.StringOutput    `pulumi:"createdBy"`
	// Description of the OT Collector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
	Ephemeral pulumi.BoolPtrOutput `pulumi:"ephemeral"`
	// Management Status of the OT Collector based on if it is remotely or locally managed.
	IsRemotelyManaged pulumi.BoolPtrOutput `pulumi:"isRemotelyManaged"`
	ModifiedAt        pulumi.StringOutput  `pulumi:"modifiedAt"`
	ModifiedBy        pulumi.StringOutput  `pulumi:"modifiedBy"`
	// Name of the OT Collector.
	Name pulumi.StringOutput `pulumi:"name"`
	// Map containing [key/value pairs][3].
	//
	// The following attributes are exported:
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
}

// NewOtCollector registers a new resource with the given unique name, arguments, and options.
func NewOtCollector(ctx *pulumi.Context,
	name string, args *OtCollectorArgs, opts ...pulumi.ResourceOption) (*OtCollector, error) {
	if args == nil {
		args = &OtCollectorArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OtCollector
	err := ctx.RegisterResource("sumologic:index/otCollector:OtCollector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOtCollector gets an existing OtCollector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOtCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OtCollectorState, opts ...pulumi.ResourceOption) (*OtCollector, error) {
	var resource OtCollector
	err := ctx.ReadResource("sumologic:index/otCollector:OtCollector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OtCollector resources.
type otCollectorState struct {
	Alive *bool `pulumi:"alive"`
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category  *string `pulumi:"category"`
	CreatedAt *string `pulumi:"createdAt"`
	CreatedBy *string `pulumi:"createdBy"`
	// Description of the OT Collector.
	Description *string `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
	Ephemeral *bool `pulumi:"ephemeral"`
	// Management Status of the OT Collector based on if it is remotely or locally managed.
	IsRemotelyManaged *bool   `pulumi:"isRemotelyManaged"`
	ModifiedAt        *string `pulumi:"modifiedAt"`
	ModifiedBy        *string `pulumi:"modifiedBy"`
	// Name of the OT Collector.
	Name *string `pulumi:"name"`
	// Map containing [key/value pairs][3].
	//
	// The following attributes are exported:
	Tags map[string]string `pulumi:"tags"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	TimeZone *string `pulumi:"timeZone"`
}

type OtCollectorState struct {
	Alive pulumi.BoolPtrInput
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category  pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	CreatedBy pulumi.StringPtrInput
	// Description of the OT Collector.
	Description pulumi.StringPtrInput
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
	Ephemeral pulumi.BoolPtrInput
	// Management Status of the OT Collector based on if it is remotely or locally managed.
	IsRemotelyManaged pulumi.BoolPtrInput
	ModifiedAt        pulumi.StringPtrInput
	ModifiedBy        pulumi.StringPtrInput
	// Name of the OT Collector.
	Name pulumi.StringPtrInput
	// Map containing [key/value pairs][3].
	//
	// The following attributes are exported:
	Tags pulumi.StringMapInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	TimeZone pulumi.StringPtrInput
}

func (OtCollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*otCollectorState)(nil)).Elem()
}

type otCollectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category *string `pulumi:"category"`
	// Description of the OT Collector.
	Description *string `pulumi:"description"`
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
	Ephemeral *bool `pulumi:"ephemeral"`
	// Management Status of the OT Collector based on if it is remotely or locally managed.
	IsRemotelyManaged *bool `pulumi:"isRemotelyManaged"`
	// Name of the OT Collector.
	Name *string `pulumi:"name"`
	// Map containing [key/value pairs][3].
	//
	// The following attributes are exported:
	Tags map[string]string `pulumi:"tags"`
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a OtCollector resource.
type OtCollectorArgs struct {
	// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
	Category pulumi.StringPtrInput
	// Description of the OT Collector.
	Description pulumi.StringPtrInput
	// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
	Ephemeral pulumi.BoolPtrInput
	// Management Status of the OT Collector based on if it is remotely or locally managed.
	IsRemotelyManaged pulumi.BoolPtrInput
	// Name of the OT Collector.
	Name pulumi.StringPtrInput
	// Map containing [key/value pairs][3].
	//
	// The following attributes are exported:
	Tags pulumi.StringMapInput
	// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
	TimeZone pulumi.StringPtrInput
}

func (OtCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*otCollectorArgs)(nil)).Elem()
}

type OtCollectorInput interface {
	pulumi.Input

	ToOtCollectorOutput() OtCollectorOutput
	ToOtCollectorOutputWithContext(ctx context.Context) OtCollectorOutput
}

func (*OtCollector) ElementType() reflect.Type {
	return reflect.TypeOf((**OtCollector)(nil)).Elem()
}

func (i *OtCollector) ToOtCollectorOutput() OtCollectorOutput {
	return i.ToOtCollectorOutputWithContext(context.Background())
}

func (i *OtCollector) ToOtCollectorOutputWithContext(ctx context.Context) OtCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtCollectorOutput)
}

// OtCollectorArrayInput is an input type that accepts OtCollectorArray and OtCollectorArrayOutput values.
// You can construct a concrete instance of `OtCollectorArrayInput` via:
//
//	OtCollectorArray{ OtCollectorArgs{...} }
type OtCollectorArrayInput interface {
	pulumi.Input

	ToOtCollectorArrayOutput() OtCollectorArrayOutput
	ToOtCollectorArrayOutputWithContext(context.Context) OtCollectorArrayOutput
}

type OtCollectorArray []OtCollectorInput

func (OtCollectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OtCollector)(nil)).Elem()
}

func (i OtCollectorArray) ToOtCollectorArrayOutput() OtCollectorArrayOutput {
	return i.ToOtCollectorArrayOutputWithContext(context.Background())
}

func (i OtCollectorArray) ToOtCollectorArrayOutputWithContext(ctx context.Context) OtCollectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtCollectorArrayOutput)
}

// OtCollectorMapInput is an input type that accepts OtCollectorMap and OtCollectorMapOutput values.
// You can construct a concrete instance of `OtCollectorMapInput` via:
//
//	OtCollectorMap{ "key": OtCollectorArgs{...} }
type OtCollectorMapInput interface {
	pulumi.Input

	ToOtCollectorMapOutput() OtCollectorMapOutput
	ToOtCollectorMapOutputWithContext(context.Context) OtCollectorMapOutput
}

type OtCollectorMap map[string]OtCollectorInput

func (OtCollectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OtCollector)(nil)).Elem()
}

func (i OtCollectorMap) ToOtCollectorMapOutput() OtCollectorMapOutput {
	return i.ToOtCollectorMapOutputWithContext(context.Background())
}

func (i OtCollectorMap) ToOtCollectorMapOutputWithContext(ctx context.Context) OtCollectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtCollectorMapOutput)
}

type OtCollectorOutput struct{ *pulumi.OutputState }

func (OtCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtCollector)(nil)).Elem()
}

func (o OtCollectorOutput) ToOtCollectorOutput() OtCollectorOutput {
	return o
}

func (o OtCollectorOutput) ToOtCollectorOutputWithContext(ctx context.Context) OtCollectorOutput {
	return o
}

func (o OtCollectorOutput) Alive() pulumi.BoolOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.BoolOutput { return v.Alive }).(pulumi.BoolOutput)
}

// The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
func (o OtCollectorOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o OtCollectorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o OtCollectorOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Description of the OT Collector.
func (o OtCollectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
func (o OtCollectorOutput) Ephemeral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.BoolPtrOutput { return v.Ephemeral }).(pulumi.BoolPtrOutput)
}

// Management Status of the OT Collector based on if it is remotely or locally managed.
func (o OtCollectorOutput) IsRemotelyManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.BoolPtrOutput { return v.IsRemotelyManaged }).(pulumi.BoolPtrOutput)
}

func (o OtCollectorOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o OtCollectorOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// Name of the OT Collector.
func (o OtCollectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Map containing [key/value pairs][3].
//
// The following attributes are exported:
func (o OtCollectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
func (o OtCollectorOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtCollector) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type OtCollectorArrayOutput struct{ *pulumi.OutputState }

func (OtCollectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OtCollector)(nil)).Elem()
}

func (o OtCollectorArrayOutput) ToOtCollectorArrayOutput() OtCollectorArrayOutput {
	return o
}

func (o OtCollectorArrayOutput) ToOtCollectorArrayOutputWithContext(ctx context.Context) OtCollectorArrayOutput {
	return o
}

func (o OtCollectorArrayOutput) Index(i pulumi.IntInput) OtCollectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OtCollector {
		return vs[0].([]*OtCollector)[vs[1].(int)]
	}).(OtCollectorOutput)
}

type OtCollectorMapOutput struct{ *pulumi.OutputState }

func (OtCollectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OtCollector)(nil)).Elem()
}

func (o OtCollectorMapOutput) ToOtCollectorMapOutput() OtCollectorMapOutput {
	return o
}

func (o OtCollectorMapOutput) ToOtCollectorMapOutputWithContext(ctx context.Context) OtCollectorMapOutput {
	return o
}

func (o OtCollectorMapOutput) MapIndex(k pulumi.StringInput) OtCollectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OtCollector {
		return vs[0].(map[string]*OtCollector)[vs[1].(string)]
	}).(OtCollectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OtCollectorInput)(nil)).Elem(), &OtCollector{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtCollectorArrayInput)(nil)).Elem(), OtCollectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtCollectorMapInput)(nil)).Elem(), OtCollectorMap{})
	pulumi.RegisterOutputType(OtCollectorOutput{})
	pulumi.RegisterOutputType(OtCollectorArrayOutput{})
	pulumi.RegisterOutputType(OtCollectorMapOutput{})
}
