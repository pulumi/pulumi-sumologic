// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.LookupHttpSource(ctx, &sumologic.LookupHttpSourceArgs{
//				CollectorId: pulumi.IntRef(121212),
//				Name:        pulumi.StringRef("source_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// A HTTP Source can be looked up by using a combination of `collectorId` & `name`.
// If either `id` or `name` are not present, the data source block fails with a panic (at this point).
// ## Attributes reference
//
// The following attributes are exported:
//
// - `id` - The internal ID of the collector. This can be used to attach sources to the collector.
// - `name` - The name of the collector.
// - `description` - The description of the collector.
// - `category` - The default source category for any source attached to this collector.
// - `timezone` - The time zone to use for this collector. The value follows the [tzdata][2] naming convention.
// - `multiline` - Multiline processing enabled or not.
// - `url` - The HTTP endpoint to use for sending data to this source.
func LookupHttpSource(ctx *pulumi.Context, args *LookupHttpSourceArgs, opts ...pulumi.InvokeOption) (*LookupHttpSourceResult, error) {
	var rv LookupHttpSourceResult
	err := ctx.Invoke("sumologic:index/getHttpSource:getHttpSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHttpSource.
type LookupHttpSourceArgs struct {
	CollectorId *int    `pulumi:"collectorId"`
	Id          *int    `pulumi:"id"`
	Name        *string `pulumi:"name"`
}

// A collection of values returned by getHttpSource.
type LookupHttpSourceResult struct {
	Category    string  `pulumi:"category"`
	CollectorId *int    `pulumi:"collectorId"`
	Description string  `pulumi:"description"`
	Id          int     `pulumi:"id"`
	Multiline   bool    `pulumi:"multiline"`
	Name        *string `pulumi:"name"`
	Timezone    string  `pulumi:"timezone"`
	Url         string  `pulumi:"url"`
}

func LookupHttpSourceOutput(ctx *pulumi.Context, args LookupHttpSourceOutputArgs, opts ...pulumi.InvokeOption) LookupHttpSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHttpSourceResult, error) {
			args := v.(LookupHttpSourceArgs)
			r, err := LookupHttpSource(ctx, &args, opts...)
			var s LookupHttpSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHttpSourceResultOutput)
}

// A collection of arguments for invoking getHttpSource.
type LookupHttpSourceOutputArgs struct {
	CollectorId pulumi.IntPtrInput    `pulumi:"collectorId"`
	Id          pulumi.IntPtrInput    `pulumi:"id"`
	Name        pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupHttpSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHttpSourceArgs)(nil)).Elem()
}

// A collection of values returned by getHttpSource.
type LookupHttpSourceResultOutput struct{ *pulumi.OutputState }

func (LookupHttpSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHttpSourceResult)(nil)).Elem()
}

func (o LookupHttpSourceResultOutput) ToLookupHttpSourceResultOutput() LookupHttpSourceResultOutput {
	return o
}

func (o LookupHttpSourceResultOutput) ToLookupHttpSourceResultOutputWithContext(ctx context.Context) LookupHttpSourceResultOutput {
	return o
}

func (o LookupHttpSourceResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) string { return v.Category }).(pulumi.StringOutput)
}

func (o LookupHttpSourceResultOutput) CollectorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) *int { return v.CollectorId }).(pulumi.IntPtrOutput)
}

func (o LookupHttpSourceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupHttpSourceResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupHttpSourceResultOutput) Multiline() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) bool { return v.Multiline }).(pulumi.BoolOutput)
}

func (o LookupHttpSourceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupHttpSourceResultOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) string { return v.Timezone }).(pulumi.StringOutput)
}

func (o LookupHttpSourceResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHttpSourceResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHttpSourceResultOutput{})
}
