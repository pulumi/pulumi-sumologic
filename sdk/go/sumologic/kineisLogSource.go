// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumologic Kinesis Log source. This source is used to ingest log via Kinesis Firehose from AWS.
//
// __IMPORTANT:__ The AWS credentials are stored in plain-text in the state. This is a potential security issue.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Kinesis Log sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kineisLogSource:KineisLogSource test 123/456
// ```
//
//  HTTP sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/kineisLogSource:KineisLogSource test my-test-collector/my-test-source
// ```
//
//  [1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
type KineisLogSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the S3 bucket.
	Authentication       KineisLogSourceAuthenticationPtrOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                   `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput                 `pulumi:"category"`
	CollectorId          pulumi.IntOutput                       `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                         `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                      `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                         `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         KineisLogSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                      `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                      `pulumi:"fields"`
	Filters                    KineisLogSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                        `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                      `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                      `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          pulumi.BoolPtrOutput                        `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                        `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                         `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path     KineisLogSourcePathPtrOutput `pulumi:"path"`
	Timezone pulumi.StringPtrOutput       `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringOutput  `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput `pulumi:"useAutolineMatching"`
}

// NewKineisLogSource registers a new resource with the given unique name, arguments, and options.
func NewKineisLogSource(ctx *pulumi.Context,
	name string, args *KineisLogSourceArgs, opts ...pulumi.ResourceOption) (*KineisLogSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	var resource KineisLogSource
	err := ctx.RegisterResource("sumologic:index/kineisLogSource:KineisLogSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKineisLogSource gets an existing KineisLogSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKineisLogSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KineisLogSourceState, opts ...pulumi.ResourceOption) (*KineisLogSource, error) {
	var resource KineisLogSource
	err := ctx.ReadResource("sumologic:index/kineisLogSource:KineisLogSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KineisLogSource resources.
type kineisLogSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *KineisLogSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                          `pulumi:"automaticDateParsing"`
	Category             *string                        `pulumi:"category"`
	CollectorId          *int                           `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                            `pulumi:"contentType"`
	CutoffRelativeTime         *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KineisLogSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                            `pulumi:"description"`
	Fields                     map[string]string                  `pulumi:"fields"`
	Filters                    []KineisLogSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                              `pulumi:"forceTimezone"`
	HostName                   *string                            `pulumi:"hostName"`
	ManualPrefixRegexp         *string                            `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                              `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                              `pulumi:"multilineProcessingEnabled"`
	Name                       *string                            `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path     *KineisLogSourcePath `pulumi:"path"`
	Timezone *string              `pulumi:"timezone"`
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type KineisLogSourceState struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KineisLogSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KineisLogSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KineisLogSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location of S3 bucket for failed Kinesis log data.
	Path     KineisLogSourcePathPtrInput
	Timezone pulumi.StringPtrInput
	// The HTTP endpoint to used while creating Kinesis Firehose on AWS.
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KineisLogSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kineisLogSourceState)(nil)).Elem()
}

type kineisLogSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       *KineisLogSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                          `pulumi:"automaticDateParsing"`
	Category             *string                        `pulumi:"category"`
	CollectorId          int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                            `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                               `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []KineisLogSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                            `pulumi:"description"`
	Fields                     map[string]string                  `pulumi:"fields"`
	Filters                    []KineisLogSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                              `pulumi:"forceTimezone"`
	HostName                   *string                            `pulumi:"hostName"`
	ManualPrefixRegexp         *string                            `pulumi:"manualPrefixRegexp"`
	MessagePerRequest          *bool                              `pulumi:"messagePerRequest"`
	MultilineProcessingEnabled *bool                              `pulumi:"multilineProcessingEnabled"`
	Name                       *string                            `pulumi:"name"`
	// The location of S3 bucket for failed Kinesis log data.
	Path                *KineisLogSourcePath `pulumi:"path"`
	Timezone            *string              `pulumi:"timezone"`
	UseAutolineMatching *bool                `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a KineisLogSource resource.
type KineisLogSourceArgs struct {
	// Authentication details for connecting to the S3 bucket.
	Authentication       KineisLogSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         KineisLogSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    KineisLogSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MessagePerRequest          pulumi.BoolPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// The location of S3 bucket for failed Kinesis log data.
	Path                KineisLogSourcePathPtrInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (KineisLogSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kineisLogSourceArgs)(nil)).Elem()
}

type KineisLogSourceInput interface {
	pulumi.Input

	ToKineisLogSourceOutput() KineisLogSourceOutput
	ToKineisLogSourceOutputWithContext(ctx context.Context) KineisLogSourceOutput
}

func (*KineisLogSource) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSource)(nil)).Elem()
}

func (i *KineisLogSource) ToKineisLogSourceOutput() KineisLogSourceOutput {
	return i.ToKineisLogSourceOutputWithContext(context.Background())
}

func (i *KineisLogSource) ToKineisLogSourceOutputWithContext(ctx context.Context) KineisLogSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceOutput)
}

// KineisLogSourceArrayInput is an input type that accepts KineisLogSourceArray and KineisLogSourceArrayOutput values.
// You can construct a concrete instance of `KineisLogSourceArrayInput` via:
//
//          KineisLogSourceArray{ KineisLogSourceArgs{...} }
type KineisLogSourceArrayInput interface {
	pulumi.Input

	ToKineisLogSourceArrayOutput() KineisLogSourceArrayOutput
	ToKineisLogSourceArrayOutputWithContext(context.Context) KineisLogSourceArrayOutput
}

type KineisLogSourceArray []KineisLogSourceInput

func (KineisLogSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KineisLogSource)(nil)).Elem()
}

func (i KineisLogSourceArray) ToKineisLogSourceArrayOutput() KineisLogSourceArrayOutput {
	return i.ToKineisLogSourceArrayOutputWithContext(context.Background())
}

func (i KineisLogSourceArray) ToKineisLogSourceArrayOutputWithContext(ctx context.Context) KineisLogSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceArrayOutput)
}

// KineisLogSourceMapInput is an input type that accepts KineisLogSourceMap and KineisLogSourceMapOutput values.
// You can construct a concrete instance of `KineisLogSourceMapInput` via:
//
//          KineisLogSourceMap{ "key": KineisLogSourceArgs{...} }
type KineisLogSourceMapInput interface {
	pulumi.Input

	ToKineisLogSourceMapOutput() KineisLogSourceMapOutput
	ToKineisLogSourceMapOutputWithContext(context.Context) KineisLogSourceMapOutput
}

type KineisLogSourceMap map[string]KineisLogSourceInput

func (KineisLogSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KineisLogSource)(nil)).Elem()
}

func (i KineisLogSourceMap) ToKineisLogSourceMapOutput() KineisLogSourceMapOutput {
	return i.ToKineisLogSourceMapOutputWithContext(context.Background())
}

func (i KineisLogSourceMap) ToKineisLogSourceMapOutputWithContext(ctx context.Context) KineisLogSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KineisLogSourceMapOutput)
}

type KineisLogSourceOutput struct{ *pulumi.OutputState }

func (KineisLogSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KineisLogSource)(nil)).Elem()
}

func (o KineisLogSourceOutput) ToKineisLogSourceOutput() KineisLogSourceOutput {
	return o
}

func (o KineisLogSourceOutput) ToKineisLogSourceOutputWithContext(ctx context.Context) KineisLogSourceOutput {
	return o
}

type KineisLogSourceArrayOutput struct{ *pulumi.OutputState }

func (KineisLogSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KineisLogSource)(nil)).Elem()
}

func (o KineisLogSourceArrayOutput) ToKineisLogSourceArrayOutput() KineisLogSourceArrayOutput {
	return o
}

func (o KineisLogSourceArrayOutput) ToKineisLogSourceArrayOutputWithContext(ctx context.Context) KineisLogSourceArrayOutput {
	return o
}

func (o KineisLogSourceArrayOutput) Index(i pulumi.IntInput) KineisLogSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KineisLogSource {
		return vs[0].([]*KineisLogSource)[vs[1].(int)]
	}).(KineisLogSourceOutput)
}

type KineisLogSourceMapOutput struct{ *pulumi.OutputState }

func (KineisLogSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KineisLogSource)(nil)).Elem()
}

func (o KineisLogSourceMapOutput) ToKineisLogSourceMapOutput() KineisLogSourceMapOutput {
	return o
}

func (o KineisLogSourceMapOutput) ToKineisLogSourceMapOutputWithContext(ctx context.Context) KineisLogSourceMapOutput {
	return o
}

func (o KineisLogSourceMapOutput) MapIndex(k pulumi.StringInput) KineisLogSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KineisLogSource {
		return vs[0].(map[string]*KineisLogSource)[vs[1].(string)]
	}).(KineisLogSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceInput)(nil)).Elem(), &KineisLogSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceArrayInput)(nil)).Elem(), KineisLogSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KineisLogSourceMapInput)(nil)).Elem(), KineisLogSourceMap{})
	pulumi.RegisterOutputType(KineisLogSourceOutput{})
	pulumi.RegisterOutputType(KineisLogSourceArrayOutput{})
	pulumi.RegisterOutputType(KineisLogSourceMapOutput{})
}
