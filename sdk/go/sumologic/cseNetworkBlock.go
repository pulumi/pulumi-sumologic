// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sumo Logic CSE Network Block.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseNetworkBlock(ctx, "networkBlock", &sumologic.CseNetworkBlockArgs{
// 			AddressBlock:      pulumi.String("10.0.1.0/26"),
// 			Internal:          pulumi.Bool(true),
// 			Label:             pulumi.String("network block from terraform"),
// 			SuppressesSignals: pulumi.Bool(false),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Network Block can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseNetworkBlock:CseNetworkBlock network_block id
// ```
type CseNetworkBlock struct {
	pulumi.CustomResourceState

	// The address block.
	AddressBlock pulumi.StringOutput `pulumi:"addressBlock"`
	// Internal flag.
	Internal pulumi.BoolPtrOutput `pulumi:"internal"`
	// The displayable label of the address block.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// Suppresses signal flag.
	SuppressesSignals pulumi.BoolPtrOutput `pulumi:"suppressesSignals"`
}

// NewCseNetworkBlock registers a new resource with the given unique name, arguments, and options.
func NewCseNetworkBlock(ctx *pulumi.Context,
	name string, args *CseNetworkBlockArgs, opts ...pulumi.ResourceOption) (*CseNetworkBlock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressBlock == nil {
		return nil, errors.New("invalid value for required argument 'AddressBlock'")
	}
	var resource CseNetworkBlock
	err := ctx.RegisterResource("sumologic:index/cseNetworkBlock:CseNetworkBlock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseNetworkBlock gets an existing CseNetworkBlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseNetworkBlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseNetworkBlockState, opts ...pulumi.ResourceOption) (*CseNetworkBlock, error) {
	var resource CseNetworkBlock
	err := ctx.ReadResource("sumologic:index/cseNetworkBlock:CseNetworkBlock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseNetworkBlock resources.
type cseNetworkBlockState struct {
	// The address block.
	AddressBlock *string `pulumi:"addressBlock"`
	// Internal flag.
	Internal *bool `pulumi:"internal"`
	// The displayable label of the address block.
	Label *string `pulumi:"label"`
	// Suppresses signal flag.
	SuppressesSignals *bool `pulumi:"suppressesSignals"`
}

type CseNetworkBlockState struct {
	// The address block.
	AddressBlock pulumi.StringPtrInput
	// Internal flag.
	Internal pulumi.BoolPtrInput
	// The displayable label of the address block.
	Label pulumi.StringPtrInput
	// Suppresses signal flag.
	SuppressesSignals pulumi.BoolPtrInput
}

func (CseNetworkBlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseNetworkBlockState)(nil)).Elem()
}

type cseNetworkBlockArgs struct {
	// The address block.
	AddressBlock string `pulumi:"addressBlock"`
	// Internal flag.
	Internal *bool `pulumi:"internal"`
	// The displayable label of the address block.
	Label *string `pulumi:"label"`
	// Suppresses signal flag.
	SuppressesSignals *bool `pulumi:"suppressesSignals"`
}

// The set of arguments for constructing a CseNetworkBlock resource.
type CseNetworkBlockArgs struct {
	// The address block.
	AddressBlock pulumi.StringInput
	// Internal flag.
	Internal pulumi.BoolPtrInput
	// The displayable label of the address block.
	Label pulumi.StringPtrInput
	// Suppresses signal flag.
	SuppressesSignals pulumi.BoolPtrInput
}

func (CseNetworkBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseNetworkBlockArgs)(nil)).Elem()
}

type CseNetworkBlockInput interface {
	pulumi.Input

	ToCseNetworkBlockOutput() CseNetworkBlockOutput
	ToCseNetworkBlockOutputWithContext(ctx context.Context) CseNetworkBlockOutput
}

func (*CseNetworkBlock) ElementType() reflect.Type {
	return reflect.TypeOf((**CseNetworkBlock)(nil)).Elem()
}

func (i *CseNetworkBlock) ToCseNetworkBlockOutput() CseNetworkBlockOutput {
	return i.ToCseNetworkBlockOutputWithContext(context.Background())
}

func (i *CseNetworkBlock) ToCseNetworkBlockOutputWithContext(ctx context.Context) CseNetworkBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseNetworkBlockOutput)
}

// CseNetworkBlockArrayInput is an input type that accepts CseNetworkBlockArray and CseNetworkBlockArrayOutput values.
// You can construct a concrete instance of `CseNetworkBlockArrayInput` via:
//
//          CseNetworkBlockArray{ CseNetworkBlockArgs{...} }
type CseNetworkBlockArrayInput interface {
	pulumi.Input

	ToCseNetworkBlockArrayOutput() CseNetworkBlockArrayOutput
	ToCseNetworkBlockArrayOutputWithContext(context.Context) CseNetworkBlockArrayOutput
}

type CseNetworkBlockArray []CseNetworkBlockInput

func (CseNetworkBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseNetworkBlock)(nil)).Elem()
}

func (i CseNetworkBlockArray) ToCseNetworkBlockArrayOutput() CseNetworkBlockArrayOutput {
	return i.ToCseNetworkBlockArrayOutputWithContext(context.Background())
}

func (i CseNetworkBlockArray) ToCseNetworkBlockArrayOutputWithContext(ctx context.Context) CseNetworkBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseNetworkBlockArrayOutput)
}

// CseNetworkBlockMapInput is an input type that accepts CseNetworkBlockMap and CseNetworkBlockMapOutput values.
// You can construct a concrete instance of `CseNetworkBlockMapInput` via:
//
//          CseNetworkBlockMap{ "key": CseNetworkBlockArgs{...} }
type CseNetworkBlockMapInput interface {
	pulumi.Input

	ToCseNetworkBlockMapOutput() CseNetworkBlockMapOutput
	ToCseNetworkBlockMapOutputWithContext(context.Context) CseNetworkBlockMapOutput
}

type CseNetworkBlockMap map[string]CseNetworkBlockInput

func (CseNetworkBlockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseNetworkBlock)(nil)).Elem()
}

func (i CseNetworkBlockMap) ToCseNetworkBlockMapOutput() CseNetworkBlockMapOutput {
	return i.ToCseNetworkBlockMapOutputWithContext(context.Background())
}

func (i CseNetworkBlockMap) ToCseNetworkBlockMapOutputWithContext(ctx context.Context) CseNetworkBlockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseNetworkBlockMapOutput)
}

type CseNetworkBlockOutput struct{ *pulumi.OutputState }

func (CseNetworkBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseNetworkBlock)(nil)).Elem()
}

func (o CseNetworkBlockOutput) ToCseNetworkBlockOutput() CseNetworkBlockOutput {
	return o
}

func (o CseNetworkBlockOutput) ToCseNetworkBlockOutputWithContext(ctx context.Context) CseNetworkBlockOutput {
	return o
}

type CseNetworkBlockArrayOutput struct{ *pulumi.OutputState }

func (CseNetworkBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseNetworkBlock)(nil)).Elem()
}

func (o CseNetworkBlockArrayOutput) ToCseNetworkBlockArrayOutput() CseNetworkBlockArrayOutput {
	return o
}

func (o CseNetworkBlockArrayOutput) ToCseNetworkBlockArrayOutputWithContext(ctx context.Context) CseNetworkBlockArrayOutput {
	return o
}

func (o CseNetworkBlockArrayOutput) Index(i pulumi.IntInput) CseNetworkBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseNetworkBlock {
		return vs[0].([]*CseNetworkBlock)[vs[1].(int)]
	}).(CseNetworkBlockOutput)
}

type CseNetworkBlockMapOutput struct{ *pulumi.OutputState }

func (CseNetworkBlockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseNetworkBlock)(nil)).Elem()
}

func (o CseNetworkBlockMapOutput) ToCseNetworkBlockMapOutput() CseNetworkBlockMapOutput {
	return o
}

func (o CseNetworkBlockMapOutput) ToCseNetworkBlockMapOutputWithContext(ctx context.Context) CseNetworkBlockMapOutput {
	return o
}

func (o CseNetworkBlockMapOutput) MapIndex(k pulumi.StringInput) CseNetworkBlockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseNetworkBlock {
		return vs[0].(map[string]*CseNetworkBlock)[vs[1].(string)]
	}).(CseNetworkBlockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseNetworkBlockInput)(nil)).Elem(), &CseNetworkBlock{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseNetworkBlockArrayInput)(nil)).Elem(), CseNetworkBlockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseNetworkBlockMapInput)(nil)).Elem(), CseNetworkBlockMap{})
	pulumi.RegisterOutputType(CseNetworkBlockOutput{})
	pulumi.RegisterOutputType(CseNetworkBlockArrayOutput{})
	pulumi.RegisterOutputType(CseNetworkBlockMapOutput{})
}
