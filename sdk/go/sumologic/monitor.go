// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the ability to create, read, delete, and update [Monitors](https://help.sumologic.com/?cid=10020).
// If Fine Grain Permission (FGP) feature is enabled with Monitors Content at one's Sumo Logic account, one can also set those permission details under this monitor resource. For further details about FGP, please see this [Monitor Permission document](https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor).
//
// ## Example SLO Monitors
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMonitor(ctx, "tf_slo_monitor_1", &sumologic.MonitorArgs{
//				Name:            pulumi.String("SLO SLI monitor"),
//				Type:            pulumi.String("MonitorsLibraryMonitor"),
//				IsDisabled:      pulumi.Bool(false),
//				ContentType:     pulumi.String("Monitor"),
//				MonitorType:     pulumi.String("Slo"),
//				SloId:           pulumi.String("0000000000000009"),
//				EvaluationDelay: pulumi.String("5m"),
//				Tags: pulumi.StringMap{
//					"team":        pulumi.String("monitoring"),
//					"application": pulumi.String("sumologic"),
//				},
//				TriggerConditions: &sumologic.MonitorTriggerConditionsArgs{
//					SloSliCondition: &sumologic.MonitorTriggerConditionsSloSliConditionArgs{
//						Critical: &sumologic.MonitorTriggerConditionsSloSliConditionCriticalArgs{
//							SliThreshold: pulumi.Float64(99.5),
//						},
//						Warning: &sumologic.MonitorTriggerConditionsSloSliConditionWarningArgs{
//							SliThreshold: pulumi.Float64(99.9),
//						},
//					},
//				},
//				Notifications: sumologic.MonitorNotificationArray{
//					&sumologic.MonitorNotificationArgs{
//						Notification: &sumologic.MonitorNotificationNotificationArgs{
//							ConnectionType: pulumi.String("Email"),
//							Recipients: pulumi.StringArray{
//								pulumi.String("abc@example.com"),
//							},
//							Subject:     pulumi.String("Monitor Alert: {{TriggerType}} on {{Name}}"),
//							TimeZone:    pulumi.String("PST"),
//							MessageBody: pulumi.String("Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}"),
//						},
//						RunForTriggerTypes: pulumi.StringArray{
//							pulumi.String("Critical"),
//							pulumi.String("ResolvedCritical"),
//						},
//					},
//				},
//				Playbook: pulumi.String("test playbook"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sumologic.NewMonitor(ctx, "tf_slo_monitor_2", &sumologic.MonitorArgs{
//				Name:            pulumi.String("SLO Burn rate monitor"),
//				Type:            pulumi.String("MonitorsLibraryMonitor"),
//				IsDisabled:      pulumi.Bool(false),
//				ContentType:     pulumi.String("Monitor"),
//				MonitorType:     pulumi.String("Slo"),
//				SloId:           pulumi.String("0000000000000009"),
//				EvaluationDelay: pulumi.String("5m"),
//				Tags: pulumi.StringMap{
//					"team":        pulumi.String("monitoring"),
//					"application": pulumi.String("sumologic"),
//				},
//				TriggerConditions: &sumologic.MonitorTriggerConditionsArgs{
//					SloBurnRateCondition: &sumologic.MonitorTriggerConditionsSloBurnRateConditionArgs{
//						Critical: &sumologic.MonitorTriggerConditionsSloBurnRateConditionCriticalArgs{
//							BurnRates: sumologic.MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRateArray{
//								&sumologic.MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRateArgs{
//									BurnRateThreshold: pulumi.Float64(50),
//									TimeRange:         pulumi.String("1d"),
//								},
//							},
//						},
//						Warning: &sumologic.MonitorTriggerConditionsSloBurnRateConditionWarningArgs{
//							BurnRates: sumologic.MonitorTriggerConditionsSloBurnRateConditionWarningBurnRateArray{
//								&sumologic.MonitorTriggerConditionsSloBurnRateConditionWarningBurnRateArgs{
//									BurnRateThreshold: pulumi.Float64(30),
//									TimeRange:         pulumi.String("3d"),
//								},
//								&sumologic.MonitorTriggerConditionsSloBurnRateConditionWarningBurnRateArgs{
//									BurnRateThreshold: pulumi.Float64(20),
//									TimeRange:         pulumi.String("4d"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Example Logs Anomaly Monitor
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMonitor(ctx, "tf_example_anomaly_monitor", &sumologic.MonitorArgs{
//				Name:        pulumi.String("Example Anomaly Monitor"),
//				Description: pulumi.String("example anomaly monitor"),
//				Type:        pulumi.String("MonitorsLibraryMonitor"),
//				MonitorType: pulumi.String("Logs"),
//				IsDisabled:  pulumi.Bool(false),
//				Queries: sumologic.MonitorQueryArray{
//					&sumologic.MonitorQueryArgs{
//						RowId: pulumi.String("A"),
//						Query: pulumi.String("_sourceCategory=api error | timeslice 5m | count by _sourceHost"),
//					},
//				},
//				TriggerConditions: &sumologic.MonitorTriggerConditionsArgs{
//					LogsAnomalyCondition: &sumologic.MonitorTriggerConditionsLogsAnomalyConditionArgs{
//						Field:               pulumi.String("_count"),
//						AnomalyDetectorType: pulumi.String("Cluster"),
//						Critical: &sumologic.MonitorTriggerConditionsLogsAnomalyConditionCriticalArgs{
//							Sensitivity:     pulumi.Float64(0.4),
//							MinAnomalyCount: pulumi.Int(9),
//							TimeRange:       pulumi.String("-3h"),
//						},
//					},
//				},
//				Notifications: sumologic.MonitorNotificationArray{
//					&sumologic.MonitorNotificationArgs{
//						Notification: &sumologic.MonitorNotificationNotificationArgs{
//							ConnectionType: pulumi.String("Email"),
//							Recipients: pulumi.StringArray{
//								pulumi.String("anomaly@example.com"),
//							},
//							Subject:     pulumi.String("Monitor Alert: {{TriggerType}} on {{Name}}"),
//							TimeZone:    pulumi.String("PST"),
//							MessageBody: pulumi.String("Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}"),
//						},
//						RunForTriggerTypes: pulumi.StringArray{
//							pulumi.String("Critical"),
//							pulumi.String("ResolvedCritical"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Monitor Folders
//
// <<<<<<< HEAD
// NOTE: Monitor folders are considered a different resource from Library content folders.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMonitorFolder(ctx, "tf_monitor_folder_1", &sumologic.MonitorFolderArgs{
//				Name:        pulumi.String("test folder"),
//				Description: pulumi.String("a folder for monitors"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// =======
// NOTE: Monitor folders are considered a different resource from Library content folders. See [MonitorFolder][2] for more details.
// > > > > > > > v2.11.0
//
// ## The `triggerConditions` block
//
// A `triggerConditions` block configures conditions for sending notifications.
// ## The `triggers` block
//
// The `triggers` block is deprecated. Please use `triggerConditions` to specify notification conditions.
//
// Here's an example logs monitor that uses `triggers` to specify trigger conditions:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sumologic.NewMonitor(ctx, "tf_logs_monitor_1", &sumologic.MonitorArgs{
//				Name:        pulumi.String("Terraform Logs Monitor"),
//				Description: pulumi.String("tf logs monitor"),
//				Type:        pulumi.String("MonitorsLibraryMonitor"),
//				IsDisabled:  pulumi.Bool(false),
//				ContentType: pulumi.String("Monitor"),
//				MonitorType: pulumi.String("Logs"),
//				Queries: sumologic.MonitorQueryArray{
//					&sumologic.MonitorQueryArgs{
//						RowId: pulumi.String("A"),
//						Query: pulumi.String("_sourceCategory=event-action info"),
//					},
//				},
//				Triggers: sumologic.MonitorTriggerArray{
//					&sumologic.MonitorTriggerArgs{
//						ThresholdType:   pulumi.String("GreaterThan"),
//						Threshold:       pulumi.Float64(40),
//						TimeRange:       pulumi.String("15m"),
//						OccurrenceType:  pulumi.String("ResultCount"),
//						TriggerSource:   pulumi.String("AllResults"),
//						TriggerType:     pulumi.String("Critical"),
//						DetectionMethod: pulumi.String("StaticCondition"),
//					},
//					&sumologic.MonitorTriggerArgs{
//						ThresholdType:    pulumi.String("LessThanOrEqual"),
//						Threshold:        pulumi.Float64(40),
//						TimeRange:        pulumi.String("15m"),
//						OccurrenceType:   pulumi.String("ResultCount"),
//						TriggerSource:    pulumi.String("AllResults"),
//						TriggerType:      pulumi.String("ResolvedCritical"),
//						DetectionMethod:  pulumi.String("StaticCondition"),
//						ResolutionWindow: pulumi.String("5m"),
//					},
//				},
//				Notifications: sumologic.MonitorNotificationArray{
//					&sumologic.MonitorNotificationArgs{
//						Notification: &sumologic.MonitorNotificationNotificationArgs{
//							ConnectionType: pulumi.String("Email"),
//							Recipients: pulumi.StringArray{
//								pulumi.String("abc@example.com"),
//							},
//							Subject:     pulumi.String("Monitor Alert: {{TriggerType}} on {{Name}}"),
//							TimeZone:    pulumi.String("PST"),
//							MessageBody: pulumi.String("Triggered {{TriggerType}} Alert on {{Name}}: {{QueryURL}}"),
//						},
//						RunForTriggerTypes: pulumi.StringArray{
//							pulumi.String("Critical"),
//							pulumi.String("ResolvedCritical"),
//						},
//					},
//					&sumologic.MonitorNotificationArgs{
//						Notification: &sumologic.MonitorNotificationNotificationArgs{
//							ConnectionType: pulumi.String("Webhook"),
//							ConnectionId:   pulumi.String("0000000000ABC123"),
//						},
//						RunForTriggerTypes: pulumi.StringArray{
//							pulumi.String("Critical"),
//							pulumi.String("ResolvedCritical"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Monitors can be imported using the monitor ID, such as:
//
// hcl
//
// ```sh
// $ pulumi import sumologic:index/monitor:Monitor test 1234567890
// ```
//
// [2]: monitor_folder.html.markdown
//
// [1]: https://help.sumologic.com/?cid=10020
// [3]: https://help.sumologic.com/Visualizations-and-Alerts/Alerts/Monitors#configure-permissions-for-a-monitor
type Monitor struct {
	pulumi.CustomResourceState

	// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
	AlertName pulumi.StringPtrOutput `pulumi:"alertName"`
	// The type of the content object. Valid value:
	// - `Monitor`
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	CreatedBy   pulumi.StringOutput    `pulumi:"createdBy"`
	// The description of the monitor.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Evaluation delay as a string consists of the following elements:
	// 1. `<number>`: number of time units,
	// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
	//
	// Multiple pairs of `<number><time_unit>` may be provided. For example,
	// `2m50s` means 2 minutes and 50 seconds.
	EvaluationDelay pulumi.StringOutput `pulumi:"evaluationDelay"`
	// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
	GroupNotifications pulumi.BoolPtrOutput `pulumi:"groupNotifications"`
	// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
	IsDisabled pulumi.BoolPtrOutput `pulumi:"isDisabled"`
	IsLocked   pulumi.BoolOutput    `pulumi:"isLocked"`
	IsMutable  pulumi.BoolOutput    `pulumi:"isMutable"`
	IsSystem   pulumi.BoolOutput    `pulumi:"isSystem"`
	ModifiedAt pulumi.StringOutput  `pulumi:"modifiedAt"`
	ModifiedBy pulumi.StringOutput  `pulumi:"modifiedBy"`
	// The type of monitor. Valid values:
	// - `Logs`: A logs query monitor.
	// - `Metrics`: A metrics query monitor.
	// - `Slo`: A SLO based monitor.
	MonitorType pulumi.StringOutput `pulumi:"monitorType"`
	// The name of the monitor. The name must be alphanumeric.
	Name pulumi.StringOutput `pulumi:"name"`
	// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
	NotificationGroupFields pulumi.StringArrayOutput `pulumi:"notificationGroupFields"`
	// The notifications the monitor will send when the respective trigger condition is met.
	Notifications MonitorNotificationArrayOutput `pulumi:"notifications"`
	// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
	ObjPermissions MonitorObjPermissionArrayOutput `pulumi:"objPermissions"`
	// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
	Playbook       pulumi.StringPtrOutput `pulumi:"playbook"`
	PostRequestMap pulumi.StringMapOutput `pulumi:"postRequestMap"`
	// All queries from the monitor.
	Queries MonitorQueryArrayOutput `pulumi:"queries"`
	// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
	SloId pulumi.StringPtrOutput `pulumi:"sloId"`
	// The current status for this monitor. Values are:
	// - `Critical`
	// - `Warning`
	// - `MissingData`
	// - `Normal`
	// - `Disabled`
	Statuses pulumi.StringArrayOutput `pulumi:"statuses"`
	// A map defining tag keys and tag values for the Monitor.
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
	// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
	TriggerConditions MonitorTriggerConditionsPtrOutput `pulumi:"triggerConditions"`
	// Defines the conditions of when to send notifications.
	//
	// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
	Triggers MonitorTriggerArrayOutput `pulumi:"triggers"`
	// The type of object model. Valid value:
	// - `MonitorsLibraryMonitor`
	Type    pulumi.StringPtrOutput `pulumi:"type"`
	Version pulumi.IntOutput       `pulumi:"version"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorType == nil {
		return nil, errors.New("invalid value for required argument 'MonitorType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Monitor
	err := ctx.RegisterResource("sumologic:index/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("sumologic:index/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
	AlertName *string `pulumi:"alertName"`
	// The type of the content object. Valid value:
	// - `Monitor`
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the monitor.
	Description *string `pulumi:"description"`
	// Evaluation delay as a string consists of the following elements:
	// 1. `<number>`: number of time units,
	// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
	//
	// Multiple pairs of `<number><time_unit>` may be provided. For example,
	// `2m50s` means 2 minutes and 50 seconds.
	EvaluationDelay *string `pulumi:"evaluationDelay"`
	// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
	GroupNotifications *bool `pulumi:"groupNotifications"`
	// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
	IsDisabled *bool   `pulumi:"isDisabled"`
	IsLocked   *bool   `pulumi:"isLocked"`
	IsMutable  *bool   `pulumi:"isMutable"`
	IsSystem   *bool   `pulumi:"isSystem"`
	ModifiedAt *string `pulumi:"modifiedAt"`
	ModifiedBy *string `pulumi:"modifiedBy"`
	// The type of monitor. Valid values:
	// - `Logs`: A logs query monitor.
	// - `Metrics`: A metrics query monitor.
	// - `Slo`: A SLO based monitor.
	MonitorType *string `pulumi:"monitorType"`
	// The name of the monitor. The name must be alphanumeric.
	Name *string `pulumi:"name"`
	// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
	NotificationGroupFields []string `pulumi:"notificationGroupFields"`
	// The notifications the monitor will send when the respective trigger condition is met.
	Notifications []MonitorNotification `pulumi:"notifications"`
	// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
	ObjPermissions []MonitorObjPermission `pulumi:"objPermissions"`
	// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
	ParentId *string `pulumi:"parentId"`
	// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
	Playbook       *string           `pulumi:"playbook"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	// All queries from the monitor.
	Queries []MonitorQuery `pulumi:"queries"`
	// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
	SloId *string `pulumi:"sloId"`
	// The current status for this monitor. Values are:
	// - `Critical`
	// - `Warning`
	// - `MissingData`
	// - `Normal`
	// - `Disabled`
	Statuses []string `pulumi:"statuses"`
	// A map defining tag keys and tag values for the Monitor.
	Tags     map[string]string `pulumi:"tags"`
	TimeZone *string           `pulumi:"timeZone"`
	// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
	TriggerConditions *MonitorTriggerConditions `pulumi:"triggerConditions"`
	// Defines the conditions of when to send notifications.
	//
	// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
	Triggers []MonitorTrigger `pulumi:"triggers"`
	// The type of object model. Valid value:
	// - `MonitorsLibraryMonitor`
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

type MonitorState struct {
	// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
	AlertName pulumi.StringPtrInput
	// The type of the content object. Valid value:
	// - `Monitor`
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the monitor.
	Description pulumi.StringPtrInput
	// Evaluation delay as a string consists of the following elements:
	// 1. `<number>`: number of time units,
	// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
	//
	// Multiple pairs of `<number><time_unit>` may be provided. For example,
	// `2m50s` means 2 minutes and 50 seconds.
	EvaluationDelay pulumi.StringPtrInput
	// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
	GroupNotifications pulumi.BoolPtrInput
	// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
	IsDisabled pulumi.BoolPtrInput
	IsLocked   pulumi.BoolPtrInput
	IsMutable  pulumi.BoolPtrInput
	IsSystem   pulumi.BoolPtrInput
	ModifiedAt pulumi.StringPtrInput
	ModifiedBy pulumi.StringPtrInput
	// The type of monitor. Valid values:
	// - `Logs`: A logs query monitor.
	// - `Metrics`: A metrics query monitor.
	// - `Slo`: A SLO based monitor.
	MonitorType pulumi.StringPtrInput
	// The name of the monitor. The name must be alphanumeric.
	Name pulumi.StringPtrInput
	// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
	NotificationGroupFields pulumi.StringArrayInput
	// The notifications the monitor will send when the respective trigger condition is met.
	Notifications MonitorNotificationArrayInput
	// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
	ObjPermissions MonitorObjPermissionArrayInput
	// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
	ParentId pulumi.StringPtrInput
	// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
	Playbook       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	// All queries from the monitor.
	Queries MonitorQueryArrayInput
	// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
	SloId pulumi.StringPtrInput
	// The current status for this monitor. Values are:
	// - `Critical`
	// - `Warning`
	// - `MissingData`
	// - `Normal`
	// - `Disabled`
	Statuses pulumi.StringArrayInput
	// A map defining tag keys and tag values for the Monitor.
	Tags     pulumi.StringMapInput
	TimeZone pulumi.StringPtrInput
	// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
	TriggerConditions MonitorTriggerConditionsPtrInput
	// Defines the conditions of when to send notifications.
	//
	// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
	Triggers MonitorTriggerArrayInput
	// The type of object model. Valid value:
	// - `MonitorsLibraryMonitor`
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
	AlertName *string `pulumi:"alertName"`
	// The type of the content object. Valid value:
	// - `Monitor`
	ContentType *string `pulumi:"contentType"`
	CreatedAt   *string `pulumi:"createdAt"`
	CreatedBy   *string `pulumi:"createdBy"`
	// The description of the monitor.
	Description *string `pulumi:"description"`
	// Evaluation delay as a string consists of the following elements:
	// 1. `<number>`: number of time units,
	// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
	//
	// Multiple pairs of `<number><time_unit>` may be provided. For example,
	// `2m50s` means 2 minutes and 50 seconds.
	EvaluationDelay *string `pulumi:"evaluationDelay"`
	// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
	GroupNotifications *bool `pulumi:"groupNotifications"`
	// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
	IsDisabled *bool   `pulumi:"isDisabled"`
	IsLocked   *bool   `pulumi:"isLocked"`
	IsMutable  *bool   `pulumi:"isMutable"`
	IsSystem   *bool   `pulumi:"isSystem"`
	ModifiedAt *string `pulumi:"modifiedAt"`
	ModifiedBy *string `pulumi:"modifiedBy"`
	// The type of monitor. Valid values:
	// - `Logs`: A logs query monitor.
	// - `Metrics`: A metrics query monitor.
	// - `Slo`: A SLO based monitor.
	MonitorType string `pulumi:"monitorType"`
	// The name of the monitor. The name must be alphanumeric.
	Name *string `pulumi:"name"`
	// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
	NotificationGroupFields []string `pulumi:"notificationGroupFields"`
	// The notifications the monitor will send when the respective trigger condition is met.
	Notifications []MonitorNotification `pulumi:"notifications"`
	// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
	ObjPermissions []MonitorObjPermission `pulumi:"objPermissions"`
	// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
	ParentId *string `pulumi:"parentId"`
	// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
	Playbook       *string           `pulumi:"playbook"`
	PostRequestMap map[string]string `pulumi:"postRequestMap"`
	// All queries from the monitor.
	Queries []MonitorQuery `pulumi:"queries"`
	// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
	SloId *string `pulumi:"sloId"`
	// A map defining tag keys and tag values for the Monitor.
	Tags     map[string]string `pulumi:"tags"`
	TimeZone *string           `pulumi:"timeZone"`
	// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
	TriggerConditions *MonitorTriggerConditions `pulumi:"triggerConditions"`
	// Defines the conditions of when to send notifications.
	//
	// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
	Triggers []MonitorTrigger `pulumi:"triggers"`
	// The type of object model. Valid value:
	// - `MonitorsLibraryMonitor`
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
	AlertName pulumi.StringPtrInput
	// The type of the content object. Valid value:
	// - `Monitor`
	ContentType pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	CreatedBy   pulumi.StringPtrInput
	// The description of the monitor.
	Description pulumi.StringPtrInput
	// Evaluation delay as a string consists of the following elements:
	// 1. `<number>`: number of time units,
	// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
	//
	// Multiple pairs of `<number><time_unit>` may be provided. For example,
	// `2m50s` means 2 minutes and 50 seconds.
	EvaluationDelay pulumi.StringPtrInput
	// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
	GroupNotifications pulumi.BoolPtrInput
	// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
	IsDisabled pulumi.BoolPtrInput
	IsLocked   pulumi.BoolPtrInput
	IsMutable  pulumi.BoolPtrInput
	IsSystem   pulumi.BoolPtrInput
	ModifiedAt pulumi.StringPtrInput
	ModifiedBy pulumi.StringPtrInput
	// The type of monitor. Valid values:
	// - `Logs`: A logs query monitor.
	// - `Metrics`: A metrics query monitor.
	// - `Slo`: A SLO based monitor.
	MonitorType pulumi.StringInput
	// The name of the monitor. The name must be alphanumeric.
	Name pulumi.StringPtrInput
	// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
	NotificationGroupFields pulumi.StringArrayInput
	// The notifications the monitor will send when the respective trigger condition is met.
	Notifications MonitorNotificationArrayInput
	// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
	ObjPermissions MonitorObjPermissionArrayInput
	// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
	ParentId pulumi.StringPtrInput
	// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
	Playbook       pulumi.StringPtrInput
	PostRequestMap pulumi.StringMapInput
	// All queries from the monitor.
	Queries MonitorQueryArrayInput
	// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
	SloId pulumi.StringPtrInput
	// A map defining tag keys and tag values for the Monitor.
	Tags     pulumi.StringMapInput
	TimeZone pulumi.StringPtrInput
	// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
	TriggerConditions MonitorTriggerConditionsPtrInput
	// Defines the conditions of when to send notifications.
	//
	// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
	Triggers MonitorTriggerArrayInput
	// The type of object model. Valid value:
	// - `MonitorsLibraryMonitor`
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

// MonitorArrayInput is an input type that accepts MonitorArray and MonitorArrayOutput values.
// You can construct a concrete instance of `MonitorArrayInput` via:
//
//	MonitorArray{ MonitorArgs{...} }
type MonitorArrayInput interface {
	pulumi.Input

	ToMonitorArrayOutput() MonitorArrayOutput
	ToMonitorArrayOutputWithContext(context.Context) MonitorArrayOutput
}

type MonitorArray []MonitorInput

func (MonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (i MonitorArray) ToMonitorArrayOutput() MonitorArrayOutput {
	return i.ToMonitorArrayOutputWithContext(context.Background())
}

func (i MonitorArray) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorArrayOutput)
}

// MonitorMapInput is an input type that accepts MonitorMap and MonitorMapOutput values.
// You can construct a concrete instance of `MonitorMapInput` via:
//
//	MonitorMap{ "key": MonitorArgs{...} }
type MonitorMapInput interface {
	pulumi.Input

	ToMonitorMapOutput() MonitorMapOutput
	ToMonitorMapOutputWithContext(context.Context) MonitorMapOutput
}

type MonitorMap map[string]MonitorInput

func (MonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (i MonitorMap) ToMonitorMapOutput() MonitorMapOutput {
	return i.ToMonitorMapOutputWithContext(context.Background())
}

func (i MonitorMap) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorMapOutput)
}

type MonitorOutput struct{ *pulumi.OutputState }

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

// The display name when creating alerts. Monitor name will be used if `alertName` is not provided. All template variables can be used in `alertName` except `{{AlertName}}`, `{{AlertResponseURL}}`, `{{ResultsJson}}`, and `{{Playbook}}`.
func (o MonitorOutput) AlertName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.AlertName }).(pulumi.StringPtrOutput)
}

// The type of the content object. Valid value:
// - `Monitor`
func (o MonitorOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MonitorOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The description of the monitor.
func (o MonitorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Evaluation delay as a string consists of the following elements:
// 1. `<number>`: number of time units,
// 2. `<time_unit>`: time unit; possible values are: `h` (hour), `m` (minute), `s` (second).
//
// Multiple pairs of `<number><time_unit>` may be provided. For example,
// `2m50s` means 2 minutes and 50 seconds.
func (o MonitorOutput) EvaluationDelay() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.EvaluationDelay }).(pulumi.StringOutput)
}

// Whether or not to group notifications for individual items that meet the trigger condition. Defaults to true.
func (o MonitorOutput) GroupNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolPtrOutput { return v.GroupNotifications }).(pulumi.BoolPtrOutput)
}

// Whether or not the monitor is disabled. Disabled monitors will not run and will not generate or send notifications.
func (o MonitorOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolPtrOutput { return v.IsDisabled }).(pulumi.BoolPtrOutput)
}

func (o MonitorOutput) IsLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolOutput { return v.IsLocked }).(pulumi.BoolOutput)
}

func (o MonitorOutput) IsMutable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolOutput { return v.IsMutable }).(pulumi.BoolOutput)
}

func (o MonitorOutput) IsSystem() pulumi.BoolOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolOutput { return v.IsSystem }).(pulumi.BoolOutput)
}

func (o MonitorOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.ModifiedAt }).(pulumi.StringOutput)
}

func (o MonitorOutput) ModifiedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.ModifiedBy }).(pulumi.StringOutput)
}

// The type of monitor. Valid values:
// - `Logs`: A logs query monitor.
// - `Metrics`: A metrics query monitor.
// - `Slo`: A SLO based monitor.
func (o MonitorOutput) MonitorType() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.MonitorType }).(pulumi.StringOutput)
}

// The name of the monitor. The name must be alphanumeric.
func (o MonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The set of fields to be used to group alerts and notifications for a monitor. The value of this field will be considered only when 'groupNotifications' is true. The fields with very high cardinality such as `_blockid`, `_raw`, `_messagetime`, `_receipttime`, and `_messageid` are not allowed for Alert Grouping.
func (o MonitorOutput) NotificationGroupFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringArrayOutput { return v.NotificationGroupFields }).(pulumi.StringArrayOutput)
}

// The notifications the monitor will send when the respective trigger condition is met.
func (o MonitorOutput) Notifications() MonitorNotificationArrayOutput {
	return o.ApplyT(func(v *Monitor) MonitorNotificationArrayOutput { return v.Notifications }).(MonitorNotificationArrayOutput)
}

// `objPermission` construct represents a Permission Statement associated with this Monitor. A set of `objPermission` constructs can be specified under a Monitor. An `objPermission` construct can be used to control permissions Explicitly associated with a Monitor. But, it cannot be used to control permissions Inherited from a Parent / Ancestor. Default FGP would be still set to the Monitor upon creation (e.g. the creating user would have full permission), even if no `objPermission` construct is specified at a Monitor and the FGP feature is enabled at the account.
func (o MonitorOutput) ObjPermissions() MonitorObjPermissionArrayOutput {
	return o.ApplyT(func(v *Monitor) MonitorObjPermissionArrayOutput { return v.ObjPermissions }).(MonitorObjPermissionArrayOutput)
}

// The ID of the Monitor Folder that contains this monitor. Defaults to the root folder.
func (o MonitorOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// Notes such as links and instruction to help you resolve alerts triggered by this monitor. {{Markdown}} supported. It will be enabled only if available for your organization. Please contact your Sumo Logic account team to learn more.
func (o MonitorOutput) Playbook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.Playbook }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) PostRequestMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringMapOutput { return v.PostRequestMap }).(pulumi.StringMapOutput)
}

// All queries from the monitor.
func (o MonitorOutput) Queries() MonitorQueryArrayOutput {
	return o.ApplyT(func(v *Monitor) MonitorQueryArrayOutput { return v.Queries }).(MonitorQueryArrayOutput)
}

// Identifier of the SLO definition for the monitor. This is only applicable & required for Slo `monitorType`.
func (o MonitorOutput) SloId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.SloId }).(pulumi.StringPtrOutput)
}

// The current status for this monitor. Values are:
// - `Critical`
// - `Warning`
// - `MissingData`
// - `Normal`
// - `Disabled`
func (o MonitorOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringArrayOutput { return v.Statuses }).(pulumi.StringArrayOutput)
}

// A map defining tag keys and tag values for the Monitor.
func (o MonitorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MonitorOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Defines the conditions of when to send notifications. NOTE: `triggerConditions` supplants the `triggers` argument.
func (o MonitorOutput) TriggerConditions() MonitorTriggerConditionsPtrOutput {
	return o.ApplyT(func(v *Monitor) MonitorTriggerConditionsPtrOutput { return v.TriggerConditions }).(MonitorTriggerConditionsPtrOutput)
}

// Defines the conditions of when to send notifications.
//
// Deprecated: The field `triggers` is deprecated and will be removed in a future release of the provider -- please use `triggerConditions` instead.
func (o MonitorOutput) Triggers() MonitorTriggerArrayOutput {
	return o.ApplyT(func(v *Monitor) MonitorTriggerArrayOutput { return v.Triggers }).(MonitorTriggerArrayOutput)
}

// The type of object model. Valid value:
// - `MonitorsLibraryMonitor`
func (o MonitorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o MonitorOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type MonitorArrayOutput struct{ *pulumi.OutputState }

func (MonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (o MonitorArrayOutput) ToMonitorArrayOutput() MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) Index(i pulumi.IntInput) MonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].([]*Monitor)[vs[1].(int)]
	}).(MonitorOutput)
}

type MonitorMapOutput struct{ *pulumi.OutputState }

func (MonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (o MonitorMapOutput) ToMonitorMapOutput() MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) MapIndex(k pulumi.StringInput) MonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].(map[string]*Monitor)[vs[1].(string)]
	}).(MonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInput)(nil)).Elem(), &Monitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorArrayInput)(nil)).Elem(), MonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorMapInput)(nil)).Elem(), MonitorMap{})
	pulumi.RegisterOutputType(MonitorOutput{})
	pulumi.RegisterOutputType(MonitorArrayOutput{})
	pulumi.RegisterOutputType(MonitorMapOutput{})
}
