// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a CSE Rule Tuning Expression.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sumologic/sdk/go/sumologic"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sumologic.NewCseRuleTuningExpression(ctx, "ruleTuningExpression", &sumologic.CseRuleTuningExpressionArgs{
// 			Description: pulumi.String("New Rule Tuning Description"),
// 			Enabled:     pulumi.Bool(true),
// 			Exclude:     pulumi.Bool(true),
// 			Expression:  pulumi.String("accountId = 1234"),
// 			IsGlobal:    pulumi.Bool(false),
// 			RuleIds: pulumi.StringArray{
// 				pulumi.String("LEGACY-S00084"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Rule tuning expression can be imported using the field id, e.g.hcl
//
// ```sh
//  $ pulumi import sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression rule_tuning_expression id
// ```
type CseRuleTuningExpression struct {
	pulumi.CustomResourceState

	// The description of the rule tuning expression.
	Description pulumi.StringOutput `pulumi:"description"`
	// Enabled flag.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
	Exclude pulumi.BoolOutput `pulumi:"exclude"`
	// Expression to match.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// Set to true if this tuning expression should be applied to all rules.
	IsGlobal pulumi.BoolOutput `pulumi:"isGlobal"`
	// The name of the rule tuning expression.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
	RuleIds pulumi.StringArrayOutput `pulumi:"ruleIds"`
}

// NewCseRuleTuningExpression registers a new resource with the given unique name, arguments, and options.
func NewCseRuleTuningExpression(ctx *pulumi.Context,
	name string, args *CseRuleTuningExpressionArgs, opts ...pulumi.ResourceOption) (*CseRuleTuningExpression, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Exclude == nil {
		return nil, errors.New("invalid value for required argument 'Exclude'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.IsGlobal == nil {
		return nil, errors.New("invalid value for required argument 'IsGlobal'")
	}
	if args.RuleIds == nil {
		return nil, errors.New("invalid value for required argument 'RuleIds'")
	}
	var resource CseRuleTuningExpression
	err := ctx.RegisterResource("sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCseRuleTuningExpression gets an existing CseRuleTuningExpression resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCseRuleTuningExpression(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CseRuleTuningExpressionState, opts ...pulumi.ResourceOption) (*CseRuleTuningExpression, error) {
	var resource CseRuleTuningExpression
	err := ctx.ReadResource("sumologic:index/cseRuleTuningExpression:CseRuleTuningExpression", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CseRuleTuningExpression resources.
type cseRuleTuningExpressionState struct {
	// The description of the rule tuning expression.
	Description *string `pulumi:"description"`
	// Enabled flag.
	Enabled *bool `pulumi:"enabled"`
	// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
	Exclude *bool `pulumi:"exclude"`
	// Expression to match.
	Expression *string `pulumi:"expression"`
	// Set to true if this tuning expression should be applied to all rules.
	IsGlobal *bool `pulumi:"isGlobal"`
	// The name of the rule tuning expression.
	Name *string `pulumi:"name"`
	// List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
	RuleIds []string `pulumi:"ruleIds"`
}

type CseRuleTuningExpressionState struct {
	// The description of the rule tuning expression.
	Description pulumi.StringPtrInput
	// Enabled flag.
	Enabled pulumi.BoolPtrInput
	// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
	Exclude pulumi.BoolPtrInput
	// Expression to match.
	Expression pulumi.StringPtrInput
	// Set to true if this tuning expression should be applied to all rules.
	IsGlobal pulumi.BoolPtrInput
	// The name of the rule tuning expression.
	Name pulumi.StringPtrInput
	// List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
	RuleIds pulumi.StringArrayInput
}

func (CseRuleTuningExpressionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cseRuleTuningExpressionState)(nil)).Elem()
}

type cseRuleTuningExpressionArgs struct {
	// The description of the rule tuning expression.
	Description string `pulumi:"description"`
	// Enabled flag.
	Enabled bool `pulumi:"enabled"`
	// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
	Exclude bool `pulumi:"exclude"`
	// Expression to match.
	Expression string `pulumi:"expression"`
	// Set to true if this tuning expression should be applied to all rules.
	IsGlobal bool `pulumi:"isGlobal"`
	// The name of the rule tuning expression.
	Name *string `pulumi:"name"`
	// List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
	RuleIds []string `pulumi:"ruleIds"`
}

// The set of arguments for constructing a CseRuleTuningExpression resource.
type CseRuleTuningExpressionArgs struct {
	// The description of the rule tuning expression.
	Description pulumi.StringInput
	// Enabled flag.
	Enabled pulumi.BoolInput
	// Set to true to exclude records that match the expression. If set to false, only records that do match the expression will be included.
	Exclude pulumi.BoolInput
	// Expression to match.
	Expression pulumi.StringInput
	// Set to true if this tuning expression should be applied to all rules.
	IsGlobal pulumi.BoolInput
	// The name of the rule tuning expression.
	Name pulumi.StringPtrInput
	// List of rule IDs, for the tuning expression to be applied. ( Empty if isGlobal set to true)
	RuleIds pulumi.StringArrayInput
}

func (CseRuleTuningExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cseRuleTuningExpressionArgs)(nil)).Elem()
}

type CseRuleTuningExpressionInput interface {
	pulumi.Input

	ToCseRuleTuningExpressionOutput() CseRuleTuningExpressionOutput
	ToCseRuleTuningExpressionOutputWithContext(ctx context.Context) CseRuleTuningExpressionOutput
}

func (*CseRuleTuningExpression) ElementType() reflect.Type {
	return reflect.TypeOf((**CseRuleTuningExpression)(nil)).Elem()
}

func (i *CseRuleTuningExpression) ToCseRuleTuningExpressionOutput() CseRuleTuningExpressionOutput {
	return i.ToCseRuleTuningExpressionOutputWithContext(context.Background())
}

func (i *CseRuleTuningExpression) ToCseRuleTuningExpressionOutputWithContext(ctx context.Context) CseRuleTuningExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseRuleTuningExpressionOutput)
}

// CseRuleTuningExpressionArrayInput is an input type that accepts CseRuleTuningExpressionArray and CseRuleTuningExpressionArrayOutput values.
// You can construct a concrete instance of `CseRuleTuningExpressionArrayInput` via:
//
//          CseRuleTuningExpressionArray{ CseRuleTuningExpressionArgs{...} }
type CseRuleTuningExpressionArrayInput interface {
	pulumi.Input

	ToCseRuleTuningExpressionArrayOutput() CseRuleTuningExpressionArrayOutput
	ToCseRuleTuningExpressionArrayOutputWithContext(context.Context) CseRuleTuningExpressionArrayOutput
}

type CseRuleTuningExpressionArray []CseRuleTuningExpressionInput

func (CseRuleTuningExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseRuleTuningExpression)(nil)).Elem()
}

func (i CseRuleTuningExpressionArray) ToCseRuleTuningExpressionArrayOutput() CseRuleTuningExpressionArrayOutput {
	return i.ToCseRuleTuningExpressionArrayOutputWithContext(context.Background())
}

func (i CseRuleTuningExpressionArray) ToCseRuleTuningExpressionArrayOutputWithContext(ctx context.Context) CseRuleTuningExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseRuleTuningExpressionArrayOutput)
}

// CseRuleTuningExpressionMapInput is an input type that accepts CseRuleTuningExpressionMap and CseRuleTuningExpressionMapOutput values.
// You can construct a concrete instance of `CseRuleTuningExpressionMapInput` via:
//
//          CseRuleTuningExpressionMap{ "key": CseRuleTuningExpressionArgs{...} }
type CseRuleTuningExpressionMapInput interface {
	pulumi.Input

	ToCseRuleTuningExpressionMapOutput() CseRuleTuningExpressionMapOutput
	ToCseRuleTuningExpressionMapOutputWithContext(context.Context) CseRuleTuningExpressionMapOutput
}

type CseRuleTuningExpressionMap map[string]CseRuleTuningExpressionInput

func (CseRuleTuningExpressionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseRuleTuningExpression)(nil)).Elem()
}

func (i CseRuleTuningExpressionMap) ToCseRuleTuningExpressionMapOutput() CseRuleTuningExpressionMapOutput {
	return i.ToCseRuleTuningExpressionMapOutputWithContext(context.Background())
}

func (i CseRuleTuningExpressionMap) ToCseRuleTuningExpressionMapOutputWithContext(ctx context.Context) CseRuleTuningExpressionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CseRuleTuningExpressionMapOutput)
}

type CseRuleTuningExpressionOutput struct{ *pulumi.OutputState }

func (CseRuleTuningExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CseRuleTuningExpression)(nil)).Elem()
}

func (o CseRuleTuningExpressionOutput) ToCseRuleTuningExpressionOutput() CseRuleTuningExpressionOutput {
	return o
}

func (o CseRuleTuningExpressionOutput) ToCseRuleTuningExpressionOutputWithContext(ctx context.Context) CseRuleTuningExpressionOutput {
	return o
}

type CseRuleTuningExpressionArrayOutput struct{ *pulumi.OutputState }

func (CseRuleTuningExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CseRuleTuningExpression)(nil)).Elem()
}

func (o CseRuleTuningExpressionArrayOutput) ToCseRuleTuningExpressionArrayOutput() CseRuleTuningExpressionArrayOutput {
	return o
}

func (o CseRuleTuningExpressionArrayOutput) ToCseRuleTuningExpressionArrayOutputWithContext(ctx context.Context) CseRuleTuningExpressionArrayOutput {
	return o
}

func (o CseRuleTuningExpressionArrayOutput) Index(i pulumi.IntInput) CseRuleTuningExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CseRuleTuningExpression {
		return vs[0].([]*CseRuleTuningExpression)[vs[1].(int)]
	}).(CseRuleTuningExpressionOutput)
}

type CseRuleTuningExpressionMapOutput struct{ *pulumi.OutputState }

func (CseRuleTuningExpressionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CseRuleTuningExpression)(nil)).Elem()
}

func (o CseRuleTuningExpressionMapOutput) ToCseRuleTuningExpressionMapOutput() CseRuleTuningExpressionMapOutput {
	return o
}

func (o CseRuleTuningExpressionMapOutput) ToCseRuleTuningExpressionMapOutputWithContext(ctx context.Context) CseRuleTuningExpressionMapOutput {
	return o
}

func (o CseRuleTuningExpressionMapOutput) MapIndex(k pulumi.StringInput) CseRuleTuningExpressionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CseRuleTuningExpression {
		return vs[0].(map[string]*CseRuleTuningExpression)[vs[1].(string)]
	}).(CseRuleTuningExpressionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CseRuleTuningExpressionInput)(nil)).Elem(), &CseRuleTuningExpression{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseRuleTuningExpressionArrayInput)(nil)).Elem(), CseRuleTuningExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CseRuleTuningExpressionMapInput)(nil)).Elem(), CseRuleTuningExpressionMap{})
	pulumi.RegisterOutputType(CseRuleTuningExpressionOutput{})
	pulumi.RegisterOutputType(CseRuleTuningExpressionArrayOutput{})
	pulumi.RegisterOutputType(CseRuleTuningExpressionMapOutput{})
}
