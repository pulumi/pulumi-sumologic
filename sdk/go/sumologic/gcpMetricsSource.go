// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sumologic

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a `Sumologic GCP Metrics Source`
//
// __IMPORTANT:__ The Service Account parameters (including private key) are stored in plain-text in the state. This is a potential security issue.
//
// ## Import
//
// GCP Metrics sources can be imported using the collector and source IDs (`collector/source`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/gcpMetricsSource:GcpMetricsSource test 123/456
//
// ```
//
//	GCP Metrics sources can be imported using the collector name and source name (`collectorName/sourceName`), e.g.hcl
//
// ```sh
//
//	$ pulumi import sumologic:index/gcpMetricsSource:GcpMetricsSource test my-test-collector/my-test-source
//
// ```
//
//	[1]https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources
type GcpMetricsSource struct {
	pulumi.CustomResourceState

	// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
	Authentication       GcpMetricsSourceAuthenticationOutput `pulumi:"authentication"`
	AutomaticDateParsing pulumi.BoolPtrOutput                 `pulumi:"automaticDateParsing"`
	Category             pulumi.StringPtrOutput               `pulumi:"category"`
	CollectorId          pulumi.IntOutput                     `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringOutput                          `pulumi:"contentType"`
	CutoffRelativeTime         pulumi.StringPtrOutput                       `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            pulumi.IntPtrOutput                          `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         GcpMetricsSourceDefaultDateFormatArrayOutput `pulumi:"defaultDateFormats"`
	Description                pulumi.StringPtrOutput                       `pulumi:"description"`
	Fields                     pulumi.StringMapOutput                       `pulumi:"fields"`
	Filters                    GcpMetricsSourceFilterArrayOutput            `pulumi:"filters"`
	ForceTimezone              pulumi.BoolPtrOutput                         `pulumi:"forceTimezone"`
	HostName                   pulumi.StringPtrOutput                       `pulumi:"hostName"`
	ManualPrefixRegexp         pulumi.StringPtrOutput                       `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled pulumi.BoolPtrOutput                         `pulumi:"multilineProcessingEnabled"`
	Name                       pulumi.StringOutput                          `pulumi:"name"`
	// Details about what data to ingest
	Path GcpMetricsSourcePathOutput `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntOutput       `pulumi:"scanInterval"`
	Timezone            pulumi.StringPtrOutput `pulumi:"timezone"`
	Url                 pulumi.StringOutput    `pulumi:"url"`
	UseAutolineMatching pulumi.BoolPtrOutput   `pulumi:"useAutolineMatching"`
}

// NewGcpMetricsSource registers a new resource with the given unique name, arguments, and options.
func NewGcpMetricsSource(ctx *pulumi.Context,
	name string, args *GcpMetricsSourceArgs, opts ...pulumi.ResourceOption) (*GcpMetricsSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Authentication == nil {
		return nil, errors.New("invalid value for required argument 'Authentication'")
	}
	if args.CollectorId == nil {
		return nil, errors.New("invalid value for required argument 'CollectorId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ScanInterval == nil {
		return nil, errors.New("invalid value for required argument 'ScanInterval'")
	}
	var resource GcpMetricsSource
	err := ctx.RegisterResource("sumologic:index/gcpMetricsSource:GcpMetricsSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGcpMetricsSource gets an existing GcpMetricsSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGcpMetricsSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GcpMetricsSourceState, opts ...pulumi.ResourceOption) (*GcpMetricsSource, error) {
	var resource GcpMetricsSource
	err := ctx.ReadResource("sumologic:index/gcpMetricsSource:GcpMetricsSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GcpMetricsSource resources.
type gcpMetricsSourceState struct {
	// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
	Authentication       *GcpMetricsSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                           `pulumi:"automaticDateParsing"`
	Category             *string                         `pulumi:"category"`
	CollectorId          *int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                *string                             `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []GcpMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []GcpMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// Details about what data to ingest
	Path *GcpMetricsSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused *bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        *int    `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	Url                 *string `pulumi:"url"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

type GcpMetricsSourceState struct {
	// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
	Authentication       GcpMetricsSourceAuthenticationPtrInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntPtrInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringPtrInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         GcpMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    GcpMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// Details about what data to ingest
	Path GcpMetricsSourcePathPtrInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolPtrInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntPtrInput
	Timezone            pulumi.StringPtrInput
	Url                 pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (GcpMetricsSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpMetricsSourceState)(nil)).Elem()
}

type gcpMetricsSourceArgs struct {
	// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
	Authentication       GcpMetricsSourceAuthentication `pulumi:"authentication"`
	AutomaticDateParsing *bool                          `pulumi:"automaticDateParsing"`
	Category             *string                        `pulumi:"category"`
	CollectorId          int                            `pulumi:"collectorId"`
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                string                              `pulumi:"contentType"`
	CutoffRelativeTime         *string                             `pulumi:"cutoffRelativeTime"`
	CutoffTimestamp            *int                                `pulumi:"cutoffTimestamp"`
	DefaultDateFormats         []GcpMetricsSourceDefaultDateFormat `pulumi:"defaultDateFormats"`
	Description                *string                             `pulumi:"description"`
	Fields                     map[string]string                   `pulumi:"fields"`
	Filters                    []GcpMetricsSourceFilter            `pulumi:"filters"`
	ForceTimezone              *bool                               `pulumi:"forceTimezone"`
	HostName                   *string                             `pulumi:"hostName"`
	ManualPrefixRegexp         *string                             `pulumi:"manualPrefixRegexp"`
	MultilineProcessingEnabled *bool                               `pulumi:"multilineProcessingEnabled"`
	Name                       *string                             `pulumi:"name"`
	// Details about what data to ingest
	Path GcpMetricsSourcePath `pulumi:"path"`
	// When set to true, the scanner is paused. To disable, set to false.
	Paused bool `pulumi:"paused"`
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        int     `pulumi:"scanInterval"`
	Timezone            *string `pulumi:"timezone"`
	UseAutolineMatching *bool   `pulumi:"useAutolineMatching"`
}

// The set of arguments for constructing a GcpMetricsSource resource.
type GcpMetricsSourceArgs struct {
	// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
	Authentication       GcpMetricsSourceAuthenticationInput
	AutomaticDateParsing pulumi.BoolPtrInput
	Category             pulumi.StringPtrInput
	CollectorId          pulumi.IntInput
	// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
	ContentType                pulumi.StringInput
	CutoffRelativeTime         pulumi.StringPtrInput
	CutoffTimestamp            pulumi.IntPtrInput
	DefaultDateFormats         GcpMetricsSourceDefaultDateFormatArrayInput
	Description                pulumi.StringPtrInput
	Fields                     pulumi.StringMapInput
	Filters                    GcpMetricsSourceFilterArrayInput
	ForceTimezone              pulumi.BoolPtrInput
	HostName                   pulumi.StringPtrInput
	ManualPrefixRegexp         pulumi.StringPtrInput
	MultilineProcessingEnabled pulumi.BoolPtrInput
	Name                       pulumi.StringPtrInput
	// Details about what data to ingest
	Path GcpMetricsSourcePathInput
	// When set to true, the scanner is paused. To disable, set to false.
	Paused pulumi.BoolInput
	// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
	ScanInterval        pulumi.IntInput
	Timezone            pulumi.StringPtrInput
	UseAutolineMatching pulumi.BoolPtrInput
}

func (GcpMetricsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcpMetricsSourceArgs)(nil)).Elem()
}

type GcpMetricsSourceInput interface {
	pulumi.Input

	ToGcpMetricsSourceOutput() GcpMetricsSourceOutput
	ToGcpMetricsSourceOutputWithContext(ctx context.Context) GcpMetricsSourceOutput
}

func (*GcpMetricsSource) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpMetricsSource)(nil)).Elem()
}

func (i *GcpMetricsSource) ToGcpMetricsSourceOutput() GcpMetricsSourceOutput {
	return i.ToGcpMetricsSourceOutputWithContext(context.Background())
}

func (i *GcpMetricsSource) ToGcpMetricsSourceOutputWithContext(ctx context.Context) GcpMetricsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsSourceOutput)
}

// GcpMetricsSourceArrayInput is an input type that accepts GcpMetricsSourceArray and GcpMetricsSourceArrayOutput values.
// You can construct a concrete instance of `GcpMetricsSourceArrayInput` via:
//
//	GcpMetricsSourceArray{ GcpMetricsSourceArgs{...} }
type GcpMetricsSourceArrayInput interface {
	pulumi.Input

	ToGcpMetricsSourceArrayOutput() GcpMetricsSourceArrayOutput
	ToGcpMetricsSourceArrayOutputWithContext(context.Context) GcpMetricsSourceArrayOutput
}

type GcpMetricsSourceArray []GcpMetricsSourceInput

func (GcpMetricsSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpMetricsSource)(nil)).Elem()
}

func (i GcpMetricsSourceArray) ToGcpMetricsSourceArrayOutput() GcpMetricsSourceArrayOutput {
	return i.ToGcpMetricsSourceArrayOutputWithContext(context.Background())
}

func (i GcpMetricsSourceArray) ToGcpMetricsSourceArrayOutputWithContext(ctx context.Context) GcpMetricsSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsSourceArrayOutput)
}

// GcpMetricsSourceMapInput is an input type that accepts GcpMetricsSourceMap and GcpMetricsSourceMapOutput values.
// You can construct a concrete instance of `GcpMetricsSourceMapInput` via:
//
//	GcpMetricsSourceMap{ "key": GcpMetricsSourceArgs{...} }
type GcpMetricsSourceMapInput interface {
	pulumi.Input

	ToGcpMetricsSourceMapOutput() GcpMetricsSourceMapOutput
	ToGcpMetricsSourceMapOutputWithContext(context.Context) GcpMetricsSourceMapOutput
}

type GcpMetricsSourceMap map[string]GcpMetricsSourceInput

func (GcpMetricsSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpMetricsSource)(nil)).Elem()
}

func (i GcpMetricsSourceMap) ToGcpMetricsSourceMapOutput() GcpMetricsSourceMapOutput {
	return i.ToGcpMetricsSourceMapOutputWithContext(context.Background())
}

func (i GcpMetricsSourceMap) ToGcpMetricsSourceMapOutputWithContext(ctx context.Context) GcpMetricsSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcpMetricsSourceMapOutput)
}

type GcpMetricsSourceOutput struct{ *pulumi.OutputState }

func (GcpMetricsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcpMetricsSource)(nil)).Elem()
}

func (o GcpMetricsSourceOutput) ToGcpMetricsSourceOutput() GcpMetricsSourceOutput {
	return o
}

func (o GcpMetricsSourceOutput) ToGcpMetricsSourceOutputWithContext(ctx context.Context) GcpMetricsSourceOutput {
	return o
}

// Authentication details for connecting to the  GCP Monitoring using serviceAccount credentials.
func (o GcpMetricsSourceOutput) Authentication() GcpMetricsSourceAuthenticationOutput {
	return o.ApplyT(func(v *GcpMetricsSource) GcpMetricsSourceAuthenticationOutput { return v.Authentication }).(GcpMetricsSourceAuthenticationOutput)
}

func (o GcpMetricsSourceOutput) AutomaticDateParsing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.BoolPtrOutput { return v.AutomaticDateParsing }).(pulumi.BoolPtrOutput)
}

func (o GcpMetricsSourceOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) CollectorId() pulumi.IntOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.IntOutput { return v.CollectorId }).(pulumi.IntOutput)
}

// The content-type of the collected data. Details can be found in the [Sumologic documentation for hosted sources](https://help.sumologic.com/Send_Data/Sources/03Use_JSON_to_Configure_Sources/JSON_Parameters_for_Hosted_Sources).
func (o GcpMetricsSourceOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o GcpMetricsSourceOutput) CutoffRelativeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.CutoffRelativeTime }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) CutoffTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.IntPtrOutput { return v.CutoffTimestamp }).(pulumi.IntPtrOutput)
}

func (o GcpMetricsSourceOutput) DefaultDateFormats() GcpMetricsSourceDefaultDateFormatArrayOutput {
	return o.ApplyT(func(v *GcpMetricsSource) GcpMetricsSourceDefaultDateFormatArrayOutput { return v.DefaultDateFormats }).(GcpMetricsSourceDefaultDateFormatArrayOutput)
}

func (o GcpMetricsSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringMapOutput { return v.Fields }).(pulumi.StringMapOutput)
}

func (o GcpMetricsSourceOutput) Filters() GcpMetricsSourceFilterArrayOutput {
	return o.ApplyT(func(v *GcpMetricsSource) GcpMetricsSourceFilterArrayOutput { return v.Filters }).(GcpMetricsSourceFilterArrayOutput)
}

func (o GcpMetricsSourceOutput) ForceTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.BoolPtrOutput { return v.ForceTimezone }).(pulumi.BoolPtrOutput)
}

func (o GcpMetricsSourceOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.HostName }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) ManualPrefixRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.ManualPrefixRegexp }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) MultilineProcessingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.BoolPtrOutput { return v.MultilineProcessingEnabled }).(pulumi.BoolPtrOutput)
}

func (o GcpMetricsSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Details about what data to ingest
func (o GcpMetricsSourceOutput) Path() GcpMetricsSourcePathOutput {
	return o.ApplyT(func(v *GcpMetricsSource) GcpMetricsSourcePathOutput { return v.Path }).(GcpMetricsSourcePathOutput)
}

// When set to true, the scanner is paused. To disable, set to false.
func (o GcpMetricsSourceOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
func (o GcpMetricsSourceOutput) ScanInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.IntOutput { return v.ScanInterval }).(pulumi.IntOutput)
}

func (o GcpMetricsSourceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

func (o GcpMetricsSourceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o GcpMetricsSourceOutput) UseAutolineMatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GcpMetricsSource) pulumi.BoolPtrOutput { return v.UseAutolineMatching }).(pulumi.BoolPtrOutput)
}

type GcpMetricsSourceArrayOutput struct{ *pulumi.OutputState }

func (GcpMetricsSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GcpMetricsSource)(nil)).Elem()
}

func (o GcpMetricsSourceArrayOutput) ToGcpMetricsSourceArrayOutput() GcpMetricsSourceArrayOutput {
	return o
}

func (o GcpMetricsSourceArrayOutput) ToGcpMetricsSourceArrayOutputWithContext(ctx context.Context) GcpMetricsSourceArrayOutput {
	return o
}

func (o GcpMetricsSourceArrayOutput) Index(i pulumi.IntInput) GcpMetricsSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GcpMetricsSource {
		return vs[0].([]*GcpMetricsSource)[vs[1].(int)]
	}).(GcpMetricsSourceOutput)
}

type GcpMetricsSourceMapOutput struct{ *pulumi.OutputState }

func (GcpMetricsSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GcpMetricsSource)(nil)).Elem()
}

func (o GcpMetricsSourceMapOutput) ToGcpMetricsSourceMapOutput() GcpMetricsSourceMapOutput {
	return o
}

func (o GcpMetricsSourceMapOutput) ToGcpMetricsSourceMapOutputWithContext(ctx context.Context) GcpMetricsSourceMapOutput {
	return o
}

func (o GcpMetricsSourceMapOutput) MapIndex(k pulumi.StringInput) GcpMetricsSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GcpMetricsSource {
		return vs[0].(map[string]*GcpMetricsSource)[vs[1].(string)]
	}).(GcpMetricsSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsSourceInput)(nil)).Elem(), &GcpMetricsSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsSourceArrayInput)(nil)).Elem(), GcpMetricsSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcpMetricsSourceMapInput)(nil)).Elem(), GcpMetricsSourceMap{})
	pulumi.RegisterOutputType(GcpMetricsSourceOutput{})
	pulumi.RegisterOutputType(GcpMetricsSourceArrayOutput{})
	pulumi.RegisterOutputType(GcpMetricsSourceMapOutput{})
}
