# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricsSearchV2Args', 'MetricsSearchV2']

@pulumi.input_type
class MetricsSearchV2Args:
    def __init__(__self__, *,
                 queries: pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]],
                 time_range: pulumi.Input['MetricsSearchV2TimeRangeArgs'],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MetricsSearchV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]] queries: Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        :param pulumi.Input['MetricsSearchV2TimeRangeArgs'] time_range: Time range of the metrics search. See time range schema
        :param pulumi.Input[str] title: Title of the search.
        :param pulumi.Input[str] description: Description of the search.
        :param pulumi.Input[str] folder_id: The identifier of the folder to create the metrics search in.
        """
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "time_range", time_range)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]]:
        """
        Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Input['MetricsSearchV2TimeRangeArgs']:
        """
        Time range of the metrics search. See time range schema
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: pulumi.Input['MetricsSearchV2TimeRangeArgs']):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title of the search.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the search.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the folder to create the metrics search in.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visual_settings")

    @visual_settings.setter
    def visual_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visual_settings", value)


@pulumi.input_type
class _MetricsSearchV2State:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]]] = None,
                 time_range: Optional[pulumi.Input['MetricsSearchV2TimeRangeArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MetricsSearchV2 resources.
        :param pulumi.Input[str] description: Description of the search.
        :param pulumi.Input[str] folder_id: The identifier of the folder to create the metrics search in.
        :param pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]] queries: Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        :param pulumi.Input['MetricsSearchV2TimeRangeArgs'] time_range: Time range of the metrics search. See time range schema
        :param pulumi.Input[str] title: Title of the search.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the search.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the folder to create the metrics search in.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]]]:
        """
        Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsSearchV2QueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[pulumi.Input['MetricsSearchV2TimeRangeArgs']]:
        """
        Time range of the metrics search. See time range schema
        """
        return pulumi.get(self, "time_range")

    @time_range.setter
    def time_range(self, value: Optional[pulumi.Input['MetricsSearchV2TimeRangeArgs']]):
        pulumi.set(self, "time_range", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of the search.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visual_settings")

    @visual_settings.setter
    def visual_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visual_settings", value)


class MetricsSearchV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsSearchV2QueryArgs', 'MetricsSearchV2QueryArgsDict']]]]] = None,
                 time_range: Optional[pulumi.Input[Union['MetricsSearchV2TimeRangeArgs', 'MetricsSearchV2TimeRangeArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a [Sumologic Metrics Search V2][1].

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        personal_folder = sumologic.get_personal_folder()
        example_metrics_search = sumologic.MetricsSearchV2("example_metrics_search",
            title="Demo Metrics Search",
            description="Demo search description",
            folder_id=personal_folder.id,
            queries=[{
                "query_key": "A",
                "query_string": "metric=cpu_idle | avg",
                "query_type": "Metrics",
                "metrics_query_mode": "Advanced",
            }],
            time_range={
                "begin_bounded_time_range": {
                    "from_": {
                        "relative_time_range": {
                            "relative_time": "-30m",
                        },
                    },
                },
            })
        ```

        ## Attributes reference

        In addition to all arguments above, the following attributes are exported:

        - `id` - The ID of the metrics search.

        ## Import

        A metrics search can be imported using it's identifier, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/metricsSearchV2:MetricsSearchV2 example_search 0000000007FFD79D
        ```

        [1]: https://help.sumologic.com/docs/metrics/metrics-queries/metrics-explorer/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the search.
        :param pulumi.Input[str] folder_id: The identifier of the folder to create the metrics search in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricsSearchV2QueryArgs', 'MetricsSearchV2QueryArgsDict']]]] queries: Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        :param pulumi.Input[Union['MetricsSearchV2TimeRangeArgs', 'MetricsSearchV2TimeRangeArgsDict']] time_range: Time range of the metrics search. See time range schema
        :param pulumi.Input[str] title: Title of the search.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MetricsSearchV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a [Sumologic Metrics Search V2][1].

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        personal_folder = sumologic.get_personal_folder()
        example_metrics_search = sumologic.MetricsSearchV2("example_metrics_search",
            title="Demo Metrics Search",
            description="Demo search description",
            folder_id=personal_folder.id,
            queries=[{
                "query_key": "A",
                "query_string": "metric=cpu_idle | avg",
                "query_type": "Metrics",
                "metrics_query_mode": "Advanced",
            }],
            time_range={
                "begin_bounded_time_range": {
                    "from_": {
                        "relative_time_range": {
                            "relative_time": "-30m",
                        },
                    },
                },
            })
        ```

        ## Attributes reference

        In addition to all arguments above, the following attributes are exported:

        - `id` - The ID of the metrics search.

        ## Import

        A metrics search can be imported using it's identifier, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/metricsSearchV2:MetricsSearchV2 example_search 0000000007FFD79D
        ```

        [1]: https://help.sumologic.com/docs/metrics/metrics-queries/metrics-explorer/

        :param str resource_name: The name of the resource.
        :param MetricsSearchV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricsSearchV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsSearchV2QueryArgs', 'MetricsSearchV2QueryArgsDict']]]]] = None,
                 time_range: Optional[pulumi.Input[Union['MetricsSearchV2TimeRangeArgs', 'MetricsSearchV2TimeRangeArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visual_settings: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricsSearchV2Args.__new__(MetricsSearchV2Args)

            __props__.__dict__["description"] = description
            __props__.__dict__["folder_id"] = folder_id
            if queries is None and not opts.urn:
                raise TypeError("Missing required property 'queries'")
            __props__.__dict__["queries"] = queries
            if time_range is None and not opts.urn:
                raise TypeError("Missing required property 'time_range'")
            __props__.__dict__["time_range"] = time_range
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["visual_settings"] = visual_settings
        super(MetricsSearchV2, __self__).__init__(
            'sumologic:index/metricsSearchV2:MetricsSearchV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            queries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsSearchV2QueryArgs', 'MetricsSearchV2QueryArgsDict']]]]] = None,
            time_range: Optional[pulumi.Input[Union['MetricsSearchV2TimeRangeArgs', 'MetricsSearchV2TimeRangeArgsDict']]] = None,
            title: Optional[pulumi.Input[str]] = None,
            visual_settings: Optional[pulumi.Input[str]] = None) -> 'MetricsSearchV2':
        """
        Get an existing MetricsSearchV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the search.
        :param pulumi.Input[str] folder_id: The identifier of the folder to create the metrics search in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricsSearchV2QueryArgs', 'MetricsSearchV2QueryArgsDict']]]] queries: Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        :param pulumi.Input[Union['MetricsSearchV2TimeRangeArgs', 'MetricsSearchV2TimeRangeArgsDict']] time_range: Time range of the metrics search. See time range schema
        :param pulumi.Input[str] title: Title of the search.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricsSearchV2State.__new__(_MetricsSearchV2State)

        __props__.__dict__["description"] = description
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["queries"] = queries
        __props__.__dict__["time_range"] = time_range
        __props__.__dict__["title"] = title
        __props__.__dict__["visual_settings"] = visual_settings
        return MetricsSearchV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the search.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the folder to create the metrics search in.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[Sequence['outputs.MetricsSearchV2Query']]:
        """
        Array of objects MetricsSearchQueryV2. Metrics queries, up to the maximum of six.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> pulumi.Output['outputs.MetricsSearchV2TimeRange']:
        """
        Time range of the metrics search. See time range schema
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Title of the search.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "visual_settings")

