# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CseEntityEntityGroupConfigurationArgs', 'CseEntityEntityGroupConfiguration']

@pulumi.input_type
class CseEntityEntityGroupConfigurationArgs:
    def __init__(__self__, *,
                 criticality: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_namespace: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_block: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 suppressed: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CseEntityEntityGroupConfiguration resource.
        :param pulumi.Input[str] criticality: The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        :param pulumi.Input[str] description: The entity group configuration description.
        :param pulumi.Input[str] entity_namespace: The entity namespace.
        :param pulumi.Input[str] entity_type: The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        :param pulumi.Input[str] name: The entity group configuration name.
        :param pulumi.Input[str] network_block: The entity group configuration network block value Example: "192.168.0.0/16".
        :param pulumi.Input[str] prefix: The entity group configuration prefix value.
        :param pulumi.Input[str] suffix: The entity group configuration suffix value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The entity group configuration tags list.
               
               The following attributes are exported:
        """
        CseEntityEntityGroupConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            criticality=criticality,
            description=description,
            entity_namespace=entity_namespace,
            entity_type=entity_type,
            name=name,
            network_block=network_block,
            prefix=prefix,
            suffix=suffix,
            suppressed=suppressed,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             criticality: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             entity_namespace: Optional[pulumi.Input[str]] = None,
             entity_type: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_block: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             suppressed: Optional[pulumi.Input[bool]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if criticality is not None:
            _setter("criticality", criticality)
        if description is not None:
            _setter("description", description)
        if entity_namespace is not None:
            _setter("entity_namespace", entity_namespace)
        if entity_type is not None:
            _setter("entity_type", entity_type)
        if name is not None:
            _setter("name", name)
        if network_block is not None:
            _setter("network_block", network_block)
        if prefix is not None:
            _setter("prefix", prefix)
        if suffix is not None:
            _setter("suffix", suffix)
        if suppressed is not None:
            _setter("suppressed", suppressed)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        """
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entityNamespace")
    def entity_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The entity namespace.
        """
        return pulumi.get(self, "entity_namespace")

    @entity_namespace.setter
    def entity_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_namespace", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkBlock")
    def network_block(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration network block value Example: "192.168.0.0/16".
        """
        return pulumi.get(self, "network_block")

    @network_block.setter
    def network_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_block", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration prefix value.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration suffix value.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def suppressed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppressed")

    @suppressed.setter
    def suppressed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppressed", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The entity group configuration tags list.

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CseEntityEntityGroupConfigurationState:
    def __init__(__self__, *,
                 criticality: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_namespace: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_block: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 suppressed: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering CseEntityEntityGroupConfiguration resources.
        :param pulumi.Input[str] criticality: The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        :param pulumi.Input[str] description: The entity group configuration description.
        :param pulumi.Input[str] entity_namespace: The entity namespace.
        :param pulumi.Input[str] entity_type: The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        :param pulumi.Input[str] name: The entity group configuration name.
        :param pulumi.Input[str] network_block: The entity group configuration network block value Example: "192.168.0.0/16".
        :param pulumi.Input[str] prefix: The entity group configuration prefix value.
        :param pulumi.Input[str] suffix: The entity group configuration suffix value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The entity group configuration tags list.
               
               The following attributes are exported:
        """
        _CseEntityEntityGroupConfigurationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            criticality=criticality,
            description=description,
            entity_namespace=entity_namespace,
            entity_type=entity_type,
            name=name,
            network_block=network_block,
            prefix=prefix,
            suffix=suffix,
            suppressed=suppressed,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             criticality: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             entity_namespace: Optional[pulumi.Input[str]] = None,
             entity_type: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_block: Optional[pulumi.Input[str]] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             suppressed: Optional[pulumi.Input[bool]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if criticality is not None:
            _setter("criticality", criticality)
        if description is not None:
            _setter("description", description)
        if entity_namespace is not None:
            _setter("entity_namespace", entity_namespace)
        if entity_type is not None:
            _setter("entity_type", entity_type)
        if name is not None:
            _setter("name", name)
        if network_block is not None:
            _setter("network_block", network_block)
        if prefix is not None:
            _setter("prefix", prefix)
        if suffix is not None:
            _setter("suffix", suffix)
        if suppressed is not None:
            _setter("suppressed", suppressed)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        """
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entityNamespace")
    def entity_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The entity namespace.
        """
        return pulumi.get(self, "entity_namespace")

    @entity_namespace.setter
    def entity_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_namespace", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        """
        The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkBlock")
    def network_block(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration network block value Example: "192.168.0.0/16".
        """
        return pulumi.get(self, "network_block")

    @network_block.setter
    def network_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_block", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration prefix value.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The entity group configuration suffix value.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def suppressed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppressed")

    @suppressed.setter
    def suppressed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppressed", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The entity group configuration tags list.

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class CseEntityEntityGroupConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 criticality: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_namespace: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_block: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 suppressed: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        entity_entity_group_configuration = sumologic.CseEntityEntityGroupConfiguration("entityEntityGroupConfiguration",
            criticality="HIGH",
            description="Entity Group description",
            entity_namespace="namespace",
            entity_type="_hostname",
            suffix="red.co",
            suppressed=True,
            tags=["tag"])
        ```

        ## Import

        Entity Entity Group Configuration can be imported using the field id, e.g.hcl

        ```sh
         $ pulumi import sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration entity_entity_group_configuration id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] criticality: The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        :param pulumi.Input[str] description: The entity group configuration description.
        :param pulumi.Input[str] entity_namespace: The entity namespace.
        :param pulumi.Input[str] entity_type: The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        :param pulumi.Input[str] name: The entity group configuration name.
        :param pulumi.Input[str] network_block: The entity group configuration network block value Example: "192.168.0.0/16".
        :param pulumi.Input[str] prefix: The entity group configuration prefix value.
        :param pulumi.Input[str] suffix: The entity group configuration suffix value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The entity group configuration tags list.
               
               The following attributes are exported:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CseEntityEntityGroupConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        entity_entity_group_configuration = sumologic.CseEntityEntityGroupConfiguration("entityEntityGroupConfiguration",
            criticality="HIGH",
            description="Entity Group description",
            entity_namespace="namespace",
            entity_type="_hostname",
            suffix="red.co",
            suppressed=True,
            tags=["tag"])
        ```

        ## Import

        Entity Entity Group Configuration can be imported using the field id, e.g.hcl

        ```sh
         $ pulumi import sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration entity_entity_group_configuration id
        ```

        :param str resource_name: The name of the resource.
        :param CseEntityEntityGroupConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CseEntityEntityGroupConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CseEntityEntityGroupConfigurationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 criticality: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_namespace: Optional[pulumi.Input[str]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_block: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 suppressed: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CseEntityEntityGroupConfigurationArgs.__new__(CseEntityEntityGroupConfigurationArgs)

            __props__.__dict__["criticality"] = criticality
            __props__.__dict__["description"] = description
            __props__.__dict__["entity_namespace"] = entity_namespace
            __props__.__dict__["entity_type"] = entity_type
            __props__.__dict__["name"] = name
            __props__.__dict__["network_block"] = network_block
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["suffix"] = suffix
            __props__.__dict__["suppressed"] = suppressed
            __props__.__dict__["tags"] = tags
        super(CseEntityEntityGroupConfiguration, __self__).__init__(
            'sumologic:index/cseEntityEntityGroupConfiguration:CseEntityEntityGroupConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            criticality: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            entity_namespace: Optional[pulumi.Input[str]] = None,
            entity_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_block: Optional[pulumi.Input[str]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            suffix: Optional[pulumi.Input[str]] = None,
            suppressed: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'CseEntityEntityGroupConfiguration':
        """
        Get an existing CseEntityEntityGroupConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] criticality: The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        :param pulumi.Input[str] description: The entity group configuration description.
        :param pulumi.Input[str] entity_namespace: The entity namespace.
        :param pulumi.Input[str] entity_type: The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        :param pulumi.Input[str] name: The entity group configuration name.
        :param pulumi.Input[str] network_block: The entity group configuration network block value Example: "192.168.0.0/16".
        :param pulumi.Input[str] prefix: The entity group configuration prefix value.
        :param pulumi.Input[str] suffix: The entity group configuration suffix value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The entity group configuration tags list.
               
               The following attributes are exported:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CseEntityEntityGroupConfigurationState.__new__(_CseEntityEntityGroupConfigurationState)

        __props__.__dict__["criticality"] = criticality
        __props__.__dict__["description"] = description
        __props__.__dict__["entity_namespace"] = entity_namespace
        __props__.__dict__["entity_type"] = entity_type
        __props__.__dict__["name"] = name
        __props__.__dict__["network_block"] = network_block
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["suffix"] = suffix
        __props__.__dict__["suppressed"] = suppressed
        __props__.__dict__["tags"] = tags
        return CseEntityEntityGroupConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def criticality(self) -> pulumi.Output[Optional[str]]:
        """
        The entity group configuration criticality Examples: "HIGH", "CRITICALITY".
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The entity group configuration description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityNamespace")
    def entity_namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The entity namespace.
        """
        return pulumi.get(self, "entity_namespace")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Output[Optional[str]]:
        """
        The entity type Examples: "_ip", "_mac", "_username", "_hostname".
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The entity group configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkBlock")
    def network_block(self) -> pulumi.Output[Optional[str]]:
        """
        The entity group configuration network block value Example: "192.168.0.0/16".
        """
        return pulumi.get(self, "network_block")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The entity group configuration prefix value.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def suffix(self) -> pulumi.Output[Optional[str]]:
        """
        The entity group configuration suffix value.
        """
        return pulumi.get(self, "suffix")

    @property
    @pulumi.getter
    def suppressed(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "suppressed")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The entity group configuration tags list.

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

