# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPartitionResult',
    'AwaitableGetPartitionResult',
    'get_partition',
    'get_partition_output',
]

@pulumi.output_type
class GetPartitionResult:
    """
    A collection of values returned by getPartition.
    """
    def __init__(__self__, analytics_tier=None, data_forwarding_id=None, id=None, index_type=None, is_active=None, is_compliant=None, is_included_in_default_search=None, name=None, reduce_retention_period_immediately=None, retention_period=None, routing_expression=None, total_bytes=None):
        if analytics_tier and not isinstance(analytics_tier, str):
            raise TypeError("Expected argument 'analytics_tier' to be a str")
        pulumi.set(__self__, "analytics_tier", analytics_tier)
        if data_forwarding_id and not isinstance(data_forwarding_id, str):
            raise TypeError("Expected argument 'data_forwarding_id' to be a str")
        pulumi.set(__self__, "data_forwarding_id", data_forwarding_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if index_type and not isinstance(index_type, str):
            raise TypeError("Expected argument 'index_type' to be a str")
        pulumi.set(__self__, "index_type", index_type)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if is_compliant and not isinstance(is_compliant, bool):
            raise TypeError("Expected argument 'is_compliant' to be a bool")
        pulumi.set(__self__, "is_compliant", is_compliant)
        if is_included_in_default_search and not isinstance(is_included_in_default_search, bool):
            raise TypeError("Expected argument 'is_included_in_default_search' to be a bool")
        pulumi.set(__self__, "is_included_in_default_search", is_included_in_default_search)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reduce_retention_period_immediately and not isinstance(reduce_retention_period_immediately, bool):
            raise TypeError("Expected argument 'reduce_retention_period_immediately' to be a bool")
        pulumi.set(__self__, "reduce_retention_period_immediately", reduce_retention_period_immediately)
        if retention_period and not isinstance(retention_period, int):
            raise TypeError("Expected argument 'retention_period' to be a int")
        pulumi.set(__self__, "retention_period", retention_period)
        if routing_expression and not isinstance(routing_expression, str):
            raise TypeError("Expected argument 'routing_expression' to be a str")
        pulumi.set(__self__, "routing_expression", routing_expression)
        if total_bytes and not isinstance(total_bytes, int):
            raise TypeError("Expected argument 'total_bytes' to be a int")
        pulumi.set(__self__, "total_bytes", total_bytes)

    @property
    @pulumi.getter(name="analyticsTier")
    def analytics_tier(self) -> builtins.str:
        return pulumi.get(self, "analytics_tier")

    @property
    @pulumi.getter(name="dataForwardingId")
    def data_forwarding_id(self) -> builtins.str:
        return pulumi.get(self, "data_forwarding_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> builtins.str:
        return pulumi.get(self, "index_type")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> builtins.bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> builtins.bool:
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="isIncludedInDefaultSearch")
    def is_included_in_default_search(self) -> builtins.bool:
        return pulumi.get(self, "is_included_in_default_search")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reduceRetentionPeriodImmediately")
    def reduce_retention_period_immediately(self) -> builtins.bool:
        return pulumi.get(self, "reduce_retention_period_immediately")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> builtins.int:
        return pulumi.get(self, "retention_period")

    @property
    @pulumi.getter(name="routingExpression")
    def routing_expression(self) -> builtins.str:
        return pulumi.get(self, "routing_expression")

    @property
    @pulumi.getter(name="totalBytes")
    def total_bytes(self) -> builtins.int:
        return pulumi.get(self, "total_bytes")


class AwaitableGetPartitionResult(GetPartitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPartitionResult(
            analytics_tier=self.analytics_tier,
            data_forwarding_id=self.data_forwarding_id,
            id=self.id,
            index_type=self.index_type,
            is_active=self.is_active,
            is_compliant=self.is_compliant,
            is_included_in_default_search=self.is_included_in_default_search,
            name=self.name,
            reduce_retention_period_immediately=self.reduce_retention_period_immediately,
            retention_period=self.retention_period,
            routing_expression=self.routing_expression,
            total_bytes=self.total_bytes)


def get_partition(id: Optional[builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPartitionResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    this = sumologic.get_partition(id="1234567890")
    ```

    A partition can be looked up by `id`.

    ## Attributes reference

    The following attributes are exported:

    - `name` - The name of the partition.
    - `routing_expression` - The query that defines the data to be included in the partition.
    - `analytics_tier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
    - `retention_period` - The number of days to retain data in the partition.
    - `is_compliant` - Whether the partition is used for compliance or audit purposes.
    - `is_included_in_default_search` - Whether the partition is included in the default search scope.
    - `total_bytes` - The size of the data in the partition in bytes.
    - `is_active` - Whether the partition is currently active or decommissioned.
    - `index_type` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
    - `data_forwarding_id` - The ID of the data forwarding configuration to be used by the partition.

    [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sumologic:index/getPartition:getPartition', __args__, opts=opts, typ=GetPartitionResult).value

    return AwaitableGetPartitionResult(
        analytics_tier=pulumi.get(__ret__, 'analytics_tier'),
        data_forwarding_id=pulumi.get(__ret__, 'data_forwarding_id'),
        id=pulumi.get(__ret__, 'id'),
        index_type=pulumi.get(__ret__, 'index_type'),
        is_active=pulumi.get(__ret__, 'is_active'),
        is_compliant=pulumi.get(__ret__, 'is_compliant'),
        is_included_in_default_search=pulumi.get(__ret__, 'is_included_in_default_search'),
        name=pulumi.get(__ret__, 'name'),
        reduce_retention_period_immediately=pulumi.get(__ret__, 'reduce_retention_period_immediately'),
        retention_period=pulumi.get(__ret__, 'retention_period'),
        routing_expression=pulumi.get(__ret__, 'routing_expression'),
        total_bytes=pulumi.get(__ret__, 'total_bytes'))
def get_partition_output(id: Optional[pulumi.Input[builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPartitionResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    this = sumologic.get_partition(id="1234567890")
    ```

    A partition can be looked up by `id`.

    ## Attributes reference

    The following attributes are exported:

    - `name` - The name of the partition.
    - `routing_expression` - The query that defines the data to be included in the partition.
    - `analytics_tier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
    - `retention_period` - The number of days to retain data in the partition.
    - `is_compliant` - Whether the partition is used for compliance or audit purposes.
    - `is_included_in_default_search` - Whether the partition is included in the default search scope.
    - `total_bytes` - The size of the data in the partition in bytes.
    - `is_active` - Whether the partition is currently active or decommissioned.
    - `index_type` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
    - `data_forwarding_id` - The ID of the data forwarding configuration to be used by the partition.

    [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sumologic:index/getPartition:getPartition', __args__, opts=opts, typ=GetPartitionResult)
    return __ret__.apply(lambda __response__: GetPartitionResult(
        analytics_tier=pulumi.get(__response__, 'analytics_tier'),
        data_forwarding_id=pulumi.get(__response__, 'data_forwarding_id'),
        id=pulumi.get(__response__, 'id'),
        index_type=pulumi.get(__response__, 'index_type'),
        is_active=pulumi.get(__response__, 'is_active'),
        is_compliant=pulumi.get(__response__, 'is_compliant'),
        is_included_in_default_search=pulumi.get(__response__, 'is_included_in_default_search'),
        name=pulumi.get(__response__, 'name'),
        reduce_retention_period_immediately=pulumi.get(__response__, 'reduce_retention_period_immediately'),
        retention_period=pulumi.get(__response__, 'retention_period'),
        routing_expression=pulumi.get(__response__, 'routing_expression'),
        total_bytes=pulumi.get(__response__, 'total_bytes')))
