# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppsResult',
    'AwaitableGetAppsResult',
    'get_apps',
    'get_apps_output',
]

@pulumi.output_type
class GetAppsResult:
    """
    A collection of values returned by getApps.
    """
    def __init__(__self__, apps=None, author=None, id=None, name=None):
        if apps and not isinstance(apps, list):
            raise TypeError("Expected argument 'apps' to be a list")
        pulumi.set(__self__, "apps", apps)
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        pulumi.set(__self__, "author", author)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def apps(self) -> Sequence['outputs.GetAppsAppResult']:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter
    def author(self) -> Optional[builtins.str]:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetAppsResult(GetAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppsResult(
            apps=self.apps,
            author=self.author,
            id=self.id,
            name=self.name)


def get_apps(author: Optional[builtins.str] = None,
             name: Optional[builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppsResult:
    """
    Provides an easy way to retrieve all Sumo Logic v2 apps.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    test = sumologic.get_apps()
    ```

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    test = sumologic.get_apps(name="MySQL - OpenTelemetry",
        author="Sumo Logic")
    ```

    ## Attributes reference

    The following attributes are exported:

    - `uuid` - UUID of the app.
    - `name` - Name of the app.
    - `description` - Description of the app.
    - `latest_version` - Latest version of the app.
    - `icon` - URL of the icon for the app.
    - `author` - Author of the app.
    - `account_types` - URL of the icon for the app
    - `log_analytics_filter` - The search filter which would be applied on partitions which belong to Log Analytics product area.
    - `beta` - URL of the icon for the app.
    - `installs` - Number of times the app was installed.
    - `appType` - Type of an app.
    - `attributes` - A map of attributes for this app. Attributes allow to group apps based on different criteria.
    ### Values in attributes type are :
      - `category`
      - `use_case`
      - `collection`
    - `family` - Provides a mechanism to link different apps.
    - `installable` - Whether the app is installable or not as not all apps are installable.
    - `show_on_marketplace` - Whether the app should show up on sumologic.com/applications webpage.
    """
    __args__ = dict()
    __args__['author'] = author
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sumologic:index/getApps:getApps', __args__, opts=opts, typ=GetAppsResult).value

    return AwaitableGetAppsResult(
        apps=pulumi.get(__ret__, 'apps'),
        author=pulumi.get(__ret__, 'author'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_apps_output(author: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppsResult]:
    """
    Provides an easy way to retrieve all Sumo Logic v2 apps.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    test = sumologic.get_apps()
    ```

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    test = sumologic.get_apps(name="MySQL - OpenTelemetry",
        author="Sumo Logic")
    ```

    ## Attributes reference

    The following attributes are exported:

    - `uuid` - UUID of the app.
    - `name` - Name of the app.
    - `description` - Description of the app.
    - `latest_version` - Latest version of the app.
    - `icon` - URL of the icon for the app.
    - `author` - Author of the app.
    - `account_types` - URL of the icon for the app
    - `log_analytics_filter` - The search filter which would be applied on partitions which belong to Log Analytics product area.
    - `beta` - URL of the icon for the app.
    - `installs` - Number of times the app was installed.
    - `appType` - Type of an app.
    - `attributes` - A map of attributes for this app. Attributes allow to group apps based on different criteria.
    ### Values in attributes type are :
      - `category`
      - `use_case`
      - `collection`
    - `family` - Provides a mechanism to link different apps.
    - `installable` - Whether the app is installable or not as not all apps are installable.
    - `show_on_marketplace` - Whether the app should show up on sumologic.com/applications webpage.
    """
    __args__ = dict()
    __args__['author'] = author
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sumologic:index/getApps:getApps', __args__, opts=opts, typ=GetAppsResult)
    return __ret__.apply(lambda __response__: GetAppsResult(
        apps=pulumi.get(__response__, 'apps'),
        author=pulumi.get(__response__, 'author'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
