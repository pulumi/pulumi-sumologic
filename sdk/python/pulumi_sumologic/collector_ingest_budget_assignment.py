# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CollectorIngestBudgetAssignmentArgs', 'CollectorIngestBudgetAssignment']

@pulumi.input_type
class CollectorIngestBudgetAssignmentArgs:
    def __init__(__self__, *,
                 collector_id: pulumi.Input[str],
                 ingest_budget_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a CollectorIngestBudgetAssignment resource.
        """
        pulumi.set(__self__, "collector_id", collector_id)
        pulumi.set(__self__, "ingest_budget_id", ingest_budget_id)

    @property
    @pulumi.getter(name="collectorId")
    def collector_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collector_id")

    @collector_id.setter
    def collector_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "collector_id", value)

    @property
    @pulumi.getter(name="ingestBudgetId")
    def ingest_budget_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ingest_budget_id")

    @ingest_budget_id.setter
    def ingest_budget_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ingest_budget_id", value)


@pulumi.input_type
class _CollectorIngestBudgetAssignmentState:
    def __init__(__self__, *,
                 collector_id: Optional[pulumi.Input[str]] = None,
                 ingest_budget_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CollectorIngestBudgetAssignment resources.
        """
        if collector_id is not None:
            pulumi.set(__self__, "collector_id", collector_id)
        if ingest_budget_id is not None:
            pulumi.set(__self__, "ingest_budget_id", ingest_budget_id)

    @property
    @pulumi.getter(name="collectorId")
    def collector_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collector_id")

    @collector_id.setter
    def collector_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_id", value)

    @property
    @pulumi.getter(name="ingestBudgetId")
    def ingest_budget_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ingest_budget_id")

    @ingest_budget_id.setter
    def ingest_budget_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ingest_budget_id", value)


warnings.warn("""Use Collector.fields instead to assign an ingest bucket.""", DeprecationWarning)


class CollectorIngestBudgetAssignment(pulumi.CustomResource):
    warnings.warn("""Use Collector.fields instead to assign an ingest bucket.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collector_id: Optional[pulumi.Input[str]] = None,
                 ingest_budget_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a CollectorIngestBudgetAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CollectorIngestBudgetAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CollectorIngestBudgetAssignment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CollectorIngestBudgetAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CollectorIngestBudgetAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collector_id: Optional[pulumi.Input[str]] = None,
                 ingest_budget_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""CollectorIngestBudgetAssignment is deprecated: Use Collector.fields instead to assign an ingest bucket.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CollectorIngestBudgetAssignmentArgs.__new__(CollectorIngestBudgetAssignmentArgs)

            if collector_id is None and not opts.urn:
                raise TypeError("Missing required property 'collector_id'")
            __props__.__dict__["collector_id"] = collector_id
            if ingest_budget_id is None and not opts.urn:
                raise TypeError("Missing required property 'ingest_budget_id'")
            __props__.__dict__["ingest_budget_id"] = ingest_budget_id
        super(CollectorIngestBudgetAssignment, __self__).__init__(
            'sumologic:index/collectorIngestBudgetAssignment:CollectorIngestBudgetAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            collector_id: Optional[pulumi.Input[str]] = None,
            ingest_budget_id: Optional[pulumi.Input[str]] = None) -> 'CollectorIngestBudgetAssignment':
        """
        Get an existing CollectorIngestBudgetAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CollectorIngestBudgetAssignmentState.__new__(_CollectorIngestBudgetAssignmentState)

        __props__.__dict__["collector_id"] = collector_id
        __props__.__dict__["ingest_budget_id"] = ingest_budget_id
        return CollectorIngestBudgetAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="collectorId")
    def collector_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collector_id")

    @property
    @pulumi.getter(name="ingestBudgetId")
    def ingest_budget_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ingest_budget_id")

