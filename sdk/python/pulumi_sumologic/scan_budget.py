# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScanBudgetArgs', 'ScanBudget']

@pulumi.input_type
class ScanBudgetArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 applicable_on: pulumi.Input[str],
                 budget_type: pulumi.Input[str],
                 capacity: pulumi.Input[int],
                 group_by: pulumi.Input[str],
                 scope: pulumi.Input['ScanBudgetScopeArgs'],
                 status: pulumi.Input[str],
                 unit: pulumi.Input[str],
                 window: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ScanBudget resource.
        :param pulumi.Input[str] action: Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        :param pulumi.Input[str] applicable_on: Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        :param pulumi.Input[str] budget_type: Type of the budget. Supported values are: `ScanBudget`.
        :param pulumi.Input[int] capacity: Capacity of the scan budget. Only whole numbers are supported.
        :param pulumi.Input[str] group_by: Grouping Entity of the budget. Supported values are: `User`.
        :param pulumi.Input['ScanBudgetScopeArgs'] scope: Scope of the budget.
        :param pulumi.Input[str] status: Signifies the state of the budget. Supported values are: `active` and `inactive`.
               
               The following attributes are exported:
        :param pulumi.Input[str] unit: Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        :param pulumi.Input[str] window: Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        :param pulumi.Input[str] name: Display name of the scan budget. This must be unique across all the scan budgets.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "applicable_on", applicable_on)
        pulumi.set(__self__, "budget_type", budget_type)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "group_by", group_by)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "window", window)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="applicableOn")
    def applicable_on(self) -> pulumi.Input[str]:
        """
        Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        """
        return pulumi.get(self, "applicable_on")

    @applicable_on.setter
    def applicable_on(self, value: pulumi.Input[str]):
        pulumi.set(self, "applicable_on", value)

    @property
    @pulumi.getter(name="budgetType")
    def budget_type(self) -> pulumi.Input[str]:
        """
        Type of the budget. Supported values are: `ScanBudget`.
        """
        return pulumi.get(self, "budget_type")

    @budget_type.setter
    def budget_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "budget_type", value)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        """
        Capacity of the scan budget. Only whole numbers are supported.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> pulumi.Input[str]:
        """
        Grouping Entity of the budget. Supported values are: `User`.
        """
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['ScanBudgetScopeArgs']:
        """
        Scope of the budget.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['ScanBudgetScopeArgs']):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Signifies the state of the budget. Supported values are: `active` and `inactive`.

        The following attributes are exported:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def window(self) -> pulumi.Input[str]:
        """
        Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: pulumi.Input[str]):
        pulumi.set(self, "window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the scan budget. This must be unique across all the scan budgets.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ScanBudgetState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 applicable_on: Optional[pulumi.Input[str]] = None,
                 budget_type: Optional[pulumi.Input[str]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 group_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input['ScanBudgetScopeArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ScanBudget resources.
        :param pulumi.Input[str] action: Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        :param pulumi.Input[str] applicable_on: Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        :param pulumi.Input[str] budget_type: Type of the budget. Supported values are: `ScanBudget`.
        :param pulumi.Input[int] capacity: Capacity of the scan budget. Only whole numbers are supported.
        :param pulumi.Input[str] group_by: Grouping Entity of the budget. Supported values are: `User`.
        :param pulumi.Input[str] name: Display name of the scan budget. This must be unique across all the scan budgets.
        :param pulumi.Input['ScanBudgetScopeArgs'] scope: Scope of the budget.
        :param pulumi.Input[str] status: Signifies the state of the budget. Supported values are: `active` and `inactive`.
               
               The following attributes are exported:
        :param pulumi.Input[str] unit: Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        :param pulumi.Input[str] window: Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applicable_on is not None:
            pulumi.set(__self__, "applicable_on", applicable_on)
        if budget_type is not None:
            pulumi.set(__self__, "budget_type", budget_type)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="applicableOn")
    def applicable_on(self) -> Optional[pulumi.Input[str]]:
        """
        Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        """
        return pulumi.get(self, "applicable_on")

    @applicable_on.setter
    def applicable_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "applicable_on", value)

    @property
    @pulumi.getter(name="budgetType")
    def budget_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the budget. Supported values are: `ScanBudget`.
        """
        return pulumi.get(self, "budget_type")

    @budget_type.setter
    def budget_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "budget_type", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity of the scan budget. Only whole numbers are supported.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[str]]:
        """
        Grouping Entity of the budget. Supported values are: `User`.
        """
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the scan budget. This must be unique across all the scan budgets.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['ScanBudgetScopeArgs']]:
        """
        Scope of the budget.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['ScanBudgetScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Signifies the state of the budget. Supported values are: `active` and `inactive`.

        The following attributes are exported:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        """
        Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


class ScanBudget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 applicable_on: Optional[pulumi.Input[str]] = None,
                 budget_type: Optional[pulumi.Input[str]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 group_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[Union['ScanBudgetScopeArgs', 'ScanBudgetScopeArgsDict']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 window: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a [Sumologic Scan Budget](https://help.sumologic.com/docs/manage/manage-subscription/usage-management/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        budget = sumologic.ScanBudget("budget",
            name="TestBudget",
            capacity=10,
            unit="GB",
            budget_type="ScanBudget",
            window="Query",
            applicable_on="PerEntity",
            group_by="User",
            action="StopScan",
            status="active",
            scope={
                "included_users": ["000000000000011C"],
                "excluded_users": [],
                "included_roles": [],
                "excluded_roles": ["0000000000000196"],
            })
        ```

        ## Import

        Scan budgets can be imported using the budget ID, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/scanBudget:ScanBudget budget 00000000000123AB
        ```

        [1]: https://help.sumologic.com/docs/manage/manage-subscription/usage-management/

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        :param pulumi.Input[str] applicable_on: Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        :param pulumi.Input[str] budget_type: Type of the budget. Supported values are: `ScanBudget`.
        :param pulumi.Input[int] capacity: Capacity of the scan budget. Only whole numbers are supported.
        :param pulumi.Input[str] group_by: Grouping Entity of the budget. Supported values are: `User`.
        :param pulumi.Input[str] name: Display name of the scan budget. This must be unique across all the scan budgets.
        :param pulumi.Input[Union['ScanBudgetScopeArgs', 'ScanBudgetScopeArgsDict']] scope: Scope of the budget.
        :param pulumi.Input[str] status: Signifies the state of the budget. Supported values are: `active` and `inactive`.
               
               The following attributes are exported:
        :param pulumi.Input[str] unit: Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        :param pulumi.Input[str] window: Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScanBudgetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a [Sumologic Scan Budget](https://help.sumologic.com/docs/manage/manage-subscription/usage-management/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        budget = sumologic.ScanBudget("budget",
            name="TestBudget",
            capacity=10,
            unit="GB",
            budget_type="ScanBudget",
            window="Query",
            applicable_on="PerEntity",
            group_by="User",
            action="StopScan",
            status="active",
            scope={
                "included_users": ["000000000000011C"],
                "excluded_users": [],
                "included_roles": [],
                "excluded_roles": ["0000000000000196"],
            })
        ```

        ## Import

        Scan budgets can be imported using the budget ID, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/scanBudget:ScanBudget budget 00000000000123AB
        ```

        [1]: https://help.sumologic.com/docs/manage/manage-subscription/usage-management/

        :param str resource_name: The name of the resource.
        :param ScanBudgetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScanBudgetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 applicable_on: Optional[pulumi.Input[str]] = None,
                 budget_type: Optional[pulumi.Input[str]] = None,
                 capacity: Optional[pulumi.Input[int]] = None,
                 group_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[Union['ScanBudgetScopeArgs', 'ScanBudgetScopeArgsDict']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 window: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScanBudgetArgs.__new__(ScanBudgetArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if applicable_on is None and not opts.urn:
                raise TypeError("Missing required property 'applicable_on'")
            __props__.__dict__["applicable_on"] = applicable_on
            if budget_type is None and not opts.urn:
                raise TypeError("Missing required property 'budget_type'")
            __props__.__dict__["budget_type"] = budget_type
            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            if group_by is None and not opts.urn:
                raise TypeError("Missing required property 'group_by'")
            __props__.__dict__["group_by"] = group_by
            __props__.__dict__["name"] = name
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if unit is None and not opts.urn:
                raise TypeError("Missing required property 'unit'")
            __props__.__dict__["unit"] = unit
            if window is None and not opts.urn:
                raise TypeError("Missing required property 'window'")
            __props__.__dict__["window"] = window
        super(ScanBudget, __self__).__init__(
            'sumologic:index/scanBudget:ScanBudget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            applicable_on: Optional[pulumi.Input[str]] = None,
            budget_type: Optional[pulumi.Input[str]] = None,
            capacity: Optional[pulumi.Input[int]] = None,
            group_by: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[Union['ScanBudgetScopeArgs', 'ScanBudgetScopeArgsDict']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            unit: Optional[pulumi.Input[str]] = None,
            window: Optional[pulumi.Input[str]] = None) -> 'ScanBudget':
        """
        Get an existing ScanBudget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        :param pulumi.Input[str] applicable_on: Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        :param pulumi.Input[str] budget_type: Type of the budget. Supported values are: `ScanBudget`.
        :param pulumi.Input[int] capacity: Capacity of the scan budget. Only whole numbers are supported.
        :param pulumi.Input[str] group_by: Grouping Entity of the budget. Supported values are: `User`.
        :param pulumi.Input[str] name: Display name of the scan budget. This must be unique across all the scan budgets.
        :param pulumi.Input[Union['ScanBudgetScopeArgs', 'ScanBudgetScopeArgsDict']] scope: Scope of the budget.
        :param pulumi.Input[str] status: Signifies the state of the budget. Supported values are: `active` and `inactive`.
               
               The following attributes are exported:
        :param pulumi.Input[str] unit: Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        :param pulumi.Input[str] window: Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScanBudgetState.__new__(_ScanBudgetState)

        __props__.__dict__["action"] = action
        __props__.__dict__["applicable_on"] = applicable_on
        __props__.__dict__["budget_type"] = budget_type
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["group_by"] = group_by
        __props__.__dict__["name"] = name
        __props__.__dict__["scope"] = scope
        __props__.__dict__["status"] = status
        __props__.__dict__["unit"] = unit
        __props__.__dict__["window"] = window
        return ScanBudget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action to be taken if the budget is breached. Supported values are: `StopForeGroundScan` and `Warn`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="applicableOn")
    def applicable_on(self) -> pulumi.Output[str]:
        """
        Grouping of the budget. Supported values are: `PerEntity` and `Sum`.
        """
        return pulumi.get(self, "applicable_on")

    @property
    @pulumi.getter(name="budgetType")
    def budget_type(self) -> pulumi.Output[str]:
        """
        Type of the budget. Supported values are: `ScanBudget`.
        """
        return pulumi.get(self, "budget_type")

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[int]:
        """
        Capacity of the scan budget. Only whole numbers are supported.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> pulumi.Output[str]:
        """
        Grouping Entity of the budget. Supported values are: `User`.
        """
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Display name of the scan budget. This must be unique across all the scan budgets.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output['outputs.ScanBudgetScope']:
        """
        Scope of the budget.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Signifies the state of the budget. Supported values are: `active` and `inactive`.

        The following attributes are exported:
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[str]:
        """
        Unit of the capacity. Supported values are: `MB`, `GB` and `TB`.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def window(self) -> pulumi.Output[str]:
        """
        Window of the budget. Supported values are: `Query`, `Daily`, `Weekly` and `Monthly`.
        """
        return pulumi.get(self, "window")

