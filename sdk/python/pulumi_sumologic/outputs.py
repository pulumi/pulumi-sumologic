# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AwsInventorySourceAuthentication',
    'AwsInventorySourceDefaultDateFormat',
    'AwsInventorySourceFilter',
    'AwsInventorySourcePath',
    'AwsInventorySourcePathCustomService',
    'AwsInventorySourcePathSnsTopicOrSubscriptionArn',
    'AwsInventorySourcePathTagFilter',
    'AwsXraySourceAuthentication',
    'AwsXraySourceDefaultDateFormat',
    'AwsXraySourceFilter',
    'AwsXraySourcePath',
    'AwsXraySourcePathCustomService',
    'AwsXraySourcePathSnsTopicOrSubscriptionArn',
    'AwsXraySourcePathTagFilter',
    'CloudSyslogSourceDefaultDateFormat',
    'CloudSyslogSourceFilter',
    'CloudfrontSourceAuthentication',
    'CloudfrontSourceDefaultDateFormat',
    'CloudfrontSourceFilter',
    'CloudfrontSourcePath',
    'CloudfrontSourcePathCustomService',
    'CloudfrontSourcePathSnsTopicOrSubscriptionArn',
    'CloudfrontSourcePathTagFilter',
    'CloudtrailSourceAuthentication',
    'CloudtrailSourceDefaultDateFormat',
    'CloudtrailSourceFilter',
    'CloudtrailSourcePath',
    'CloudtrailSourcePathCustomService',
    'CloudtrailSourcePathSnsTopicOrSubscriptionArn',
    'CloudtrailSourcePathTagFilter',
    'CloudwatchSourceAuthentication',
    'CloudwatchSourceDefaultDateFormat',
    'CloudwatchSourceFilter',
    'CloudwatchSourcePath',
    'CloudwatchSourcePathCustomService',
    'CloudwatchSourcePathSnsTopicOrSubscriptionArn',
    'CloudwatchSourcePathTagFilter',
    'ContentPermissionPermission',
    'CseAggregationRuleAggregationFunction',
    'CseAggregationRuleEntitySelector',
    'CseAggregationRuleSeverityMapping',
    'CseAggregationRuleSeverityMappingMapping',
    'CseChainRuleEntitySelector',
    'CseChainRuleExpressionsAndLimit',
    'CseEntityNormalizationConfigurationDomainMapping',
    'CseFirstSeenRuleEntitySelector',
    'CseLogMappingField',
    'CseLogMappingFieldLookup',
    'CseLogMappingStructuredInput',
    'CseLogMappingUnstructuredFields',
    'CseMatchListItem',
    'CseMatchRuleEntitySelector',
    'CseMatchRuleSeverityMapping',
    'CseMatchRuleSeverityMappingMapping',
    'CseOutlierRuleAggregationFunctions',
    'CseOutlierRuleEntitySelector',
    'CseTagSchemaValueOption',
    'CseThresholdRuleEntitySelector',
    'DashboardColoringRule',
    'DashboardColoringRuleColorThreshold',
    'DashboardLayout',
    'DashboardLayoutGrid',
    'DashboardLayoutGridLayoutStructure',
    'DashboardPanel',
    'DashboardPanelSumoSearchPanel',
    'DashboardPanelSumoSearchPanelColoringRule',
    'DashboardPanelSumoSearchPanelColoringRuleColorThreshold',
    'DashboardPanelSumoSearchPanelLinkedDashboard',
    'DashboardPanelSumoSearchPanelQuery',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryData',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator',
    'DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter',
    'DashboardPanelSumoSearchPanelTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange',
    'DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange',
    'DashboardPanelTextPanel',
    'DashboardTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeFrom',
    'DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeTo',
    'DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange',
    'DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange',
    'DashboardTimeRangeCompleteLiteralTimeRange',
    'DashboardTopologyLabelMap',
    'DashboardTopologyLabelMapData',
    'DashboardVariable',
    'DashboardVariableSourceDefinition',
    'DashboardVariableSourceDefinitionCsvVariableSourceDefinition',
    'DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition',
    'DashboardVariableSourceDefinitionMetadataVariableSourceDefinition',
    'ElbSourceAuthentication',
    'ElbSourceDefaultDateFormat',
    'ElbSourceFilter',
    'ElbSourcePath',
    'ElbSourcePathCustomService',
    'ElbSourcePathSnsTopicOrSubscriptionArn',
    'ElbSourcePathTagFilter',
    'GcpMetricsSourceAuthentication',
    'GcpMetricsSourceDefaultDateFormat',
    'GcpMetricsSourceFilter',
    'GcpMetricsSourcePath',
    'GcpMetricsSourcePathCustomService',
    'GcpMetricsSourcePathSnsTopicOrSubscriptionArn',
    'GcpMetricsSourcePathTagFilter',
    'GcpSourceAuthentication',
    'GcpSourceDefaultDateFormat',
    'GcpSourceFilter',
    'GcpSourcePath',
    'HierarchyFilter',
    'HierarchyLevel',
    'HierarchyLevelNextLevel',
    'HierarchyLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition',
    'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel',
    'HttpSourceDefaultDateFormat',
    'HttpSourceFilter',
    'KineisLogSourceAuthentication',
    'KineisLogSourceDefaultDateFormat',
    'KineisLogSourceFilter',
    'KineisLogSourcePath',
    'KinesisMetricsSourceAuthentication',
    'KinesisMetricsSourceDefaultDateFormat',
    'KinesisMetricsSourceFilter',
    'KinesisMetricsSourcePath',
    'KinesisMetricsSourcePathTagFilter',
    'LocalFileSourceDefaultDateFormat',
    'LocalFileSourceFilter',
    'LogSearchQueryParameter',
    'LogSearchSchedule',
    'LogSearchScheduleNotification',
    'LogSearchScheduleNotificationAlertSearchNotification',
    'LogSearchScheduleNotificationCseSignalNotification',
    'LogSearchScheduleNotificationEmailSearchNotification',
    'LogSearchScheduleNotificationSaveToLookupNotification',
    'LogSearchScheduleNotificationSaveToViewNotification',
    'LogSearchScheduleNotificationServiceNowSearchNotification',
    'LogSearchScheduleNotificationServiceNowSearchNotificationFields',
    'LogSearchScheduleNotificationWebhookSearchNotification',
    'LogSearchScheduleParameter',
    'LogSearchScheduleParseableTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange',
    'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange',
    'LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange',
    'LogSearchScheduleThreshold',
    'LogSearchTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeFrom',
    'LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeTo',
    'LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange',
    'LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange',
    'LogSearchTimeRangeCompleteLiteralTimeRange',
    'LookupTableField',
    'MetadataSourceAuthentication',
    'MetadataSourceDefaultDateFormat',
    'MetadataSourceFilter',
    'MetadataSourcePath',
    'MetricsSearchMetricsQuery',
    'MetricsSearchTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeFrom',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeTo',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange',
    'MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange',
    'MetricsSearchTimeRangeCompleteLiteralTimeRange',
    'MonitorFolderObjPermission',
    'MonitorNotification',
    'MonitorNotificationNotification',
    'MonitorObjPermission',
    'MonitorQuery',
    'MonitorTrigger',
    'MonitorTriggerConditions',
    'MonitorTriggerConditionsLogsMissingDataCondition',
    'MonitorTriggerConditionsLogsOutlierCondition',
    'MonitorTriggerConditionsLogsOutlierConditionCritical',
    'MonitorTriggerConditionsLogsOutlierConditionWarning',
    'MonitorTriggerConditionsLogsStaticCondition',
    'MonitorTriggerConditionsLogsStaticConditionCritical',
    'MonitorTriggerConditionsLogsStaticConditionCriticalAlert',
    'MonitorTriggerConditionsLogsStaticConditionCriticalResolution',
    'MonitorTriggerConditionsLogsStaticConditionWarning',
    'MonitorTriggerConditionsLogsStaticConditionWarningAlert',
    'MonitorTriggerConditionsLogsStaticConditionWarningResolution',
    'MonitorTriggerConditionsMetricsMissingDataCondition',
    'MonitorTriggerConditionsMetricsOutlierCondition',
    'MonitorTriggerConditionsMetricsOutlierConditionCritical',
    'MonitorTriggerConditionsMetricsOutlierConditionWarning',
    'MonitorTriggerConditionsMetricsStaticCondition',
    'MonitorTriggerConditionsMetricsStaticConditionCritical',
    'MonitorTriggerConditionsMetricsStaticConditionCriticalAlert',
    'MonitorTriggerConditionsMetricsStaticConditionCriticalResolution',
    'MonitorTriggerConditionsMetricsStaticConditionWarning',
    'MonitorTriggerConditionsMetricsStaticConditionWarningAlert',
    'MonitorTriggerConditionsMetricsStaticConditionWarningResolution',
    'MonitorTriggerConditionsSloBurnRateCondition',
    'MonitorTriggerConditionsSloBurnRateConditionCritical',
    'MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate',
    'MonitorTriggerConditionsSloBurnRateConditionWarning',
    'MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate',
    'MonitorTriggerConditionsSloSliCondition',
    'MonitorTriggerConditionsSloSliConditionCritical',
    'MonitorTriggerConditionsSloSliConditionWarning',
    'MutingScheduleMonitor',
    'MutingScheduleSchedule',
    'PoliciesUserConcurrentSessionsLimit',
    'PollingSourceAuthentication',
    'PollingSourceDefaultDateFormat',
    'PollingSourceFilter',
    'PollingSourcePath',
    'PollingSourcePathTagFilter',
    'RumSourceDefaultDateFormat',
    'RumSourceFilter',
    'RumSourcePath',
    'S3ArchiveSourceAuthentication',
    'S3ArchiveSourceDefaultDateFormat',
    'S3ArchiveSourceFilter',
    'S3ArchiveSourcePath',
    'S3ArchiveSourcePathCustomService',
    'S3ArchiveSourcePathSnsTopicOrSubscriptionArn',
    'S3ArchiveSourcePathTagFilter',
    'S3AuditSourceAuthentication',
    'S3AuditSourceDefaultDateFormat',
    'S3AuditSourceFilter',
    'S3AuditSourcePath',
    'S3AuditSourcePathCustomService',
    'S3AuditSourcePathSnsTopicOrSubscriptionArn',
    'S3AuditSourcePathTagFilter',
    'S3SourceAuthentication',
    'S3SourceDefaultDateFormat',
    'S3SourceFilter',
    'S3SourcePath',
    'S3SourcePathCustomService',
    'S3SourcePathSnsTopicOrSubscriptionArn',
    'S3SourcePathTagFilter',
    'SamlConfigurationOnDemandProvisioningEnabled',
    'SloCompliance',
    'SloIndicator',
    'SloIndicatorMonitorBasedEvaluation',
    'SloIndicatorMonitorBasedEvaluationMonitorTriggers',
    'SloIndicatorRequestBasedEvaluation',
    'SloIndicatorRequestBasedEvaluationQuery',
    'SloIndicatorRequestBasedEvaluationQueryQueryGroup',
    'SloIndicatorWindowBasedEvaluation',
    'SloIndicatorWindowBasedEvaluationQuery',
    'SloIndicatorWindowBasedEvaluationQueryQueryGroup',
]

@pulumi.output_type
class AwsInventorySourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsInventorySourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsInventorySourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsInventorySourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        :param str role_arn: Your AWS role ARN. More details [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Grant-Access-to-an-AWS-Product#iam-role).
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN. More details [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Grant-Access-to-an-AWS-Product#iam-role).
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class AwsInventorySourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class AwsInventorySourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsInventorySourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsInventorySourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsInventorySourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class AwsInventorySourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsInventorySourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsInventorySourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsInventorySourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.AwsInventorySourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.AwsInventorySourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.AwsInventorySourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        :param Sequence[str] limit_to_namespaces: List of namespaces. By default all namespaces are selected. You can also choose a subset from
               + AWS/EC2
               + AWS/AutoScaling
               + AWS/EBS
               + AWS/ELB
               + AWS/ApplicationELB
               + AWS/NetworkELB
               + AWS/Lambda
               + AWS/RDS
               + AWS/Dynamodb
               + AWS/ECS
               + AWS/Elasticache
               + AWS/Redshift
               + AWS/Kinesis
        :param Sequence[str] limit_to_regions: List of Amazon regions.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.AwsInventorySourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces. By default all namespaces are selected. You can also choose a subset from
        + AWS/EC2
        + AWS/AutoScaling
        + AWS/EBS
        + AWS/ELB
        + AWS/ApplicationELB
        + AWS/NetworkELB
        + AWS/Lambda
        + AWS/RDS
        + AWS/Dynamodb
        + AWS/ECS
        + AWS/Elasticache
        + AWS/Redshift
        + AWS/Kinesis
        """
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of Amazon regions.
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.AwsInventorySourcePathSnsTopicOrSubscriptionArn']]:
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.AwsInventorySourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class AwsInventorySourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsInventorySourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsInventorySourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsInventorySourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AwsInventorySourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsInventorySourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsInventorySourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsInventorySourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class AwsInventorySourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `AwsInventoryPath` for AWS Inventory source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AwsXraySourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsXraySourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsXraySourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsXraySourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class AwsXraySourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class AwsXraySourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsXraySourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsXraySourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsXraySourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class AwsXraySourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsXraySourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsXraySourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsXraySourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.AwsXraySourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.AwsXraySourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.AwsXraySourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        :param Sequence[str] limit_to_regions: List of Amazon regions.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.AwsXraySourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of Amazon regions.
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.AwsXraySourcePathSnsTopicOrSubscriptionArn']]:
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.AwsXraySourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class AwsXraySourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsXraySourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsXraySourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsXraySourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AwsXraySourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AwsXraySourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AwsXraySourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AwsXraySourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class AwsXraySourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `AwsXRayPath` for AWS XRay source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CloudSyslogSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class CloudSyslogSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudSyslogSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudSyslogSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudSyslogSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class CloudfrontSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudfrontSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudfrontSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudfrontSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class CloudfrontSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class CloudfrontSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudfrontSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudfrontSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudfrontSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class CloudfrontSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudfrontSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudfrontSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudfrontSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.CloudfrontSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.CloudfrontSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.CloudfrontSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        :param str bucket_name: The name of the bucket. This is needed if using type `S3BucketPathExpression`.
        :param str path_expression: The path to the data. This is needed if using type `S3BucketPathExpression`.
        :param Sequence['CloudfrontSourcePathSnsTopicOrSubscriptionArnArgs'] sns_topic_or_subscription_arns: This is a computed field for SNS topic/subscription ARN.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket. This is needed if using type `S3BucketPathExpression`.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.CloudfrontSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data. This is needed if using type `S3BucketPathExpression`.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.CloudfrontSourcePathSnsTopicOrSubscriptionArn']]:
        """
        This is a computed field for SNS topic/subscription ARN.
        """
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.CloudfrontSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class CloudfrontSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudfrontSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudfrontSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudfrontSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class CloudfrontSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudfrontSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudfrontSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudfrontSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class CloudfrontSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudFront` source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CloudtrailSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudtrailSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudtrailSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudtrailSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class CloudtrailSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class CloudtrailSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudtrailSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudtrailSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudtrailSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class CloudtrailSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudtrailSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudtrailSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudtrailSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.CloudtrailSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.CloudtrailSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.CloudtrailSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        :param str bucket_name: The name of the bucket.
        :param str path_expression: The path to the data.
        :param Sequence['CloudtrailSourcePathSnsTopicOrSubscriptionArnArgs'] sns_topic_or_subscription_arns: This is a computed field for SNS topic/subscription ARN.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.CloudtrailSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.CloudtrailSourcePathSnsTopicOrSubscriptionArn']]:
        """
        This is a computed field for SNS topic/subscription ARN.
        """
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.CloudtrailSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class CloudtrailSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudtrailSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudtrailSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudtrailSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class CloudtrailSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudtrailSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudtrailSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudtrailSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class CloudtrailSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `CloudTrail` source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CloudwatchSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwatchSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwatchSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwatchSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class CloudwatchSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class CloudwatchSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwatchSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwatchSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwatchSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class CloudwatchSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwatchSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwatchSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwatchSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.CloudwatchSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.CloudwatchSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.CloudwatchSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param Sequence[str] limit_to_namespaces: List of namespaces. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace.
        :param Sequence[str] limit_to_regions: List of Amazon regions.
        :param Sequence['CloudwatchSourcePathTagFilterArgs'] tag_filters: Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.CloudwatchSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace.
        """
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of Amazon regions.
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.CloudwatchSourcePathSnsTopicOrSubscriptionArn']]:
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.CloudwatchSourcePathTagFilter']]:
        """
        Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class CloudwatchSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwatchSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwatchSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwatchSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class CloudwatchSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudwatchSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudwatchSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudwatchSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class CloudwatchSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str namespace: Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        :param Sequence[str] tags: List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        :param str type: This value has to be set to `TagFilters`
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ContentPermissionPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "permissionName":
            suggest = "permission_name"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentPermissionPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentPermissionPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentPermissionPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission_name: str,
                 source_id: str,
                 source_type: str):
        """
        :param str permission_name: Content permission name. Valid values are `View`, `GrantView`,
               `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
               [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
        :param str source_id: An identifier that belongs to the source type chosen above. For example,
               if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
               content with (same goes for role and org source type).
        :param str source_type: Type of source for the permission. Valid values are `user`, `role`,
               and `org`.
        """
        pulumi.set(__self__, "permission_name", permission_name)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="permissionName")
    def permission_name(self) -> str:
        """
        Content permission name. Valid values are `View`, `GrantView`,
        `Edit`, `GrantEdit`, `Manage`, and `GrantManage`. You can read more about permission levels
        [here](https://help.sumologic.com/Manage/Content_Sharing/Share-Content#available-permission-levels).
        """
        return pulumi.get(self, "permission_name")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        An identifier that belongs to the source type chosen above. For example,
        if the `sourceType` is set to `user`, `sourceId` should be identifier of the user you want to share
        content with (same goes for role and org source type).
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        Type of source for the permission. Valid values are `user`, `role`,
        and `org`.
        """
        return pulumi.get(self, "source_type")


@pulumi.output_type
class CseAggregationRuleAggregationFunction(dict):
    def __init__(__self__, *,
                 arguments: Sequence[str],
                 function: str,
                 name: str):
        """
        :param Sequence[str] arguments: One or more expressions to pass as arguments to the function
        :param str function: The function to aggregate with
        :param str name: The name of the Rule
        """
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence[str]:
        """
        One or more expressions to pass as arguments to the function
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter
    def function(self) -> str:
        """
        The function to aggregate with
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CseAggregationRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseAggregationRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseAggregationRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseAggregationRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression or field name to generate the Signal on.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression or field name to generate the Signal on.
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class CseAggregationRuleSeverityMapping(dict):
    def __init__(__self__, *,
                 type: str,
                 default: Optional[int] = None,
                 field: Optional[str] = None,
                 mappings: Optional[Sequence['outputs.CseAggregationRuleSeverityMappingMapping']] = None):
        """
        :param str type: Must be set to "eq" currently
        :param int default: The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
        :param str field: The field to use in the "fieldValue"/"fieldValueMapping" cases.
        :param Sequence['CseAggregationRuleSeverityMappingMappingArgs'] mappings: The map of record values to severities to use in the "fieldValueMapping" case
        """
        pulumi.set(__self__, "type", type)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Must be set to "eq" currently
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def default(self) -> Optional[int]:
        """
        The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        The field to use in the "fieldValue"/"fieldValueMapping" cases.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.CseAggregationRuleSeverityMappingMapping']]:
        """
        The map of record values to severities to use in the "fieldValueMapping" case
        """
        return pulumi.get(self, "mappings")


@pulumi.output_type
class CseAggregationRuleSeverityMappingMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseAggregationRuleSeverityMappingMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseAggregationRuleSeverityMappingMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseAggregationRuleSeverityMappingMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: int,
                 type: str):
        """
        :param str from_: The record value to map from
        :param int to: The severity value to map to
        :param str type: Must be set to "eq" currently
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The record value to map from
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> int:
        """
        The severity value to map to
        """
        return pulumi.get(self, "to")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Must be set to "eq" currently
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CseChainRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseChainRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseChainRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseChainRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression for which records to match on
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression for which records to match on
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class CseChainRuleExpressionsAndLimit(dict):
    def __init__(__self__, *,
                 expression: str,
                 limit: int):
        """
        :param str expression: The expression for which records to match on
        :param int limit: How many times this expression must match for the Signal to fire
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression for which records to match on
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        How many times this expression must match for the Signal to fire
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class CseEntityNormalizationConfigurationDomainMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "normalizedDomain":
            suggest = "normalized_domain"
        elif key == "rawDomain":
            suggest = "raw_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseEntityNormalizationConfigurationDomainMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseEntityNormalizationConfigurationDomainMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseEntityNormalizationConfigurationDomainMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 normalized_domain: str,
                 raw_domain: str):
        """
        :param str normalized_domain: The normalized domain.
        :param str raw_domain: The raw domain to be normalized.
        """
        pulumi.set(__self__, "normalized_domain", normalized_domain)
        pulumi.set(__self__, "raw_domain", raw_domain)

    @property
    @pulumi.getter(name="normalizedDomain")
    def normalized_domain(self) -> str:
        """
        The normalized domain.
        """
        return pulumi.get(self, "normalized_domain")

    @property
    @pulumi.getter(name="rawDomain")
    def raw_domain(self) -> str:
        """
        The raw domain to be normalized.
        """
        return pulumi.get(self, "raw_domain")


@pulumi.output_type
class CseFirstSeenRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseFirstSeenRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseFirstSeenRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseFirstSeenRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression or field name to generate the Signal on
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression or field name to generate the Signal on
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class CseLogMappingField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alternateValues":
            suggest = "alternate_values"
        elif key == "caseInsensitive":
            suggest = "case_insensitive"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "fieldJoins":
            suggest = "field_joins"
        elif key == "formatParameters":
            suggest = "format_parameters"
        elif key == "joinDelimiter":
            suggest = "join_delimiter"
        elif key == "skippedValues":
            suggest = "skipped_values"
        elif key == "splitDelimiter":
            suggest = "split_delimiter"
        elif key == "splitIndex":
            suggest = "split_index"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseLogMappingField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseLogMappingField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseLogMappingField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 alternate_values: Optional[Sequence[str]] = None,
                 case_insensitive: Optional[bool] = None,
                 default_value: Optional[str] = None,
                 field_joins: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 format_parameters: Optional[Sequence[str]] = None,
                 join_delimiter: Optional[str] = None,
                 lookups: Optional[Sequence['outputs.CseLogMappingFieldLookup']] = None,
                 skipped_values: Optional[Sequence[str]] = None,
                 split_delimiter: Optional[str] = None,
                 split_index: Optional[int] = None,
                 time_zone: Optional[str] = None,
                 value: Optional[str] = None,
                 value_type: Optional[str] = None):
        """
        :param str name: The name of the log mapping.
        :param Sequence[str] alternate_values: List of alternate values.
        :param bool case_insensitive: Case insensitive flag.
        :param str default_value: Default value of the field.
        :param Sequence[str] field_joins: List of field join values.
        :param str format: Format of the field. (JSON, Windows, Syslog, CEF, LEEF )
        :param Sequence[str] format_parameters: List of format parameters.
        :param str join_delimiter: Join delimiter.
        :param Sequence['CseLogMappingFieldLookupArgs'] lookups: List of lookup key value pair for field. See lookup_schema for details.
        :param Sequence[str] skipped_values: List of skipped values.
        :param str split_delimiter: Split delimiter to be used. (some example: ",", "-", "|")
        :param int split_index: The index value to select (starting at zero)
        :param str time_zone: Time zone.
        :param str value: Lookup value.
        :param str value_type: The value type.
        """
        pulumi.set(__self__, "name", name)
        if alternate_values is not None:
            pulumi.set(__self__, "alternate_values", alternate_values)
        if case_insensitive is not None:
            pulumi.set(__self__, "case_insensitive", case_insensitive)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if field_joins is not None:
            pulumi.set(__self__, "field_joins", field_joins)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if format_parameters is not None:
            pulumi.set(__self__, "format_parameters", format_parameters)
        if join_delimiter is not None:
            pulumi.set(__self__, "join_delimiter", join_delimiter)
        if lookups is not None:
            pulumi.set(__self__, "lookups", lookups)
        if skipped_values is not None:
            pulumi.set(__self__, "skipped_values", skipped_values)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if split_index is not None:
            pulumi.set(__self__, "split_index", split_index)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the log mapping.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="alternateValues")
    def alternate_values(self) -> Optional[Sequence[str]]:
        """
        List of alternate values.
        """
        return pulumi.get(self, "alternate_values")

    @property
    @pulumi.getter(name="caseInsensitive")
    def case_insensitive(self) -> Optional[bool]:
        """
        Case insensitive flag.
        """
        return pulumi.get(self, "case_insensitive")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        Default value of the field.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="fieldJoins")
    def field_joins(self) -> Optional[Sequence[str]]:
        """
        List of field join values.
        """
        return pulumi.get(self, "field_joins")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format of the field. (JSON, Windows, Syslog, CEF, LEEF )
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="formatParameters")
    def format_parameters(self) -> Optional[Sequence[str]]:
        """
        List of format parameters.
        """
        return pulumi.get(self, "format_parameters")

    @property
    @pulumi.getter(name="joinDelimiter")
    def join_delimiter(self) -> Optional[str]:
        """
        Join delimiter.
        """
        return pulumi.get(self, "join_delimiter")

    @property
    @pulumi.getter
    def lookups(self) -> Optional[Sequence['outputs.CseLogMappingFieldLookup']]:
        """
        List of lookup key value pair for field. See lookup_schema for details.
        """
        return pulumi.get(self, "lookups")

    @property
    @pulumi.getter(name="skippedValues")
    def skipped_values(self) -> Optional[Sequence[str]]:
        """
        List of skipped values.
        """
        return pulumi.get(self, "skipped_values")

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[str]:
        """
        Split delimiter to be used. (some example: ",", "-", "|")
        """
        return pulumi.get(self, "split_delimiter")

    @property
    @pulumi.getter(name="splitIndex")
    def split_index(self) -> Optional[int]:
        """
        The index value to select (starting at zero)
        """
        return pulumi.get(self, "split_index")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        """
        Time zone.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Lookup value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        """
        The value type.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class CseLogMappingFieldLookup(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Lookup key.
        :param str value: Lookup value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Lookup key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Lookup value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CseLogMappingStructuredInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventIdPattern":
            suggest = "event_id_pattern"
        elif key == "logFormat":
            suggest = "log_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseLogMappingStructuredInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseLogMappingStructuredInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseLogMappingStructuredInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_id_pattern: str,
                 log_format: str,
                 product: str,
                 vendor: str):
        """
        :param str event_id_pattern: Event id pattern.
        :param str log_format: Log format. (JSON, Windows, Syslog, CEF, LEEF )
        :param str product: Product name.
        :param str vendor: Vendor name.
        """
        pulumi.set(__self__, "event_id_pattern", event_id_pattern)
        pulumi.set(__self__, "log_format", log_format)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter(name="eventIdPattern")
    def event_id_pattern(self) -> str:
        """
        Event id pattern.
        """
        return pulumi.get(self, "event_id_pattern")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        """
        Log format. (JSON, Windows, Syslog, CEF, LEEF )
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        Product name.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        Vendor name.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class CseLogMappingUnstructuredFields(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "patternNames":
            suggest = "pattern_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseLogMappingUnstructuredFields. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseLogMappingUnstructuredFields.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseLogMappingUnstructuredFields.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pattern_names: Sequence[str]):
        """
        :param Sequence[str] pattern_names: List of grok pattern names.
               
               
               The following attributes are exported:
        """
        pulumi.set(__self__, "pattern_names", pattern_names)

    @property
    @pulumi.getter(name="patternNames")
    def pattern_names(self) -> Sequence[str]:
        """
        List of grok pattern names.


        The following attributes are exported:
        """
        return pulumi.get(self, "pattern_names")


@pulumi.output_type
class CseMatchListItem(dict):
    def __init__(__self__, *,
                 description: str,
                 value: str,
                 expiration: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str description: Match list description.
        :param str value: Match list item value.
        :param str expiration: Match list item expiration. (Format: YYYY-MM-DDTHH:mm:ss)
               
               The following attributes are exported:
        :param str id: The internal ID of the match list.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "value", value)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Match list description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Match list item value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        """
        Match list item expiration. (Format: YYYY-MM-DDTHH:mm:ss)

        The following attributes are exported:
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The internal ID of the match list.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class CseMatchRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseMatchRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseMatchRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseMatchRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression for which records to match on
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression for which records to match on
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class CseMatchRuleSeverityMapping(dict):
    def __init__(__self__, *,
                 type: str,
                 default: Optional[int] = None,
                 field: Optional[str] = None,
                 mappings: Optional[Sequence['outputs.CseMatchRuleSeverityMappingMapping']] = None):
        """
        :param str type: Must be set to "eq" currently
        :param int default: The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
        :param str field: The field to use in the "fieldValue"/"fieldValueMapping" cases.
        :param Sequence['CseMatchRuleSeverityMappingMappingArgs'] mappings: The map of record values to severities to use in the "fieldValueMapping" case
        """
        pulumi.set(__self__, "type", type)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Must be set to "eq" currently
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def default(self) -> Optional[int]:
        """
        The severity to use in the "constant" case or to fall back to if the field used by "fieldValue"/"fieldValueMapping" is not populated.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        The field to use in the "fieldValue"/"fieldValueMapping" cases.
        """
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.CseMatchRuleSeverityMappingMapping']]:
        """
        The map of record values to severities to use in the "fieldValueMapping" case
        """
        return pulumi.get(self, "mappings")


@pulumi.output_type
class CseMatchRuleSeverityMappingMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseMatchRuleSeverityMappingMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseMatchRuleSeverityMappingMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseMatchRuleSeverityMappingMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 to: int,
                 type: str):
        """
        :param str from_: The record value to map from
        :param int to: The severity value to map to
        :param str type: Must be set to "eq" currently
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        The record value to map from
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> int:
        """
        The severity value to map to
        """
        return pulumi.get(self, "to")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Must be set to "eq" currently
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CseOutlierRuleAggregationFunctions(dict):
    def __init__(__self__, *,
                 arguments: Sequence[str],
                 function: str,
                 name: str):
        """
        :param Sequence[str] arguments: One or more expressions to pass as arguments to the function
        :param str function: The function to aggregate with
        :param str name: The name of the Rule
        """
        pulumi.set(__self__, "arguments", arguments)
        pulumi.set(__self__, "function", function)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence[str]:
        """
        One or more expressions to pass as arguments to the function
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter
    def function(self) -> str:
        """
        The function to aggregate with
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CseOutlierRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseOutlierRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseOutlierRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseOutlierRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression or field name to generate the Signal on
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression or field name to generate the Signal on
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class CseTagSchemaValueOption(dict):
    def __init__(__self__, *,
                 value: str,
                 label: Optional[str] = None,
                 link: Optional[str] = None):
        """
        :param str value: Value option value.
        :param str label: Value option label.
        :param str link: Value option link.
               
               
               
               The following attributes are exported:
        """
        pulumi.set(__self__, "value", value)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value option value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Value option label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        """
        Value option link.



        The following attributes are exported:
        """
        return pulumi.get(self, "link")


@pulumi.output_type
class CseThresholdRuleEntitySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CseThresholdRuleEntitySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CseThresholdRuleEntitySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CseThresholdRuleEntitySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 expression: str):
        """
        :param str expression: The expression for which records to match on
        """
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The expression for which records to match on
        """
        return pulumi.get(self, "expression")


@pulumi.output_type
class DashboardColoringRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multipleSeriesAggregateFunction":
            suggest = "multiple_series_aggregate_function"
        elif key == "singleSeriesAggregateFunction":
            suggest = "single_series_aggregate_function"
        elif key == "colorThresholds":
            suggest = "color_thresholds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardColoringRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardColoringRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardColoringRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 multiple_series_aggregate_function: str,
                 scope: str,
                 single_series_aggregate_function: str,
                 color_thresholds: Optional[Sequence['outputs.DashboardColoringRuleColorThreshold']] = None):
        pulumi.set(__self__, "multiple_series_aggregate_function", multiple_series_aggregate_function)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "single_series_aggregate_function", single_series_aggregate_function)
        if color_thresholds is not None:
            pulumi.set(__self__, "color_thresholds", color_thresholds)

    @property
    @pulumi.getter(name="multipleSeriesAggregateFunction")
    def multiple_series_aggregate_function(self) -> str:
        return pulumi.get(self, "multiple_series_aggregate_function")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="singleSeriesAggregateFunction")
    def single_series_aggregate_function(self) -> str:
        return pulumi.get(self, "single_series_aggregate_function")

    @property
    @pulumi.getter(name="colorThresholds")
    def color_thresholds(self) -> Optional[Sequence['outputs.DashboardColoringRuleColorThreshold']]:
        return pulumi.get(self, "color_thresholds")


@pulumi.output_type
class DashboardColoringRuleColorThreshold(dict):
    def __init__(__self__, *,
                 color: str,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        pulumi.set(__self__, "color", color)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class DashboardLayout(dict):
    def __init__(__self__, *,
                 grid: Optional['outputs.DashboardLayoutGrid'] = None):
        if grid is not None:
            pulumi.set(__self__, "grid", grid)

    @property
    @pulumi.getter
    def grid(self) -> Optional['outputs.DashboardLayoutGrid']:
        return pulumi.get(self, "grid")


@pulumi.output_type
class DashboardLayoutGrid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layoutStructures":
            suggest = "layout_structures"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardLayoutGrid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardLayoutGrid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardLayoutGrid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layout_structures: Sequence['outputs.DashboardLayoutGridLayoutStructure']):
        pulumi.set(__self__, "layout_structures", layout_structures)

    @property
    @pulumi.getter(name="layoutStructures")
    def layout_structures(self) -> Sequence['outputs.DashboardLayoutGridLayoutStructure']:
        return pulumi.get(self, "layout_structures")


@pulumi.output_type
class DashboardLayoutGridLayoutStructure(dict):
    def __init__(__self__, *,
                 key: str,
                 structure: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "structure", structure)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def structure(self) -> str:
        return pulumi.get(self, "structure")


@pulumi.output_type
class DashboardPanel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sumoSearchPanel":
            suggest = "sumo_search_panel"
        elif key == "textPanel":
            suggest = "text_panel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sumo_search_panel: Optional['outputs.DashboardPanelSumoSearchPanel'] = None,
                 text_panel: Optional['outputs.DashboardPanelTextPanel'] = None):
        if sumo_search_panel is not None:
            pulumi.set(__self__, "sumo_search_panel", sumo_search_panel)
        if text_panel is not None:
            pulumi.set(__self__, "text_panel", text_panel)

    @property
    @pulumi.getter(name="sumoSearchPanel")
    def sumo_search_panel(self) -> Optional['outputs.DashboardPanelSumoSearchPanel']:
        return pulumi.get(self, "sumo_search_panel")

    @property
    @pulumi.getter(name="textPanel")
    def text_panel(self) -> Optional['outputs.DashboardPanelTextPanel']:
        return pulumi.get(self, "text_panel")


@pulumi.output_type
class DashboardPanelSumoSearchPanel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coloringRule":
            suggest = "coloring_rule"
        elif key == "keepVisualSettingsConsistentWithParent":
            suggest = "keep_visual_settings_consistent_with_parent"
        elif key == "linkedDashboard":
            suggest = "linked_dashboard"
        elif key == "timeRange":
            suggest = "time_range"
        elif key == "visualSettings":
            suggest = "visual_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 coloring_rule: Optional['outputs.DashboardPanelSumoSearchPanelColoringRule'] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 keep_visual_settings_consistent_with_parent: Optional[bool] = None,
                 linked_dashboard: Optional['outputs.DashboardPanelSumoSearchPanelLinkedDashboard'] = None,
                 queries: Optional[Sequence['outputs.DashboardPanelSumoSearchPanelQuery']] = None,
                 time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRange'] = None,
                 title: Optional[str] = None,
                 visual_settings: Optional[str] = None):
        """
        :param str description: Description of the dashboard.
        :param 'DashboardPanelSumoSearchPanelTimeRangeArgs' time_range: Time range of the dashboard. See time range schema
               for details.
        :param str title: Title of the dashboard.
        """
        pulumi.set(__self__, "key", key)
        if coloring_rule is not None:
            pulumi.set(__self__, "coloring_rule", coloring_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keep_visual_settings_consistent_with_parent is not None:
            pulumi.set(__self__, "keep_visual_settings_consistent_with_parent", keep_visual_settings_consistent_with_parent)
        if linked_dashboard is not None:
            pulumi.set(__self__, "linked_dashboard", linked_dashboard)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="coloringRule")
    def coloring_rule(self) -> Optional['outputs.DashboardPanelSumoSearchPanelColoringRule']:
        return pulumi.get(self, "coloring_rule")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the dashboard.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keepVisualSettingsConsistentWithParent")
    def keep_visual_settings_consistent_with_parent(self) -> Optional[bool]:
        return pulumi.get(self, "keep_visual_settings_consistent_with_parent")

    @property
    @pulumi.getter(name="linkedDashboard")
    def linked_dashboard(self) -> Optional['outputs.DashboardPanelSumoSearchPanelLinkedDashboard']:
        return pulumi.get(self, "linked_dashboard")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.DashboardPanelSumoSearchPanelQuery']]:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRange']:
        """
        Time range of the dashboard. See time range schema
        for details.
        """
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[str]:
        return pulumi.get(self, "visual_settings")


@pulumi.output_type
class DashboardPanelSumoSearchPanelColoringRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "multipleSeriesAggregateFunction":
            suggest = "multiple_series_aggregate_function"
        elif key == "singleSeriesAggregateFunction":
            suggest = "single_series_aggregate_function"
        elif key == "colorThresholds":
            suggest = "color_thresholds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelColoringRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelColoringRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelColoringRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 multiple_series_aggregate_function: str,
                 scope: str,
                 single_series_aggregate_function: str,
                 color_thresholds: Optional[Sequence['outputs.DashboardPanelSumoSearchPanelColoringRuleColorThreshold']] = None):
        pulumi.set(__self__, "multiple_series_aggregate_function", multiple_series_aggregate_function)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "single_series_aggregate_function", single_series_aggregate_function)
        if color_thresholds is not None:
            pulumi.set(__self__, "color_thresholds", color_thresholds)

    @property
    @pulumi.getter(name="multipleSeriesAggregateFunction")
    def multiple_series_aggregate_function(self) -> str:
        return pulumi.get(self, "multiple_series_aggregate_function")

    @property
    @pulumi.getter
    def scope(self) -> str:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="singleSeriesAggregateFunction")
    def single_series_aggregate_function(self) -> str:
        return pulumi.get(self, "single_series_aggregate_function")

    @property
    @pulumi.getter(name="colorThresholds")
    def color_thresholds(self) -> Optional[Sequence['outputs.DashboardPanelSumoSearchPanelColoringRuleColorThreshold']]:
        return pulumi.get(self, "color_thresholds")


@pulumi.output_type
class DashboardPanelSumoSearchPanelColoringRuleColorThreshold(dict):
    def __init__(__self__, *,
                 color: str,
                 max: Optional[float] = None,
                 min: Optional[float] = None):
        pulumi.set(__self__, "color", color)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[float]:
        return pulumi.get(self, "min")


@pulumi.output_type
class DashboardPanelSumoSearchPanelLinkedDashboard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeTimeRange":
            suggest = "include_time_range"
        elif key == "includeVariables":
            suggest = "include_variables"
        elif key == "relativePath":
            suggest = "relative_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelLinkedDashboard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelLinkedDashboard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelLinkedDashboard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 include_time_range: Optional[bool] = None,
                 include_variables: Optional[bool] = None,
                 relative_path: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if include_time_range is not None:
            pulumi.set(__self__, "include_time_range", include_time_range)
        if include_variables is not None:
            pulumi.set(__self__, "include_variables", include_variables)
        if relative_path is not None:
            pulumi.set(__self__, "relative_path", relative_path)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeTimeRange")
    def include_time_range(self) -> Optional[bool]:
        return pulumi.get(self, "include_time_range")

    @property
    @pulumi.getter(name="includeVariables")
    def include_variables(self) -> Optional[bool]:
        return pulumi.get(self, "include_variables")

    @property
    @pulumi.getter(name="relativePath")
    def relative_path(self) -> Optional[str]:
        return pulumi.get(self, "relative_path")


@pulumi.output_type
class DashboardPanelSumoSearchPanelQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryKey":
            suggest = "query_key"
        elif key == "queryString":
            suggest = "query_string"
        elif key == "queryType":
            suggest = "query_type"
        elif key == "metricsQueryData":
            suggest = "metrics_query_data"
        elif key == "metricsQueryMode":
            suggest = "metrics_query_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_key: str,
                 query_string: str,
                 query_type: str,
                 metrics_query_data: Optional['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryData'] = None,
                 metrics_query_mode: Optional[str] = None):
        pulumi.set(__self__, "query_key", query_key)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "query_type", query_type)
        if metrics_query_data is not None:
            pulumi.set(__self__, "metrics_query_data", metrics_query_data)
        if metrics_query_mode is not None:
            pulumi.set(__self__, "metrics_query_mode", metrics_query_mode)

    @property
    @pulumi.getter(name="queryKey")
    def query_key(self) -> str:
        return pulumi.get(self, "query_key")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> str:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> str:
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter(name="metricsQueryData")
    def metrics_query_data(self) -> Optional['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryData']:
        return pulumi.get(self, "metrics_query_data")

    @property
    @pulumi.getter(name="metricsQueryMode")
    def metrics_query_mode(self) -> Optional[str]:
        return pulumi.get(self, "metrics_query_mode")


@pulumi.output_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregationType":
            suggest = "aggregation_type"
        elif key == "groupBy":
            suggest = "group_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelQueryMetricsQueryData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelQueryMetricsQueryData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelQueryMetricsQueryData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filters: Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter'],
                 metric: str,
                 aggregation_type: Optional[str] = None,
                 group_by: Optional[str] = None,
                 operators: Optional[Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator']] = None):
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "metric", metric)
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[str]:
        return pulumi.get(self, "aggregation_type")

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[str]:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def operators(self) -> Optional[Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator']]:
        return pulumi.get(self, "operators")


@pulumi.output_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataFilter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str,
                 negation: Optional[bool] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if negation is not None:
            pulumi.set(__self__, "negation", negation)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def negation(self) -> Optional[bool]:
        return pulumi.get(self, "negation")


@pulumi.output_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operatorName":
            suggest = "operator_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator_name: str,
                 parameters: Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter']):
        pulumi.set(__self__, "operator_name", operator_name)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="operatorName")
    def operator_name(self) -> str:
        return pulumi.get(self, "operator_name")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class DashboardPanelSumoSearchPanelQueryMetricsQueryDataOperatorParameter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginBoundedTimeRange":
            suggest = "begin_bounded_time_range"
        elif key == "completeLiteralTimeRange":
            suggest = "complete_literal_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_bounded_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange'] = None,
                 complete_literal_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange'] = None):
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange']:
        return pulumi.get(self, "begin_bounded_time_range")

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange']:
        return pulumi.get(self, "complete_literal_time_range")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: 'outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom',
                 to: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo'] = None):
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom':
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo']:
        return pulumi.get(self, "to")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange'] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange']:
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange']:
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange']:
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange']:
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange'] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange']:
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange']:
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange']:
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange']:
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelSumoSearchPanelTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardPanelTextPanel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepVisualSettingsConsistentWithParent":
            suggest = "keep_visual_settings_consistent_with_parent"
        elif key == "visualSettings":
            suggest = "visual_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPanelTextPanel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPanelTextPanel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPanelTextPanel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 id: Optional[str] = None,
                 keep_visual_settings_consistent_with_parent: Optional[bool] = None,
                 text: Optional[str] = None,
                 title: Optional[str] = None,
                 visual_settings: Optional[str] = None):
        """
        :param str title: Title of the dashboard.
        """
        pulumi.set(__self__, "key", key)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keep_visual_settings_consistent_with_parent is not None:
            pulumi.set(__self__, "keep_visual_settings_consistent_with_parent", keep_visual_settings_consistent_with_parent)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visual_settings is not None:
            pulumi.set(__self__, "visual_settings", visual_settings)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keepVisualSettingsConsistentWithParent")
    def keep_visual_settings_consistent_with_parent(self) -> Optional[bool]:
        return pulumi.get(self, "keep_visual_settings_consistent_with_parent")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title of the dashboard.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="visualSettings")
    def visual_settings(self) -> Optional[str]:
        return pulumi.get(self, "visual_settings")


@pulumi.output_type
class DashboardTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginBoundedTimeRange":
            suggest = "begin_bounded_time_range"
        elif key == "completeLiteralTimeRange":
            suggest = "complete_literal_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_bounded_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRange'] = None,
                 complete_literal_time_range: Optional['outputs.DashboardTimeRangeCompleteLiteralTimeRange'] = None):
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRange']:
        return pulumi.get(self, "begin_bounded_time_range")

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional['outputs.DashboardTimeRangeCompleteLiteralTimeRange']:
        return pulumi.get(self, "complete_literal_time_range")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: 'outputs.DashboardTimeRangeBeginBoundedTimeRangeFrom',
                 to: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeTo'] = None):
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.DashboardTimeRangeBeginBoundedTimeRangeFrom':
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeTo']:
        return pulumi.get(self, "to")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange'] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange']:
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange']:
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange']:
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange']:
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange'] = None):
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange']:
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange']:
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange']:
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange']:
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class DashboardTimeRangeCompleteLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardTimeRangeCompleteLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        return pulumi.get(self, "range_name")


@pulumi.output_type
class DashboardTopologyLabelMap(dict):
    def __init__(__self__, *,
                 datas: Sequence['outputs.DashboardTopologyLabelMapData']):
        pulumi.set(__self__, "datas", datas)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.DashboardTopologyLabelMapData']:
        return pulumi.get(self, "datas")


@pulumi.output_type
class DashboardTopologyLabelMapData(dict):
    def __init__(__self__, *,
                 label: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceDefinition":
            suggest = "source_definition"
        elif key == "allowMultiSelect":
            suggest = "allow_multi_select"
        elif key == "defaultValue":
            suggest = "default_value"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "hideFromUi":
            suggest = "hide_from_ui"
        elif key == "includeAllOption":
            suggest = "include_all_option"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 source_definition: 'outputs.DashboardVariableSourceDefinition',
                 allow_multi_select: Optional[bool] = None,
                 default_value: Optional[str] = None,
                 display_name: Optional[str] = None,
                 hide_from_ui: Optional[bool] = None,
                 id: Optional[str] = None,
                 include_all_option: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_definition", source_definition)
        if allow_multi_select is not None:
            pulumi.set(__self__, "allow_multi_select", allow_multi_select)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if hide_from_ui is not None:
            pulumi.set(__self__, "hide_from_ui", hide_from_ui)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_all_option is not None:
            pulumi.set(__self__, "include_all_option", include_all_option)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceDefinition")
    def source_definition(self) -> 'outputs.DashboardVariableSourceDefinition':
        return pulumi.get(self, "source_definition")

    @property
    @pulumi.getter(name="allowMultiSelect")
    def allow_multi_select(self) -> Optional[bool]:
        return pulumi.get(self, "allow_multi_select")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="hideFromUi")
    def hide_from_ui(self) -> Optional[bool]:
        return pulumi.get(self, "hide_from_ui")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeAllOption")
    def include_all_option(self) -> Optional[bool]:
        return pulumi.get(self, "include_all_option")


@pulumi.output_type
class DashboardVariableSourceDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "csvVariableSourceDefinition":
            suggest = "csv_variable_source_definition"
        elif key == "logQueryVariableSourceDefinition":
            suggest = "log_query_variable_source_definition"
        elif key == "metadataVariableSourceDefinition":
            suggest = "metadata_variable_source_definition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardVariableSourceDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardVariableSourceDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardVariableSourceDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 csv_variable_source_definition: Optional['outputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinition'] = None,
                 log_query_variable_source_definition: Optional['outputs.DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition'] = None,
                 metadata_variable_source_definition: Optional['outputs.DashboardVariableSourceDefinitionMetadataVariableSourceDefinition'] = None):
        if csv_variable_source_definition is not None:
            pulumi.set(__self__, "csv_variable_source_definition", csv_variable_source_definition)
        if log_query_variable_source_definition is not None:
            pulumi.set(__self__, "log_query_variable_source_definition", log_query_variable_source_definition)
        if metadata_variable_source_definition is not None:
            pulumi.set(__self__, "metadata_variable_source_definition", metadata_variable_source_definition)

    @property
    @pulumi.getter(name="csvVariableSourceDefinition")
    def csv_variable_source_definition(self) -> Optional['outputs.DashboardVariableSourceDefinitionCsvVariableSourceDefinition']:
        return pulumi.get(self, "csv_variable_source_definition")

    @property
    @pulumi.getter(name="logQueryVariableSourceDefinition")
    def log_query_variable_source_definition(self) -> Optional['outputs.DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition']:
        return pulumi.get(self, "log_query_variable_source_definition")

    @property
    @pulumi.getter(name="metadataVariableSourceDefinition")
    def metadata_variable_source_definition(self) -> Optional['outputs.DashboardVariableSourceDefinitionMetadataVariableSourceDefinition']:
        return pulumi.get(self, "metadata_variable_source_definition")


@pulumi.output_type
class DashboardVariableSourceDefinitionCsvVariableSourceDefinition(dict):
    def __init__(__self__, *,
                 values: str):
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> str:
        return pulumi.get(self, "values")


@pulumi.output_type
class DashboardVariableSourceDefinitionLogQueryVariableSourceDefinition(dict):
    def __init__(__self__, *,
                 field: str,
                 query: str):
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def field(self) -> str:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")


@pulumi.output_type
class DashboardVariableSourceDefinitionMetadataVariableSourceDefinition(dict):
    def __init__(__self__, *,
                 filter: str,
                 key: str):
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`.
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`.
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class ElbSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class ElbSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class ElbSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.ElbSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.ElbSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.ElbSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        :param str bucket_name: The name of the bucket.
        :param str path_expression: The path to the data.
        :param Sequence['ElbSourcePathSnsTopicOrSubscriptionArnArgs'] sns_topic_or_subscription_arns: This is a computed field for SNS topic/subscription ARN.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.ElbSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.ElbSourcePathSnsTopicOrSubscriptionArn']]:
        """
        This is a computed field for SNS topic/subscription ARN.
        """
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.ElbSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class ElbSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ElbSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class ElbSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `ELB` source.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GcpMetricsSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpMetricsSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpMetricsSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpMetricsSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: Type of polling source. This has to be `GcpMetricsPath`.
        :param str auth_provider_x509_cert_url: As per the service_account.json downloaded from GCP
        :param str auth_uri: As per the service_account.json downloaded from GCP
        :param str client_email: As per the service_account.json downloaded from GCP
        :param str client_id: As per the service_account.json downloaded from GCP
        :param str client_x509_cert_url: As per the service_account.json downloaded from GCP
        :param str private_key: As per the service_account.json downloaded from GCP
        :param str private_key_id: As per the service_account.json downloaded from GCP
        :param str project_id: As per the service_account.json downloaded from GCP
        :param str token_uri: As per the service_account.json downloaded from GCP
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of polling source. This has to be `GcpMetricsPath`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        """
        As per the service_account.json downloaded from GCP
        """
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class GcpMetricsSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class GcpMetricsSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpMetricsSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpMetricsSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpMetricsSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class GcpMetricsSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpMetricsSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpMetricsSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpMetricsSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.GcpMetricsSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.GcpMetricsSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.GcpMetricsSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: Type of polling source. This has to be `GcpMetricsPath`.
        :param Sequence['GcpMetricsSourcePathCustomServiceArgs'] custom_services: Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
        :param Sequence[str] limit_to_regions: List of regions for which metrics would be collected (Empty to collect from all regions)
        :param Sequence[str] limit_to_services: List of services from which metrics would be collected
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of polling source. This has to be `GcpMetricsPath`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.GcpMetricsSourcePathCustomService']]:
        """
        Sumoloigc provides list of services that can be used in limit_to_services for which metrics would be collected. Custom Services allow you to define your own service w.r.t. metric collection. You can provide list of metric prefixes that should be collected as part of the custom service. This provides fine-grain control w.r.t. what all metrics are ingested by sumologic.
        """
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of regions for which metrics would be collected (Empty to collect from all regions)
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        """
        List of services from which metrics would be collected
        """
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.GcpMetricsSourcePathSnsTopicOrSubscriptionArn']]:
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.GcpMetricsSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class GcpMetricsSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpMetricsSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpMetricsSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpMetricsSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        """
        :param Sequence[str] prefixes: List of metric type prefixes. Eg: `["compute.googleapis.com/instance/","compute.googleapis.com/guest/"]`
        :param str service_name: Name of the custom service you want to define.
        """
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        """
        List of metric type prefixes. Eg: `["compute.googleapis.com/instance/","compute.googleapis.com/guest/"]`
        """
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Name of the custom service you want to define.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GcpMetricsSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpMetricsSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpMetricsSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpMetricsSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class GcpMetricsSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: Type of polling source. This has to be `GcpMetricsPath`.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of polling source. This has to be `GcpMetricsPath`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GcpSourceAuthentication(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GcpSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class GcpSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GcpSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GcpSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GcpSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class GcpSourcePath(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class HierarchyFilter(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Filtering key.
        :param str value: Value required for the filtering key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filtering key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value required for the filtering key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HierarchyLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevel":
            suggest = "next_level"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_level: Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel'] = None,
                 next_levels_with_conditions: Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param 'HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelArgs' next_level: Next level without a condition.
               
               The following attributes are exported:
        :param Sequence['HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionArgs'] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_level is not None:
            pulumi.set(__self__, "next_level", next_level)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevel")
    def next_level(self) -> Optional['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel']:
        """
        Next level without a condition.

        The following attributes are exported:
        """
        return pulumi.get(self, "next_level")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence['outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition']]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithCondition(dict):
    def __init__(__self__, *,
                 condition: str,
                 level: 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel'):
        """
        :param str condition: Condition to be checked against for level.entityType value, for now full string match.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be checked against for level.entityType value, for now full string match.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def level(self) -> 'outputs.HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel':
        return pulumi.get(self, "level")


@pulumi.output_type
class HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"
        elif key == "nextLevelsWithConditions":
            suggest = "next_levels_with_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HierarchyLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevelNextLevelsWithConditionLevel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 next_levels_with_conditions: Optional[Sequence[str]] = None):
        """
        :param str entity_type: Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        :param Sequence[str] next_levels_with_conditions: Zero or more next levels with conditions.
        """
        pulumi.set(__self__, "entity_type", entity_type)
        if next_levels_with_conditions is not None:
            pulumi.set(__self__, "next_levels_with_conditions", next_levels_with_conditions)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        """
        Indicates the name and type for all entities at this hierarchy level, e.g. service or pod in case of kubernetes entities.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="nextLevelsWithConditions")
    def next_levels_with_conditions(self) -> Optional[Sequence[str]]:
        """
        Zero or more next levels with conditions.
        """
        return pulumi.get(self, "next_levels_with_conditions")


@pulumi.output_type
class HttpSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class HttpSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HttpSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HttpSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HttpSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class KineisLogSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KineisLogSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KineisLogSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KineisLogSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        :param str type: Must be either `KinesisLogPath` or `NoPathExpression`
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Must be either `KinesisLogPath` or `NoPathExpression`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KineisLogSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class KineisLogSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KineisLogSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KineisLogSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KineisLogSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class KineisLogSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "scanInterval":
            suggest = "scan_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KineisLogSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KineisLogSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KineisLogSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: Optional[str] = None,
                 path_expression: Optional[str] = None,
                 scan_interval: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str bucket_name: The name of the bucket. This is needed if using type `KinesisLogPath`.
        :param str path_expression: The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must include `http-endpoint-failed/`.
        :param int scan_interval: The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
        :param str type: Must be either `KinesisLogPath` or `NoPathExpression`
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if scan_interval is not None:
            pulumi.set(__self__, "scan_interval", scan_interval)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket. This is needed if using type `KinesisLogPath`.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data. This is needed if using type `KinesisLogPath`. For Kinesis log source, it must include `http-endpoint-failed/`.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="scanInterval")
    def scan_interval(self) -> Optional[int]:
        """
        The Time interval in milliseconds of scans for new data. The default is 300000 and the minimum value is 1000 milliseconds.
        """
        return pulumi.get(self, "scan_interval")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Must be either `KinesisLogPath` or `NoPathExpression`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KinesisMetricsSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KinesisMetricsSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KinesisMetricsSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KinesisMetricsSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class KinesisMetricsSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class KinesisMetricsSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KinesisMetricsSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KinesisMetricsSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KinesisMetricsSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class KinesisMetricsSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagFilters":
            suggest = "tag_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KinesisMetricsSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KinesisMetricsSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KinesisMetricsSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 tag_filters: Optional[Sequence['outputs.KinesisMetricsSourcePathTagFilter']] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param Sequence['KinesisMetricsSourcePathTagFilterArgs'] tag_filters: Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        pulumi.set(__self__, "type", type)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.KinesisMetricsSourcePathTagFilter']]:
        """
        Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        return pulumi.get(self, "tag_filters")


@pulumi.output_type
class KinesisMetricsSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str namespace: Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        :param Sequence[str] tags: List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        :param str type: This value has to be set to `TagFilters`
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LocalFileSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class LocalFileSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocalFileSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocalFileSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocalFileSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        """
        :param str name: The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
        """
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the local file source. This is required, and has to be unique. Changing this will force recreation the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class LogSearchQueryParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchQueryParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchQueryParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchQueryParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: str,
                 name: str,
                 value: str,
                 description: Optional[str] = None):
        """
        :param str data_type: The data type of the parameter. Supported values are:
               1. `NUMBER`
               2. `STRING`
               3. `ANY`
               4. `KEYWORD`
        :param str name: Name of the search.
        :param str value: Default value of scheduled search parameter.
        :param str description: Description of the search.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        """
        The data type of the parameter. Supported values are:
        1. `NUMBER`
        2. `STRING`
        3. `ANY`
        4. `KEYWORD`
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the search.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Default value of scheduled search parameter.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the search.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class LogSearchSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parseableTimeRange":
            suggest = "parseable_time_range"
        elif key == "scheduleType":
            suggest = "schedule_type"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "cronExpression":
            suggest = "cron_expression"
        elif key == "muteErrorEmails":
            suggest = "mute_error_emails"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification: 'outputs.LogSearchScheduleNotification',
                 parseable_time_range: 'outputs.LogSearchScheduleParseableTimeRange',
                 schedule_type: str,
                 time_zone: str,
                 cron_expression: Optional[str] = None,
                 mute_error_emails: Optional[bool] = None,
                 parameters: Optional[Sequence['outputs.LogSearchScheduleParameter']] = None,
                 threshold: Optional['outputs.LogSearchScheduleThreshold'] = None):
        """
        :param 'LogSearchScheduleNotificationArgs' notification: Notification of the log search. See
               notification schema
        :param 'LogSearchScheduleParseableTimeRangeArgs' parseable_time_range: Time range of the scheduled log search. See
               time range schema
        :param str schedule_type: Run schedule of the scheduled search. Set to "Custom" to specify the schedule with
               a CRON expression. Possible schedule types are: `RealTime`, `15Minutes`, `1Hour`, `2Hours`, `4Hours`, `6Hours`,
               `8Hours`, `12Hours`, `1Day`, `1Week`, `Custom`.
               
               > With `Custom`, `1Day` and `1Week` schedule types you need to provide the corresponding cron expression
               to determine when to actually run the search. E.g. valid cron for `1Day` is `0 0 16 ? * 2-6 *`.
        :param str time_zone: Time zone for the scheduled log search. Either an abbreviation such as "PST",
               a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". Note that the support of
               abbreviations is for JDK 1.1.x compatibility only and full names should be used.
        :param str cron_expression: Cron-like expression specifying the search's schedule. `schedule_type` must be set
               to "Custom", otherwise, `schedule_type` takes precedence over `cron_expression`.
        :param bool mute_error_emails: If enabled, emails are not sent out in case of errors with the search.
        :param 'LogSearchScheduleThresholdArgs' threshold: Threshold for when to send notification. See
               threshold schema
        """
        pulumi.set(__self__, "notification", notification)
        pulumi.set(__self__, "parseable_time_range", parseable_time_range)
        pulumi.set(__self__, "schedule_type", schedule_type)
        pulumi.set(__self__, "time_zone", time_zone)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if mute_error_emails is not None:
            pulumi.set(__self__, "mute_error_emails", mute_error_emails)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def notification(self) -> 'outputs.LogSearchScheduleNotification':
        """
        Notification of the log search. See
        notification schema
        """
        return pulumi.get(self, "notification")

    @property
    @pulumi.getter(name="parseableTimeRange")
    def parseable_time_range(self) -> 'outputs.LogSearchScheduleParseableTimeRange':
        """
        Time range of the scheduled log search. See
        time range schema
        """
        return pulumi.get(self, "parseable_time_range")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        """
        Run schedule of the scheduled search. Set to "Custom" to specify the schedule with
        a CRON expression. Possible schedule types are: `RealTime`, `15Minutes`, `1Hour`, `2Hours`, `4Hours`, `6Hours`,
        `8Hours`, `12Hours`, `1Day`, `1Week`, `Custom`.

        > With `Custom`, `1Day` and `1Week` schedule types you need to provide the corresponding cron expression
        to determine when to actually run the search. E.g. valid cron for `1Day` is `0 0 16 ? * 2-6 *`.
        """
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        Time zone for the scheduled log search. Either an abbreviation such as "PST",
        a full name such as "America/Los_Angeles", or a custom ID such as "GMT-8:00". Note that the support of
        abbreviations is for JDK 1.1.x compatibility only and full names should be used.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[str]:
        """
        Cron-like expression specifying the search's schedule. `schedule_type` must be set
        to "Custom", otherwise, `schedule_type` takes precedence over `cron_expression`.
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter(name="muteErrorEmails")
    def mute_error_emails(self) -> Optional[bool]:
        """
        If enabled, emails are not sent out in case of errors with the search.
        """
        return pulumi.get(self, "mute_error_emails")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.LogSearchScheduleParameter']]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def threshold(self) -> Optional['outputs.LogSearchScheduleThreshold']:
        """
        Threshold for when to send notification. See
        threshold schema
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class LogSearchScheduleNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertSearchNotification":
            suggest = "alert_search_notification"
        elif key == "cseSignalNotification":
            suggest = "cse_signal_notification"
        elif key == "emailSearchNotification":
            suggest = "email_search_notification"
        elif key == "saveToLookupNotification":
            suggest = "save_to_lookup_notification"
        elif key == "saveToViewNotification":
            suggest = "save_to_view_notification"
        elif key == "serviceNowSearchNotification":
            suggest = "service_now_search_notification"
        elif key == "webhookSearchNotification":
            suggest = "webhook_search_notification"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_search_notification: Optional['outputs.LogSearchScheduleNotificationAlertSearchNotification'] = None,
                 cse_signal_notification: Optional['outputs.LogSearchScheduleNotificationCseSignalNotification'] = None,
                 email_search_notification: Optional['outputs.LogSearchScheduleNotificationEmailSearchNotification'] = None,
                 save_to_lookup_notification: Optional['outputs.LogSearchScheduleNotificationSaveToLookupNotification'] = None,
                 save_to_view_notification: Optional['outputs.LogSearchScheduleNotificationSaveToViewNotification'] = None,
                 service_now_search_notification: Optional['outputs.LogSearchScheduleNotificationServiceNowSearchNotification'] = None,
                 webhook_search_notification: Optional['outputs.LogSearchScheduleNotificationWebhookSearchNotification'] = None):
        """
        :param 'LogSearchScheduleNotificationAlertSearchNotificationArgs' alert_search_notification: Run an script action. See
               alert_search_notification schema for details.
        :param 'LogSearchScheduleNotificationCseSignalNotificationArgs' cse_signal_notification: Create a CSE signal with a scheduled search.
               See cse_signal_notification schema schema for details.
        :param 'LogSearchScheduleNotificationEmailSearchNotificationArgs' email_search_notification: Send an alert via email. See
               email_search_notification schema schema for details.
        :param 'LogSearchScheduleNotificationSaveToLookupNotificationArgs' save_to_lookup_notification: Save results to a Lookup Table. See
               save_to_lookup_notification schema schema for details.
        :param 'LogSearchScheduleNotificationSaveToViewNotificationArgs' save_to_view_notification: Save results to an index. See
               save_to_view_notification schema schema for details.
        :param 'LogSearchScheduleNotificationServiceNowSearchNotificationArgs' service_now_search_notification: Send results to Service Now. See
               service_now_search_notification schema schema for details.
        :param 'LogSearchScheduleNotificationWebhookSearchNotificationArgs' webhook_search_notification: Send an alert via Webhook. See
               webhook_search_notification schema schema for details.
        """
        if alert_search_notification is not None:
            pulumi.set(__self__, "alert_search_notification", alert_search_notification)
        if cse_signal_notification is not None:
            pulumi.set(__self__, "cse_signal_notification", cse_signal_notification)
        if email_search_notification is not None:
            pulumi.set(__self__, "email_search_notification", email_search_notification)
        if save_to_lookup_notification is not None:
            pulumi.set(__self__, "save_to_lookup_notification", save_to_lookup_notification)
        if save_to_view_notification is not None:
            pulumi.set(__self__, "save_to_view_notification", save_to_view_notification)
        if service_now_search_notification is not None:
            pulumi.set(__self__, "service_now_search_notification", service_now_search_notification)
        if webhook_search_notification is not None:
            pulumi.set(__self__, "webhook_search_notification", webhook_search_notification)

    @property
    @pulumi.getter(name="alertSearchNotification")
    def alert_search_notification(self) -> Optional['outputs.LogSearchScheduleNotificationAlertSearchNotification']:
        """
        Run an script action. See
        alert_search_notification schema for details.
        """
        return pulumi.get(self, "alert_search_notification")

    @property
    @pulumi.getter(name="cseSignalNotification")
    def cse_signal_notification(self) -> Optional['outputs.LogSearchScheduleNotificationCseSignalNotification']:
        """
        Create a CSE signal with a scheduled search.
        See cse_signal_notification schema schema for details.
        """
        return pulumi.get(self, "cse_signal_notification")

    @property
    @pulumi.getter(name="emailSearchNotification")
    def email_search_notification(self) -> Optional['outputs.LogSearchScheduleNotificationEmailSearchNotification']:
        """
        Send an alert via email. See
        email_search_notification schema schema for details.
        """
        return pulumi.get(self, "email_search_notification")

    @property
    @pulumi.getter(name="saveToLookupNotification")
    def save_to_lookup_notification(self) -> Optional['outputs.LogSearchScheduleNotificationSaveToLookupNotification']:
        """
        Save results to a Lookup Table. See
        save_to_lookup_notification schema schema for details.
        """
        return pulumi.get(self, "save_to_lookup_notification")

    @property
    @pulumi.getter(name="saveToViewNotification")
    def save_to_view_notification(self) -> Optional['outputs.LogSearchScheduleNotificationSaveToViewNotification']:
        """
        Save results to an index. See
        save_to_view_notification schema schema for details.
        """
        return pulumi.get(self, "save_to_view_notification")

    @property
    @pulumi.getter(name="serviceNowSearchNotification")
    def service_now_search_notification(self) -> Optional['outputs.LogSearchScheduleNotificationServiceNowSearchNotification']:
        """
        Send results to Service Now. See
        service_now_search_notification schema schema for details.
        """
        return pulumi.get(self, "service_now_search_notification")

    @property
    @pulumi.getter(name="webhookSearchNotification")
    def webhook_search_notification(self) -> Optional['outputs.LogSearchScheduleNotificationWebhookSearchNotification']:
        """
        Send an alert via Webhook. See
        webhook_search_notification schema schema for details.
        """
        return pulumi.get(self, "webhook_search_notification")


@pulumi.output_type
class LogSearchScheduleNotificationAlertSearchNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceId":
            suggest = "source_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationAlertSearchNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationAlertSearchNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationAlertSearchNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_id: str):
        """
        :param str source_id: Identifier of the collector's source.
        """
        pulumi.set(__self__, "source_id", source_id)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        Identifier of the collector's source.
        """
        return pulumi.get(self, "source_id")


@pulumi.output_type
class LogSearchScheduleNotificationCseSignalNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recordType":
            suggest = "record_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationCseSignalNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationCseSignalNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationCseSignalNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 record_type: str):
        """
        :param str record_type: Name of the Cloud SIEM Enterprise Record to be created.
        """
        pulumi.set(__self__, "record_type", record_type)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> str:
        """
        Name of the Cloud SIEM Enterprise Record to be created.
        """
        return pulumi.get(self, "record_type")


@pulumi.output_type
class LogSearchScheduleNotificationEmailSearchNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "toLists":
            suggest = "to_lists"
        elif key == "includeCsvAttachment":
            suggest = "include_csv_attachment"
        elif key == "includeHistogram":
            suggest = "include_histogram"
        elif key == "includeQuery":
            suggest = "include_query"
        elif key == "includeResultSet":
            suggest = "include_result_set"
        elif key == "subjectTemplate":
            suggest = "subject_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationEmailSearchNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationEmailSearchNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationEmailSearchNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 to_lists: Sequence[str],
                 include_csv_attachment: Optional[bool] = None,
                 include_histogram: Optional[bool] = None,
                 include_query: Optional[bool] = None,
                 include_result_set: Optional[bool] = None,
                 subject_template: Optional[str] = None):
        """
        :param Sequence[str] to_lists: A list of email recipients.
        :param bool include_csv_attachment: If the search results should be included in the notification email
               as a CSV attachment.
        :param bool include_histogram: If the search result histogram should be included in the notification email.
        :param bool include_query: If the search query should be included in the notification email.
        :param bool include_result_set: If the search result set should be included in the notification email.
        :param str subject_template: Subject of the email. If the notification is scheduled with a threshold,
               the default subject template will be `Search Alert: {{AlertCondition}} results found for {{SearchName}}`.
               For email notifications without a threshold, the default subject template is `Search Results: {{SearchName}}`.
        """
        pulumi.set(__self__, "to_lists", to_lists)
        if include_csv_attachment is not None:
            pulumi.set(__self__, "include_csv_attachment", include_csv_attachment)
        if include_histogram is not None:
            pulumi.set(__self__, "include_histogram", include_histogram)
        if include_query is not None:
            pulumi.set(__self__, "include_query", include_query)
        if include_result_set is not None:
            pulumi.set(__self__, "include_result_set", include_result_set)
        if subject_template is not None:
            pulumi.set(__self__, "subject_template", subject_template)

    @property
    @pulumi.getter(name="toLists")
    def to_lists(self) -> Sequence[str]:
        """
        A list of email recipients.
        """
        return pulumi.get(self, "to_lists")

    @property
    @pulumi.getter(name="includeCsvAttachment")
    def include_csv_attachment(self) -> Optional[bool]:
        """
        If the search results should be included in the notification email
        as a CSV attachment.
        """
        return pulumi.get(self, "include_csv_attachment")

    @property
    @pulumi.getter(name="includeHistogram")
    def include_histogram(self) -> Optional[bool]:
        """
        If the search result histogram should be included in the notification email.
        """
        return pulumi.get(self, "include_histogram")

    @property
    @pulumi.getter(name="includeQuery")
    def include_query(self) -> Optional[bool]:
        """
        If the search query should be included in the notification email.
        """
        return pulumi.get(self, "include_query")

    @property
    @pulumi.getter(name="includeResultSet")
    def include_result_set(self) -> Optional[bool]:
        """
        If the search result set should be included in the notification email.
        """
        return pulumi.get(self, "include_result_set")

    @property
    @pulumi.getter(name="subjectTemplate")
    def subject_template(self) -> Optional[str]:
        """
        Subject of the email. If the notification is scheduled with a threshold,
        the default subject template will be `Search Alert: {{AlertCondition}} results found for {{SearchName}}`.
        For email notifications without a threshold, the default subject template is `Search Results: {{SearchName}}`.
        """
        return pulumi.get(self, "subject_template")


@pulumi.output_type
class LogSearchScheduleNotificationSaveToLookupNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLookupMergeOperation":
            suggest = "is_lookup_merge_operation"
        elif key == "lookupFilePath":
            suggest = "lookup_file_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationSaveToLookupNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationSaveToLookupNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationSaveToLookupNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_lookup_merge_operation: bool,
                 lookup_file_path: str):
        """
        :param bool is_lookup_merge_operation: Whether to merge the file contents with existing data in the lookup table.
        :param str lookup_file_path: Path of the lookup table to save the results to.
        """
        pulumi.set(__self__, "is_lookup_merge_operation", is_lookup_merge_operation)
        pulumi.set(__self__, "lookup_file_path", lookup_file_path)

    @property
    @pulumi.getter(name="isLookupMergeOperation")
    def is_lookup_merge_operation(self) -> bool:
        """
        Whether to merge the file contents with existing data in the lookup table.
        """
        return pulumi.get(self, "is_lookup_merge_operation")

    @property
    @pulumi.getter(name="lookupFilePath")
    def lookup_file_path(self) -> str:
        """
        Path of the lookup table to save the results to.
        """
        return pulumi.get(self, "lookup_file_path")


@pulumi.output_type
class LogSearchScheduleNotificationSaveToViewNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationSaveToViewNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationSaveToViewNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationSaveToViewNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view_name: str):
        """
        :param str view_name: Name of the View(Index) to save the results to.
        """
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        """
        Name of the View(Index) to save the results to.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class LogSearchScheduleNotificationServiceNowSearchNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationServiceNowSearchNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationServiceNowSearchNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationServiceNowSearchNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: str,
                 fields: Optional['outputs.LogSearchScheduleNotificationServiceNowSearchNotificationFields'] = None):
        """
        :param str external_id: Service Now Identifier.
        :param 'LogSearchScheduleNotificationServiceNowSearchNotificationFieldsArgs' fields: Service Now fields.
        """
        pulumi.set(__self__, "external_id", external_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        Service Now Identifier.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def fields(self) -> Optional['outputs.LogSearchScheduleNotificationServiceNowSearchNotificationFields']:
        """
        Service Now fields.
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class LogSearchScheduleNotificationServiceNowSearchNotificationFields(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationServiceNowSearchNotificationFields. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationServiceNowSearchNotificationFields.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationServiceNowSearchNotificationFields.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: Optional[str] = None,
                 node: Optional[str] = None,
                 resource: Optional[str] = None,
                 severity: Optional[int] = None):
        """
        :param str event_type: The category that the event source uses to identify the event.
        :param str node: The physical or virtual device on which the event occurred.
        :param str resource: The component on the node to which the event applies.
        :param int severity: An integer value representing the severity of the alert. Supported values are:
               * 0 for Clear
               * 1 for Critical
               * 2 for Major
               * 3 for Minor
               * 4 for Warning
        """
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[str]:
        """
        The category that the event source uses to identify the event.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def node(self) -> Optional[str]:
        """
        The physical or virtual device on which the event occurred.
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        The component on the node to which the event applies.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def severity(self) -> Optional[int]:
        """
        An integer value representing the severity of the alert. Supported values are:
        * 0 for Clear
        * 1 for Critical
        * 2 for Major
        * 3 for Minor
        * 4 for Warning
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class LogSearchScheduleNotificationWebhookSearchNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webhookId":
            suggest = "webhook_id"
        elif key == "itemizeAlerts":
            suggest = "itemize_alerts"
        elif key == "maxItemizedAlerts":
            suggest = "max_itemized_alerts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleNotificationWebhookSearchNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleNotificationWebhookSearchNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleNotificationWebhookSearchNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 webhook_id: str,
                 itemize_alerts: Optional[bool] = None,
                 max_itemized_alerts: Optional[int] = None,
                 payload: Optional[str] = None):
        """
        :param str webhook_id: Identifier of the webhook connection.
        :param bool itemize_alerts: If set to true, one webhook per result will be sent when the trigger conditions are met.
        :param int max_itemized_alerts: The maximum number of results for which we send separate alerts.
        :param str payload: A JSON object in the format required by the target WebHook URL.
        """
        pulumi.set(__self__, "webhook_id", webhook_id)
        if itemize_alerts is not None:
            pulumi.set(__self__, "itemize_alerts", itemize_alerts)
        if max_itemized_alerts is not None:
            pulumi.set(__self__, "max_itemized_alerts", max_itemized_alerts)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> str:
        """
        Identifier of the webhook connection.
        """
        return pulumi.get(self, "webhook_id")

    @property
    @pulumi.getter(name="itemizeAlerts")
    def itemize_alerts(self) -> Optional[bool]:
        """
        If set to true, one webhook per result will be sent when the trigger conditions are met.
        """
        return pulumi.get(self, "itemize_alerts")

    @property
    @pulumi.getter(name="maxItemizedAlerts")
    def max_itemized_alerts(self) -> Optional[int]:
        """
        The maximum number of results for which we send separate alerts.
        """
        return pulumi.get(self, "max_itemized_alerts")

    @property
    @pulumi.getter
    def payload(self) -> Optional[str]:
        """
        A JSON object in the format required by the target WebHook URL.
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class LogSearchScheduleParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the search.
        :param str value: Default value of scheduled search parameter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the search.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Default value of scheduled search parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LogSearchScheduleParseableTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginBoundedTimeRange":
            suggest = "begin_bounded_time_range"
        elif key == "completeLiteralTimeRange":
            suggest = "complete_literal_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_bounded_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange'] = None,
                 complete_literal_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange'] = None):
        """
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeArgs' begin_bounded_time_range: Bounded time range. See
               begin_bounded_time_range schema schema for details.
        :param 'LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRangeArgs' complete_literal_time_range: Literal time range. See
               complete_literal_time_range schema for details.
        """
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange']:
        """
        Bounded time range. See
        begin_bounded_time_range schema schema for details.
        """
        return pulumi.get(self, "begin_bounded_time_range")

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange']:
        """
        Literal time range. See
        complete_literal_time_range schema for details.
        """
        return pulumi.get(self, "complete_literal_time_range")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: 'outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom',
                 to: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo'] = None):
        """
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromArgs' from_: Start boundary of bounded time range. See
               time_range_boundary schema for details.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToArgs' to: End boundary of bounded time range. See
               time_range_boundary schema for details.
        """
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom':
        """
        Start boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo']:
        """
        End boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange'] = None):
        """
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange'] = None):
        """
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleParseableTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LogSearchScheduleThreshold(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchScheduleThreshold. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchScheduleThreshold.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchScheduleThreshold.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 operator: str,
                 threshold_type: str):
        """
        :param int count: Expected result count.
        :param str operator: Criterion to be applied when comparing actual result count with expected count. Possible
               values are: `eq`, `gt`, `ge`, `lt`, and `le`.
        :param str threshold_type: Threshold type for the scheduled log search. Possible values are: `message` and `group`.
               Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
               to `message`.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Expected result count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Criterion to be applied when comparing actual result count with expected count. Possible
        values are: `eq`, `gt`, `ge`, `lt`, and `le`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> str:
        """
        Threshold type for the scheduled log search. Possible values are: `message` and `group`.
        Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it
        to `message`.
        """
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class LogSearchTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginBoundedTimeRange":
            suggest = "begin_bounded_time_range"
        elif key == "completeLiteralTimeRange":
            suggest = "complete_literal_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_bounded_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRange'] = None,
                 complete_literal_time_range: Optional['outputs.LogSearchTimeRangeCompleteLiteralTimeRange'] = None):
        """
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeArgs' begin_bounded_time_range: Bounded time range. See
               begin_bounded_time_range schema schema for details.
        :param 'LogSearchTimeRangeCompleteLiteralTimeRangeArgs' complete_literal_time_range: Literal time range. See
               complete_literal_time_range schema for details.
        """
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRange']:
        """
        Bounded time range. See
        begin_bounded_time_range schema schema for details.
        """
        return pulumi.get(self, "begin_bounded_time_range")

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional['outputs.LogSearchTimeRangeCompleteLiteralTimeRange']:
        """
        Literal time range. See
        complete_literal_time_range schema for details.
        """
        return pulumi.get(self, "complete_literal_time_range")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: 'outputs.LogSearchTimeRangeBeginBoundedTimeRangeFrom',
                 to: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeTo'] = None):
        """
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeFromArgs' from_: Start boundary of bounded time range. See
               time_range_boundary schema for details.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeToArgs' to: End boundary of bounded time range. See
               time_range_boundary schema for details.
        """
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.LogSearchTimeRangeBeginBoundedTimeRangeFrom':
        """
        Start boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeTo']:
        """
        End boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange'] = None):
        """
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange'] = None):
        """
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class LogSearchTimeRangeCompleteLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogSearchTimeRangeCompleteLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogSearchTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogSearchTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class LookupTableField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "fieldType":
            suggest = "field_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LookupTableField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LookupTableField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LookupTableField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 field_type: str):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        return pulumi.get(self, "field_type")


@pulumi.output_type
class MetadataSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetadataSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetadataSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetadataSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str type: type of polling source. Only allowed value is `AwsMetadataPath`.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. Only allowed value is `AwsMetadataPath`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class MetadataSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class MetadataSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetadataSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetadataSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetadataSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class MetadataSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "tagFilters":
            suggest = "tag_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetadataSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetadataSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetadataSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 tag_filters: Optional[Sequence[str]] = None):
        """
        :param str type: type of polling source. Only allowed value is `AwsMetadataPath`.
        :param Sequence[str] limit_to_namespaces: List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
        :param Sequence[str] limit_to_regions: List of Amazon regions.
        :param Sequence[str] tag_filters: Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
        """
        pulumi.set(__self__, "type", type)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. Only allowed value is `AwsMetadataPath`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces. For `AwsMetadataPath` the only valid namespace is `AWS/EC2`.
        """
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of Amazon regions.
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence[str]]:
        """
        Leave this field blank to collect all tags configured for the EC2 instance. To collect a subset of tags, follow the instructions in [Define EC2 tag filters][2]
        """
        return pulumi.get(self, "tag_filters")


@pulumi.output_type
class MetricsSearchMetricsQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowId":
            suggest = "row_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchMetricsQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchMetricsQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchMetricsQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 row_id: str):
        """
        :param str query: A metric query consists of a metric, one or more filters and optionally, one or more [Metrics Operators](https://help.sumologic.com/?cid=10144).
               Strictly speaking, both filters and operators are optional.
               Most of the [Metrics Operators](https://help.sumologic.com/?cid=10144) are allowed in the query string except `fillmissing`, `outlier`, `quantize` and `timeshift`.
               In practice, your metric queries will almost always contain filters that narrow the scope of your query.
               For more information about the query language see [Metrics Queries](https://help.sumologic.com/?cid=1079).
        :param str row_id: Row id for the query row, A to Z letter.
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "row_id", row_id)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        A metric query consists of a metric, one or more filters and optionally, one or more [Metrics Operators](https://help.sumologic.com/?cid=10144).
        Strictly speaking, both filters and operators are optional.
        Most of the [Metrics Operators](https://help.sumologic.com/?cid=10144) are allowed in the query string except `fillmissing`, `outlier`, `quantize` and `timeshift`.
        In practice, your metric queries will almost always contain filters that narrow the scope of your query.
        For more information about the query language see [Metrics Queries](https://help.sumologic.com/?cid=1079).
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="rowId")
    def row_id(self) -> str:
        """
        Row id for the query row, A to Z letter.
        """
        return pulumi.get(self, "row_id")


@pulumi.output_type
class MetricsSearchTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginBoundedTimeRange":
            suggest = "begin_bounded_time_range"
        elif key == "completeLiteralTimeRange":
            suggest = "complete_literal_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_bounded_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRange'] = None,
                 complete_literal_time_range: Optional['outputs.MetricsSearchTimeRangeCompleteLiteralTimeRange'] = None):
        """
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeArgs' begin_bounded_time_range: Bounded time range. See
               begin_bounded_time_range schema schema for details.
        :param 'MetricsSearchTimeRangeCompleteLiteralTimeRangeArgs' complete_literal_time_range: Literal time range. See
               complete_literal_time_range schema for details.
        """
        if begin_bounded_time_range is not None:
            pulumi.set(__self__, "begin_bounded_time_range", begin_bounded_time_range)
        if complete_literal_time_range is not None:
            pulumi.set(__self__, "complete_literal_time_range", complete_literal_time_range)

    @property
    @pulumi.getter(name="beginBoundedTimeRange")
    def begin_bounded_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRange']:
        """
        Bounded time range. See
        begin_bounded_time_range schema schema for details.
        """
        return pulumi.get(self, "begin_bounded_time_range")

    @property
    @pulumi.getter(name="completeLiteralTimeRange")
    def complete_literal_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeCompleteLiteralTimeRange']:
        """
        Literal time range. See
        complete_literal_time_range schema for details.
        """
        return pulumi.get(self, "complete_literal_time_range")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: 'outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFrom',
                 to: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeTo'] = None):
        """
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeFromArgs' from_: Start boundary of bounded time range. See
               time_range_boundary schema for details.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeToArgs' to: End boundary of bounded time range. See
               time_range_boundary schema for details.
        """
        pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> 'outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFrom':
        """
        Start boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeTo']:
        """
        End boundary of bounded time range. See
        time_range_boundary schema for details.
        """
        return pulumi.get(self, "to")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange'] = None):
        """
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeFromRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochTimeRange":
            suggest = "epoch_time_range"
        elif key == "iso8601TimeRange":
            suggest = "iso8601_time_range"
        elif key == "literalTimeRange":
            suggest = "literal_time_range"
        elif key == "relativeTimeRange":
            suggest = "relative_time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange'] = None,
                 iso8601_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange'] = None,
                 literal_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange'] = None,
                 relative_time_range: Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange'] = None):
        """
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRangeArgs' epoch_time_range: Time since the epoch.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRangeArgs' iso8601_time_range: Time in ISO 8601 format.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRangeArgs' literal_time_range: Time in literal format.
        :param 'MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRangeArgs' relative_time_range: Time in relative format.
        """
        if epoch_time_range is not None:
            pulumi.set(__self__, "epoch_time_range", epoch_time_range)
        if iso8601_time_range is not None:
            pulumi.set(__self__, "iso8601_time_range", iso8601_time_range)
        if literal_time_range is not None:
            pulumi.set(__self__, "literal_time_range", literal_time_range)
        if relative_time_range is not None:
            pulumi.set(__self__, "relative_time_range", relative_time_range)

    @property
    @pulumi.getter(name="epochTimeRange")
    def epoch_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange']:
        """
        Time since the epoch.
        """
        return pulumi.get(self, "epoch_time_range")

    @property
    @pulumi.getter(name="iso8601TimeRange")
    def iso8601_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange']:
        """
        Time in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time_range")

    @property
    @pulumi.getter(name="literalTimeRange")
    def literal_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange']:
        """
        Time in literal format.
        """
        return pulumi.get(self, "literal_time_range")

    @property
    @pulumi.getter(name="relativeTimeRange")
    def relative_time_range(self) -> Optional['outputs.MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange']:
        """
        Time in relative format.
        """
        return pulumi.get(self, "relative_time_range")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "epochMillis":
            suggest = "epoch_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToEpochTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 epoch_millis: int):
        """
        :param int epoch_millis: Time as a number of milliseconds since the epoch.
        """
        pulumi.set(__self__, "epoch_millis", epoch_millis)

    @property
    @pulumi.getter(name="epochMillis")
    def epoch_millis(self) -> int:
        """
        Time as a number of milliseconds since the epoch.
        """
        return pulumi.get(self, "epoch_millis")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iso8601Time":
            suggest = "iso8601_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToIso8601TimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iso8601_time: str):
        """
        :param str iso8601_time: Time as a string in ISO 8601 format.
        """
        pulumi.set(__self__, "iso8601_time", iso8601_time)

    @property
    @pulumi.getter(name="iso8601Time")
    def iso8601_time(self) -> str:
        """
        Time as a string in ISO 8601 format.
        """
        return pulumi.get(self, "iso8601_time")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relativeTime":
            suggest = "relative_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeBeginBoundedTimeRangeToRelativeTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 relative_time: str):
        """
        :param str relative_time: Relative time as a string consisting of following elements:
               1. `-` (optional): minus sign indicates time in the past,
               2. `<number>`: number of time units,
               3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).
               
               Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
               `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        pulumi.set(__self__, "relative_time", relative_time)

    @property
    @pulumi.getter(name="relativeTime")
    def relative_time(self) -> str:
        """
        Relative time as a string consisting of following elements:
        1. `-` (optional): minus sign indicates time in the past,
        2. `<number>`: number of time units,
        3. `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second).

        Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example,
        `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
        """
        return pulumi.get(self, "relative_time")


@pulumi.output_type
class MetricsSearchTimeRangeCompleteLiteralTimeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeName":
            suggest = "range_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MetricsSearchTimeRangeCompleteLiteralTimeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MetricsSearchTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MetricsSearchTimeRangeCompleteLiteralTimeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range_name: str):
        """
        :param str range_name: One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        pulumi.set(__self__, "range_name", range_name)

    @property
    @pulumi.getter(name="rangeName")
    def range_name(self) -> str:
        """
        One of `now`, `second`, `minute`, `hour`, `day`, `today`, `week`, `month`, `year`.
        """
        return pulumi.get(self, "range_name")


@pulumi.output_type
class MonitorFolderObjPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subjectId":
            suggest = "subject_id"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorFolderObjPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorFolderObjPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorFolderObjPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permissions: Sequence[str],
                 subject_id: str,
                 subject_type: str):
        """
        :param Sequence[str] permissions: A Set of Permissions. Valid Permission Values:
        :param str subject_id: A Role ID or the Org ID of the account
        :param str subject_type: Valid values:
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "subject_id", subject_id)
        pulumi.set(__self__, "subject_type", subject_type)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        """
        A Set of Permissions. Valid Permission Values:
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> str:
        """
        A Role ID or the Org ID of the account
        """
        return pulumi.get(self, "subject_id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        """
        Valid values:
        """
        return pulumi.get(self, "subject_type")


@pulumi.output_type
class MonitorNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runForTriggerTypes":
            suggest = "run_for_trigger_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification: 'outputs.MonitorNotificationNotification',
                 run_for_trigger_types: Sequence[str]):
        pulumi.set(__self__, "notification", notification)
        pulumi.set(__self__, "run_for_trigger_types", run_for_trigger_types)

    @property
    @pulumi.getter
    def notification(self) -> 'outputs.MonitorNotificationNotification':
        return pulumi.get(self, "notification")

    @property
    @pulumi.getter(name="runForTriggerTypes")
    def run_for_trigger_types(self) -> Sequence[str]:
        return pulumi.get(self, "run_for_trigger_types")


@pulumi.output_type
class MonitorNotificationNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionType":
            suggest = "connection_type"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "payloadOverride":
            suggest = "payload_override"
        elif key == "resolutionPayloadOverride":
            suggest = "resolution_payload_override"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorNotificationNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorNotificationNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorNotificationNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 message_body: Optional[str] = None,
                 payload_override: Optional[str] = None,
                 recipients: Optional[Sequence[str]] = None,
                 resolution_payload_override: Optional[str] = None,
                 subject: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if payload_override is not None:
            pulumi.set(__self__, "payload_override", payload_override)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if resolution_payload_override is not None:
            pulumi.set(__self__, "resolution_payload_override", resolution_payload_override)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        warnings.warn("""The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""action_type is deprecated: The field `action_type` is deprecated and will be removed in a future release of the provider - please use `connection_type` instead.""")

        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[str]:
        return pulumi.get(self, "message_body")

    @property
    @pulumi.getter(name="payloadOverride")
    def payload_override(self) -> Optional[str]:
        return pulumi.get(self, "payload_override")

    @property
    @pulumi.getter
    def recipients(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter(name="resolutionPayloadOverride")
    def resolution_payload_override(self) -> Optional[str]:
        return pulumi.get(self, "resolution_payload_override")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class MonitorObjPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subjectId":
            suggest = "subject_id"
        elif key == "subjectType":
            suggest = "subject_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorObjPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorObjPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorObjPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permissions: Sequence[str],
                 subject_id: str,
                 subject_type: str):
        """
        :param Sequence[str] permissions: A Set of Permissions. Valid Permission Values:
        :param str subject_id: A Role ID or the Org ID of the account
        :param str subject_type: Valid values:
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "subject_id", subject_id)
        pulumi.set(__self__, "subject_type", subject_type)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        """
        A Set of Permissions. Valid Permission Values:
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="subjectId")
    def subject_id(self) -> str:
        """
        A Role ID or the Org ID of the account
        """
        return pulumi.get(self, "subject_id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        """
        Valid values:
        """
        return pulumi.get(self, "subject_type")


@pulumi.output_type
class MonitorQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowId":
            suggest = "row_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 row_id: str):
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "row_id", row_id)

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="rowId")
    def row_id(self) -> str:
        return pulumi.get(self, "row_id")


@pulumi.output_type
class MonitorTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectionMethod":
            suggest = "detection_method"
        elif key == "minDataPoints":
            suggest = "min_data_points"
        elif key == "occurrenceType":
            suggest = "occurrence_type"
        elif key == "resolutionWindow":
            suggest = "resolution_window"
        elif key == "thresholdType":
            suggest = "threshold_type"
        elif key == "timeRange":
            suggest = "time_range"
        elif key == "triggerSource":
            suggest = "trigger_source"
        elif key == "triggerType":
            suggest = "trigger_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detection_method: Optional[str] = None,
                 min_data_points: Optional[int] = None,
                 occurrence_type: Optional[str] = None,
                 resolution_window: Optional[str] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None,
                 time_range: Optional[str] = None,
                 trigger_source: Optional[str] = None,
                 trigger_type: Optional[str] = None):
        """
        :param str resolution_window: The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if min_data_points is not None:
            pulumi.set(__self__, "min_data_points", min_data_points)
        if occurrence_type is not None:
            pulumi.set(__self__, "occurrence_type", occurrence_type)
        if resolution_window is not None:
            pulumi.set(__self__, "resolution_window", resolution_window)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[str]:
        return pulumi.get(self, "detection_method")

    @property
    @pulumi.getter(name="minDataPoints")
    def min_data_points(self) -> Optional[int]:
        return pulumi.get(self, "min_data_points")

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> Optional[str]:
        return pulumi.get(self, "occurrence_type")

    @property
    @pulumi.getter(name="resolutionWindow")
    def resolution_window(self) -> Optional[str]:
        """
        The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        return pulumi.get(self, "resolution_window")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[str]:
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[str]:
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class MonitorTriggerConditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logsMissingDataCondition":
            suggest = "logs_missing_data_condition"
        elif key == "logsOutlierCondition":
            suggest = "logs_outlier_condition"
        elif key == "logsStaticCondition":
            suggest = "logs_static_condition"
        elif key == "metricsMissingDataCondition":
            suggest = "metrics_missing_data_condition"
        elif key == "metricsOutlierCondition":
            suggest = "metrics_outlier_condition"
        elif key == "metricsStaticCondition":
            suggest = "metrics_static_condition"
        elif key == "sloBurnRateCondition":
            suggest = "slo_burn_rate_condition"
        elif key == "sloSliCondition":
            suggest = "slo_sli_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logs_missing_data_condition: Optional['outputs.MonitorTriggerConditionsLogsMissingDataCondition'] = None,
                 logs_outlier_condition: Optional['outputs.MonitorTriggerConditionsLogsOutlierCondition'] = None,
                 logs_static_condition: Optional['outputs.MonitorTriggerConditionsLogsStaticCondition'] = None,
                 metrics_missing_data_condition: Optional['outputs.MonitorTriggerConditionsMetricsMissingDataCondition'] = None,
                 metrics_outlier_condition: Optional['outputs.MonitorTriggerConditionsMetricsOutlierCondition'] = None,
                 metrics_static_condition: Optional['outputs.MonitorTriggerConditionsMetricsStaticCondition'] = None,
                 slo_burn_rate_condition: Optional['outputs.MonitorTriggerConditionsSloBurnRateCondition'] = None,
                 slo_sli_condition: Optional['outputs.MonitorTriggerConditionsSloSliCondition'] = None):
        if logs_missing_data_condition is not None:
            pulumi.set(__self__, "logs_missing_data_condition", logs_missing_data_condition)
        if logs_outlier_condition is not None:
            pulumi.set(__self__, "logs_outlier_condition", logs_outlier_condition)
        if logs_static_condition is not None:
            pulumi.set(__self__, "logs_static_condition", logs_static_condition)
        if metrics_missing_data_condition is not None:
            pulumi.set(__self__, "metrics_missing_data_condition", metrics_missing_data_condition)
        if metrics_outlier_condition is not None:
            pulumi.set(__self__, "metrics_outlier_condition", metrics_outlier_condition)
        if metrics_static_condition is not None:
            pulumi.set(__self__, "metrics_static_condition", metrics_static_condition)
        if slo_burn_rate_condition is not None:
            pulumi.set(__self__, "slo_burn_rate_condition", slo_burn_rate_condition)
        if slo_sli_condition is not None:
            pulumi.set(__self__, "slo_sli_condition", slo_sli_condition)

    @property
    @pulumi.getter(name="logsMissingDataCondition")
    def logs_missing_data_condition(self) -> Optional['outputs.MonitorTriggerConditionsLogsMissingDataCondition']:
        return pulumi.get(self, "logs_missing_data_condition")

    @property
    @pulumi.getter(name="logsOutlierCondition")
    def logs_outlier_condition(self) -> Optional['outputs.MonitorTriggerConditionsLogsOutlierCondition']:
        return pulumi.get(self, "logs_outlier_condition")

    @property
    @pulumi.getter(name="logsStaticCondition")
    def logs_static_condition(self) -> Optional['outputs.MonitorTriggerConditionsLogsStaticCondition']:
        return pulumi.get(self, "logs_static_condition")

    @property
    @pulumi.getter(name="metricsMissingDataCondition")
    def metrics_missing_data_condition(self) -> Optional['outputs.MonitorTriggerConditionsMetricsMissingDataCondition']:
        return pulumi.get(self, "metrics_missing_data_condition")

    @property
    @pulumi.getter(name="metricsOutlierCondition")
    def metrics_outlier_condition(self) -> Optional['outputs.MonitorTriggerConditionsMetricsOutlierCondition']:
        return pulumi.get(self, "metrics_outlier_condition")

    @property
    @pulumi.getter(name="metricsStaticCondition")
    def metrics_static_condition(self) -> Optional['outputs.MonitorTriggerConditionsMetricsStaticCondition']:
        return pulumi.get(self, "metrics_static_condition")

    @property
    @pulumi.getter(name="sloBurnRateCondition")
    def slo_burn_rate_condition(self) -> Optional['outputs.MonitorTriggerConditionsSloBurnRateCondition']:
        return pulumi.get(self, "slo_burn_rate_condition")

    @property
    @pulumi.getter(name="sloSliCondition")
    def slo_sli_condition(self) -> Optional['outputs.MonitorTriggerConditionsSloSliCondition']:
        return pulumi.get(self, "slo_sli_condition")


@pulumi.output_type
class MonitorTriggerConditionsLogsMissingDataCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsMissingDataCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsMissingDataCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsMissingDataCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_range: str):
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsLogsOutlierCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsLogsOutlierConditionCritical'] = None,
                 direction: Optional[str] = None,
                 field: Optional[str] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsLogsOutlierConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsLogsOutlierConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsLogsOutlierConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsLogsOutlierConditionCritical(dict):
    def __init__(__self__, *,
                 consecutive: Optional[int] = None,
                 threshold: Optional[float] = None,
                 window: Optional[int] = None):
        if consecutive is not None:
            pulumi.set(__self__, "consecutive", consecutive)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def consecutive(self) -> Optional[int]:
        return pulumi.get(self, "consecutive")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def window(self) -> Optional[int]:
        return pulumi.get(self, "window")


@pulumi.output_type
class MonitorTriggerConditionsLogsOutlierConditionWarning(dict):
    def __init__(__self__, *,
                 consecutive: Optional[int] = None,
                 threshold: Optional[float] = None,
                 window: Optional[int] = None):
        if consecutive is not None:
            pulumi.set(__self__, "consecutive", consecutive)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def consecutive(self) -> Optional[int]:
        return pulumi.get(self, "consecutive")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def window(self) -> Optional[int]:
        return pulumi.get(self, "window")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsLogsStaticConditionCritical'] = None,
                 field: Optional[str] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsLogsStaticConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsLogsStaticConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsLogsStaticConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionCritical(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionCritical. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCritical.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCritical.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: 'outputs.MonitorTriggerConditionsLogsStaticConditionCriticalAlert',
                 resolution: 'outputs.MonitorTriggerConditionsLogsStaticConditionCriticalResolution',
                 time_range: str):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter
    def alert(self) -> 'outputs.MonitorTriggerConditionsLogsStaticConditionCriticalAlert':
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def resolution(self) -> 'outputs.MonitorTriggerConditionsLogsStaticConditionCriticalResolution':
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionCriticalAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionCriticalAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCriticalAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCriticalAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionCriticalResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolutionWindow":
            suggest = "resolution_window"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionCriticalResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCriticalResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionCriticalResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resolution_window: Optional[str] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        """
        :param str resolution_window: The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        if resolution_window is not None:
            pulumi.set(__self__, "resolution_window", resolution_window)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="resolutionWindow")
    def resolution_window(self) -> Optional[str]:
        """
        The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        return pulumi.get(self, "resolution_window")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: 'outputs.MonitorTriggerConditionsLogsStaticConditionWarningAlert',
                 resolution: 'outputs.MonitorTriggerConditionsLogsStaticConditionWarningResolution',
                 time_range: str):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter
    def alert(self) -> 'outputs.MonitorTriggerConditionsLogsStaticConditionWarningAlert':
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter
    def resolution(self) -> 'outputs.MonitorTriggerConditionsLogsStaticConditionWarningResolution':
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionWarningAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionWarningAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarningAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarningAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsLogsStaticConditionWarningResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolutionWindow":
            suggest = "resolution_window"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsLogsStaticConditionWarningResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarningResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsLogsStaticConditionWarningResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resolution_window: Optional[str] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        """
        :param str resolution_window: The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        if resolution_window is not None:
            pulumi.set(__self__, "resolution_window", resolution_window)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="resolutionWindow")
    def resolution_window(self) -> Optional[str]:
        """
        The resolution window that the recovery condition must be met in each evaluation that happens within this entire duration before the alert is recovered (resolved). If not specified, the time range of your trigger will be used.
        """
        return pulumi.get(self, "resolution_window")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsMetricsMissingDataCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeRange":
            suggest = "time_range"
        elif key == "triggerSource":
            suggest = "trigger_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsMissingDataCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsMissingDataCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsMissingDataCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_range: str,
                 trigger_source: str):
        pulumi.set(__self__, "time_range", time_range)
        pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> str:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class MonitorTriggerConditionsMetricsOutlierCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsMetricsOutlierConditionCritical'] = None,
                 direction: Optional[str] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsMetricsOutlierConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsMetricsOutlierConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsMetricsOutlierConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsMetricsOutlierConditionCritical(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineWindow":
            suggest = "baseline_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsOutlierConditionCritical. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsOutlierConditionCritical.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsOutlierConditionCritical.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_window: Optional[str] = None,
                 threshold: Optional[float] = None):
        if baseline_window is not None:
            pulumi.set(__self__, "baseline_window", baseline_window)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="baselineWindow")
    def baseline_window(self) -> Optional[str]:
        return pulumi.get(self, "baseline_window")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class MonitorTriggerConditionsMetricsOutlierConditionWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baselineWindow":
            suggest = "baseline_window"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsOutlierConditionWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsOutlierConditionWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsOutlierConditionWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 baseline_window: Optional[str] = None,
                 threshold: Optional[float] = None):
        if baseline_window is not None:
            pulumi.set(__self__, "baseline_window", baseline_window)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="baselineWindow")
    def baseline_window(self) -> Optional[str]:
        return pulumi.get(self, "baseline_window")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsMetricsStaticConditionCritical'] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsMetricsStaticConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsMetricsStaticConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsMetricsStaticConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionCritical(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "occurrenceType":
            suggest = "occurrence_type"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionCritical. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCritical.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCritical.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: 'outputs.MonitorTriggerConditionsMetricsStaticConditionCriticalAlert',
                 occurrence_type: str,
                 resolution: 'outputs.MonitorTriggerConditionsMetricsStaticConditionCriticalResolution',
                 time_range: str):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "occurrence_type", occurrence_type)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter
    def alert(self) -> 'outputs.MonitorTriggerConditionsMetricsStaticConditionCriticalAlert':
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> str:
        return pulumi.get(self, "occurrence_type")

    @property
    @pulumi.getter
    def resolution(self) -> 'outputs.MonitorTriggerConditionsMetricsStaticConditionCriticalResolution':
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionCriticalAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minDataPoints":
            suggest = "min_data_points"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionCriticalAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCriticalAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCriticalAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_data_points: Optional[int] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if min_data_points is not None:
            pulumi.set(__self__, "min_data_points", min_data_points)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="minDataPoints")
    def min_data_points(self) -> Optional[int]:
        return pulumi.get(self, "min_data_points")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionCriticalResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minDataPoints":
            suggest = "min_data_points"
        elif key == "occurrenceType":
            suggest = "occurrence_type"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionCriticalResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCriticalResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionCriticalResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_data_points: Optional[int] = None,
                 occurrence_type: Optional[str] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if min_data_points is not None:
            pulumi.set(__self__, "min_data_points", min_data_points)
        if occurrence_type is not None:
            pulumi.set(__self__, "occurrence_type", occurrence_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="minDataPoints")
    def min_data_points(self) -> Optional[int]:
        return pulumi.get(self, "min_data_points")

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> Optional[str]:
        return pulumi.get(self, "occurrence_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "occurrenceType":
            suggest = "occurrence_type"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert: 'outputs.MonitorTriggerConditionsMetricsStaticConditionWarningAlert',
                 occurrence_type: str,
                 resolution: 'outputs.MonitorTriggerConditionsMetricsStaticConditionWarningResolution',
                 time_range: str):
        pulumi.set(__self__, "alert", alert)
        pulumi.set(__self__, "occurrence_type", occurrence_type)
        pulumi.set(__self__, "resolution", resolution)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter
    def alert(self) -> 'outputs.MonitorTriggerConditionsMetricsStaticConditionWarningAlert':
        return pulumi.get(self, "alert")

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> str:
        return pulumi.get(self, "occurrence_type")

    @property
    @pulumi.getter
    def resolution(self) -> 'outputs.MonitorTriggerConditionsMetricsStaticConditionWarningResolution':
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionWarningAlert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minDataPoints":
            suggest = "min_data_points"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionWarningAlert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarningAlert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarningAlert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_data_points: Optional[int] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if min_data_points is not None:
            pulumi.set(__self__, "min_data_points", min_data_points)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="minDataPoints")
    def min_data_points(self) -> Optional[int]:
        return pulumi.get(self, "min_data_points")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsMetricsStaticConditionWarningResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minDataPoints":
            suggest = "min_data_points"
        elif key == "occurrenceType":
            suggest = "occurrence_type"
        elif key == "thresholdType":
            suggest = "threshold_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsMetricsStaticConditionWarningResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarningResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsMetricsStaticConditionWarningResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_data_points: Optional[int] = None,
                 occurrence_type: Optional[str] = None,
                 threshold: Optional[float] = None,
                 threshold_type: Optional[str] = None):
        if min_data_points is not None:
            pulumi.set(__self__, "min_data_points", min_data_points)
        if occurrence_type is not None:
            pulumi.set(__self__, "occurrence_type", occurrence_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="minDataPoints")
    def min_data_points(self) -> Optional[int]:
        return pulumi.get(self, "min_data_points")

    @property
    @pulumi.getter(name="occurrenceType")
    def occurrence_type(self) -> Optional[str]:
        return pulumi.get(self, "occurrence_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[str]:
        return pulumi.get(self, "threshold_type")


@pulumi.output_type
class MonitorTriggerConditionsSloBurnRateCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsSloBurnRateConditionCritical'] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsSloBurnRateConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsSloBurnRateConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsSloBurnRateConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsSloBurnRateConditionCritical(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burnRateThreshold":
            suggest = "burn_rate_threshold"
        elif key == "burnRates":
            suggest = "burn_rates"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloBurnRateConditionCritical. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionCritical.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionCritical.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burn_rate_threshold: Optional[float] = None,
                 burn_rates: Optional[Sequence['outputs.MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate']] = None,
                 time_range: Optional[str] = None):
        if burn_rate_threshold is not None:
            pulumi.set(__self__, "burn_rate_threshold", burn_rate_threshold)
        if burn_rates is not None:
            pulumi.set(__self__, "burn_rates", burn_rates)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="burnRateThreshold")
    def burn_rate_threshold(self) -> Optional[float]:
        return pulumi.get(self, "burn_rate_threshold")

    @property
    @pulumi.getter(name="burnRates")
    def burn_rates(self) -> Optional[Sequence['outputs.MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate']]:
        return pulumi.get(self, "burn_rates")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[str]:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burnRateThreshold":
            suggest = "burn_rate_threshold"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionCriticalBurnRate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burn_rate_threshold: float,
                 time_range: str):
        pulumi.set(__self__, "burn_rate_threshold", burn_rate_threshold)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="burnRateThreshold")
    def burn_rate_threshold(self) -> float:
        return pulumi.get(self, "burn_rate_threshold")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsSloBurnRateConditionWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burnRateThreshold":
            suggest = "burn_rate_threshold"
        elif key == "burnRates":
            suggest = "burn_rates"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloBurnRateConditionWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burn_rate_threshold: Optional[float] = None,
                 burn_rates: Optional[Sequence['outputs.MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate']] = None,
                 time_range: Optional[str] = None):
        if burn_rate_threshold is not None:
            pulumi.set(__self__, "burn_rate_threshold", burn_rate_threshold)
        if burn_rates is not None:
            pulumi.set(__self__, "burn_rates", burn_rates)
        if time_range is not None:
            pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="burnRateThreshold")
    def burn_rate_threshold(self) -> Optional[float]:
        return pulumi.get(self, "burn_rate_threshold")

    @property
    @pulumi.getter(name="burnRates")
    def burn_rates(self) -> Optional[Sequence['outputs.MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate']]:
        return pulumi.get(self, "burn_rates")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> Optional[str]:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "burnRateThreshold":
            suggest = "burn_rate_threshold"
        elif key == "timeRange":
            suggest = "time_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloBurnRateConditionWarningBurnRate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burn_rate_threshold: float,
                 time_range: str):
        pulumi.set(__self__, "burn_rate_threshold", burn_rate_threshold)
        pulumi.set(__self__, "time_range", time_range)

    @property
    @pulumi.getter(name="burnRateThreshold")
    def burn_rate_threshold(self) -> float:
        return pulumi.get(self, "burn_rate_threshold")

    @property
    @pulumi.getter(name="timeRange")
    def time_range(self) -> str:
        return pulumi.get(self, "time_range")


@pulumi.output_type
class MonitorTriggerConditionsSloSliCondition(dict):
    def __init__(__self__, *,
                 critical: Optional['outputs.MonitorTriggerConditionsSloSliConditionCritical'] = None,
                 warning: Optional['outputs.MonitorTriggerConditionsSloSliConditionWarning'] = None):
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def critical(self) -> Optional['outputs.MonitorTriggerConditionsSloSliConditionCritical']:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def warning(self) -> Optional['outputs.MonitorTriggerConditionsSloSliConditionWarning']:
        return pulumi.get(self, "warning")


@pulumi.output_type
class MonitorTriggerConditionsSloSliConditionCritical(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sliThreshold":
            suggest = "sli_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloSliConditionCritical. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloSliConditionCritical.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloSliConditionCritical.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sli_threshold: float):
        pulumi.set(__self__, "sli_threshold", sli_threshold)

    @property
    @pulumi.getter(name="sliThreshold")
    def sli_threshold(self) -> float:
        return pulumi.get(self, "sli_threshold")


@pulumi.output_type
class MonitorTriggerConditionsSloSliConditionWarning(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sliThreshold":
            suggest = "sli_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitorTriggerConditionsSloSliConditionWarning. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitorTriggerConditionsSloSliConditionWarning.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitorTriggerConditionsSloSliConditionWarning.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sli_threshold: float):
        pulumi.set(__self__, "sli_threshold", sli_threshold)

    @property
    @pulumi.getter(name="sliThreshold")
    def sli_threshold(self) -> float:
        return pulumi.get(self, "sli_threshold")


@pulumi.output_type
class MutingScheduleMonitor(dict):
    def __init__(__self__, *,
                 all: Optional[bool] = None,
                 ids: Optional[Sequence[str]] = None):
        """
        :param bool all: True if the schedule applies to all monitors
               
               [1]: https://help.sumologic.com/docs/alerts/monitors/muting-schedules/
        :param Sequence[str] ids: List of monitor Ids in hex. Must be empty if `all` is true.
        """
        if all is not None:
            pulumi.set(__self__, "all", all)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def all(self) -> Optional[bool]:
        """
        True if the schedule applies to all monitors

        [1]: https://help.sumologic.com/docs/alerts/monitors/muting-schedules/
        """
        return pulumi.get(self, "all")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        """
        List of monitor Ids in hex. Must be empty if `all` is true.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class MutingScheduleSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDate":
            suggest = "start_date"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MutingScheduleSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MutingScheduleSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MutingScheduleSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: int,
                 start_date: str,
                 start_time: str,
                 timezone: str,
                 rrule: Optional[str] = None):
        """
        :param int duration: Duration of the muting in minutes
        :param str start_date: Schedule start date in the format of `yyyy-mm-dd`
        :param str start_time: Schedule start time in the format of `hh:mm`
        :param str timezone: Time zone for the schedule per
               [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
        :param str rrule: RRule (Recurrence Rule) Below are some examples of how to represent recurring events using the RRULE format:
               A rule occurring on the third Sunday of April would be as follows: `FREQ=YEARLY;BYMONTH=4;BYDAY=SU;BYSETPOS=3`
               An event occurring on the first and second Monday of October would be specified by the rule: `FREQ=YEARLY;BYMONTH=10;BYDAY=MO;BYSETPOS=1,2`
               Event that repeats monthly: every 29th of every other month! `FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=29`
               (https://freetools.textmagic.com/rrule-generator)
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "timezone", timezone)
        if rrule is not None:
            pulumi.set(__self__, "rrule", rrule)

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        Duration of the muting in minutes
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        """
        Schedule start date in the format of `yyyy-mm-dd`
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Schedule start time in the format of `hh:mm`
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Time zone for the schedule per
        [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def rrule(self) -> Optional[str]:
        """
        RRule (Recurrence Rule) Below are some examples of how to represent recurring events using the RRULE format:
        A rule occurring on the third Sunday of April would be as follows: `FREQ=YEARLY;BYMONTH=4;BYDAY=SU;BYSETPOS=3`
        An event occurring on the first and second Monday of October would be specified by the rule: `FREQ=YEARLY;BYMONTH=10;BYDAY=MO;BYSETPOS=1,2`
        Event that repeats monthly: every 29th of every other month! `FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=29`
        (https://freetools.textmagic.com/rrule-generator)
        """
        return pulumi.get(self, "rrule")


@pulumi.output_type
class PoliciesUserConcurrentSessionsLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentSessions":
            suggest = "max_concurrent_sessions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PoliciesUserConcurrentSessionsLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PoliciesUserConcurrentSessionsLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PoliciesUserConcurrentSessionsLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 max_concurrent_sessions: Optional[int] = None):
        """
        :param bool enabled: Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
        :param int max_concurrent_sessions: Maximum number of concurrent sessions a user may have. Defaults to `100`.
        """
        pulumi.set(__self__, "enabled", enabled)
        if max_concurrent_sessions is not None:
            pulumi.set(__self__, "max_concurrent_sessions", max_concurrent_sessions)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the [User Concurrent Sessions Limit Policy](https://help.sumologic.com/Manage/Security/Set_a_Limit_for_User_Concurrent_Sessions) is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxConcurrentSessions")
    def max_concurrent_sessions(self) -> Optional[int]:
        """
        Maximum number of concurrent sessions a user may have. Defaults to `100`.
        """
        return pulumi.get(self, "max_concurrent_sessions")


@pulumi.output_type
class PollingSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class PollingSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class PollingSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class PollingSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "tagFilters":
            suggest = "tag_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PollingSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PollingSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PollingSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 tag_filters: Optional[Sequence['outputs.PollingSourcePathTagFilter']] = None):
        """
        :param str type: This value has to be set to `TagFilters`
        :param str bucket_name: The name of the bucket. This is needed if using type `S3BucketPathExpression`.
        :param Sequence[str] limit_to_namespaces: List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
        :param Sequence[str] limit_to_regions: List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
        :param str path_expression: The path to the data. This is needed if using type `S3BucketPathExpression`.
        :param Sequence['PollingSourcePathTagFilterArgs'] tag_filters: Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket. This is needed if using type `S3BucketPathExpression`.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        """
        List of namespaces to limit metrics collection. By default all namespaces are selected. Details can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#aws%C2%A0tag-filtering-namespace-support). You can also  specify custom namespace. This is a valid parameter if using type `CloudWatchPath`.
        """
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        """
        List of Amazon regions to limit metricscollection. This is a valid parameter if  using type `CloudWatchPath`.
        """
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data. This is needed if using type `S3BucketPathExpression`.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.PollingSourcePathTagFilter']]:
        """
        Tag filters allow you to filter the CloudWatch metrics you collect by the AWS tags you have assigned to your AWS resources. You can define tag filters for each supported namespace. If you do not define any tag filters, all metrics will be collected for the regions and namespaces you configured for the source above. This is a valid parameter if using type `CloudWatchPath` More info on tag filters can be found [here](https://help.sumologic.com/03Send-Data/Sources/02Sources-for-Hosted-Collectors/Amazon-Web-Services/Amazon-CloudWatch-Source-for-Metrics#about-aws-tag-filtering)
        """
        return pulumi.get(self, "tag_filters")


@pulumi.output_type
class PollingSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str namespace: Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        :param Sequence[str] tags: List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        :param str type: This value has to be set to `TagFilters`
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace for which you want to define the tag filters. Use  value as `All` to apply the tag filter for all namespaces.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        List of key-value pairs of tag filters. Eg: `["k3=v3"]`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        This value has to be set to `TagFilters`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RumSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class RumSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RumSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RumSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RumSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class RumSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "customTags":
            suggest = "custom_tags"
        elif key == "deploymentEnvironment":
            suggest = "deployment_environment"
        elif key == "ignoreUrls":
            suggest = "ignore_urls"
        elif key == "propagateTraceHeaderCorsUrls":
            suggest = "propagate_trace_header_cors_urls"
        elif key == "samplingRate":
            suggest = "sampling_rate"
        elif key == "selectedCountry":
            suggest = "selected_country"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RumSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RumSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RumSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str,
                 application_name: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, str]] = None,
                 deployment_environment: Optional[str] = None,
                 ignore_urls: Optional[Sequence[str]] = None,
                 propagate_trace_header_cors_urls: Optional[Sequence[str]] = None,
                 sampling_rate: Optional[float] = None,
                 selected_country: Optional[str] = None):
        """
        :param str service_name: Add a Service Name of a text string to show for the service name in spans (for example, "bookings-web-app").
        :param str application_name: (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a "default" application.
        :param Mapping[str, str] custom_tags: Defines custom tags attached to the spans. For example: "internal.version = 0.1.21"
        :param str deployment_environment: Your production, staging, or development environment name.
        :param Sequence[str] ignore_urls: Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: "/^https:\\/\\/www.tracker.com\\/.*/, /^https:\\/\\/api.mydomain.com\\/log\\/.*/"
        :param Sequence[str] propagate_trace_header_cors_urls: (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are "/^https:\\/\\/api.mydomain.com\\/apiv3\\/.*/" and "/^https:\\/\\/www.3rdparty.com\\/.*/".
        :param float sampling_rate: Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
        :param str selected_country: Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
        """
        pulumi.set(__self__, "service_name", service_name)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if deployment_environment is not None:
            pulumi.set(__self__, "deployment_environment", deployment_environment)
        if ignore_urls is not None:
            pulumi.set(__self__, "ignore_urls", ignore_urls)
        if propagate_trace_header_cors_urls is not None:
            pulumi.set(__self__, "propagate_trace_header_cors_urls", propagate_trace_header_cors_urls)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if selected_country is not None:
            pulumi.set(__self__, "selected_country", selected_country)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Add a Service Name of a text string to show for the service name in spans (for example, "bookings-web-app").
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        (Recommended) Add an Application Name tag of a text string to show for the app name in spans (for example, bookings-app). This groups services in the Application Service View. If left blank, services will belong to a "default" application.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, str]]:
        """
        Defines custom tags attached to the spans. For example: "internal.version = 0.1.21"
        """
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="deploymentEnvironment")
    def deployment_environment(self) -> Optional[str]:
        """
        Your production, staging, or development environment name.
        """
        return pulumi.get(self, "deployment_environment")

    @property
    @pulumi.getter(name="ignoreUrls")
    def ignore_urls(self) -> Optional[Sequence[str]]:
        """
        Add a list of URLs not to collect trace data from. Supports regex. Make sure provided URLs are valid JavaScript flavor regexes. For example: "/^https:\\/\\/www.tracker.com\\/.*/, /^https:\\/\\/api.mydomain.com\\/log\\/.*/"
        """
        return pulumi.get(self, "ignore_urls")

    @property
    @pulumi.getter(name="propagateTraceHeaderCorsUrls")
    def propagate_trace_header_cors_urls(self) -> Optional[Sequence[str]]:
        """
        (Recommended) Add a list of URLs or URL patterns that pass tracing context to construct traces end-to-end. Provided URLs should be valid JavaScript flavor regexes. Some examples are "/^https:\\/\\/api.mydomain.com\\/apiv3\\/.*/" and "/^https:\\/\\/www.3rdparty.com\\/.*/".
        """
        return pulumi.get(self, "propagate_trace_header_cors_urls")

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[float]:
        """
        Add a Probabilistic sampling rate for heavy traffic sites in a decimal value based on percentage, for example, 10% would be entered as 0.1. Supports floating values between 0.0 and 1.0, defaults to 1.0 (all data is passed).
        """
        return pulumi.get(self, "sampling_rate")

    @property
    @pulumi.getter(name="selectedCountry")
    def selected_country(self) -> Optional[str]:
        """
        Specify if you want to enrich spans with the details level up to the city - if left blank, enrichment works down to the state level.
        """
        return pulumi.get(self, "selected_country")


@pulumi.output_type
class S3ArchiveSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3ArchiveSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3ArchiveSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3ArchiveSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`.
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`.
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class S3ArchiveSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class S3ArchiveSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3ArchiveSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3ArchiveSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3ArchiveSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class S3ArchiveSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3ArchiveSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3ArchiveSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3ArchiveSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.S3ArchiveSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.S3ArchiveSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.S3ArchiveSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        :param str bucket_name: The name of the bucket.
        :param str path_expression: The path to the data.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.S3ArchiveSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.S3ArchiveSourcePathSnsTopicOrSubscriptionArn']]:
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.S3ArchiveSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class S3ArchiveSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3ArchiveSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3ArchiveSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3ArchiveSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class S3ArchiveSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3ArchiveSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3ArchiveSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3ArchiveSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class S3ArchiveSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class S3AuditSourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3AuditSourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3AuditSourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3AuditSourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`.
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`.
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`.This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class S3AuditSourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class S3AuditSourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3AuditSourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3AuditSourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3AuditSourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class S3AuditSourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3AuditSourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3AuditSourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3AuditSourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.S3AuditSourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.S3AuditSourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.S3AuditSourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        :param str bucket_name: The name of the bucket.
        :param str path_expression: The path to the data.
        :param Sequence['S3AuditSourcePathSnsTopicOrSubscriptionArnArgs'] sns_topic_or_subscription_arns: This is a computed field for SNS topic/subscription ARN.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.S3AuditSourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.S3AuditSourcePathSnsTopicOrSubscriptionArn']]:
        """
        This is a computed field for SNS topic/subscription ARN.
        """
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.S3AuditSourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class S3AuditSourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3AuditSourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3AuditSourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3AuditSourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class S3AuditSourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3AuditSourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3AuditSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3AuditSourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class S3AuditSourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 Audit source`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class S3SourceAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "authProviderX509CertUrl":
            suggest = "auth_provider_x509_cert_url"
        elif key == "authUri":
            suggest = "auth_uri"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientX509CertUrl":
            suggest = "client_x509_cert_url"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyId":
            suggest = "private_key_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tokenUri":
            suggest = "token_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3SourceAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3SourceAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3SourceAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key: Optional[str] = None,
                 auth_provider_x509_cert_url: Optional[str] = None,
                 auth_uri: Optional[str] = None,
                 client_email: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_x509_cert_url: Optional[str] = None,
                 private_key: Optional[str] = None,
                 private_key_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 region: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 token_uri: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        :param str access_key: Your AWS access key if using type `S3BucketAuthentication`.
        :param str region: Your AWS Bucket region.
        :param str role_arn: Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        :param str secret_key: Your AWS secret key if using type `S3BucketAuthentication`.
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if auth_provider_x509_cert_url is not None:
            pulumi.set(__self__, "auth_provider_x509_cert_url", auth_provider_x509_cert_url)
        if auth_uri is not None:
            pulumi.set(__self__, "auth_uri", auth_uri)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_x509_cert_url is not None:
            pulumi.set(__self__, "client_x509_cert_url", client_x509_cert_url)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_id is not None:
            pulumi.set(__self__, "private_key_id", private_key_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        """
        Your AWS access key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="authProviderX509CertUrl")
    def auth_provider_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "auth_provider_x509_cert_url")

    @property
    @pulumi.getter(name="authUri")
    def auth_uri(self) -> Optional[str]:
        return pulumi.get(self, "auth_uri")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientX509CertUrl")
    def client_x509_cert_url(self) -> Optional[str]:
        return pulumi.get(self, "client_x509_cert_url")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyId")
    def private_key_id(self) -> Optional[str]:
        return pulumi.get(self, "private_key_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Your AWS Bucket region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        Your AWS role ARN if using type `AWSRoleBasedAuthentication`. This is not supported for AWS China regions.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        """
        Your AWS secret key if using type `S3BucketAuthentication`.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")


@pulumi.output_type
class S3SourceDefaultDateFormat(dict):
    def __init__(__self__, *,
                 format: str,
                 locator: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if locator is not None:
            pulumi.set(__self__, "locator", locator)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def locator(self) -> Optional[str]:
        return pulumi.get(self, "locator")


@pulumi.output_type
class S3SourceFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3SourceFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3SourceFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3SourceFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_type: str,
                 name: str,
                 regexp: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regexp", regexp)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> str:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class S3SourcePath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "customServices":
            suggest = "custom_services"
        elif key == "limitToNamespaces":
            suggest = "limit_to_namespaces"
        elif key == "limitToRegions":
            suggest = "limit_to_regions"
        elif key == "limitToServices":
            suggest = "limit_to_services"
        elif key == "pathExpression":
            suggest = "path_expression"
        elif key == "snsTopicOrSubscriptionArns":
            suggest = "sns_topic_or_subscription_arns"
        elif key == "tagFilters":
            suggest = "tag_filters"
        elif key == "useVersionedApi":
            suggest = "use_versioned_api"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3SourcePath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3SourcePath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3SourcePath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 bucket_name: Optional[str] = None,
                 custom_services: Optional[Sequence['outputs.S3SourcePathCustomService']] = None,
                 limit_to_namespaces: Optional[Sequence[str]] = None,
                 limit_to_regions: Optional[Sequence[str]] = None,
                 limit_to_services: Optional[Sequence[str]] = None,
                 path_expression: Optional[str] = None,
                 sns_topic_or_subscription_arns: Optional[Sequence['outputs.S3SourcePathSnsTopicOrSubscriptionArn']] = None,
                 tag_filters: Optional[Sequence['outputs.S3SourcePathTagFilter']] = None,
                 use_versioned_api: Optional[bool] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        :param str bucket_name: The name of the bucket.
        :param str path_expression: The path to the data.
        :param Sequence['S3SourcePathSnsTopicOrSubscriptionArnArgs'] sns_topic_or_subscription_arns: This is a computed field for SNS topic/subscription ARN.
        :param bool use_versioned_api: Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
        """
        pulumi.set(__self__, "type", type)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if limit_to_namespaces is not None:
            pulumi.set(__self__, "limit_to_namespaces", limit_to_namespaces)
        if limit_to_regions is not None:
            pulumi.set(__self__, "limit_to_regions", limit_to_regions)
        if limit_to_services is not None:
            pulumi.set(__self__, "limit_to_services", limit_to_services)
        if path_expression is not None:
            pulumi.set(__self__, "path_expression", path_expression)
        if sns_topic_or_subscription_arns is not None:
            pulumi.set(__self__, "sns_topic_or_subscription_arns", sns_topic_or_subscription_arns)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if use_versioned_api is not None:
            pulumi.set(__self__, "use_versioned_api", use_versioned_api)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.S3SourcePathCustomService']]:
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter(name="limitToNamespaces")
    def limit_to_namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_namespaces")

    @property
    @pulumi.getter(name="limitToRegions")
    def limit_to_regions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_regions")

    @property
    @pulumi.getter(name="limitToServices")
    def limit_to_services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_to_services")

    @property
    @pulumi.getter(name="pathExpression")
    def path_expression(self) -> Optional[str]:
        """
        The path to the data.
        """
        return pulumi.get(self, "path_expression")

    @property
    @pulumi.getter(name="snsTopicOrSubscriptionArns")
    def sns_topic_or_subscription_arns(self) -> Optional[Sequence['outputs.S3SourcePathSnsTopicOrSubscriptionArn']]:
        """
        This is a computed field for SNS topic/subscription ARN.
        """
        return pulumi.get(self, "sns_topic_or_subscription_arns")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.S3SourcePathTagFilter']]:
        return pulumi.get(self, "tag_filters")

    @property
    @pulumi.getter(name="useVersionedApi")
    def use_versioned_api(self) -> Optional[bool]:
        """
        Whether to Use AWS versioned APIs. Default is set to `true`. If you're collecting from a Cisco Umbrella bucket this must be set to `false`.
        """
        return pulumi.get(self, "use_versioned_api")


@pulumi.output_type
class S3SourcePathCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3SourcePathCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3SourcePathCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3SourcePathCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefixes: Optional[Sequence[str]] = None,
                 service_name: Optional[str] = None):
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class S3SourcePathSnsTopicOrSubscriptionArn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isSuccess":
            suggest = "is_success"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in S3SourcePathSnsTopicOrSubscriptionArn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        S3SourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        S3SourcePathSnsTopicOrSubscriptionArn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: Optional[str] = None,
                 is_success: Optional[bool] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if is_success is not None:
            pulumi.set(__self__, "is_success", is_success)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> Optional[bool]:
        return pulumi.get(self, "is_success")


@pulumi.output_type
class S3SourcePathTagFilter(dict):
    def __init__(__self__, *,
                 namespace: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of polling source. This has to be `S3BucketPathExpression` for `S3 source`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SamlConfigurationOnDemandProvisioningEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "onDemandProvisioningRoles":
            suggest = "on_demand_provisioning_roles"
        elif key == "firstNameAttribute":
            suggest = "first_name_attribute"
        elif key == "lastNameAttribute":
            suggest = "last_name_attribute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamlConfigurationOnDemandProvisioningEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamlConfigurationOnDemandProvisioningEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamlConfigurationOnDemandProvisioningEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 on_demand_provisioning_roles: Sequence[str],
                 first_name_attribute: Optional[str] = None,
                 last_name_attribute: Optional[str] = None):
        """
        :param Sequence[str] on_demand_provisioning_roles: List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
        :param str first_name_attribute: First name attribute of the new user account. Defaults to "".
        :param str last_name_attribute: Last name attribute of the new user account. Defaults to "".
        """
        pulumi.set(__self__, "on_demand_provisioning_roles", on_demand_provisioning_roles)
        if first_name_attribute is not None:
            pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if last_name_attribute is not None:
            pulumi.set(__self__, "last_name_attribute", last_name_attribute)

    @property
    @pulumi.getter(name="onDemandProvisioningRoles")
    def on_demand_provisioning_roles(self) -> Sequence[str]:
        """
        List of Sumo Logic RBAC roles to be assigned when user accounts are provisioned.
        """
        return pulumi.get(self, "on_demand_provisioning_roles")

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> Optional[str]:
        """
        First name attribute of the new user account. Defaults to "".
        """
        return pulumi.get(self, "first_name_attribute")

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> Optional[str]:
        """
        Last name attribute of the new user account. Defaults to "".
        """
        return pulumi.get(self, "last_name_attribute")


@pulumi.output_type
class SloCompliance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "complianceType":
            suggest = "compliance_type"
        elif key == "startFrom":
            suggest = "start_from"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloCompliance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloCompliance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloCompliance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compliance_type: str,
                 size: str,
                 target: float,
                 timezone: str,
                 start_from: Optional[str] = None):
        """
        :param str compliance_type: The type of compliance to use. Valid values are `Rolling` or `Calendar`.
        :param str size: The size of the compliance period to use.
               - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
               - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
        :param float target: Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
        :param str timezone: Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
        :param str start_from: Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
               Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
               For `Month` it's not required and is set to first day of the month.
        """
        pulumi.set(__self__, "compliance_type", compliance_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timezone", timezone)
        if start_from is not None:
            pulumi.set(__self__, "start_from", start_from)

    @property
    @pulumi.getter(name="complianceType")
    def compliance_type(self) -> str:
        """
        The type of compliance to use. Valid values are `Rolling` or `Calendar`.
        """
        return pulumi.get(self, "compliance_type")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the compliance period to use.
        - For `Rolling` compliance type it must be a multiple of days e.g. `1d`, `2d`.
        - For `Calendar` compliance type the allowed values are `Week`, `Month`, `Quarter`.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def target(self) -> float:
        """
        Target percentage for the SLI over the compliance period. Must be a number between 0 and 100.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Time zone for the SLO compliance. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="startFrom")
    def start_from(self) -> Optional[str]:
        """
        Start of the calendar window. For `Week` its required and it would be the day of the week (for e.g. Sunday,
        Monday etc).  For `Quarter` its required, it would be the first month of the start of quarter (for e.g. January, February etc.).
        For `Month` it's not required and is set to first day of the month.
        """
        return pulumi.get(self, "start_from")


@pulumi.output_type
class SloIndicator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorBasedEvaluation":
            suggest = "monitor_based_evaluation"
        elif key == "requestBasedEvaluation":
            suggest = "request_based_evaluation"
        elif key == "windowBasedEvaluation":
            suggest = "window_based_evaluation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor_based_evaluation: Optional['outputs.SloIndicatorMonitorBasedEvaluation'] = None,
                 request_based_evaluation: Optional['outputs.SloIndicatorRequestBasedEvaluation'] = None,
                 window_based_evaluation: Optional['outputs.SloIndicatorWindowBasedEvaluation'] = None):
        if monitor_based_evaluation is not None:
            pulumi.set(__self__, "monitor_based_evaluation", monitor_based_evaluation)
        if request_based_evaluation is not None:
            pulumi.set(__self__, "request_based_evaluation", request_based_evaluation)
        if window_based_evaluation is not None:
            pulumi.set(__self__, "window_based_evaluation", window_based_evaluation)

    @property
    @pulumi.getter(name="monitorBasedEvaluation")
    def monitor_based_evaluation(self) -> Optional['outputs.SloIndicatorMonitorBasedEvaluation']:
        return pulumi.get(self, "monitor_based_evaluation")

    @property
    @pulumi.getter(name="requestBasedEvaluation")
    def request_based_evaluation(self) -> Optional['outputs.SloIndicatorRequestBasedEvaluation']:
        return pulumi.get(self, "request_based_evaluation")

    @property
    @pulumi.getter(name="windowBasedEvaluation")
    def window_based_evaluation(self) -> Optional['outputs.SloIndicatorWindowBasedEvaluation']:
        return pulumi.get(self, "window_based_evaluation")


@pulumi.output_type
class SloIndicatorMonitorBasedEvaluation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorTriggers":
            suggest = "monitor_triggers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorMonitorBasedEvaluation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorMonitorBasedEvaluation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorMonitorBasedEvaluation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor_triggers: 'outputs.SloIndicatorMonitorBasedEvaluationMonitorTriggers'):
        """
        :param 'SloIndicatorMonitorBasedEvaluationMonitorTriggersArgs' monitor_triggers: Monitor details on which SLO will be based. Only single monitor is supported here.
        """
        pulumi.set(__self__, "monitor_triggers", monitor_triggers)

    @property
    @pulumi.getter(name="monitorTriggers")
    def monitor_triggers(self) -> 'outputs.SloIndicatorMonitorBasedEvaluationMonitorTriggers':
        """
        Monitor details on which SLO will be based. Only single monitor is supported here.
        """
        return pulumi.get(self, "monitor_triggers")


@pulumi.output_type
class SloIndicatorMonitorBasedEvaluationMonitorTriggers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorId":
            suggest = "monitor_id"
        elif key == "triggerTypes":
            suggest = "trigger_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorMonitorBasedEvaluationMonitorTriggers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorMonitorBasedEvaluationMonitorTriggers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorMonitorBasedEvaluationMonitorTriggers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor_id: str,
                 trigger_types: str):
        """
        :param str monitor_id: ID of the monitor. Ex: `0000000000BCB3A4`
        :param str trigger_types: Type of monitor trigger which will attribute towards a successful or unsuccessful SLO 
               window. Valid values are `Critical`, `Warning`, `MissingData`. Only one trigger type is supported.
               
               [1]: https://help.sumologic.com/docs/observability/reliability-management-slo/
               
               [2]: slo_folder.html.markdown
               
               [3]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
        """
        pulumi.set(__self__, "monitor_id", monitor_id)
        pulumi.set(__self__, "trigger_types", trigger_types)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> str:
        """
        ID of the monitor. Ex: `0000000000BCB3A4`
        """
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter(name="triggerTypes")
    def trigger_types(self) -> str:
        """
        Type of monitor trigger which will attribute towards a successful or unsuccessful SLO 
        window. Valid values are `Critical`, `Warning`, `MissingData`. Only one trigger type is supported.

        [1]: https://help.sumologic.com/docs/observability/reliability-management-slo/

        [2]: slo_folder.html.markdown

        [3]: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
        """
        return pulumi.get(self, "trigger_types")


@pulumi.output_type
class SloIndicatorRequestBasedEvaluation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryType":
            suggest = "query_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorRequestBasedEvaluation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorRequestBasedEvaluation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorRequestBasedEvaluation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 queries: Sequence['outputs.SloIndicatorRequestBasedEvaluationQuery'],
                 query_type: str,
                 op: Optional[str] = None,
                 threshold: Optional[float] = None):
        """
        :param Sequence['SloIndicatorRequestBasedEvaluationQueryArgs'] queries: The queries to use.
        :param str query_type: The type of query to use. Valid values are `Metrics` or `Logs`.
        :param str op: Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
               , `GreaterThanOrEqual`.
        :param float threshold: Compared against threshold query's raw data points to determine success criteria.
        """
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "query_type", query_type)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.SloIndicatorRequestBasedEvaluationQuery']:
        """
        The queries to use.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> str:
        """
        The type of query to use. Valid values are `Metrics` or `Logs`.
        """
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        """
        Comparison function with threshold. Valid values are `LessThan`, `LessThanOrEqual`, `GreaterThan`
        , `GreaterThanOrEqual`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        """
        Compared against threshold query's raw data points to determine success criteria.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class SloIndicatorRequestBasedEvaluationQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryGroupType":
            suggest = "query_group_type"
        elif key == "queryGroups":
            suggest = "query_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorRequestBasedEvaluationQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorRequestBasedEvaluationQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorRequestBasedEvaluationQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_group_type: str,
                 query_groups: Sequence['outputs.SloIndicatorRequestBasedEvaluationQueryQueryGroup']):
        """
        :param str query_group_type: The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
               , `Threshold`.
        :param Sequence['SloIndicatorRequestBasedEvaluationQueryQueryGroupArgs'] query_groups: List of queries to use.
        """
        pulumi.set(__self__, "query_group_type", query_group_type)
        pulumi.set(__self__, "query_groups", query_groups)

    @property
    @pulumi.getter(name="queryGroupType")
    def query_group_type(self) -> str:
        """
        The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
        , `Threshold`.
        """
        return pulumi.get(self, "query_group_type")

    @property
    @pulumi.getter(name="queryGroups")
    def query_groups(self) -> Sequence['outputs.SloIndicatorRequestBasedEvaluationQueryQueryGroup']:
        """
        List of queries to use.
        """
        return pulumi.get(self, "query_groups")


@pulumi.output_type
class SloIndicatorRequestBasedEvaluationQueryQueryGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowId":
            suggest = "row_id"
        elif key == "useRowCount":
            suggest = "use_row_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorRequestBasedEvaluationQueryQueryGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorRequestBasedEvaluationQueryQueryGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorRequestBasedEvaluationQueryQueryGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 row_id: str,
                 use_row_count: bool,
                 field: Optional[str] = None):
        """
        :param str query: The query string to use.
        :param str row_id: The row ID to use.
        :param bool use_row_count: Whether to use the row count. Defaults to false.
        :param str field: Field of log query output to compare against. To be used only for logs based data
               type when `use_row_count` is false.
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "row_id", row_id)
        pulumi.set(__self__, "use_row_count", use_row_count)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The query string to use.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="rowId")
    def row_id(self) -> str:
        """
        The row ID to use.
        """
        return pulumi.get(self, "row_id")

    @property
    @pulumi.getter(name="useRowCount")
    def use_row_count(self) -> bool:
        """
        Whether to use the row count. Defaults to false.
        """
        return pulumi.get(self, "use_row_count")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Field of log query output to compare against. To be used only for logs based data
        type when `use_row_count` is false.
        """
        return pulumi.get(self, "field")


@pulumi.output_type
class SloIndicatorWindowBasedEvaluation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryType":
            suggest = "query_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorWindowBasedEvaluation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorWindowBasedEvaluation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorWindowBasedEvaluation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 op: str,
                 queries: Sequence['outputs.SloIndicatorWindowBasedEvaluationQuery'],
                 query_type: str,
                 size: str,
                 threshold: float,
                 aggregation: Optional[str] = None):
        """
        :param str op: The operator used to define a successful window. Valid values are `LessThan`
               , `LessThanOrEqual`, `GreaterThan`
               , `GreaterThanOrEqual`.
        :param Sequence['SloIndicatorWindowBasedEvaluationQueryArgs'] queries: The queries to use.
        :param str query_type: The type of query to use. Valid values are `Metrics` or `Logs`.
        :param str size: The size of the window to use, minimum of `1m` and maximum of `1h`.
        :param float threshold: Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
               for `(good windows / total windows) * 100`.
        :param str aggregation: Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
               , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
        """
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "query_type", query_type)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "threshold", threshold)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        The operator used to define a successful window. Valid values are `LessThan`
        , `LessThanOrEqual`, `GreaterThan`
        , `GreaterThanOrEqual`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.SloIndicatorWindowBasedEvaluationQuery']:
        """
        The queries to use.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryType")
    def query_type(self) -> str:
        """
        The type of query to use. Valid values are `Metrics` or `Logs`.
        """
        return pulumi.get(self, "query_type")

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The size of the window to use, minimum of `1m` and maximum of `1h`.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        Threshold for classifying window as successful or unsuccessful, i.e. the minimum value
        for `(good windows / total windows) * 100`.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[str]:
        """
        Aggregation function applied over each window to arrive at SLI. Valid values are `Avg`
        , `Sum`, `Count`, `Max`, `Min` and `p[1-99]`.
        """
        return pulumi.get(self, "aggregation")


@pulumi.output_type
class SloIndicatorWindowBasedEvaluationQuery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryGroupType":
            suggest = "query_group_type"
        elif key == "queryGroups":
            suggest = "query_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorWindowBasedEvaluationQuery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorWindowBasedEvaluationQuery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorWindowBasedEvaluationQuery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query_group_type: str,
                 query_groups: Sequence['outputs.SloIndicatorWindowBasedEvaluationQueryQueryGroup']):
        """
        :param str query_group_type: The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
               , `Threshold`.
        :param Sequence['SloIndicatorWindowBasedEvaluationQueryQueryGroupArgs'] query_groups: List of queries to use.
        """
        pulumi.set(__self__, "query_group_type", query_group_type)
        pulumi.set(__self__, "query_groups", query_groups)

    @property
    @pulumi.getter(name="queryGroupType")
    def query_group_type(self) -> str:
        """
        The type of query. Valid values are `Successful`, `Unsuccessful`, `Total`
        , `Threshold`.
        """
        return pulumi.get(self, "query_group_type")

    @property
    @pulumi.getter(name="queryGroups")
    def query_groups(self) -> Sequence['outputs.SloIndicatorWindowBasedEvaluationQueryQueryGroup']:
        """
        List of queries to use.
        """
        return pulumi.get(self, "query_groups")


@pulumi.output_type
class SloIndicatorWindowBasedEvaluationQueryQueryGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rowId":
            suggest = "row_id"
        elif key == "useRowCount":
            suggest = "use_row_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloIndicatorWindowBasedEvaluationQueryQueryGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloIndicatorWindowBasedEvaluationQueryQueryGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloIndicatorWindowBasedEvaluationQueryQueryGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 query: str,
                 row_id: str,
                 use_row_count: bool,
                 field: Optional[str] = None):
        """
        :param str query: The query string to use.
        :param str row_id: The row ID to use.
        :param bool use_row_count: Whether to use the row count. Defaults to false.
        :param str field: Field of log query output to compare against. To be used only for logs based data
               type when `use_row_count` is false.
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "row_id", row_id)
        pulumi.set(__self__, "use_row_count", use_row_count)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The query string to use.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="rowId")
    def row_id(self) -> str:
        """
        The row ID to use.
        """
        return pulumi.get(self, "row_id")

    @property
    @pulumi.getter(name="useRowCount")
    def use_row_count(self) -> bool:
        """
        Whether to use the row count. Defaults to false.
        """
        return pulumi.get(self, "use_row_count")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        """
        Field of log query output to compare against. To be used only for logs based data
        type when `use_row_count` is false.
        """
        return pulumi.get(self, "field")


