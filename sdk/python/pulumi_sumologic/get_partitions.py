# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPartitionsResult',
    'AwaitableGetPartitionsResult',
    'get_partitions',
    'get_partitions_output',
]

@pulumi.output_type
class GetPartitionsResult:
    """
    A collection of values returned by getPartitions.
    """
    def __init__(__self__, id=None, partitions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if partitions and not isinstance(partitions, list):
            raise TypeError("Expected argument 'partitions' to be a list")
        pulumi.set(__self__, "partitions", partitions)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def partitions(self) -> Sequence['outputs.GetPartitionsPartitionResult']:
        return pulumi.get(self, "partitions")


class AwaitableGetPartitionsResult(GetPartitionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPartitionsResult(
            id=self.id,
            partitions=self.partitions)


def get_partitions(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPartitionsResult:
    """
    Provides a way to retrieve all [Sumologic Partitions](https://help.sumologic.com/docs/manage/partitions/data-tiers/).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    partitions = sumologic.get_partitions()
    ```

    ## Attributes reference

    The following attributes are exported:

    - `name` - The name of the partition.
    - `routing_expression` - The query that defines the data to be included in the partition.
    - `analytics_tier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
    - `retention_period` - The number of days to retain data in the partition.
    - `is_compliant` - Whether the partition is used for compliance or audit purposes.
    - `is_included_in_default_search` - Whether the partition is included in the default search scope.
    - `total_bytes` - The size of the data in the partition in bytes.
    - `is_active` - Whether the partition is currently active or decommissioned.
    - `index_type` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
    - `data_forwarding_id` - The ID of the data forwarding configuration to be used by the partition.

    [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sumologic:index/getPartitions:getPartitions', __args__, opts=opts, typ=GetPartitionsResult).value

    return AwaitableGetPartitionsResult(
        id=pulumi.get(__ret__, 'id'),
        partitions=pulumi.get(__ret__, 'partitions'))
def get_partitions_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPartitionsResult]:
    """
    Provides a way to retrieve all [Sumologic Partitions](https://help.sumologic.com/docs/manage/partitions/data-tiers/).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sumologic as sumologic

    partitions = sumologic.get_partitions()
    ```

    ## Attributes reference

    The following attributes are exported:

    - `name` - The name of the partition.
    - `routing_expression` - The query that defines the data to be included in the partition.
    - `analytics_tier` - The Data Tier where the data in the partition will reside. Possible values are: `continuous`, `frequent`, `infrequent`
    - `retention_period` - The number of days to retain data in the partition.
    - `is_compliant` - Whether the partition is used for compliance or audit purposes.
    - `is_included_in_default_search` - Whether the partition is included in the default search scope.
    - `total_bytes` - The size of the data in the partition in bytes.
    - `is_active` - Whether the partition is currently active or decommissioned.
    - `index_type` - The type of partition index. Possible values are: `DefaultIndex`, `AuditIndex`or `Partition`
    - `data_forwarding_id` - The ID of the data forwarding configuration to be used by the partition.

    [1]: https://help.sumologic.com/docs/manage/partitions/data-tiers/
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sumologic:index/getPartitions:getPartitions', __args__, opts=opts, typ=GetPartitionsResult)
    return __ret__.apply(lambda __response__: GetPartitionsResult(
        id=pulumi.get(__response__, 'id'),
        partitions=pulumi.get(__response__, 'partitions')))
