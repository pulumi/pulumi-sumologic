# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DataForwardingRuleArgs', 'DataForwardingRule']

@pulumi.input_type
class DataForwardingRuleArgs:
    def __init__(__self__, *,
                 destination_id: pulumi.Input[str],
                 index_id: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 payload_schema: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DataForwardingRule resource.
        :param pulumi.Input[str] destination_id: The data forwarding destination id.
        :param pulumi.Input[str] index_id: The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        :param pulumi.Input[bool] enabled: True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        :param pulumi.Input[str] file_format: Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        :param pulumi.Input[str] format: Format of the payload. Default format will be _csv_. 
               _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
               
               The following attributes are exported:
        :param pulumi.Input[str] payload_schema: Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
               _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        pulumi.set(__self__, "destination_id", destination_id)
        pulumi.set(__self__, "index_id", index_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if file_format is not None:
            pulumi.set(__self__, "file_format", file_format)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if payload_schema is not None:
            pulumi.set(__self__, "payload_schema", payload_schema)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> pulumi.Input[str]:
        """
        The data forwarding destination id.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> pulumi.Input[str]:
        """
        The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        """
        return pulumi.get(self, "index_id")

    @index_id.setter
    def index_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        """
        return pulumi.get(self, "file_format")

    @file_format.setter
    def file_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_format", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format of the payload. Default format will be _csv_. 
        _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.

        The following attributes are exported:
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="payloadSchema")
    def payload_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
        _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        return pulumi.get(self, "payload_schema")

    @payload_schema.setter
    def payload_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_schema", value)


@pulumi.input_type
class _DataForwardingRuleState:
    def __init__(__self__, *,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 index_id: Optional[pulumi.Input[str]] = None,
                 payload_schema: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DataForwardingRule resources.
        :param pulumi.Input[str] destination_id: The data forwarding destination id.
        :param pulumi.Input[bool] enabled: True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        :param pulumi.Input[str] file_format: Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        :param pulumi.Input[str] format: Format of the payload. Default format will be _csv_. 
               _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
               
               The following attributes are exported:
        :param pulumi.Input[str] index_id: The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        :param pulumi.Input[str] payload_schema: Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
               _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        if destination_id is not None:
            pulumi.set(__self__, "destination_id", destination_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if file_format is not None:
            pulumi.set(__self__, "file_format", file_format)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if index_id is not None:
            pulumi.set(__self__, "index_id", index_id)
        if payload_schema is not None:
            pulumi.set(__self__, "payload_schema", payload_schema)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[pulumi.Input[str]]:
        """
        The data forwarding destination id.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        """
        return pulumi.get(self, "file_format")

    @file_format.setter
    def file_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_format", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format of the payload. Default format will be _csv_. 
        _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.

        The following attributes are exported:
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> Optional[pulumi.Input[str]]:
        """
        The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        """
        return pulumi.get(self, "index_id")

    @index_id.setter
    def index_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_id", value)

    @property
    @pulumi.getter(name="payloadSchema")
    def payload_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
        _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        return pulumi.get(self, "payload_schema")

    @payload_schema.setter
    def payload_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_schema", value)


class DataForwardingRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 index_id: Optional[pulumi.Input[str]] = None,
                 payload_schema: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provider to manage [Sumologic Data Forwarding Rule](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3)

        ## Example Usage

        For Partitions
        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        test_partition = sumologic.Partition("test_partition",
            name="testing_rule_partitions",
            routing_expression="_sourcecategory=abc/Terraform",
            is_compliant=False,
            retention_period=30,
            analytics_tier="flex")
        example_data_forwarding_rule = sumologic.DataForwardingRule("example_data_forwarding_rule",
            index_id=test_partition.id,
            destination_id="00000000000732AA",
            enabled=True,
            file_format="test/{index}/{day}/{hour}/{minute}",
            payload_schema="builtInFields",
            format="json")
        ```
        For Scheduled Views
        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        failed_connections = sumologic.ScheduledView("failed_connections",
            index_name="failed_connections",
            query="_sourceCategory=fire | count",
            start_time="2024-09-01T00:00:00Z",
            retention_period=1)
        test_rule_sv = sumologic.DataForwardingRule("test_rule_sv",
            index_id=failed_connections.index_id,
            destination_id=test_destination["id"],
            enabled=False,
            file_format="test/{index}",
            payload_schema="raw",
            format="text")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_id: The data forwarding destination id.
        :param pulumi.Input[bool] enabled: True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        :param pulumi.Input[str] file_format: Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        :param pulumi.Input[str] format: Format of the payload. Default format will be _csv_. 
               _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
               
               The following attributes are exported:
        :param pulumi.Input[str] index_id: The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        :param pulumi.Input[str] payload_schema: Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
               _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataForwardingRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provider to manage [Sumologic Data Forwarding Rule](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3)

        ## Example Usage

        For Partitions
        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        test_partition = sumologic.Partition("test_partition",
            name="testing_rule_partitions",
            routing_expression="_sourcecategory=abc/Terraform",
            is_compliant=False,
            retention_period=30,
            analytics_tier="flex")
        example_data_forwarding_rule = sumologic.DataForwardingRule("example_data_forwarding_rule",
            index_id=test_partition.id,
            destination_id="00000000000732AA",
            enabled=True,
            file_format="test/{index}/{day}/{hour}/{minute}",
            payload_schema="builtInFields",
            format="json")
        ```
        For Scheduled Views
        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        failed_connections = sumologic.ScheduledView("failed_connections",
            index_name="failed_connections",
            query="_sourceCategory=fire | count",
            start_time="2024-09-01T00:00:00Z",
            retention_period=1)
        test_rule_sv = sumologic.DataForwardingRule("test_rule_sv",
            index_id=failed_connections.index_id,
            destination_id=test_destination["id"],
            enabled=False,
            file_format="test/{index}",
            payload_schema="raw",
            format="text")
        ```

        :param str resource_name: The name of the resource.
        :param DataForwardingRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataForwardingRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 file_format: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 index_id: Optional[pulumi.Input[str]] = None,
                 payload_schema: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataForwardingRuleArgs.__new__(DataForwardingRuleArgs)

            if destination_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_id'")
            __props__.__dict__["destination_id"] = destination_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["file_format"] = file_format
            __props__.__dict__["format"] = format
            if index_id is None and not opts.urn:
                raise TypeError("Missing required property 'index_id'")
            __props__.__dict__["index_id"] = index_id
            __props__.__dict__["payload_schema"] = payload_schema
        super(DataForwardingRule, __self__).__init__(
            'sumologic:index/dataForwardingRule:DataForwardingRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_id: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            file_format: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            index_id: Optional[pulumi.Input[str]] = None,
            payload_schema: Optional[pulumi.Input[str]] = None) -> 'DataForwardingRule':
        """
        Get an existing DataForwardingRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_id: The data forwarding destination id.
        :param pulumi.Input[bool] enabled: True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        :param pulumi.Input[str] file_format: Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        :param pulumi.Input[str] format: Format of the payload. Default format will be _csv_. 
               _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.
               
               The following attributes are exported:
        :param pulumi.Input[str] index_id: The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        :param pulumi.Input[str] payload_schema: Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
               _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataForwardingRuleState.__new__(_DataForwardingRuleState)

        __props__.__dict__["destination_id"] = destination_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["file_format"] = file_format
        __props__.__dict__["format"] = format
        __props__.__dict__["index_id"] = index_id
        __props__.__dict__["payload_schema"] = payload_schema
        return DataForwardingRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> pulumi.Output[str]:
        """
        The data forwarding destination id.
        """
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        True when the data forwarding rule is enabled. Will be treated as _false_ if left blank.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="fileFormat")
    def file_format(self) -> pulumi.Output[Optional[str]]:
        """
        Specify the path prefix to a directory in the S3 bucket and how to format the file name. For possible values, kindly refer the point 6 in the [documentation](https://help.sumologic.com/docs/manage/data-forwarding/amazon-s3-bucket/#forward-datato-s3).
        """
        return pulumi.get(self, "file_format")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[str]]:
        """
        Format of the payload. Default format will be _csv_. 
        _text_ format should be used in conjunction with _raw_ payloadSchema and vice versa.

        The following attributes are exported:
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> pulumi.Output[str]:
        """
        The *id* of the Partition or *index_id* of the Scheduled View the rule applies to.
        """
        return pulumi.get(self, "index_id")

    @property
    @pulumi.getter(name="payloadSchema")
    def payload_schema(self) -> pulumi.Output[Optional[str]]:
        """
        Schema for the payload. Default value of the payload schema is _allFields_ for scheduled view, and _builtInFields_ for partition.
        _raw_ payloadSchema should be used in conjunction with _text_ format and vice versa.
        """
        return pulumi.get(self, "payload_schema")

