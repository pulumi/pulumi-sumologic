# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OtCollectorArgs', 'OtCollector']

@pulumi.input_type
class OtCollectorArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 ephemeral: Optional[pulumi.Input[builtins.bool]] = None,
                 is_remotely_managed: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a OtCollector resource.
        :param pulumi.Input[builtins.str] category: The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        :param pulumi.Input[builtins.str] description: Description of the OT Collector.
        :param pulumi.Input[builtins.bool] ephemeral: When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        :param pulumi.Input[builtins.bool] is_remotely_managed: Management Status of the OT Collector based on if it is remotely or locally managed.
        :param pulumi.Input[builtins.str] name: Name of the OT Collector.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Map containing [key/value pairs][3].
               
               The following attributes are exported:
        :param pulumi.Input[builtins.str] time_zone: The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)
        if is_remotely_managed is not None:
            pulumi.set(__self__, "is_remotely_managed", is_remotely_managed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the OT Collector.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        """
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ephemeral", value)

    @property
    @pulumi.getter(name="isRemotelyManaged")
    def is_remotely_managed(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Management Status of the OT Collector based on if it is remotely or locally managed.
        """
        return pulumi.get(self, "is_remotely_managed")

    @is_remotely_managed.setter
    def is_remotely_managed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_remotely_managed", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the OT Collector.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Map containing [key/value pairs][3].

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class _OtCollectorState:
    def __init__(__self__, *,
                 alive: Optional[pulumi.Input[builtins.bool]] = None,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 created_by: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 ephemeral: Optional[pulumi.Input[builtins.bool]] = None,
                 is_remotely_managed: Optional[pulumi.Input[builtins.bool]] = None,
                 modified_at: Optional[pulumi.Input[builtins.str]] = None,
                 modified_by: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering OtCollector resources.
        :param pulumi.Input[builtins.str] category: The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        :param pulumi.Input[builtins.str] description: Description of the OT Collector.
        :param pulumi.Input[builtins.bool] ephemeral: When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        :param pulumi.Input[builtins.bool] is_remotely_managed: Management Status of the OT Collector based on if it is remotely or locally managed.
        :param pulumi.Input[builtins.str] name: Name of the OT Collector.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Map containing [key/value pairs][3].
               
               The following attributes are exported:
        :param pulumi.Input[builtins.str] time_zone: The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        if alive is not None:
            pulumi.set(__self__, "alive", alive)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ephemeral is not None:
            pulumi.set(__self__, "ephemeral", ephemeral)
        if is_remotely_managed is not None:
            pulumi.set(__self__, "is_remotely_managed", is_remotely_managed)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def alive(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "alive")

    @alive.setter
    def alive(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "alive", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Description of the OT Collector.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ephemeral(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        """
        return pulumi.get(self, "ephemeral")

    @ephemeral.setter
    def ephemeral(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ephemeral", value)

    @property
    @pulumi.getter(name="isRemotelyManaged")
    def is_remotely_managed(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Management Status of the OT Collector based on if it is remotely or locally managed.
        """
        return pulumi.get(self, "is_remotely_managed")

    @is_remotely_managed.setter
    def is_remotely_managed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_remotely_managed", value)

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the OT Collector.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Map containing [key/value pairs][3].

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "time_zone", value)


class OtCollector(pulumi.CustomResource):

    pulumi_type = "sumologic:index/otCollector:OtCollector"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 ephemeral: Optional[pulumi.Input[builtins.bool]] = None,
                 is_remotely_managed: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        example_ot_collector = sumologic.OtCollector("example_ot_collector",
            description="Testing OT collector using terraform",
            time_zone="UTC",
            category="apache",
            is_remotely_managed=True,
            ephemeral=False,
            name="test OT Collector")
        ```

        ## Import

        OT Collectors can be imported using the collector id, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/otCollector:OtCollector test 00005AF3107A4007
        ```

        [1]: https://help.sumologic.com/docs/send-data/opentelemetry-collector

        [2]: https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral

        [3]: https://help.sumologic.com/Manage/Fields

        [4]: https://en.wikipedia.org/wiki/Tz_database

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] category: The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        :param pulumi.Input[builtins.str] description: Description of the OT Collector.
        :param pulumi.Input[builtins.bool] ephemeral: When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        :param pulumi.Input[builtins.bool] is_remotely_managed: Management Status of the OT Collector based on if it is remotely or locally managed.
        :param pulumi.Input[builtins.str] name: Name of the OT Collector.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Map containing [key/value pairs][3].
               
               The following attributes are exported:
        :param pulumi.Input[builtins.str] time_zone: The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OtCollectorArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_sumologic as sumologic

        example_ot_collector = sumologic.OtCollector("example_ot_collector",
            description="Testing OT collector using terraform",
            time_zone="UTC",
            category="apache",
            is_remotely_managed=True,
            ephemeral=False,
            name="test OT Collector")
        ```

        ## Import

        OT Collectors can be imported using the collector id, e.g.:

        hcl

        ```sh
        $ pulumi import sumologic:index/otCollector:OtCollector test 00005AF3107A4007
        ```

        [1]: https://help.sumologic.com/docs/send-data/opentelemetry-collector

        [2]: https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral

        [3]: https://help.sumologic.com/Manage/Fields

        [4]: https://en.wikipedia.org/wiki/Tz_database

        :param str resource_name: The name of the resource.
        :param OtCollectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OtCollectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 ephemeral: Optional[pulumi.Input[builtins.bool]] = None,
                 is_remotely_managed: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 time_zone: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OtCollectorArgs.__new__(OtCollectorArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["description"] = description
            __props__.__dict__["ephemeral"] = ephemeral
            __props__.__dict__["is_remotely_managed"] = is_remotely_managed
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["alive"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["modified_at"] = None
            __props__.__dict__["modified_by"] = None
        super(OtCollector, __self__).__init__(
            'sumologic:index/otCollector:OtCollector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alive: Optional[pulumi.Input[builtins.bool]] = None,
            category: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            created_by: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            ephemeral: Optional[pulumi.Input[builtins.bool]] = None,
            is_remotely_managed: Optional[pulumi.Input[builtins.bool]] = None,
            modified_at: Optional[pulumi.Input[builtins.str]] = None,
            modified_by: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            time_zone: Optional[pulumi.Input[builtins.str]] = None) -> 'OtCollector':
        """
        Get an existing OtCollector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] category: The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        :param pulumi.Input[builtins.str] description: Description of the OT Collector.
        :param pulumi.Input[builtins.bool] ephemeral: When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        :param pulumi.Input[builtins.bool] is_remotely_managed: Management Status of the OT Collector based on if it is remotely or locally managed.
        :param pulumi.Input[builtins.str] name: Name of the OT Collector.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Map containing [key/value pairs][3].
               
               The following attributes are exported:
        :param pulumi.Input[builtins.str] time_zone: The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OtCollectorState.__new__(_OtCollectorState)

        __props__.__dict__["alive"] = alive
        __props__.__dict__["category"] = category
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["ephemeral"] = ephemeral
        __props__.__dict__["is_remotely_managed"] = is_remotely_managed
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["modified_by"] = modified_by
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_zone"] = time_zone
        return OtCollector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alive(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "alive")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The default source category for any source attached to this collector. Can be overridden in the configuration of said sources.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Description of the OT Collector.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ephemeral(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        When true, the collector will be deleted after 12 hours of inactivity. For more information, see [Setting a Collector as Ephemeral](https://help.sumologic.com/03Send-Data/Installed-Collectors/05Reference-Information-for-Collector-Installation/11Set-a-Collector-as-Ephemeral).
        """
        return pulumi.get(self, "ephemeral")

    @property
    @pulumi.getter(name="isRemotelyManaged")
    def is_remotely_managed(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Management Status of the OT Collector based on if it is remotely or locally managed.
        """
        return pulumi.get(self, "is_remotely_managed")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the OT Collector.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Map containing [key/value pairs][3].

        The following attributes are exported:
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The time zone to use for this collector. The value follows the [tzdata](https://en.wikipedia.org/wiki/Tz_database) naming convention.
        """
        return pulumi.get(self, "time_zone")

